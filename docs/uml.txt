@startuml

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam packageStyle rectangle

package "tests" {
  class TestAuthAPI {
    +response
    +data
    +user_data
    +incomplete_data
    +response
    +response_data
    +invalid_data
    +response
    +data
    +response1
    +response2
    +data
    +response
    +data
    +login_data
    +response
    +data
    +login_data
    +response
    +data
    +login_data
    +response
    +data
    +incomplete_data
    +response
    +response_data
    +register_response
    +token
    +headers
    +response
    +data
    +user_data
    +response
    +headers
    +response
    +register_response
    +refresh_token
    +headers
    +response
    +data
    +register_response
    +access_token
    +headers
    +response
    +response
    +response
    +data
    +response
    +data
    +response
    +data
    +response
    +response
    --
    +test_register_success(client, sample_user_data)
    +test_register_missing_fields(client)
    +test_register_invalid_email(client)
    +test_register_duplicate_user(client, sample_user_data)
    +test_register_no_json(client)
    +test_login_success(client, sample_user_data)
    +test_login_wrong_email(client, sample_user_data)
    +test_login_wrong_password(client, sample_user_data)
    +test_login_missing_fields(client)
    +test_get_current_user_success(client, sample_user_data)
    +test_get_current_user_no_token(client)
    +test_get_current_user_invalid_token(client)
    +test_refresh_token_success(client, sample_user_data)
    +test_refresh_token_with_access_token(client, sample_user_data)
    +test_refresh_token_no_token(client)
    +test_api_response_format(client, sample_user_data)
    +test_validation_error_details(client)
    +test_cors_headers(client)
    +test_rate_limiting_headers(client, sample_user_data)
  }

  class TestAuthService {
    +user
    +incomplete_data
    +duplicate_data
    +duplicate_data
    +invalid_data
    +registered_user
    +authenticated_user
    +user
    +registered_user
    +found_user
    +user
    +registered_user
    +found_user
    +user
    +user
    +old_password
    +new_password: str
    +success
    +updated_user
    +user
    +user
    --
    +auth_service(app)
    +test_register_user_success(auth_service, app, sample_user_data)
    +test_register_user_missing_fields(auth_service, app)
    +test_register_user_duplicate_email(auth_service, app, sample_user_data)
    +test_register_user_duplicate_username(auth_service, app, sample_user_data)
    +test_register_user_invalid_password(auth_service, app)
    +test_authenticate_user_success(auth_service, app, sample_user_data)
    +test_authenticate_user_wrong_email(auth_service, app, sample_user_data)
    +test_authenticate_user_wrong_password(auth_service, app, sample_user_data)
    +test_authenticate_user_inactive(auth_service, app, sample_user_data)
    +test_authenticate_user_missing_credentials(auth_service, app)
    +test_get_user_by_id(auth_service, app, sample_user_data)
    +test_get_user_by_id_not_found(auth_service, app)
    +test_get_user_by_email(auth_service, app, sample_user_data)
    +test_get_user_by_email_not_found(auth_service, app)
    +test_change_password_success(auth_service, app, sample_user_data)
    +test_change_password_wrong_current(auth_service, app, sample_user_data)
    +test_change_password_invalid_new_password(auth_service, app, sample_user_data)
  }

  class TestUserModel {
    +user
    +valid_emails
    +user
    +invalid_emails
    +valid_usernames
    +user
    +user
    +valid_passwords
    +user
    +invalid_passwords
    +user
    +password: str
    +user
    +user_dict
    +user
    +repr_str
    --
    +test_user_creation(app)
    +test_email_validation_valid(app)
    +test_email_validation_invalid(app)
    +test_username_validation_valid(app)
    +test_username_validation_invalid(app)
    +test_password_validation_valid(app)
    +test_password_validation_invalid(app)
    +test_password_hashing(app)
    +test_to_dict_excludes_sensitive(app)
    +test_user_repr(app)
  }

}

package "scripts" {
  class WordListSeeder {
    +classic_answers
    +classic_guesses
    +disney_answers
    +disney_guesses
    +existing
    +word_entry
    +mode_enum
    +stats
    +deleted
    +word_lists
    +mode_words
    +frequency_rank: int
    +classic_count
    +disney_count
    +classic_answers
    +disney_answers
    +report
    +report
    --
    -__init__()
    +validate_word(word)
    +load_word_lists()
    +add_word_to_db(word, game_mode, is_answer, frequency_rank): bool
    +seed_word_list(game_mode, clear_existing)
    +generate_report(): str
    +run(modes, clear_existing)
  }

}

package "venv2.lib.python3.12.site-packages" {
  class _TypedDictMeta {
    +generic_base
    +generic_base
    +ns_annotations
    +tp_dict
    +annotations
    +own_annotate: NoneType
    +own_annotations: ns_annotations
    +own_annotate
    +own_annotate
    +own_annotations
    +own_annotations
    +own_annotations
    +msg: str
    +own_checked_annotations
    +own_checked_annotations
    +required_keys
    +optional_keys
    +readonly_keys
    +mutable_keys
    +extra_items_type: extra_items
    +base_dict
    +annotation_type
    +qualifiers
    +extra_items_type: annotation_type
    +qualifiers
    +annos
    +base_annotate
    +base_annos
    +own
    +own
    +own
    +own: own_checked_annotations
    --
    -__new__(name, bases, ns)
    -__annotate__()
    -__subclasscheck__(other)
  }

  class _DEPRECATED_NoReturn {
  }

  class _FlexibleAliasClsApplied {
    -__init__(val)
    -__getitem__(args)
  }

  class _FlexibleAliasCls {
    -__getitem__(args)
  }

  class _NativeIntMeta {
    -__instancecheck__(inst)
  }

  class i64 {
    -__new__(x, base)
  }

  class i32 {
    -__new__(x, base)
  }

  class i16 {
    -__new__(x, base)
  }

  class u8 {
    -__new__(x, base)
  }

  class _Sentinel {
    -__repr__()
  }

  class _AnyMeta {
    -__instancecheck__(obj)
    -__repr__()
  }

  class Any {
    -__new__()
  }

  class _ExtensionsSpecialForm {
    -__repr__()
  }

  class _LiteralGenericAlias {
    +these_args_deduped
    +other_args_deduped
    --
    -__eq__(other)
    -__hash__()
  }

  class _LiteralForm {
    +parameters
    +parameters
    +val_type_pairs
    +deduped_pairs
    +new_parameters
    +parameters
    --
    -__init__(doc)
    -__getitem__(parameters)
  }

  class _SpecialGenericAlias {
    +allowed_attrs
    +params
    +msg: str
    +params
    +params
    +actual_len
    +expected
    +expected
    --
    -__init__(origin, nparams)
    -__setattr__(attr, val)
    -__getitem__(params)
  }

  class _ProtocolMeta {
    +non_method_attrs
    +val
    --
    -__new__(name, bases, namespace)
    -__init__()
    -__subclasscheck__(other)
    -__instancecheck__(instance)
    -__eq__(other)
    -__hash__(): int
  }

  class Protocol {
    -__init_subclass__()
  }

  class SupportsInt {
    -__int__(): int
  }

  class SupportsFloat {
    -__float__(): float
  }

  class SupportsComplex {
    -__complex__(): complex
  }

  class SupportsBytes {
    -__bytes__(): bytes
  }

  class SupportsIndex {
    -__index__(): int
  }

  class SupportsAbs {
    -__abs__(): T_co
  }

  class SupportsRound {
    -__round__(ndigits): T_co
  }

  class Reader {
    +read(): T_co
  }

  class Writer {
    +write(): int
  }

  class SingletonMeta {
    -__setattr__(attr, value)
  }

  class NoDefaultType {
    -__new__()
    -__repr__()
    -__reduce__()
  }

  class NoExtraItemsType {
    -__new__()
    -__repr__()
    -__reduce__()
  }

  class _TypedDictSpecialForm {
    -__call__()
    -__mro_entries__(bases)
  }

  class _DefaultMixin {
  }

  class _TypeVarLikeMeta {
    -__instancecheck__(__instance): bool
  }

  class TypeVar {
    +typevar
    +typevar
    --
    -__new__(name)
    -_tvar_prepare_subst(args)
    -__init_subclass__()
  }

  class _Immutable {
    -__copy__()
    -__deepcopy__(memo)
  }

  class ParamSpecArgs {
    -__init__(origin)
    -__repr__()
    -__eq__(other)
  }

  class ParamSpecKwargs {
    -__init__(origin)
    -__repr__()
    -__eq__(other)
  }

  class ParamSpec {
    +def_mod
    +prefix: str
    +prefix: str
    +prefix: str
    +prefix: str
    --
    +args()
    +kwargs()
    -__init__(name)
    -__repr__()
    -__hash__()
    -__eq__(other)
    -__reduce__()
    -__call__()
  }

  class _ConcatenateGenericAlias {
    +params
    +value
    --
    +copy_with(params)
    -__getitem__(args)
  }

  class _EllipsisDummy {
  }

  class _TypeFormForm {
    -__call__()
  }

  class _SpecialForm {
    -__init__(getitem)
    -__getattr__(item)
    -__mro_entries__(bases)
    -__repr__()
    -__reduce__()
    -__call__()
    -__or__(other)
    -__ror__(other)
    -__instancecheck__(obj)
    -__subclasscheck__(cls)
    -__getitem__(parameters)
  }

  class _UnpackSpecialForm {
    -__init__(getitem)
  }

  class _UnpackAlias {
    -__typing_unpacked_tuple_args__()
    -__typing_is_unpacked_typevartuple__()
    -__getitem__(args)
  }

  class TypeVarTuple {
    +def_mod
    --
    -__iter__()
    -__init__(name)
    -__repr__()
    -__hash__()
    -__eq__(other)
    -__reduce__()
    -__init_subclass__()
  }

  class deprecated {
    +msg
    +category
    +stacklevel
    +original_new
    +original_init_subclass
    +original_init_subclass
    +wrapper
    --
    -__init__()
    -__call__(): _T
    -__new__()
    -__init_subclass__()
    -__init_subclass__()
    +wrapper()
  }

  class _NamedTupleMeta {
    +bases
    +types
    +types
    +types
    +default_names
    +nm_tpl
    +class_getitem
    +set_name
    +msg
    --
    -__new__(typename, bases, ns)
  }

  class Buffer {
  }

  class NewType {
    +name
    +def_mod
    +supercls_name
    --
    -__call__()
    -__init__(name, tp)
    -__mro_entries__(bases)
  }

  class Dummy {
    +subcls_name
    --
    -__init_subclass__()
  }

  class _TypeAliasGenericAlias {
    -__getattr__(attr)
  }

  class TypeAliasType {
    +default_value_encountered: bool
    +parameters
    +has_default
    +default_value_encountered: bool
    +def_mod
    +parameters
    +type_vars
    +parameters
    +alias
    --
    -__init__(name, value)
    -__setattr__()
    -__delattr__(): Never
    -_raise_attribute_error(name): Never
    -__repr__(): str
    -_check_single_param(param, recursion)
    -_check_parameters(parameters)
    -__getitem__(parameters)
    -__reduce__()
    -__init_subclass__()
    -__call__()
    -__or__(right)
    -__ror__(left)
  }

  class Doc {
    -__init__()
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
  }

  class Format {
    +VALUE: int
    +VALUE_WITH_FAKE_GLOBALS: int
    +FORWARDREF: int
    +STRING: int
  }

  class Sentinel {
    -__init__(name, repr)
    -__repr__()
    -__call__()
    -__or__(other)
    -__ror__(other)
    -__getstate__()
  }

}

package "venv2.lib.python3.12.site-packages.jwt" {
  class Algorithm {
    +hash_alg
    +digest
    --
    +compute_hash_digest(bytestr): bytes
    +prepare_key(key): Any
    +sign(msg, key): bytes
    +verify(msg, key, sig): bool
    +{static} to_jwk(as_dict): JWKDict
    +{static} to_jwk(as_dict): str
    +{static} to_jwk(as_dict)
    +{static} from_jwk(): Any
  }

  class NoneAlgorithm {
    +key: NoneType
    --
    +prepare_key(key)
    +sign(msg, key): bytes
    +verify(msg, key, sig): bool
    +{static} to_jwk(as_dict): NoReturn
    +{static} from_jwk(): NoReturn
  }

  class HMACAlgorithm {
    +SHA256
    +SHA384
    +SHA512
    +key_bytes
    +jwk
    +obj: JWKDict
    +obj: jwk
    --
    -__init__(hash_alg)
    +prepare_key(key): bytes
    +{static} to_jwk(as_dict): JWKDict
    +{static} to_jwk(as_dict): str
    +{static} to_jwk(as_dict)
    +{static} from_jwk(): bytes
    +sign(msg, key): bytes
    +verify(msg, key, sig): bool
  }

  class RSAAlgorithm {
    +SHA256
    +SHA384
    +SHA512
    +key_bytes
    +obj
    +numbers
    +obj
    +numbers
    +obj
    +obj
    +obj: jwk
    +other_props
    +props_found
    +any_props_found
    +public_numbers
    +numbers
    +d
    +numbers
    --
    -__init__(hash_alg)
    +prepare_key(key): AllowedRSAKeys
    +{static} to_jwk(as_dict): JWKDict
    +{static} to_jwk(as_dict): str
    +{static} to_jwk(as_dict)
    +{static} from_jwk(): AllowedRSAKeys
    +sign(msg, key): bytes
    +verify(msg, key, sig): bool
  }

  class ECAlgorithm {
    +SHA256
    +SHA384
    +SHA512
    +key_bytes
    +crypto_key
    +crypto_key
    +crypto_key
    +der_sig
    +der_sig
    +public_key
    +public_numbers
    +public_numbers
    +crv: str
    +crv: str
    +crv: str
    +crv: str
    +obj
    +obj
    +obj: jwk
    +x
    +y
    +curve
    +curve_obj: EllipticCurve
    +curve_obj
    +curve_obj
    +curve_obj
    +curve_obj
    +public_numbers
    +d
    --
    -__init__(hash_alg)
    +prepare_key(key): AllowedECKeys
    +sign(msg, key): bytes
    +verify(msg, key, sig): bool
    +{static} to_jwk(as_dict): JWKDict
    +{static} to_jwk(as_dict): str
    +{static} to_jwk(as_dict)
    +{static} from_jwk(): AllowedECKeys
  }

  class RSAPSSAlgorithm {
    +sign(msg, key): bytes
    +verify(msg, key, sig): bool
  }

  class OKPAlgorithm {
    +key_str
    +key_bytes
    +key
    +key
    +key
    +msg_bytes
    +msg_bytes
    +sig_bytes
    +public_key
    +x
    +crv
    +obj
    +d
    +x
    +crv
    +obj
    +obj
    +obj: jwk
    +curve
    +x
    +d
    --
    -__init__()
    +prepare_key(key): AllowedOKPKeys
    +sign(msg, key): bytes
    +verify(msg, key, sig): bool
    +{static} to_jwk(as_dict): JWKDict
    +{static} to_jwk(as_dict): str
    +{static} to_jwk(as_dict)
    +{static} from_jwk(): AllowedOKPKeys
  }

  class PyJWT {
    +options
    +payload
    +json_payload
    +options
    +decoded
    +payload
    +merged_options
    +payload
    +decoded
    +leeway
    +now
    +iat
    +nbf
    +exp
    +audience_claims
    +audience_claims
    +audience
    --
    -__init__(options)
    -{static} _get_default_options()
    +encode(payload, key, algorithm, headers, json_encoder, sort_headers): str
    -_encode_payload(payload, headers, json_encoder): bytes
    +decode_complete(jwt, key, algorithms, options, verify, detached_payload, audience, issuer, subject, leeway)
    -_decode_payload(decoded): Any
    +decode(jwt, key, algorithms, options, verify, detached_payload, audience, subject, issuer, leeway): Any
    -_validate_claims(payload, options, audience, issuer, subject, leeway)
    -_validate_required_claims(payload, options)
    -_validate_sub(payload, subject)
    -_validate_jti(payload)
    -_validate_iat(payload, now, leeway)
    -_validate_nbf(payload, now, leeway)
    -_validate_exp(payload, now, leeway)
    -_validate_aud(payload, audience)
    -_validate_iss(payload, issuer)
  }

  class RemovedInPyjwt3Warning {
  }

  class JWKSetCache {
    -__init__(lifespan)
    +put(jwk_set)
    +get()
    +is_expired(): bool
  }

  class PyJWTError {
  }

  class InvalidTokenError {
  }

  class DecodeError {
  }

  class InvalidSignatureError {
  }

  class ExpiredSignatureError {
  }

  class InvalidAudienceError {
  }

  class InvalidIssuerError {
  }

  class InvalidIssuedAtError {
  }

  class ImmatureSignatureError {
  }

  class InvalidKeyError {
  }

  class InvalidAlgorithmError {
  }

  class MissingRequiredClaimError {
    -__init__(claim)
    -__str__(): str
  }

  class PyJWKError {
  }

  class MissingCryptographyError {
  }

  class PyJWKSetError {
  }

  class PyJWKClientError {
  }

  class PyJWKClientConnectionError {
  }

  class InvalidSubjectError {
  }

  class InvalidJTIError {
  }

  class PyJWK {
    +kty
    +algorithm
    +crv
    +algorithm: str
    +algorithm: str
    +algorithm: str
    +algorithm: str
    +algorithm: str
    +algorithm: str
    +algorithm: str
    +obj
    --
    -__init__(jwk_data, algorithm)
    +{static} from_dict(algorithm): PyJWK
    +{static} from_json(algorithm): PyJWK
    +key_type()
    +key_id()
    +public_key_use()
  }

  class PyJWKSet {
    +keys
    +obj
    --
    -__init__(keys)
    +{static} from_dict(): PyJWKSet
    +{static} from_json(): PyJWKSet
    -__getitem__(kid): PyJWK
  }

  class PyJWTSetWithTimestamp {
    -__init__(jwk_set)
    +get_jwk_set(): PyJWKSet
    +get_timestamp(): float
  }

  class PyJWKClient {
    +headers
    +jwk_set: Any
    +r
    +jwk_set
    +data: NoneType
    +data
    +data
    +jwk_set
    +signing_keys
    +signing_keys
    +signing_key
    +signing_keys
    +signing_key
    +unverified
    +header
    +signing_key: NoneType
    +signing_key: key
    --
    -__init__(uri, cache_keys, max_cached_keys, cache_jwk_set, lifespan, headers, timeout, ssl_context)
    +fetch_data(): Any
    +get_jwk_set(refresh): PyJWKSet
    +get_signing_keys(refresh)
    +get_signing_key(kid): PyJWK
    +get_signing_key_from_jwt(token): PyJWK
    +{static} match_kid(kid)
  }

  class PyJWS {
    +header_typ: str
    +options
    +segments
    +algorithm_
    +algorithm_: str
    +algorithm_: algorithm
    +headers_alg
    +algorithm_
    +headers_b64
    +is_payload_detached: bool
    +header
    +json_header
    +msg_payload: payload
    +msg_payload
    +signing_input
    +alg_obj
    +key
    +key
    +signature
    +encoded_string
    +options
    +merged_options
    +verify_signature
    +payload: detached_payload
    +signing_input
    +decoded
    +headers
    +jwt
    +header_data
    +header
    +payload
    +signature
    +algorithms
    +alg
    +alg_obj
    +prepared_key
    +alg_obj
    +prepared_key
    --
    -__init__(algorithms, options)
    -{static} _get_default_options()
    +register_algorithm(alg_id, alg_obj)
    +unregister_algorithm(alg_id)
    +get_algorithms()
    +get_algorithm_by_name(alg_name): Algorithm
    +encode(payload, key, algorithm, headers, json_encoder, is_payload_detached, sort_headers): str
    +decode_complete(jwt, key, algorithms, options, detached_payload)
    +decode(jwt, key, algorithms, options, detached_payload): Any
    +get_unverified_header(jwt)
    -_load(jwt)
    -_verify_signature(signing_input, header, signature, key, algorithms)
    -_validate_headers(headers)
    -_validate_kid(kid)
  }

}

package "venv2.lib.python3.12.site-packages.flask" {
  class SessionMixin {
    +new: bool
    +modified: bool
    +accessed: bool
    --
    +permanent(): bool
    +permanent(value)
  }

  class SecureCookieSession {
    +modified: bool
    +accessed: bool
    --
    -__init__(initial)
    +on_update()
    -__getitem__(key): t.Any
    +get(key, default): t.Any
    +setdefault(key, default): t.Any
  }

  class NullSession {
    +clear: _fail
    +pop: _fail
    +popitem: _fail
    +update: _fail
    +setdefault: _fail
    --
    -_fail(): t.NoReturn
  }

  class SessionInterface {
    +null_session_class: NullSession
    +pickle_based: bool
    +rv
    --
    +make_null_session(app): NullSession
    +is_null_session(obj): bool
    +get_cookie_name(app): str
    +get_cookie_domain(app)
    +get_cookie_path(app): str
    +get_cookie_httponly(app): bool
    +get_cookie_secure(app): bool
    +get_cookie_samesite(app): str
    +get_expiration_time(app, session)
    +should_set_cookie(app, session): bool
    +open_session(app, request)
    +save_session(app, session, response)
  }

  class SecureCookieSessionInterface {
    +salt: str
    +digest_method
    +key_derivation: str
    +serializer: session_json_serializer
    +session_class: SecureCookieSession
    +signer_kwargs
    +s
    +val
    +max_age
    +data
    +name
    +domain
    +path
    +secure
    +samesite
    +httponly
    +expires
    +val
    --
    +get_signing_serializer(app)
    +open_session(app, request)
    +save_session(app, session, response)
  }

  class ConfigAttribute {
    +rv
    +rv
    --
    -__init__(name, get_converter)
    -__get__(obj, owner): t.Any
    -__set__(obj, value)
  }

  class Config {
    +rv
    +prefix
    +len_prefix
    +value
    +value
    +key
    +current: self
    +current
    +filename
    +d
    +obj
    +filename
    +obj
    +mappings
    +rv
    +key
    +key: k
    +key
    --
    -__init__(root_path, defaults)
    +from_envvar(variable_name, silent): bool
    +from_prefixed_env(prefix): bool
    +from_pyfile(filename, silent): bool
    +from_object(obj)
    +from_file(filename, load, silent, text): bool
    +from_mapping(mapping): bool
    +get_namespace(namespace, lowercase, trim_namespace)
    -__repr__(): str
  }

  class Environment {
    -__init__(app)
  }

  class DispatchingJinjaLoader {
    +attempts
    +rv
    +trv
    +rv
    +trv: rv
    +rv: NoneType
    +loader
    +loader
    +result
    +loader
    +loader
    --
    -__init__(app)
    +get_source(environment, template)
    -_get_source_explained(environment, template)
    -_get_source_fast(environment, template)
    -_iter_loaders(template)
    +list_templates()
  }

  class _FakeStack {
    -__init__(name, cv)
    +top()
  }

  class BlueprintSetupState {
    +subdomain
    +subdomain
    +url_prefix
    +url_prefix
    +rule
    +rule
    +endpoint
    +defaults
    +defaults
    --
    -__init__(blueprint, app, options, first_registration)
    +add_url_rule(rule, endpoint, view_func)
  }

  class Blueprint {
    +url_defaults
    +name_prefix
    +self_name
    +name
    +bp_desc
    +existing_at
    +first_bp_registration
    +first_name_registration
    +state
    +key
    +key
    +value
    +cli_resolved_group
    +bp_options
    +bp_url_prefix
    +bp_subdomain
    +bp_subdomain
    +bp_url_prefix
    --
    -__init__(name, import_name, static_folder, static_url_path, template_folder, url_prefix, subdomain, url_defaults, root_path, cli_group)
    -_check_setup_finished(f_name)
    +record(func)
    +record_once(func)
    +wrapper()
    +make_setup_state(app, options, first_registration): BlueprintSetupState
    +register_blueprint(blueprint)
    +register(app, options)
    +extend(parent_dict)
    +add_url_rule(rule, endpoint, view_func, provide_automatic_options)
    +app_template_filter(name)
    +decorator(): T_template_filter
    +add_app_template_filter(f, name)
    +register_template()
    +app_template_test(name)
    +decorator(): T_template_test
    +add_app_template_test(f, name)
    +register_template()
    +app_template_global(name)
    +decorator(): T_template_global
    +add_app_template_global(f, name)
    +register_template()
    +before_app_request(f): T_before_request
    +after_app_request(f): T_after_request
    +teardown_app_request(f): T_teardown
    +app_context_processor(f): T_template_context_processor
    +app_errorhandler(code)
    +decorator(): T_error_handler
    +app_url_value_preprocessor(f): T_url_value_preprocessor
    +app_url_defaults(f): T_url_defaults
  }

  class NoAppException {
  }

  class ScriptInfo {
    +app
    +import_name
    +app
    +import_name
    +app
    --
    -__init__(app_import_path, create_app, set_debug_flag)
    +load_app(): Flask
  }

  class AppGroup {
    +wrap_for_ctx
    +f
    --
    +command()
    +decorator()
    +group()
  }

  class FlaskGroup {
    +params
    +rv
    +info
    +app
    +rv
    +info
    --
    -__init__(add_default_commands, create_app, add_version_option, load_dotenv, set_debug_flag)
    -_load_plugin_commands()
    +get_command(ctx, name)
    +list_commands(ctx)
    +make_context(info_name, args, parent): click.Context
    +parse_args(ctx, args)
  }

  class CertParamType {
    +name: str
    +value
    +obj
    --
    -__init__()
    +convert(value, param, ctx)
  }

  class SeparatedPathType {
    +items
    +super_convert
    --
    +convert(value, param, ctx)
  }

  class Request {
    +json_module: t.Any
    +url_rule
    +view_args
    +routing_exception
    +endpoint
    +name
    --
    +max_content_length()
    +endpoint()
    +blueprint()
    +blueprints()
    -_load_form_data()
    +on_json_loading_failed(e): t.Any
  }

  class Response {
    +default_mimetype
    +json_module: json
    +autocorrect_location_header: bool
    --
    +max_cookie_size(): int
  }

  class Flask {
    +request_class: Request
    +response_class: Response
    +aborter_class: Aborter
    +jinja_environment: Environment
    +app_ctx_globals_class: _AppCtxGlobals
    +config_class: Config
    +testing
    +secret_key
    +permanent_session_lifetime
    +json_provider_class
    +jinja_options: dict
    +default_config
    +url_rule_class: Rule
    +url_map_class: Map
    +test_client_class
    +test_cli_runner_class
    +session_interface: SessionInterface
    +instance_path
    +self_ref
    +fn
    +root_path
    +root_path
    +defaults
    +options
    +auto_reload
    +auto_reload
    +rv
    +names
    +names
    +orig_ctx
    +rv
    +server_name
    +sn_host: NoneType
    +sn_port: NoneType
    +host: sn_host
    +host: str
    +port
    +port
    +port: int
    +cls
    +cls
    +endpoint
    +methods
    +methods
    +methods
    +required_methods
    +provide_automatic_options
    +provide_automatic_options: bool
    +provide_automatic_options: bool
    +rule
    +old_func
    +names
    +handler_map
    +handler
    +handler
    +trap_bad_request
    +handler
    +exc_info
    +propagate
    +propagate
    +server_error
    +server_error
    +handler
    +server_error
    +req
    +rule: Rule
    +view_args
    +rv
    +rv
    +rv
    +response
    +response
    +adapter
    +methods
    +rv
    +req_ctx
    +url_adapter
    +blueprint_name
    +endpoint
    +endpoint
    +app_ctx
    +url_adapter
    +url_adapter
    +rv
    +rv
    +status: NoneType
    +headers: NoneType
    +len_rv
    +rv
    +status: NoneType
    +headers: NoneType
    +rv
    +rv
    +rv
    +subdomain
    +subdomain: NoneType
    +names
    +names
    +rv
    +error: e
    +names
    +rv
    +ctx
    +response
    +response
    +exc
    +exc
    +builder
    +ctx
    +error
    +response
    +error: e
    +response
    +error
    +error: NoneType
    --
    -__init__(import_name, static_url_path, static_folder, static_host, host_matching, subdomain_matching, template_folder, instance_path, instance_relative_config, root_path)
    -_check_setup_finished(f_name)
    +name(): str
    +logger(): logging.Logger
    +jinja_env(): Environment
    +got_first_request(): bool
    +make_config(instance_relative): Config
    +make_aborter(): Aborter
    +auto_find_instance_path(): str
    +open_instance_resource(resource, mode)
    +create_jinja_environment(): Environment
    +create_global_jinja_loader(): DispatchingJinjaLoader
    +select_jinja_autoescape(filename): bool
    +update_template_context(context)
    +make_shell_context(): dict
    +debug(): bool
    +debug(value)
    +run(host, port, debug, load_dotenv)
    +test_client(use_cookies): FlaskClient
    +test_cli_runner(): FlaskCliRunner
    +register_blueprint(blueprint)
    +iter_blueprints()
    +add_url_rule(rule, endpoint, view_func, provide_automatic_options)
    +template_filter(name)
    +decorator(): T_template_filter
    +add_template_filter(f, name)
    +template_test(name)
    +decorator(): T_template_test
    +add_template_test(f, name)
    +template_global(name)
    +decorator(): T_template_global
    +add_template_global(f, name)
    +teardown_appcontext(f): T_teardown
    +shell_context_processor(f): T_shell_context_processor
    -_find_error_handler(e)
    +handle_http_exception(e)
    +trap_http_exception(e): bool
    +handle_user_exception(e)
    +handle_exception(e): Response
    +log_exception(exc_info)
    +raise_routing_exception(request): t.NoReturn
    +dispatch_request(): ft.ResponseReturnValue
    +full_dispatch_request(): Response
    +finalize_request(rv, from_error_handler): Response
    +make_default_options_response(): Response
    +should_ignore_error(error): bool
    +ensure_sync(func): t.Callable
    +async_to_sync(func)
    +url_for(endpoint): str
    +redirect(location, code): BaseResponse
    +make_response(rv): Response
    +create_url_adapter(request)
    +inject_url_defaults(endpoint, values)
    +handle_url_build_error(error, endpoint, values): str
    +preprocess_request()
    +process_response(response): Response
    +do_teardown_request(exc)
    +do_teardown_appcontext(exc)
    +app_context(): AppContext
    +request_context(environ): RequestContext
    +test_request_context(): RequestContext
    +wsgi_app(environ, start_response): t.Any
    -__call__(environ, start_response): t.Any
  }

  class UnexpectedUnicodeError {
  }

  class DebugFilesKeyError {
    +form_matches
    +buf
    +names
    --
    -__init__(request, key)
    -__str__()
  }

  class FormDataRoutingRedirect {
    +exc
    +buf
    --
    -__init__(request)
  }

  class newcls {
    -__getitem__(key)
  }

  class Scaffold {
    +name: str
    -_static_folder
    -_static_url_path
    +root_path
    +value
    +basename
    +value
    +value
    +max_age
    +endpoint
    +exc_class
    +exc_class
    +exc_class: exc_class_or_code
    --
    -__init__(import_name, static_folder, static_url_path, template_folder, root_path)
    -__repr__(): str
    -_check_setup_finished(f_name)
    +static_folder()
    +static_folder(value)
    +has_static_folder(): bool
    +static_url_path()
    +static_url_path(value)
    +get_send_file_max_age(filename)
    +send_static_file(filename): Response
    +jinja_loader()
    +open_resource(resource, mode)
    -_method_route(method, rule, options)
    +get(rule)
    +post(rule)
    +put(rule)
    +delete(rule)
    +patch(rule)
    +route(rule)
    +decorator(): T_route
    +add_url_rule(rule, endpoint, view_func, provide_automatic_options)
    +endpoint(endpoint)
    +decorator(): F
    +before_request(f): T_before_request
    +after_request(f): T_after_request
    +teardown_request(f): T_teardown
    +context_processor(f): T_template_context_processor
    +url_value_preprocessor(f): T_url_value_preprocessor
    +url_defaults(f): T_url_defaults
    +errorhandler(code_or_exception)
    +decorator(): T_error_handler
    +register_error_handler(code_or_exception, f)
    -{static} _get_exc_class_and_code()
  }

  class _AppCtxGlobals {
    +ctx
    --
    -__getattr__(name): t.Any
    -__setattr__(name, value)
    -__delattr__(name)
    +get(name, default): t.Any
    +pop(name, default): t.Any
    +setdefault(name, default): t.Any
    -__contains__(item): bool
    -__iter__()
    -__repr__(): str
  }

  class AppContext {
    +exc
    +ctx
    --
    -__init__(app)
    +push()
    +pop(exc)
    -__enter__(): AppContext
    -__exit__(exc_type, exc_value, tb)
  }

  class RequestContext {
    +request
    +result
    +app_ctx
    +app_ctx
    +app_ctx: NoneType
    +session_interface
    +clear_request
    +exc
    +request_close
    +ctx
    --
    -__init__(app, environ, request, session)
    +copy(): RequestContext
    +match_request()
    +push()
    +pop(exc)
    -__enter__(): RequestContext
    -__exit__(exc_type, exc_value, tb)
    -__repr__(): str
  }

  class EnvironBuilder {
    +http_host
    +app_root
    +http_host
    +url_scheme
    +url
    +base_url
    +path
    +sep
    --
    -__init__(app, path, base_url, subdomain, url_scheme)
    +json_dumps(obj): str
  }

  class FlaskClient {
    +application: Flask
    +app
    +ctx
    +sess
    +resp
    +out
    +builder
    +builder
    +request
    +request
    +request
    +request
    +response
    +cm
    --
    -__init__()
    +session_transaction()
    -_copy_environ(other)
    -_request_from_builder_args(args, kwargs)
    +open(): TestResponse
    -__enter__(): FlaskClient
    -__exit__(exc_type, exc_value, tb)
  }

  class FlaskCliRunner {
    +cli
    --
    -__init__(app)
    +invoke(cli, args): t.Any
  }

  class locked_cached_property {
    -__init__(fget, name, doc)
    -__get__(obj, type): t.Any
    -__set__(obj, value)
    -__delete__(obj)
  }

  class View {
    +methods
    +provide_automatic_options
    +decorators
    +init_every_request
    +self
    +self
    +view
    --
    +dispatch_request(): ft.ResponseReturnValue
    +{class} as_view(name): ft.RouteCallable
    +view(): ft.ResponseReturnValue
    +view(): ft.ResponseReturnValue
  }

  class MethodView {
    +methods
    +meth
    +meth
    --
    -__init_subclass__()
    +dispatch_request(): ft.ResponseReturnValue
  }

}

package "venv2.lib.python3.12.site-packages.flask.json" {
  class JSONProvider {
    +obj
    --
    -__init__(app)
    +dumps(obj): str
    +dump(obj, fp)
    +loads(s): t.Any
    +load(fp): t.Any
    -_prepare_response_obj(args, kwargs): t.Any
    +response(): Response
  }

  class DefaultJSONProvider {
    +default
    +ensure_ascii: bool
    +sort_keys: bool
    +compact
    +mimetype: str
    +obj
    +dump_args
    --
    +dumps(obj): str
    +loads(s): t.Any
    +response(): Response
  }

  class JSONTag {
    +key
    --
    -__init__(serializer)
    +check(value): bool
    +to_json(value): t.Any
    +to_python(value): t.Any
    +tag(value): t.Any
  }

  class TagDict {
    +key: str
    +key
    +key
    --
    +check(value): bool
    +to_json(value): t.Any
    +to_python(value): t.Any
  }

  class PassDict {
    +tag: to_json
    --
    +check(value): bool
    +to_json(value): t.Any
  }

  class TagTuple {
    +key: str
    --
    +check(value): bool
    +to_json(value): t.Any
    +to_python(value): t.Any
  }

  class PassList {
    +tag: to_json
    --
    +check(value): bool
    +to_json(value): t.Any
  }

  class TagBytes {
    +key: str
    --
    +check(value): bool
    +to_json(value): t.Any
    +to_python(value): t.Any
  }

  class TagMarkup {
    +key: str
    --
    +check(value): bool
    +to_json(value): t.Any
    +to_python(value): t.Any
  }

  class TagUUID {
    +key: str
    --
    +check(value): bool
    +to_json(value): t.Any
    +to_python(value): t.Any
  }

  class TagDateTime {
    +key: str
    --
    +check(value): bool
    +to_json(value): t.Any
    +to_python(value): t.Any
  }

  class TaggedJSONSerializer {
    +default_tags
    +tag
    +key
    +key
    --
    -__init__()
    +register(tag_class, force, index)
    +tag(value)
    +untag(value): t.Any
    +dumps(value): str
    +loads(value): t.Any
  }

}

package "venv2.lib.python3.12.site-packages.mdurl" {
  class URL {
    +protocol
    +slashes: bool
    +auth
    +port
    +hostname
    +hash
    +search
    +pathname
  }

  class MutableURL {
    +lower_proto: str
    +slashes: bool
    +rest: url
    +rest
    +simple_path
    +proto: str
    +proto_match
    +proto
    +lower_proto
    +rest
    +slashes
    +rest
    +host_end
    +hec
    +host_end: hec
    +at_sign
    +at_sign
    +auth
    +rest
    +host_end
    +hec
    +host_end: hec
    +host_end
    +host
    +rest
    +ipv6_hostname
    +hostparts
    +l
    +i: int
    +part
    +newpart: str
    +k
    +j: int
    +valid_parts
    +not_host
    +bit
    +rest
    +hash
    +rest
    +qm
    +rest
    +port_match
    +port
    +host
    --
    -__init__()
    +parse(url, slashes_denote_host)
    +parse_host(host)
  }

}

package "venv2.lib.python3.12.site-packages.packaging" {
  class Tag {
    -__init__(interpreter, abi, platform)
    +interpreter(): str
    +abi(): str
    +platform(): str
    -__eq__(other): bool
    -__hash__(): int
    -__str__(): str
    -__repr__(): str
  }

  class _MuslVersion {
    +major: int
    +minor: int
  }

  class ExceptionGroup {
    +message: str
    +exceptions
    --
    -__init__(message, exceptions)
    -__repr__(): str
  }

  class InvalidMetadata {
    +field: str
    --
    -__init__(field, message)
  }

  class RawMetadata {
    +metadata_version: str
    +name: str
    +version: str
    +platforms
    +summary: str
    +description: str
    +keywords
    +home_page: str
    +author: str
    +author_email: str
    +license: str
    +supported_platforms
    +download_url: str
    +classifiers
    +requires
    +provides
    +obsoletes
    +maintainer: str
    +maintainer_email: str
    +requires_dist
    +provides_dist
    +obsoletes_dist
    +requires_python: str
    +requires_external
    +project_urls
    +description_content_type: str
    +provides_extra
    +dynamic
    +license_expression: str
    +license_files
  }

  class _Validator {
    +name: str
    +raw_name: str
    +added: _MetadataVersion
    +cache
    +value
    +converter
    +value
    +exc
    +content_types
    +message
    +charset
    +markdown_variants
    +variant
    +normalized_names
    +reqs
    +paths
    --
    -__init__()
    -__set_name__(_owner, name)
    -__get__(instance, _owner): T
    -_invalid_metadata(msg, cause): InvalidMetadata
    -_process_metadata_version(value): _MetadataVersion
    -_process_name(value): str
    -_process_version(value): version_module.Version
    -_process_summary(value): str
    -_process_description_content_type(value): str
    -_process_dynamic(value)
    -_process_provides_extra(value)
    -_process_requires_python(value): specifiers.SpecifierSet
    -_process_requires_dist(value)
    -_process_license_expression(value)
    -_process_license_files(value)
  }

  class Metadata {
    -_raw: RawMetadata
    +ins
    +exceptions
    +metadata_version
    +metadata_age
    +metadata_version: NoneType
    +fields_to_check
    +field_metadata_version
    +exc
    +field_age
    +field
    +exc
    +exceptions
    +message
    +message
    +metadata_version
    +name
    +version
    +dynamic
    +platforms
    +supported_platforms
    +summary
    +description
    +description_content_type
    +keywords
    +home_page
    +download_url
    +author
    +author_email
    +maintainer
    +maintainer_email
    +license
    +license_expression
    +license_files
    +classifiers
    +requires_dist
    +requires_python
    +requires_external
    +project_urls
    +provides_extra
    +provides_dist
    +obsoletes_dist
    +requires
    +provides
    +obsoletes
    --
    +{class} from_raw(data): Metadata
    +{class} from_email(data): Metadata
  }

  class _Version {
    +epoch: int
    +release
    +dev
    +pre
    +post
    +local
  }

  class InvalidVersion {
  }

  class _BaseVersion {
    -_key
    --
    -__hash__(): int
    -__lt__(other): bool
    -__le__(other): bool
    -__eq__(other): bool
    -__ge__(other): bool
    -__gt__(other): bool
    -__ne__(other): bool
  }

  class Version {
    -_key: CmpKey
    +match
    +parts
    +parts
    --
    -__init__(version)
    -__repr__(): str
    -__str__(): str
    +epoch(): int
    +release()
    +pre()
    +post()
    +dev()
    +local()
    +public(): str
    +base_version(): str
    +is_prerelease(): bool
    +is_postrelease(): bool
    +is_devrelease(): bool
    +major(): int
    +minor(): int
    +micro(): int
  }

  class _TrimmedRelease {
    +rel
    +nonzeros
    +last_nonzero
    --
    +release()
  }

  class Node {
    -__init__(value)
    -__str__(): str
    -__repr__(): str
    +serialize(): str
  }

  class Variable {
    +serialize(): str
  }

  class Value {
    +serialize(): str
  }

  class Op {
    +serialize(): str
  }

  class ParsedRequirement {
    +name: str
    +url: str
    +extras
    +specifier: str
    +marker
  }

  class InvalidName {
  }

  class InvalidWheelFilename {
  }

  class InvalidSdistFilename {
  }

  class InvalidRequirement {
  }

  class Requirement {
    +parsed
    +formatted_extras
    --
    -__init__(requirement_string)
    -_iter_parts(name)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
  }

  class InfinityType {
    -__repr__(): str
    -__hash__(): int
    -__lt__(other): bool
    -__le__(other): bool
    -__eq__(other): bool
    -__gt__(other): bool
    -__ge__(other): bool
    -__neg__()
  }

  class NegativeInfinityType {
    -__repr__(): str
    -__hash__(): int
    -__lt__(other): bool
    -__le__(other): bool
    -__eq__(other): bool
    -__gt__(other): bool
    -__ge__(other): bool
    -__neg__(): InfinityType
  }

  class InvalidMarker {
  }

  class UndefinedComparison {
  }

  class UndefinedEnvironmentName {
  }

  class Environment {
    +implementation_name: str
    +implementation_version: str
    +os_name: str
    +platform_machine: str
    +platform_release: str
    +platform_system: str
    +platform_version: str
    +python_full_version: str
    +platform_python_implementation: str
    +python_version: str
    +sys_platform: str
  }

  class Marker {
    +current_environment
    --
    -__init__(marker)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
    +evaluate(environment, context): bool
  }

  class _GLibCVersion {
    +major: int
    +minor: int
  }

  class Token {
    +name: str
    +text: str
    +position: int
  }

  class ParserSyntaxError {
    +marker
    --
    -__init__(message)
    -__str__(): str
  }

  class Tokenizer {
    +expression
    +match
    +token
    +span
    +open_position
    +open_position: NoneType
    --
    -__init__(source)
    +consume(name)
    +check(name): bool
    +expect(name): Token
    +read(): Token
    +raise_syntax_error(message): NoReturn
    +enclosing_tokens(open_token, close_token)
  }

  class InvalidSpecifier {
  }

  class BaseSpecifier {
    -__str__(): str
    -__hash__(): int
    -__eq__(other): bool
    +prereleases()
    +prereleases(value)
    +contains(item, prereleases): bool
    +filter(iterable, prereleases)
  }

  class Specifier {
    +match
    +version
    +pre
    +canonical_version
    +other
    +operator_callable: CallableOperator
    +prefix
    +normalized_prospective
    +normalized_spec
    +split_spec
    +split_prospective
    +shortened_prospective
    +spec_version
    +prospective
    +spec
    +spec
    +prereleases
    +normalized_item
    +operator_callable: CallableOperator
    +yielded: bool
    +found_prereleases
    +kw
    +parsed_version
    +yielded: bool
    --
    -__init__(spec, prereleases)
    +prereleases(): bool
    +prereleases(value)
    +operator(): str
    +version(): str
    -__repr__(): str
    -__str__(): str
    -_canonical_spec()
    -__hash__(): int
    -__eq__(other): bool
    -_get_operator(op): CallableOperator
    -_compare_compatible(prospective, spec): bool
    -_compare_equal(prospective, spec): bool
    -_compare_not_equal(prospective, spec): bool
    -_compare_less_than_equal(prospective, spec): bool
    -_compare_greater_than_equal(prospective, spec): bool
    -_compare_less_than(prospective, spec_str): bool
    -_compare_greater_than(prospective, spec_str): bool
    -_compare_arbitrary(prospective, spec): bool
    -__contains__(item): bool
    +contains(item, prereleases): bool
    +filter(iterable, prereleases)
  }

  class SpecifierSet {
    +split_specifiers
    +pre
    +other
    +specifier
    +other
    +item
    +prereleases
    +item
    +prereleases
    +iterable
    +filtered
    +found_prereleases
    +parsed_version
    --
    -__init__(specifiers, prereleases)
    +prereleases()
    +prereleases(value)
    -__repr__(): str
    -__str__(): str
    -__hash__(): int
    -__and__(other): SpecifierSet
    -__eq__(other): bool
    -__len__(): int
    -__iter__()
    -__contains__(item): bool
    +contains(item, prereleases, installed): bool
    +filter(iterable, prereleases)
  }

  class ELFInvalid {
  }

  class EIClass {
    +C32: int
    +C64: int
  }

  class EIData {
    +Lsb: int
    +Msb: int
  }

  class EMachine {
    +I386: int
    +S390: int
    +Arm: int
    +X8664: int
    +AArc64: int
  }

  class ELFFile {
    +ident
    +magic
    +data
    --
    -__init__(f)
    -_read(fmt)
    +interpreter()
  }

}

package "venv2.lib.python3.12.site-packages.packaging.licenses" {
  class InvalidLicenseExpression {
  }

  class SPDXLicense {
    +id: str
    +deprecated: bool
  }

  class SPDXException {
    +id: str
    +deprecated: bool
  }

}

package "venv2.lib.python3.12.site-packages.markupsafe" {
  class _HasHTML {
    -__html__(): str
  }

  class _TPEscape {
    -__call__(): Markup
  }

  class Markup {
    +object
    +value
    +value
    +value
    +value
    +value
    +value
    +value
    +rv
    +cls
    +cls
    +formatter
    +formatter
    --
    -__new__(object, encoding, errors): te.Self
    -__html__(): te.Self
    -__add__(): te.Self
    -__radd__(): te.Self
    -__mul__(): te.Self
    -__rmul__(): te.Self
    -__mod__(): te.Self
    -__repr__(): str
    +join(): te.Self
    +split(maxsplit)
    +rsplit(maxsplit)
    +splitlines()
    +unescape(): str
    +striptags(): str
    +{class} escape(): te.Self
    -__getitem__(): te.Self
    +capitalize(): te.Self
    +title(): te.Self
    +lower(): te.Self
    +upper(): te.Self
    +replace(): te.Self
    +ljust(): te.Self
    +rjust(): te.Self
    +lstrip(): te.Self
    +rstrip(): te.Self
    +center(): te.Self
    +strip(): te.Self
    +translate(): str
    +expandtabs(): te.Self
    +swapcase(): te.Self
    +zfill(): te.Self
    +casefold(): te.Self
    +removeprefix(): te.Self
    +removesuffix(suffix): te.Self
    +partition()
    +rpartition()
    +format(): te.Self
    +format_map(): te.Self
    -__html_format__(): te.Self
  }

  class EscapeFormatter {
    +rv
    +rv
    +rv
    --
    -__init__(escape)
    +format_field(value, format_spec): str
  }

  class _MarkupEscapeHelper {
    -__init__(obj, escape)
    -__getitem__(): te.Self
    -__str__(): str
    -__repr__(): str
    -__int__(): int
    -__float__(): float
  }

}

package "venv2.lib.python3.12.site-packages.flask_sqlalchemy" {
  class _QueryInfo {
    +statement
    +parameters: t.Any
    +start_time: float
    +end_time: float
    +location: str
    --
    +duration(): float
  }

  class Query {
    +rv
    +rv
    --
    +get_or_404(ident, description): t.Any
    +first_or_404(description): t.Any
    +one_or_404(description): t.Any
    +paginate(): Pagination
  }

  class Session {
    +engines
    +mapper
    +engine
    +engine
    --
    -__init__(db)
    +get_bind(mapper, clause, bind)
  }

  class _QueryProperty {
    -__get__(obj, cls): Query
  }

  class Model {
    -__fsa__
    +query_class
    +query
    +state
    +pk
    +pk
    +pk
    --
    -__repr__(): str
  }

  class BindMetaMixin {
    -__fsa__: SQLAlchemy
    +metadata: sa.MetaData
    +bind_key
    +parent_metadata
    +metadata
    --
    -__init__(name, bases, d)
  }

  class BindMixin {
    -__fsa__: SQLAlchemy
    +metadata: sa.MetaData
    +bind_key
    +parent_metadata
    +metadata
    --
    -{class} __init_subclass__()
  }

  class NameMetaMixin {
    +metadata: sa.MetaData
    -__tablename__: str
    -__table__: sa.Table
    +schema
    +key
    +key
    --
    -__init__(name, bases, d)
    -__table_cls__()
  }

  class NameMixin {
    +metadata: sa.MetaData
    -__tablename__: str
    -__table__: sa.Table
    +schema
    +key
    +key
    --
    -{class} __init_subclass__()
    -{class} __table_cls__()
  }

  class DefaultMeta {
  }

  class DefaultMetaNoName {
  }

  class _FSAModel {
    +metadata: sa.MetaData
  }

  class SQLAlchemy {
    +session_options
    +engine_options
    +message
    +message
    +basic_uri
    +basic_engine_options
    +echo: bool
    +config_binds
    +engine_options
    +engines
    +scope
    +factory
    +naming_convention
    +naming_convention: NoneType
    +metadata
    --
    -__init__(app)
    -__repr__(): str
    +init_app(app)
    -_make_scoped_session(options)
    -_make_session_factory(options)
    -_teardown_session(exc)
    -_make_metadata(bind_key): sa.MetaData
    -_make_table_class()
  }

  class Table {
    +metadata
    --
    -__new__(): Table
  }

  class _Table {
    -__init__(name)
    -__init__(name, metadata)
    -__init__(name)
    -__init__(name)
  }

  class Pagination {
    +items
    +total
    +total: NoneType
    +page
    +page: int
    +per_page
    +per_page: int
    +page: int
    +per_page: int
    +per_page
    +page: int
    +per_page: int
    +first
    +p
    +p
    +pages_end
    +left_end
    +mid_start
    +mid_end
    +right_start
    --
    -__init__(page, per_page, max_per_page, error_out, count)
    -{static} _prepare_page_args()
    -_query_offset(): int
    -_query_items()
    -_query_count(): int
    +first(): int
    +last(): int
    +pages(): int
    +has_prev(): bool
    +prev_num()
    +prev(): Pagination
    +has_next(): bool
    +next_num()
    +next(): Pagination
    +iter_pages()
    -__iter__()
  }

  class SelectPagination {
    +select
    +select
    +session
    +select
    +sub
    +session
    +out
    --
    -_query_items()
    -_query_count(): int
  }

  class QueryPagination {
    +query
    +out
    +out
    --
    -_query_items()
    -_query_count(): int
  }

}

package "venv2.lib.python3.12.site-packages.mypyc" {
  class SubtypeVisitor {
    +right
    --
    -__init__(right)
    +visit_rinstance(left): bool
    +visit_runion(left): bool
    +visit_rprimitive(left): bool
    +visit_rtuple(left): bool
    +visit_rstruct(left): bool
    +visit_rarray(left): bool
    +visit_rvoid(left): bool
  }

  class CompilerOptions {
    -__init__(strip_asserts, multi_file, verbose, separate, target_dir, include_runtime_files, capi_version, python_version)
  }

  class Errors {
    -__init__(options)
    +error(msg, path, line)
    +note(msg, path, line)
    +warning(msg, path, line)
    +new_messages()
    +flush_errors()
  }

  class SameTypeVisitor {
    +items
    --
    -__init__(right)
    +visit_rinstance(left): bool
    +visit_runion(left): bool
    +visit_rprimitive(left): bool
    +visit_rtuple(left): bool
    +visit_rstruct(left): bool
    +visit_rarray(left): bool
    +visit_rvoid(left): bool
  }

  class NameGenerator {
    +module_prefix
    +module_prefix
    +module_prefix: str
    +actual
    --
    -__init__(groups)
    +private_name(module, partial_name): str
  }

  class RTSubtypeVisitor {
    -__init__(right)
    +visit_rinstance(left): bool
    +visit_runion(left): bool
    +visit_rprimitive(left): bool
    +visit_rtuple(left): bool
    +visit_rstruct(left): bool
    +visit_rarray(left): bool
    +visit_rvoid(left): bool
  }

}

package "venv2.lib.python3.12.site-packages.mypyc.irbuild" {
  class AssignmentTarget {
    +type: RType
  }

  class AssignmentTargetRegister {
    -__init__(register)
  }

  class AssignmentTargetIndex {
    -__init__(base, index)
  }

  class AssignmentTargetAttr {
    -__init__(obj, attr, can_borrow)
  }

  class AssignmentTargetTuple {
    -__init__(items, star_idx)
  }

  class LowLevelIRBuilder {
    +src_type
    +value
    +shifted
    +values
    +v: NoneType
    +item
    +v: item
    +v
    +tmp
    +tmp
    +res
    +check
    +size
    +upper_bound
    +check2
    +lower_bound
    +lower_bound: int
    +check3
    +tmp
    +tmp
    +tmp
    +tmp: src
    +tmp
    +ptr
    +ptr2
    +conv_op: int_to_int64_op
    +conv_op: int_to_int32_op
    +tmp
    +extended
    +src_type
    +res
    +c1
    +c2
    +conv_op: int64_to_int_op
    +conv_op: ssize_t_to_int_op
    +x
    +tmp
    +tmp: src
    +s
    +target
    +coerced
    +error
    +op
    +key
    +ret
    +ret
    +ob_type_address
    +ob_type
    +typ
    +concrete
    +type_obj
    +ret
    +ret
    +star_result
    +star2_result
    +star_values
    +star2_keys
    +star2_values
    +seen_empty_reg
    +star_result
    +star2_result
    +nullable
    +maybe_pos
    +maybe_named
    +star_result
    +star2_result
    +key
    +new_seen_empty_reg: seen_empty_reg
    +out
    +new_seen_empty_reg
    +skip
    +keep
    +pos_block
    +named_block
    +key
    +seen_empty_reg: new_seen_empty_reg
    +star_result
    +star_result
    +star2_result
    +result
    +coerced_args
    +arg_ptr
    +arg_ptr
    +num_pos
    +keywords
    +value
    +kw_list
    +result
    +method_name_reg
    +method
    +method_name_reg
    +coerced_args
    +arg_ptr
    +num_pos
    +keywords
    +value
    +args
    +sig_args
    +n
    +sig_args
    +sig_arg_kinds
    +sig_arg_names
    +concrete_kinds
    +formal_to_actual
    +has_star: bool
    +has_star2: bool
    +star_arg_entries
    +has_star
    +has_star2
    +output_args
    +output_arg: star_arg
    +output_arg: star2_arg
    +output_arg
    +output_arg
    +output_arg
    +base_arg
    +output_arg
    +output_arg
    +bitmap: int
    +c: int
    +decl
    +arg_kinds
    +arg_names
    +arg_values
    +function
    +target
    +return_rtype
    +error_msg
    +value
    +fullname
    +ltype
    +rtype
    +value
    +op
    +op_id
    +op_id
    +rreg
    +rtype: ltype
    +rreg
    +rreg
    +op_id
    +op
    +op_id
    +op_id
    +lreg
    +lreg
    +lreg
    +op_id
    +op_id
    +rreg
    +lreg
    +rreg
    +lreg
    +lreg
    +rreg
    +lreg
    +rreg
    +base_op
    +base_op: op
    +call_c_ops_candidates
    +target
    +int_tag
    +bitwise_and
    +zero
    +op
    +check
    +result
    +check_lhs
    +check: check_lhs
    +check_rhs
    +check
    +eq
    +args
    +args
    +call
    +call_result
    +call_result: call
    +is_eq
    +check
    +check_lhs
    +rhs_block
    +check_rhs
    +args
    +args
    +call
    +eq
    +compare_result
    +error_constant
    +compare_error_check
    +branch
    +check_error_result
    +null
    +compare_error_check
    +branch
    +op_type
    +compare_result
    +op_type
    +equal
    +result
    +length
    +check_blocks
    +lhs_items
    +rhs_items
    +lhs_item
    +rhs_item
    +compare
    +compare
    +branch
    +branch
    +res
    +res
    +res
    +code
    +code
    +code
    +op_id
    +mask
    +typ
    +mask
    +num
    +method: str
    +method: str
    +method: str
    +method: str
    +call_c_ops_candidates
    +target
    +result
    +keys
    +values
    +result
    +result
    +length
    +result_list
    +args
    +ob_item_ptr
    +ob_item_base
    +item_address: ob_item_base
    +offset
    +item_address
    +array
    +target
    +left_value
    +left_coerced
    +right_value
    +right_coerced
    +result: value
    +zero
    +result
    +zero
    +result
    +result
    +length
    +zero
    +result
    +result
    +result
    +value_type
    +not_none
    +always_truthy: bool
    +always_truthy: bool
    +result: not_none
    +result
    +branch
    +remaining
    +as_bool
    +result
    +opt_value_type
    +bool_value
    +is_none
    +branch
    +always_truthy: bool
    +always_truthy: bool
    +remaining
    +coerced
    +formal_type
    +arg
    +arg
    +coerced
    +var_arg_idx
    +var_arg_idx
    +arg
    +arg
    +extra_int_constant
    +error_kind
    +error_kind: ERR_NEVER
    +target
    +comp
    +result: target
    +truncate
    +result: truncate
    +result
    +result
    +matching
    +matching: desc
    +matching: desc
    +target
    +op_id
    +c
    +msg: str
    +msg: str
    +mod
    +res
    +is_zero
    +same_signs
    +adj
    +adj
    +lhs
    +rhs
    +prim: int64_divide_op
    +prim: int32_divide_op
    +prim: int16_divide_op
    +prim: int64_mod_op
    +prim: int32_mod_op
    +prim: int16_mod_op
    +is_zero
    +res
    +div
    +same_signs
    +mul
    +mul_eq
    +adj
    +res
    +mod
    +same_signs
    +is_zero
    +adj
    +neg1
    +neg2
    +neg1
    +neg2
    +typ
    +size_value: NoneType
    +elem_address
    +size_value
    +elem_address
    +size_value
    +size_value
    +size_value
    +offset
    +length
    +length
    +size: Value
    +fast_items
    +rest_items
    +exit_block
    +result
    +more_types
    +op
    +coerced
    +temp
    +temp2
    +coerced
    +temp
    +temp2
    +call_c_ops_candidates
    +call_c_op
    +ltype
    +rtype
    +class_ir
    +cmp_varies_at_runtime
    +identity_ref_op
    +op
    +lhs
    +rhs
    +size
    +size_value: Value
    +items
    --
    -__init__(current_module, errors, mapper, options)
    +set_module(module_name, module_path)
    +add(op): Value
    +goto(target)
    +activate_block(block)
    +goto_and_activate(block)
    +keep_alive(values)
    +push_error_handler(handler)
    +pop_error_handler()
    +self(): Register
    +flush_keep_alives()
    +box(src): Value
    +unbox_or_cast(src, target_type, line): Value
    +coerce(src, target_type, line, force): Value
    +coerce_int_to_fixed_width(src, target_type, line): Value
    +coerce_short_int_to_fixed_width(src, target_type, line): Value
    +coerce_fixed_width_to_int(src, line): Value
    +coerce_nullable(src, target_type, line): Value
    +get_attr(obj, attr, result_type, line): Value
    +union_get_attr(obj, rtype, attr, result_type, line): Value
    +get_item_attr(): Value
    +py_get_attr(obj, attr, line): Value
    +isinstance_helper(obj, class_irs, line): Value
    +other(): Value
    +get_type_of_obj(obj, line): Value
    +type_is_op(obj, type_obj, line): Value
    +isinstance_native(obj, class_ir, line): Value
    +other(): Value
    -_construct_varargs(args, line)
    +py_call(function, arg_values, line, arg_kinds, arg_names): Value
    -_py_vector_call(function, arg_values, line, arg_kinds, arg_names)
    -_vectorcall_keywords(arg_names): Value
    +py_method_call(obj, method_name, arg_values, line, arg_kinds, arg_names): Value
    -_py_vector_method_call(obj, method_name, arg_values, line, arg_kinds, arg_names)
    +call(decl, args, arg_kinds, arg_names, line): Value
    +native_args_to_positional(args, arg_kinds, arg_names, sig, line)
    +gen_method_call(base, name, arg_values, result_type, line, arg_kinds, arg_names, can_borrow): Value
    +union_method_call(base, obj_type, name, arg_values, return_rtype, line, arg_kinds, arg_names): Value
    +call_union_item(): Value
    +none(): Value
    +true(): Value
    +false(): Value
    +none_object(): Value
    +load_int(value): Value
    +load_float(value): Value
    +load_str(value): Value
    +load_bytes(value): Value
    +load_complex(value): Value
    +load_static_checked(typ, identifier, module_name, namespace, line, error_msg): Value
    +load_module(name): Value
    +get_native_type(cls): Value
    +load_native_type_object(fullname): Value
    +binary_op(lreg, rreg, op, line): Value
    +check_tagged_short_int(val, line, negated): Value
    +compare_tagged(lhs, rhs, op, line): Value
    +compare_tagged_condition(lhs, rhs, op, true, false, line)
    +compare_strings(lhs, rhs, op, line): Value
    +compare_bytes(lhs, rhs, op, line): Value
    +compare_tuples(lhs, rhs, op, line): Value
    +translate_instance_contains(inst, item, op, line): Value
    +bool_bitwise_op(lreg, rreg, op, line): Value
    +bool_comparison_op(lreg, rreg, op, line): Value
    +unary_not(value, line): Value
    +unary_op(value, expr_op, line): Value
    +make_dict(key_value_pairs, line): Value
    +new_list_op_with_length(length, line): Value
    +new_list_op(values, line): Value
    +new_set_op(values, line): Value
    +setup_rarray(item_type, values): Value
    +shortcircuit_helper(op, expr_type, left, right, line): Value
    +bool_value(value): Value
    +add_bool_branch(value, true, false)
    +call_c(desc, args, line, result_type): Value
    +matching_call_c(candidates, args, line, result_type, can_borrow)
    +int_op(type, lhs, rhs, op, line): Value
    +float_op(lhs, rhs, op, line): Value
    +float_mod(lhs, rhs, line): Value
    +compare_floats(lhs, rhs, op, line): Value
    +fixed_width_int_op(type, lhs, rhs, op, line): Value
    +check_for_zero_division(rhs, type, line)
    +inline_fixed_width_divide(type, lhs, rhs, line): Value
    +inline_fixed_width_mod(type, lhs, rhs, line): Value
    +is_same_native_int_signs(type, a, b, line): Value
    +is_same_float_signs(a, b, line): Value
    +comparison_op(lhs, rhs, op, line): Value
    +builtin_len(val, line, use_pyssize_t): Value
    +new_tuple(items, line): Value
    +new_tuple_with_length(length, line): Value
    +int_to_float(n, line): Value
    +decompose_union_helper(obj, rtype, result_type, process_item, line): Value
    +translate_special_method_call(base_reg, name, args, result_type, line, can_borrow)
    +translate_eq_cmp(lreg, rreg, expr_op, line)
    +translate_is_op(lreg, rreg, expr_op, line): Value
    -_create_dict(keys, values, line): Value
    +error(msg, line)
  }

  class Mapper {
    +typ
    +inst
    +arg_types
    +arg_pos_onlys
    +ret
    +arg_types
    +arg_pos_onlys
    +is_init_method
    +ret: none_rprimitive
    +ret: object_rprimitive
    +arg_names
    +arg_names
    +args
    +ret: object_rprimitive
    --
    -__init__(group_map)
    +type_to_rtype(typ): RType
    +get_arg_rtype(typ, kind): RType
    +fdef_to_sig(fdef): FuncSignature
    +is_native_module(module): bool
    +is_native_ref_expr(expr): bool
    +is_native_module_ref_expr(expr): bool
  }

  class PreBuildVisitor {
    +decorators_to_store
    +to_remove
    +orig_func
    +parent
    +func
    --
    -__init__(errors, current_file, decorators_to_remove)
    +visit(o): bool
    +visit_block(block)
    +visit_decorator(dec)
    +visit_func_def(fdef)
    +visit_lambda_expr(expr)
    +visit_func(func)
    +visit_import(imp)
    +visit_name_expr(expr)
    +visit_var(var)
    +visit_symbol_node(symbol)
    +is_parent(fitem, child): bool
    +add_free_variable(symbol)
  }

  class FormatOp {
    +STR: str
    +INT: str
    +BYTES: str
  }

  class IRVisitor {
  }

  class UnsupportedException {
  }

  class IRBuilder {
    +old_can_borrow
    +res
    +res
    +res
    +key_unicode
    +value
    +first_load
    +comparison
    +mod_dict
    +module_obj
    +o
    +b
    +block
    +retval
    +block
    +var
    +name
    +name
    +coerced
    +split_name
    +line
    +symbol
    +symbol
    +symbol
    +reg_type
    +reg_type
    +globals_dict
    +name
    +base
    +index
    +can_borrow
    +obj
    +star_idx
    +lvalues
    +targ
    +star_idx: idx
    +reg
    +borrow
    +rvalue_reg
    +rvalue_reg
    +key
    +boxed_reg
    +target_reg2
    +rtypes
    +item_value
    +typename
    +typename: str
    +expected_len
    +values
    +item
    +index
    +item_value
    +item_value
    +iterator
    +split_idx
    +ritem
    +post_star_vals
    +iter_list
    +iter_list_len
    +post_star_len
    +condition
    +ritem
    +extra
    +name
    +target
    +target
    +reg
    +target_type
    +target_type
    +types
    +types
    +dict_types
    +t
    +dict_base
    +dict_base
    +dict_base_types
    +rtypes
    +dict_base_types
    +rtypes
    +key_type
    +value_type
    +iterable: ProperType
    +iterable
    +echk
    +iterator
    +joined: Type
    +joined
    +final_var: NoneType
    +sym
    +expr_fullname
    +is_final
    +final_var
    +fullname
    +native
    +final_var
    +fullname
    +native
    +fullname
    +call_c_ops_candidates
    +target
    +callee_node
    +callee_node
    +callee_node
    +decl
    +function
    +ir
    +res
    +item_part
    +fn_info
    +builder
    +runtime_args
    +ret_type
    +fn_info
    +self_type
    +sig
    +name
    +class_ir
    +decl
    +ir
    +var
    +reg
    +reg
    +target
    +mypy_type
    +attr_target
    +reg
    +reg
    +left
    +obj_rtype
    +name
    --
    -__init__(current_module, types, graph, errors, mapper, pbv, visitor, options, singledispatch_impls)
    +set_module(module_name, module_path)
    +accept(node): Value
    +accept(node)
    +accept(node)
    +flush_keep_alives()
    +add(op): Value
    +goto(target)
    +activate_block(block)
    +goto_and_activate(block)
    +self(): Register
    +py_get_attr(obj, attr, line): Value
    +load_str(value): Value
    +load_bytes_from_str_literal(value): Value
    +load_int(value): Value
    +load_float(value): Value
    +unary_op(lreg, expr_op, line): Value
    +binary_op(lreg, rreg, expr_op, line): Value
    +coerce(src, target_type, line, force): Value
    +none_object(): Value
    +none(): Value
    +true(): Value
    +false(): Value
    +new_list_op(values, line): Value
    +new_set_op(values, line): Value
    +translate_is_op(lreg, rreg, expr_op, line): Value
    +py_call(function, arg_values, line, arg_kinds, arg_names): Value
    +add_bool_branch(value, true, false)
    +load_native_type_object(fullname): Value
    +gen_method_call(base, name, arg_values, result_type, line, arg_kinds, arg_names): Value
    +load_module(name): Value
    +call_c(desc, args, line): Value
    +int_op(type, lhs, rhs, op, line): Value
    +compare_tagged(lhs, rhs, op, line): Value
    +compare_tuples(lhs, rhs, op, line): Value
    +builtin_len(val, line): Value
    +new_tuple(items, line): Value
    +add_to_non_ext_dict(non_ext, key, val, line)
    +gen_import(id, line)
    +check_if_module_loaded(id, line, needs_import, out)
    +get_module(module, line): Value
    +get_module_attr(module, attr, line): Value
    +assign_if_null(target, get_val, line)
    +assign_if_bitmap_unset(target, get_val, index, line)
    +maybe_add_implicit_return()
    +add_implicit_return()
    +add_implicit_unreachable()
    +disallow_class_assignments(lvalues, line)
    +non_function_scope(): bool
    +top_level_fn_info()
    +init_final_static(lvalue, rvalue_reg, class_name)
    +load_final_static(fullname, typ, line, error_name): Value
    +load_literal_value(val): Value
    +get_assignment_target(lvalue, line): AssignmentTarget
    +read(target, line, can_borrow): Value
    +assign(target, rvalue_reg, line)
    +coerce_rvalue(rvalue, rtype, line): Value
    +process_sequence_assignment(target, rvalue, line)
    +process_iterator_tuple_assignment_helper(litem, ritem, line)
    +process_iterator_tuple_assignment(target, rvalue_reg, line)
    +push_loop_stack(continue_block, break_block)
    +pop_loop_stack()
    +make_spill_target(type): AssignmentTarget
    +spill(value): AssignmentTarget
    +maybe_spill(value)
    +maybe_spill_assignable(value)
    +extract_int(e)
    +get_sequence_type(expr): RType
    +get_sequence_type_from_type(target_type): RType
    +get_dict_base_type(expr)
    +get_dict_key_type(expr): RType
    +get_dict_value_type(expr): RType
    +get_dict_item_type(expr): RType
    -_analyze_iterable_item_type(expr): Type
    +is_native_module(module): bool
    +is_native_ref_expr(expr): bool
    +is_native_module_ref_expr(expr): bool
    +is_synthetic_type(typ): bool
    +get_final_ref(expr)
    +emit_load_final(final_var, fullname, name, native, typ, line)
    +is_module_member_expr(expr): bool
    +call_refexpr_with_args(expr, callee, arg_values): Value
    +shortcircuit_expr(expr): Value
    +flatten_classes(arg)
    +enter(fn_info)
    +leave()
    +enter_method(class_ir, name, ret_type, fn_info, self_type)
    +add_argument(var, typ, kind): Register
    +lookup(symbol): SymbolTarget
    +add_local(symbol, typ, is_arg): Register
    +add_local_reg(symbol, typ, is_arg): AssignmentTargetRegister
    +add_self_to_env(cls): AssignmentTargetRegister
    +add_target(symbol, target): SymbolTarget
    +type_to_rtype(typ): RType
    +node_type(node): RType
    +add_var_to_env_class(var, rtype, base, reassign): AssignmentTarget
    +is_builtin_ref_expr(expr): bool
    +load_global(expr): Value
    +load_global_str(name, line): Value
    +load_globals_dict(): Value
    +load_module_attr_by_fullname(fullname, line): Value
    +is_native_attr_ref(expr): bool
    +mark_block_unreachable()
    +catch_errors(line): Any
    +warning(msg, line)
    +error(msg, line)
    +note(msg, line)
    +add_function(func_ir, line)
  }

  class ClassBuilder {
    -__init__(builder, cdef)
    +add_method(fdef)
    +add_attr(lvalue, stmt)
    +finalize(ir)
  }

  class NonExtClassBuilder {
    +non_ext_bases
    +non_ext_metaclass
    +non_ext_dict
    +non_ext_anns
    +non_ext_class
    +non_ext_class
    --
    -__init__(builder, cdef)
    +create_non_ext_info(): NonExtClassInfo
    +add_method(fdef)
    +add_attr(lvalue, stmt)
    +finalize(ir)
  }

  class ExtClassBuilder {
    +typ
    +value
    --
    -__init__(builder, cdef)
    +skip_attr_default(name, stmt): bool
    +add_method(fdef)
    +add_attr(lvalue, stmt)
    +finalize(ir)
  }

  class DataClassBuilder {
    +add_annotations_to_dict: bool
    +ann_type
    +dec
    --
    -__init__(builder, cdef)
    +create_non_ext_info(): NonExtClassInfo
    +skip_attr_default(name, stmt): bool
    +get_type_annotation(stmt)
    +add_attr(lvalue, stmt)
    +finalize(ir)
  }

  class AttrsClassBuilder {
    +add_annotations_to_dict: bool
    +callee
    +index
    +type_name
    +lvalue
    --
    +skip_attr_default(name, stmt): bool
    +get_type_annotation(stmt)
  }

  class IRBuilderVisitor {
    +builder: IRBuilder
    --
    +visit_mypy_file(mypyfile)
    +visit_class_def(cdef)
    +visit_import(node)
    +visit_import_from(node)
    +visit_import_all(node)
    +visit_func_def(fdef)
    +visit_overloaded_func_def(o)
    +visit_decorator(dec)
    +visit_block(block)
    +visit_expression_stmt(stmt)
    +visit_return_stmt(stmt)
    +visit_assignment_stmt(stmt)
    +visit_operator_assignment_stmt(stmt)
    +visit_if_stmt(stmt)
    +visit_while_stmt(stmt)
    +visit_for_stmt(stmt)
    +visit_break_stmt(stmt)
    +visit_continue_stmt(stmt)
    +visit_raise_stmt(stmt)
    +visit_try_stmt(stmt)
    +visit_with_stmt(stmt)
    +visit_pass_stmt(stmt)
    +visit_assert_stmt(stmt)
    +visit_del_stmt(stmt)
    +visit_global_decl(stmt)
    +visit_nonlocal_decl(stmt)
    +visit_match_stmt(stmt)
    +visit_name_expr(expr): Value
    +visit_member_expr(expr): Value
    +visit_super_expr(expr): Value
    +visit_call_expr(expr): Value
    +visit_unary_expr(expr): Value
    +visit_op_expr(expr): Value
    +visit_index_expr(expr): Value
    +visit_conditional_expr(expr): Value
    +visit_comparison_expr(expr): Value
    +visit_int_expr(expr): Value
    +visit_float_expr(expr): Value
    +visit_complex_expr(expr): Value
    +visit_str_expr(expr): Value
    +visit_bytes_expr(expr): Value
    +visit_ellipsis(expr): Value
    +visit_list_expr(expr): Value
    +visit_tuple_expr(expr): Value
    +visit_dict_expr(expr): Value
    +visit_set_expr(expr): Value
    +visit_list_comprehension(expr): Value
    +visit_set_comprehension(expr): Value
    +visit_dictionary_comprehension(expr): Value
    +visit_slice_expr(expr): Value
    +visit_generator_expr(expr): Value
    +visit_lambda_expr(expr): Value
    +visit_yield_expr(expr): Value
    +visit_yield_from_expr(o): Value
    +visit_await_expr(o): Value
    +visit_assignment_expr(o): Value
    +visit_enum_call_expr(o): Value
    +visit__promote_expr(o): Value
    +visit_namedtuple_expr(o): Value
    +visit_newtype_expr(o): Value
    +visit_temp_node(o): Value
    +visit_type_alias_expr(o): Value
    +visit_type_application(o): Value
    +visit_type_var_expr(o): Value
    +visit_paramspec_expr(o): Value
    +visit_type_var_tuple_expr(o): Value
    +visit_typeddict_expr(o): Value
    +visit_reveal_expr(o): Value
    +visit_var(o)
    +visit_cast_expr(o): Value
    +visit_assert_type_expr(o): Value
    +visit_star_expr(o): Value
    +bail(msg, line): NoReturn
  }

  class FuncInfo {
    -__init__(fitem, name, class_name, namespace, is_nested, contains_nested, is_decorated, in_non_ext, add_nested_funcs_to_env)
    +namespaced_name(): str
    +is_generator(): bool
    +is_coroutine(): bool
    +callable_class(): ImplicitClass
    +callable_class(cls)
    +env_class(): ClassIR
    +env_class(ir)
    +generator_class(): GeneratorClass
    +generator_class(cls)
    +curr_env_reg(): Value
  }

  class ImplicitClass {
    -__init__(ir)
    +self_reg(): Value
    +self_reg(reg)
    +curr_env_reg(): Value
    +curr_env_reg(reg)
    +prev_env_reg(): Value
    +prev_env_reg(reg)
  }

  class GeneratorClass {
    -__init__(ir)
    +next_label_reg(): Value
    +next_label_reg(reg)
    +next_label_target(): AssignmentTarget
    +next_label_target(target)
  }

  class NonlocalControl {
    +gen_break(builder, line)
    +gen_continue(builder, line)
    +gen_return(builder, value, line)
  }

  class BaseNonlocalControl {
    +gen_break(builder, line)
    +gen_continue(builder, line)
    +gen_return(builder, value, line)
  }

  class LoopNonlocalControl {
    -__init__(outer, continue_block, break_block)
    +gen_break(builder, line)
    +gen_continue(builder, line)
    +gen_return(builder, value, line)
  }

  class GeneratorNonlocalControl {
    +gen_return(builder, value, line)
  }

  class CleanupNonlocalControl {
    -__init__(outer)
    +gen_cleanup(builder, line)
    +gen_break(builder, line)
    +gen_continue(builder, line)
    +gen_return(builder, value, line)
  }

  class TryFinallyNonlocalControl {
    -__init__(target)
    +gen_break(builder, line)
    +gen_continue(builder, line)
    +gen_return(builder, value, line)
  }

  class ExceptNonlocalControl {
    -__init__(outer, saved)
    +gen_cleanup(builder, line)
  }

  class FinallyNonlocalControl {
    -__init__(outer, saved)
    +gen_cleanup(builder, line)
  }

  class ForGenerator {
    -__init__(builder, index, body_block, loop_exit, line, nested)
    +need_cleanup(): bool
    +add_cleanup(exit_block)
    +gen_condition()
    +begin_body()
    +gen_step()
    +gen_cleanup()
    +load_len(expr): Value
  }

  class ForIterable {
    +builder
    +iter_reg
    +builder
    +line
    +builder
    +line
    +next_reg
    --
    +need_cleanup(): bool
    +init(expr_reg, target_type)
    +gen_condition()
    +begin_body()
    +gen_step()
    +gen_cleanup()
  }

  class ForAsyncIterable {
    +builder
    +iter_reg
    +builder
    +line
    +addr
    +awaitable
    +builder
    +line
    +next_reg
    --
    +init(expr_reg, target_type)
    +gen_condition()
    +except_match(): Value
    +try_body()
    +except_body()
    +begin_body()
    +gen_step()
  }

  class ForSequence {
    +builder
    +index_reg: Value
    +index_reg
    +builder
    +line
    +comparison
    +second_check
    +len_reg
    +comparison
    +builder
    +line
    +value_box
    +builder
    +line
    +step
    +add
    --
    +init(expr_reg, target_type, reverse)
    +gen_condition()
    +begin_body()
    +gen_step()
  }

  class ForDictionaryCommon {
    +dict_next_op
    +dict_iter_op
    +builder
    +offset
    +iter_reg
    +builder
    +line
    +new_offset
    +should_continue
    +builder
    +line
    --
    +need_cleanup(): bool
    +init(expr_reg, target_type)
    +gen_condition()
    +gen_step()
    +gen_cleanup()
  }

  class ForDictionaryKeys {
    +dict_next_op: dict_next_key_op
    +dict_iter_op: dict_key_iter_op
    +builder
    +line
    +key
    --
    +begin_body()
  }

  class ForDictionaryValues {
    +dict_next_op: dict_next_value_op
    +dict_iter_op: dict_value_iter_op
    +builder
    +line
    +value
    --
    +begin_body()
  }

  class ForDictionaryItems {
    +dict_next_op: dict_next_item_op
    +dict_iter_op: dict_item_iter_op
    +builder
    +line
    +key
    +value
    +key
    +value
    +target
    +rvalue
    --
    +begin_body()
  }

  class ForRange {
    +builder
    +index_type: RType
    +index_type
    +index_type: int_rprimitive
    +index_reg
    +builder
    +line
    +cmp
    +comparison
    +builder
    +line
    +new_val
    +new_val
    --
    +init(start_reg, end_reg, step)
    +gen_condition()
    +gen_step()
  }

  class ForInfiniteCounter {
    +builder
    +zero
    +builder
    +line
    +new_val
    --
    +init()
    +gen_step()
  }

  class ForEnumerate {
    +need_cleanup(): bool
    +init(index1, index2, expr)
    +gen_condition()
    +begin_body()
    +gen_step()
    +gen_cleanup()
  }

  class ForZip {
    +gen
    --
    +need_cleanup(): bool
    +init(indexes, exprs)
    +gen_condition()
    +begin_body()
    +gen_step()
    +gen_cleanup()
  }

  class SingledispatchInfo {
    +singledispatch_impls
    +decorators_to_remove
  }

  class SingledispatchVisitor {
    +current_path: str
    +decorators_to_store
    +decorators_to_remove
    +last_non_register
    +impl
    +last_non_register: i
    --
    -__init__(errors)
    +visit_decorator(dec)
  }

  class RegisteredImpl {
    +singledispatch_func: FuncDef
    +dispatch_type: TypeInfo
  }

  class ArgInfo {
    +args
    +arg_names
    +arg_kinds
  }

  class MatchVisitor {
    +builder: IRBuilder
    +code_block: BasicBlock
    +next_block: BasicBlock
    +final_block: BasicBlock
    +subject: Value
    +match: MatchStmt
    +as_pattern
    +guard
    +cond
    +value
    +cond
    +backup_block
    +backup
    +isinstance_op
    +cond
    +node
    +ty
    +match_args_type
    +match_args
    +proper_item
    +match_arg
    +positional
    +attr
    +old_pattern
    +target
    +obj
    +obj
    +obj
    +cond
    +is_dict
    +keys
    +key_value
    +exists
    +item
    +rest
    +target
    +is_list
    +actual_len
    +min_len
    +is_long_enough
    +current
    +current
    +item
    +capture_end
    +rest
    +target
    +target
    +old_subject
    --
    -__init__(builder, match_node)
    +build_match_body(index)
    +visit_match_stmt(m)
    +visit_value_pattern(pattern)
    +visit_or_pattern(pattern)
    +visit_class_pattern(pattern)
    +visit_as_pattern(pattern)
    +visit_singleton_pattern(pattern)
    +visit_mapping_pattern(pattern)
    +visit_sequence_pattern(seq_pattern)
    +bind_as_pattern(value, new_block)
    +enter_subpattern(subject)
  }

}

package "venv2.lib.python3.12.site-packages.mypyc.lib-rt" {
  class build_ext_custom {
    +gtest_dir
    --
    +get_library_names()
    +run()
  }

}

package "venv2.lib.python3.12.site-packages.mypyc.analysis" {
  class FnError {
    -__init__(source, desc)
    -__eq__(other): bool
    -__repr__(): str
  }

  class IrCheckException {
  }

  class OpChecker {
    +expected_type: NoneType
    +expected_type: str
    +expected_type: str
    +expected_type: str
    +expected_type: str
    +expected_type: str
    +expected_type: str
    +expected_type: str
    +expected_type: str
    +expected_type: str
    +method_decl
    +decl_index: int
    +decl_index: int
    --
    -__init__(parent_fn)
    +fail(source, desc)
    +check_control_op_targets(op)
    +check_type_coercion(op, src, dest)
    +check_compatibility(op, t, s)
    +expect_float(op, v)
    +expect_non_float(op, v)
    +visit_goto(op)
    +visit_branch(op)
    +visit_return(op)
    +visit_unreachable(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_load_error_value(op)
    +check_tuple_items_valid_literals(op, t)
    +check_frozenset_items_valid_literals(op, s)
    +visit_load_literal(op)
    +visit_get_attr(op)
    +visit_set_attr(op)
    +visit_load_static(op)
    +visit_init_static(op)
    +visit_tuple_get(op)
    +visit_tuple_set(op)
    +visit_inc_ref(op)
    +visit_dec_ref(op)
    +visit_call(op)
    +visit_method_call(op)
    +visit_cast(op)
    +visit_box(op)
    +visit_unbox(op)
    +visit_raise_standard_error(op)
    +visit_call_c(op)
    +visit_truncate(op)
    +visit_extend(op)
    +visit_load_global(op)
    +visit_int_op(op)
    +visit_comparison_op(op)
    +visit_float_op(op)
    +visit_float_neg(op)
    +visit_float_comparison_op(op)
    +visit_load_mem(op)
    +visit_set_mem(op)
    +visit_get_element_ptr(op)
    +visit_load_address(op)
    +visit_keep_alive(op)
    +visit_unborrow(op)
  }

  class AttributeMaybeDefinedVisitor {
    -__init__(self_reg)
    +visit_branch(op)
    +visit_return(op)
    +visit_unreachable(op)
    +visit_register_op(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_set_mem(op)
  }

  class AttributeMaybeUndefinedVisitor {
    -__init__(self_reg)
    +visit_branch(op)
    +visit_return(op)
    +visit_unreachable(op)
    +visit_register_op(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_set_mem(op)
  }

  class SelfLeakedVisitor {
    +fn
    +self_type
    +cl
    +cl
    +cl
    --
    -__init__(self_reg)
    +visit_goto(op): GenAndKill
    +visit_branch(op): GenAndKill
    +visit_return(op): GenAndKill
    +visit_unreachable(op): GenAndKill
    +visit_assign(op): GenAndKill
    +visit_assign_multi(op): GenAndKill
    +visit_set_mem(op): GenAndKill
    +visit_call(op): GenAndKill
    +visit_method_call(op): GenAndKill
    +visit_load_error_value(op): GenAndKill
    +visit_load_literal(op): GenAndKill
    +visit_get_attr(op): GenAndKill
    +visit_set_attr(op): GenAndKill
    +visit_load_static(op): GenAndKill
    +visit_init_static(op): GenAndKill
    +visit_tuple_get(op): GenAndKill
    +visit_tuple_set(op): GenAndKill
    +visit_box(op): GenAndKill
    +visit_unbox(op): GenAndKill
    +visit_cast(op): GenAndKill
    +visit_raise_standard_error(op): GenAndKill
    +visit_call_c(op): GenAndKill
    +visit_truncate(op): GenAndKill
    +visit_extend(op): GenAndKill
    +visit_load_global(op): GenAndKill
    +visit_int_op(op): GenAndKill
    +visit_comparison_op(op): GenAndKill
    +visit_float_op(op): GenAndKill
    +visit_float_neg(op): GenAndKill
    +visit_float_comparison_op(op): GenAndKill
    +visit_load_mem(op): GenAndKill
    +visit_get_element_ptr(op): GenAndKill
    +visit_load_address(op): GenAndKill
    +visit_keep_alive(op): GenAndKill
    +visit_unborrow(op): GenAndKill
    +check_register_op(op): GenAndKill
  }

  class CFG {
    +exits
    --
    -__init__(succ, pred, exits)
    -__str__(): str
  }

  class AnalysisResult {
    -__init__(before, after)
    -__str__(): str
  }

  class BaseAnalysisVisitor {
    +visit_goto(op)
    +visit_register_op(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_set_mem(op)
    +visit_call(op)
    +visit_method_call(op)
    +visit_load_error_value(op)
    +visit_load_literal(op)
    +visit_get_attr(op)
    +visit_set_attr(op)
    +visit_load_static(op)
    +visit_init_static(op)
    +visit_tuple_get(op)
    +visit_tuple_set(op)
    +visit_box(op)
    +visit_unbox(op)
    +visit_cast(op)
    +visit_raise_standard_error(op)
    +visit_call_c(op)
    +visit_truncate(op)
    +visit_extend(op)
    +visit_load_global(op)
    +visit_int_op(op)
    +visit_float_op(op)
    +visit_float_neg(op)
    +visit_comparison_op(op)
    +visit_float_comparison_op(op)
    +visit_load_mem(op)
    +visit_get_element_ptr(op)
    +visit_load_address(op)
    +visit_keep_alive(op)
    +visit_unborrow(op)
  }

  class DefinedVisitor {
    -__init__(strict_errors)
    +visit_branch(op)
    +visit_return(op)
    +visit_unreachable(op)
    +visit_register_op(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_set_mem(op)
  }

  class BorrowedArgumentsVisitor {
    -__init__(args)
    +visit_branch(op)
    +visit_return(op)
    +visit_unreachable(op)
    +visit_register_op(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_set_mem(op)
  }

  class UndefinedVisitor {
    +visit_branch(op)
    +visit_return(op)
    +visit_unreachable(op)
    +visit_register_op(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_set_mem(op)
  }

  class LivenessVisitor {
    +gen
    --
    +visit_branch(op)
    +visit_return(op)
    +visit_unreachable(op)
    +visit_register_op(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_set_mem(op)
  }

}

package "venv2.lib.python3.12.site-packages.mypyc.test" {
  class TestGenerateNames {
    +reg
    +n1
    +n2
    +op1
    +op2
    +block
    +reg
    +n
    +op1
    +op2
    +block
    --
    +test_empty()
    +test_arg()
    +test_int_op()
    +test_assign()
  }

  class TestRArray {
    +a
    +a
    +a
    +a
    +b
    +a
    +b
    --
    +test_basics()
    +test_str_conversion()
    +test_eq()
    +test_hash()
    +test_alignment()
    +test_size()
  }

  class TestHeaderInclusion {
    +base_dir
    +header
    +ops
    +primitives_path
    +content
    --
    +test_primitives_included_in_header()
    +check_name()
  }

  class TestCommandLine {
    +files: files
    +base_path: test_temp_dir
    +optional_out: bool
    +text
    +m
    +args
    +program
    +program_path
    +env
    +out: bytes
    +cmd
    +suffix
    +so_paths
    +expected
    +actual
    --
    +run_case(testcase)
  }

  class TestLiterals {
    +lit
    +lit
    --
    +test_format_str_literal()
    +test_encode_str_values()
    +test_encode_bytes_values()
    +test_encode_int_values()
    +test_simple_literal_index()
    +test_tuple_literal()
  }

  class TestGenOps {
    +files: files
    +base_path: test_temp_dir
    +optional_out: bool
    +options
    +expected_output
    +expected_output
    +name
    +ir
    +actual
    +actual
    --
    +run_case(testcase)
  }

  class TestRefCountTransform {
    +files: files
    +base_path: test_temp_dir
    +optional_out: bool
    +options
    +expected_output
    +expected_output
    +ir
    +actual
    +actual
    --
    +run_case(testcase)
  }

  class TestRun {
    +files: files
    +base_path: test_temp_dir
    +optional_out: bool
    +multi_file: bool
    +separate: bool
    +text
    +step: int
    +steps
    +steps
    +bench
    +options
    +source
    +sources
    +module_names
    +module_paths
    +to_delete
    +fn
    +name
    +separate
    +groups
    +compiler_options
    +result
    +errors
    +opt_level
    +debug_level
    +setup_file
    +suffix
    +driver_path: str
    +default_driver
    +env
    +debugger
    +proc
    +output
    +outlines
    +msg: str
    +expected
    +msg
    +expected
    +outlines
    +suffix
    +expected_rechecked
    +expected_stale
    +template: str
    +m
    +m
    --
    +run_case(testcase)
    +run_case_inner(testcase)
    +run_case_step(testcase, incremental_step)
    +get_separate(program_text, incremental_step): Any
  }

  class TestRunMultiFile {
    +multi_file: bool
    +test_name_suffix: str
    +files
  }

  class TestRunSeparate {
    +separate: bool
    +test_name_suffix: str
    +files
  }

  class TestAnalysis {
    +files: files
    +base_path: test_temp_dir
    +optional_out: bool
    +ir
    +actual
    +actual
    +cfg
    +args
    +name
    +analysis_result
    +analysis_result
    +analysis_result
    +analysis_result
    +names
    +pre
    +post
    --
    +run_case(testcase)
  }

  class TestExceptionTransform {
    +files: files
    +base_path: test_temp_dir
    +expected_output
    +ir
    +actual
    +actual
    +common
    --
    +run_case(testcase)
  }

  class TestIrcheck {
    +block
    +ret_type: none_rprimitive
    +block
    +fn
    +block_1
    +block_2
    +fn
    +block_1
    +goto
    +block_2
    +fn
    +ret
    +block
    +fn
    +ret
    +block
    +fn
    +ret
    +fn
    +arg_reg
    +assign
    +ret
    +fn
    +cls
    +valid_cases
    +invalid_cases
    +arg_reg
    +assign
    +block
    +fn
    +block_1
    +goto
    +block_2
    +fn
    +errors
    +formatted
    +rx
    +ry
    +load_addr
    --
    +setUp()
    +basic_block(ops): BasicBlock
    +func_decl(name, ret_type): FuncDecl
    +test_valid_fn()
    +test_block_not_terminated_empty_block()
    +test_valid_goto()
    +test_invalid_goto()
    +test_invalid_register_source()
    +test_invalid_op_source()
    +test_invalid_return_type()
    +test_invalid_assign()
    +test_can_coerce_to()
    +test_duplicate_op()
    +test_pprint()
    +test_load_address_declares_register()
  }

  class TestStruct {
    +r
    +r1
    +r2
    +r3
    +r4
    +r5
    +r6
    +r7
    +r
    +r1
    +r2
    +r
    +r1
    +r2
    +r3
    +r4
    +r5
    +r
    +r1
    +r2
    +r3
    +r4
    --
    +test_struct_offsets()
    +test_struct_str()
    +test_runtime_subtype()
    +test_eq_and_hash()
  }

  class TestSubtype {
    +test_bit()
    +test_bool()
    +test_int64()
    +test_int32()
    +test_int16()
  }

  class TestRuntimeSubtype {
    +bool_int_mix
    --
    +test_bit()
    +test_bool()
    +test_union()
  }

  class TestUnionSimplification {
    +test_simple_type_result()
    +test_remove_duplicate()
    +test_cannot_simplify()
    +test_nested()
  }

  class TestEmitClass {
    +attrs
    +s
    +cls
    +generator
    +cls
    +generator
    --
    +test_slot_key()
    +test_setter_name()
    +test_getter_name()
  }

  class TestFunctionEmitterVisitor {
    +reg
    +ir
    +next_block
    +b
    +next_block
    +b
    +next_block
    +b
    +next_block
    +b
    +next_block
    +b
    +b
    +b
    +next_block
    +b
    +b
    +next_block
    +next_block
    +b
    +next_block
    +b
    +decl
    +decl
    +op
    +branch
    +op
    +op
    +op
    +r
    +t
    +a
    +a
    +a
    +op
    +next_block
    +branch
    +op
    +branch
    +op
    +next_block
    +branch
    +op
    +next_block
    +branch
    +op
    +next_block
    +branch
    +a
    +block
    +value_names
    +emitter
    +declarations
    +visitor
    +frags
    +actual_lines
    +actual_lines
    +expected_lines
    +expected_lines
    +expected_lines
    +ops
    +args
    +args
    --
    +setUp()
    +add_local(rtype): Register
    +test_goto()
    +test_goto_next_block()
    +test_return()
    +test_integer()
    +test_tuple_get()
    +test_load_None()
    +test_assign_int()
    +test_int_add()
    +test_int_sub()
    +test_int_neg()
    +test_branch()
    +test_branch_no_else()
    +test_branch_no_else_negated()
    +test_branch_is_error()
    +test_branch_is_error_next_block()
    +test_branch_rare()
    +test_call()
    +test_call_two_args()
    +test_inc_ref()
    +test_dec_ref()
    +test_inc_ref_int()
    +test_dec_ref_int()
    +test_dec_ref_tuple()
    +test_dec_ref_tuple_nested()
    +test_list_get_item()
    +test_list_set_item()
    +test_box_int()
    +test_unbox_int()
    +test_box_i64()
    +test_unbox_i64()
    +test_list_append()
    +test_get_attr()
    +test_get_attr_non_refcounted()
    +test_get_attr_merged()
    +test_get_attr_with_bitmap()
    +test_set_attr()
    +test_set_attr_non_refcounted()
    +test_set_attr_no_error()
    +test_set_attr_non_refcounted_no_error()
    +test_set_attr_with_bitmap()
    +test_set_attr_init_with_bitmap()
    +test_dict_get_item()
    +test_dict_set_item()
    +test_dict_update()
    +test_new_dict()
    +test_dict_contains()
    +test_int_op()
    +test_comparison_op()
    +test_load_mem()
    +test_set_mem()
    +test_get_element_ptr()
    +test_load_address()
    +test_assign_multi()
    +test_long_unsigned()
    +test_long_signed()
    +test_cast_and_branch_merge()
    +test_cast_and_branch_no_merge_1()
    +test_cast_and_branch_no_merge_2()
    +test_cast_and_branch_no_merge_3()
    +test_cast_and_branch_no_merge_4()
    +test_extend()
    +assert_emit(op, expected, next_block)
    +assert_emit_binary_op(op, dest, left, right, expected)
  }

  class TestGenerateFunction {
    +fn
    +value_names
    +emitter
    +result
    +reg
    +op
    +fn
    +value_names
    +emitter
    +result
    --
    +setUp()
    +test_simple()
    +test_register()
  }

  class TestAlwaysDefined {
    +files: files
    +base_path: test_temp_dir
    +options
    +ir
    +actual
    +actual
    --
    +run_case(testcase)
  }

  class TestExternal {
    +cppflags
    +env
    +status
    +env
    +status
    --
    +test_c_unit_test()
  }

  class TestTupleNames {
    +setUp()
    +test_names()
  }

  class TestArgCheck {
    +emitter
    +lines
    +emitter
    +lines
    +actual
    --
    +setUp()
    +test_check_list()
    +test_check_int()
    +assert_lines(expected, actual)
  }

  class MypycDataSuite {
    +files
    +data_prefix: test_data_prefix
  }

  class TestEmitter {
    +emitter
    +names
    +emitter
    +emitter
    +emitter
    +emitter
    +emitter
    +emitter
    --
    +setUp()
    +test_label()
    +test_reg()
    +test_object_annotation()
    +test_emit_line()
    +test_emit_undefined_value_for_simple_type()
    +test_emit_undefined_value_for_tuple()
  }

  class TestNameGen {
    +g
    --
    +test_candidate_suffixes()
    +test_exported_name()
    +test_make_module_translation_map()
    +test_name_generator()
  }

}

package "venv2.lib.python3.12.site-packages.mypyc.test-data.fixtures" {
  class __SupportsAbs {
    -__abs__(): T_co
  }

  class __SupportsDivMod {
    -__divmod__(other): T_co
  }

  class __SupportsRDivMod {
    -__rdivmod__(other): T_co
  }

  class __SupportsPow2 {
    -__pow__(other): T_co
  }

  class __SupportsPow3NoneOnly {
    -__pow__(other, modulo): T_co
  }

  class __SupportsPow3 {
    -__pow__(other, modulo): T_co
  }

  class object {
    -__init__()
    -__eq__(x): bool
    -__ne__(x): bool
  }

  class type {
    -__name__: str
    -__annotations__
    --
    -__init__(o)
  }

  class ellipsis {
  }

  class int {
    -__init__()
    -__init__(x, base)
    -__add__(n): int
    -__sub__(n): int
    -__mul__(n): int
    -__pow__(n, modulo): int
    -__floordiv__(x): int
    -__truediv__(x): float
    -__mod__(x): int
    -__divmod__(x)
    -__neg__(): int
    -__pos__(): int
    -__abs__(): int
    -__invert__(): int
    -__and__(n): int
    -__or__(n): int
    -__xor__(n): int
    -__lshift__(x): int
    -__rshift__(x): int
    -__eq__(n): bool
    -__ne__(n): bool
    -__lt__(n): bool
    -__gt__(n): bool
    -__le__(n): bool
    -__ge__(n): bool
  }

  class str {
    -__init__()
    -__init__(x)
    -__add__(x): str
    -__mul__(x): str
    -__rmul__(x): str
    -__eq__(x): bool
    -__ne__(x): bool
    -__lt__(x): bool
    -__le__(x): bool
    -__gt__(x): bool
    -__ge__(x): bool
    -__getitem__(i): str
    -__getitem__(i): str
    -__contains__(item): bool
    -__iter__()
    +split(sep, max)
    +strip(item): str
    +join(x): str
    +format(): str
    +upper(): str
    +startswith(x, start, end): bool
    +endswith(x, start, end): bool
    +replace(old, new, maxcount): str
    +encode(x, y): bytes
  }

  class float {
    -__init__(x)
    -__add__(n): float
    -__radd__(n): float
    -__sub__(n): float
    -__rsub__(n): float
    -__mul__(n): float
    -__truediv__(n): float
    -__floordiv__(n): float
    -__mod__(n): float
    -__pow__(n): float
    -__neg__(): float
    -__pos__(): float
    -__abs__(): float
    -__invert__(): float
    -__eq__(x): bool
    -__ne__(x): bool
    -__lt__(x): bool
    -__le__(x): bool
    -__gt__(x): bool
    -__ge__(x): bool
  }

  class complex {
    -__init__(x, y)
    -__add__(n): complex
    -__radd__(n): complex
    -__sub__(n): complex
    -__rsub__(n): complex
    -__mul__(n): complex
    -__truediv__(n): complex
    -__neg__(): complex
  }

  class bytes {
    -__init__()
    -__init__(x)
    -__add__(x): bytes
    -__mul__(x): bytes
    -__rmul__(x): bytes
    -__eq__(x): bool
    -__ne__(x): bool
    -__getitem__(i): int
    -__getitem__(i): bytes
    +join(x): bytes
    +decode(x, y): str
  }

  class bytearray {
    -__init__()
    -__init__(x)
    -__init__(string, encoding, err)
    -__add__(s): bytearray
    -__setitem__(i, o)
    -__getitem__(i): int
    +decode(x, y): str
  }

  class bool {
    -__init__(o)
    -__and__(n): bool
    -__and__(n): int
    -__or__(n): bool
    -__or__(n): int
    -__xor__(n): bool
    -__xor__(n): int
  }

  class tuple {
    -__init__(i)
    -__getitem__(i): T_co
    -__getitem__(i)
    -__len__(): int
    -__iter__()
    -__contains__(item): int
  }

  class function {
  }

  class list {
    -__init__(i)
    -__getitem__(i): T
    -__getitem__(s)
    -__setitem__(i, o)
    -__delitem__(i)
    -__mul__(i)
    -__rmul__(i)
    -__iter__()
    -__len__(): int
    -__contains__(item): int
    -__add__(x)
    +append(x)
    +pop(i): T
    +count(T): int
    +extend(l)
    +insert(i, x)
    +sort()
    +reverse()
    +remove(o)
    +index(o): int
  }

  class dict {
    -__init__()
    -__init__(map)
    -__init__(iterable)
    -__getitem__(key): V
    -__setitem__(k, v)
    -__delitem__(k)
    -__contains__(item): int
    -__iter__()
    -__len__(): int
    +update(__m)
    +update(__m)
    +update()
    +pop(x): K
    +keys()
    +values()
    +items()
    +clear()
    +copy()
    +setdefault(key, val): V
  }

  class set {
    -__init__(i)
    -__iter__()
    -__len__(): int
    +add(x)
    +remove(x)
    +discard(x)
    +clear()
    +pop(): T
    +update(x)
    -__or__(s)
    -__xor__(s)
  }

  class frozenset {
    -__init__(i)
    -__iter__()
    -__len__(): int
    -__or__(s)
    -__xor__(s)
  }

  class slice {
  }

  class range {
    -__init__(x, y, z)
    -__iter__()
    -__len__(): int
    -__next__(): int
  }

  class property {
    -__init__(fget, fset, fdel, doc)
    +getter(fget): property
    +setter(fset): property
    +deleter(fdel): property
    -__get__(obj, type): Any
    -__set__(obj, value)
    -__delete__(obj)
    +fget(): Any
    +fset(value)
    +fdel()
  }

  class BaseException {
  }

  class Exception {
    -__init__(message)
  }

  class Warning {
  }

  class UserWarning {
  }

  class TypeError {
  }

  class ValueError {
  }

  class AttributeError {
  }

  class ImportError {
  }

  class NameError {
  }

  class UnboundLocalError {
  }

  class LookupError {
  }

  class KeyError {
  }

  class IndexError {
  }

  class RuntimeError {
  }

  class UnicodeEncodeError {
  }

  class UnicodeDecodeError {
  }

  class NotImplementedError {
  }

  class StopIteration {
    +value: Any
  }

  class ArithmeticError {
  }

  class ZeroDivisionError {
  }

  class OverflowError {
  }

  class GeneratorExit {
  }

  class classmethod {
  }

  class staticmethod {
  }

  class async_val {
    +z
    --
    -__init__(val)
    -__await__()
  }

}

package "venv2.lib.python3.12.site-packages.mypyc.ir" {
  class RType {
    +name: str
    +is_unboxed: bool
    +c_undefined: str
    +is_refcounted: bool
    -_ctype: str
    +error_overlap: bool
    --
    +accept(visitor): T
    +short_name(): str
    -__str__(): str
    -__repr__(): str
    +serialize()
  }

  class RTypeVisitor {
    +visit_rprimitive(typ): T
    +visit_rinstance(typ): T
    +visit_runion(typ): T
    +visit_rtuple(typ): T
    +visit_rstruct(typ): T
    +visit_rarray(typ): T
    +visit_rvoid(typ): T
  }

  class RVoid {
    +is_unboxed: bool
    +name: str
    +ctype: str
    --
    +accept(visitor): T
    +serialize(): str
    -__eq__(other): bool
    -__hash__(): int
  }

  class RPrimitive {
    +primitive_map
    --
    -__init__(name)
    +accept(visitor): T
    +serialize(): str
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
  }

  class TupleNameVisitor {
    +parts
    --
    +visit_rinstance(t): str
    +visit_runion(t): str
    +visit_rprimitive(t): str
    +visit_rtuple(t): str
    +visit_rstruct(t): str
    +visit_rarray(t): str
    +visit_rvoid(t): str
  }

  class RTuple {
    +is_unboxed: bool
    +types
    +types
    --
    -__init__(types)
    +accept(visitor): T
    -__str__(): str
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): RTuple
  }

  class RStruct {
    -__init__(name, names, types)
    +accept(visitor): T
    -__str__(): str
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): RStruct
  }

  class RInstance {
    +is_unboxed: bool
    --
    -__init__(class_ir)
    +accept(visitor): T
    +struct_name(names): str
    +getter_index(name): int
    +setter_index(name): int
    +method_index(name): int
    +attr_type(name): RType
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +serialize(): str
  }

  class RUnion {
    +is_unboxed: bool
    +items
    +unique_items
    +types
    +types
    --
    -__init__(items)
    +{static} make_simplified_union(): RType
    +accept(visitor): T
    -__repr__(): str
    -__str__(): str
    -__eq__(other): bool
    -__hash__(): int
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): RUnion
  }

  class RArray {
    -__init__(item_type, length)
    +accept(visitor): T
    -__str__(): str
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): RArray
  }

  class IRPrettyPrintVisitor {
    +branch_op_names: Final
    +fmt
    +cond
    +tb: str
    +tb
    +fmt
    +prefix: str
    +prefix: str
    +rvalue
    +formatted_items
    +rvalue
    +ann
    +name
    +name
    +name
    +name
    +item_str
    +s
    +s
    +args
    +short_name
    +s
    +s
    +args
    +s
    +s
    +args_str
    +extra: str
    +extra: str
    +ann
    +sign_format: str
    +sign_format: str
    +sign_format: str
    +name
    +name
    +steal: str
    +steal: str
    +result
    +i: int
    +arglist
    +n
    +n
    +typespec
    +arg
    +i
    +i: n
    --
    -__init__(names)
    +visit_goto(op): str
    +visit_branch(op): str
    +visit_return(op): str
    +visit_unreachable(op): str
    +visit_assign(op): str
    +visit_assign_multi(op): str
    +visit_load_error_value(op): str
    +visit_load_literal(op): str
    +visit_get_attr(op): str
    +borrow_prefix(op): str
    +visit_set_attr(op): str
    +visit_load_static(op): str
    +visit_init_static(op): str
    +visit_tuple_get(op): str
    +visit_tuple_set(op): str
    +visit_inc_ref(op): str
    +visit_dec_ref(op): str
    +visit_call(op): str
    +visit_method_call(op): str
    +visit_cast(op): str
    +visit_box(op): str
    +visit_unbox(op): str
    +visit_raise_standard_error(op): str
    +visit_call_c(op): str
    +visit_truncate(op): str
    +visit_extend(op): str
    +visit_load_global(op): str
    +visit_int_op(op): str
    +visit_comparison_op(op): str
    +visit_float_op(op): str
    +visit_float_neg(op): str
    +visit_float_comparison_op(op): str
    +visit_load_mem(op): str
    +visit_set_mem(op): str
    +visit_get_element_ptr(op): str
    +visit_load_address(op): str
    +visit_keep_alive(op): str
    +visit_unborrow(op): str
    +format(fmt): str
  }

  class BasicBlock {
    -__init__(label)
    +terminated(): bool
    +terminator(): ControlOp
  }

  class Value {
    +line
    +type: RType
    +is_borrowed: bool
    --
    +is_void(): bool
  }

  class Register {
    -__init__(type, name, is_arg, line)
    +is_void(): bool
    -__repr__(): str
  }

  class Integer {
    -__init__(value, rtype, line)
    +numeric_value(): int
  }

  class Float {
    -__init__(value, line)
  }

  class Op {
    +result
    --
    -__init__(line)
    +can_raise(): bool
    +sources()
    +stolen()
    +unique_sources()
    +accept(visitor): T
  }

  class BaseAssign {
    -__init__(dest, line)
  }

  class Assign {
    +error_kind: ERR_NEVER
    --
    -__init__(dest, src, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class AssignMulti {
    +error_kind: ERR_NEVER
    --
    -__init__(dest, src, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class ControlOp {
    +targets()
    +set_target(i, new)
  }

  class Goto {
    +error_kind: ERR_NEVER
    --
    -__init__(label, line)
    +targets()
    +set_target(i, new)
    -__repr__(): str
    +sources()
    +accept(visitor): T
  }

  class Branch {
    +error_kind: ERR_NEVER
    +BOOL: Final
    +IS_ERROR: Final
    --
    -__init__(value, true_label, false_label, op, line)
    +targets()
    +set_target(i, new)
    +sources()
    +invert()
    +accept(visitor): T
  }

  class Return {
    +error_kind: ERR_NEVER
    --
    -__init__(value, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class Unreachable {
    +error_kind: ERR_NEVER
    --
    -__init__(line)
    +sources()
    +accept(visitor): T
  }

  class RegisterOp {
    +error_kind
    -_type
    --
    -__init__(line)
    +can_raise(): bool
  }

  class IncRef {
    +error_kind: ERR_NEVER
    --
    -__init__(src, line)
    +sources()
    +accept(visitor): T
  }

  class DecRef {
    +error_kind: ERR_NEVER
    --
    -__init__(src, is_xdec, line)
    -__repr__(): str
    +sources()
    +accept(visitor): T
  }

  class Call {
    +ret_type
    --
    -__init__(fn, args, line)
    +sources()
    +accept(visitor): T
  }

  class MethodCall {
    +method_ir
    +ret_type
    --
    -__init__(obj, method, args, line)
    +sources()
    +accept(visitor): T
  }

  class LoadErrorValue {
    +error_kind: ERR_NEVER
    --
    -__init__(rtype, line, is_borrowed, undefines)
    +sources()
    +accept(visitor): T
  }

  class LoadLiteral {
    +error_kind: ERR_NEVER
    +is_borrowed: bool
    --
    -__init__(value, rtype)
    +sources()
    +accept(visitor): T
  }

  class GetAttr {
    +error_kind: ERR_MAGIC
    +attr_type
    --
    -__init__(obj, attr, line)
    +sources()
    +accept(visitor): T
  }

  class SetAttr {
    +error_kind: ERR_FALSE
    --
    -__init__(obj, attr, src, line)
    +mark_as_initializer()
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class LoadStatic {
    +error_kind: ERR_NEVER
    +is_borrowed: bool
    --
    -__init__(type, identifier, module_name, namespace, line, ann)
    +sources()
    +accept(visitor): T
  }

  class InitStatic {
    +error_kind: ERR_NEVER
    --
    -__init__(value, identifier, module_name, namespace, line)
    +sources()
    +accept(visitor): T
  }

  class TupleSet {
    +error_kind: ERR_NEVER
    --
    -__init__(items, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class TupleGet {
    +error_kind: ERR_NEVER
    --
    -__init__(src, index, line)
    +sources()
    +accept(visitor): T
  }

  class Cast {
    +error_kind: ERR_MAGIC
    --
    -__init__(src, typ, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class Box {
    +error_kind: ERR_NEVER
    --
    -__init__(src, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class Unbox {
    -__init__(src, typ, line)
    +sources()
    +accept(visitor): T
  }

  class RaiseStandardError {
    +error_kind: ERR_FALSE
    +VALUE_ERROR: Final
    +ASSERTION_ERROR: Final
    +STOP_ITERATION: Final
    +UNBOUND_LOCAL_ERROR: Final
    +RUNTIME_ERROR: Final
    +NAME_ERROR: Final
    +ZERO_DIVISION_ERROR: Final
    --
    -__init__(class_name, value, line)
    +sources()
    +accept(visitor): T
  }

  class CallC {
    -__init__(function_name, args, ret_type, steals, is_borrowed, error_kind, line, var_arg_idx)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class Truncate {
    +error_kind: ERR_NEVER
    --
    -__init__(src, dst_type, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class Extend {
    +error_kind: ERR_NEVER
    --
    -__init__(src, dst_type, signed, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class LoadGlobal {
    +error_kind: ERR_NEVER
    +is_borrowed: bool
    --
    -__init__(type, identifier, line, ann)
    +sources()
    +accept(visitor): T
  }

  class IntOp {
    +error_kind: ERR_NEVER
    +ADD: Final
    +SUB: Final
    +MUL: Final
    +DIV: Final
    +MOD: Final
    +AND: Final
    +OR: Final
    +XOR: Final
    +LEFT_SHIFT: Final
    +RIGHT_SHIFT: Final
    +op_str: Final
    --
    -__init__(type, lhs, rhs, op, line)
    +sources()
    +accept(visitor): T
  }

  class ComparisonOp {
    +error_kind: ERR_NEVER
    +EQ: Final
    +NEQ: Final
    +SLT: Final
    +SGT: Final
    +SLE: Final
    +SGE: Final
    +ULT: Final
    +UGT: Final
    +ULE: Final
    +UGE: Final
    +op_str: Final
    +signed_ops: Final
    +unsigned_ops: Final
    --
    -__init__(lhs, rhs, op, line)
    +sources()
    +accept(visitor): T
  }

  class FloatOp {
    +error_kind: ERR_NEVER
    +ADD: Final
    +SUB: Final
    +MUL: Final
    +DIV: Final
    +MOD: Final
    +op_str: Final
    --
    -__init__(lhs, rhs, op, line)
    +sources()
    +accept(visitor): T
  }

  class FloatNeg {
    +error_kind: ERR_NEVER
    --
    -__init__(src, line)
    +sources()
    +accept(visitor): T
  }

  class FloatComparisonOp {
    +error_kind: ERR_NEVER
    +EQ: Final
    +NEQ: Final
    +LT: Final
    +GT: Final
    +LE: Final
    +GE: Final
    +op_str: Final
    --
    -__init__(lhs, rhs, op, line)
    +sources()
    +accept(visitor): T
  }

  class LoadMem {
    +error_kind: ERR_NEVER
    --
    -__init__(type, src, line)
    +sources()
    +accept(visitor): T
  }

  class SetMem {
    +error_kind: ERR_NEVER
    --
    -__init__(type, dest, src, line)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class GetElementPtr {
    +error_kind: ERR_NEVER
    --
    -__init__(src, src_type, field, line)
    +sources()
    +accept(visitor): T
  }

  class LoadAddress {
    +error_kind: ERR_NEVER
    +is_borrowed: bool
    --
    -__init__(type, src, line)
    +sources()
    +accept(visitor): T
  }

  class KeepAlive {
    +error_kind: ERR_NEVER
    --
    -__init__(src)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class Unborrow {
    +error_kind: ERR_NEVER
    --
    -__init__(src)
    +sources()
    +stolen()
    +accept(visitor): T
  }

  class OpVisitor {
    +visit_goto(op): T
    +visit_branch(op): T
    +visit_return(op): T
    +visit_unreachable(op): T
    +visit_assign(op): T
    +visit_assign_multi(op): T
    +visit_load_error_value(op): T
    +visit_load_literal(op): T
    +visit_get_attr(op): T
    +visit_set_attr(op): T
    +visit_load_static(op): T
    +visit_init_static(op): T
    +visit_tuple_get(op): T
    +visit_tuple_set(op): T
    +visit_inc_ref(op): T
    +visit_dec_ref(op): T
    +visit_call(op): T
    +visit_method_call(op): T
    +visit_cast(op): T
    +visit_box(op): T
    +visit_unbox(op): T
    +visit_raise_standard_error(op): T
    +visit_call_c(op): T
    +visit_truncate(op): T
    +visit_extend(op): T
    +visit_load_global(op): T
    +visit_int_op(op): T
    +visit_comparison_op(op): T
    +visit_float_op(op): T
    +visit_float_neg(op): T
    +visit_float_comparison_op(op): T
    +visit_load_mem(op): T
    +visit_set_mem(op): T
    +visit_get_element_ptr(op): T
    +visit_load_address(op): T
    +visit_keep_alive(op): T
    +visit_unborrow(op): T
  }

  class DeserMaps {
    +classes
    +functions
  }

  class ModuleIR {
    -__init__(fullname, imports, functions, classes, final_names)
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): ModuleIR
  }

  class VTableMethod {
    +cls
    +name: str
    +method: FuncIR
    +shadow_method
  }

  class ClassIR {
    +subs
    +method_decl
    +func_ir
    +res
    +result
    +child_subs
    +subs
    +concrete
    +fullname
    +ir
    +base
    --
    -__init__(name, module_name, is_trait, is_generated, is_abstract, is_ext_class)
    -__repr__(): str
    +fullname(): str
    +real_base()
    +vtable_entry(name): int
    +attr_details(name)
    +attr_type(name): RType
    +method_decl(name): FuncDecl
    +method_sig(name): FuncSignature
    +has_method(name): bool
    +is_method_final(name): bool
    +has_attr(name): bool
    +is_deletable(name): bool
    +is_always_defined(name): bool
    +name_prefix(names): str
    +struct_name(names): str
    +get_method_and_class(name)
    +get_method(name)
    +has_method_decl(name): bool
    +has_no_subclasses(): bool
    +subclasses()
    +concrete_subclasses()
    +is_serializable(): bool
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): ClassIR
  }

  class NonExtClassInfo {
    -__init__(dict, bases, anns, metaclass)
  }

  class RuntimeArg {
    -__init__(name, typ, kind, pos_only)
    +optional(): bool
    -__repr__(): str
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): RuntimeArg
  }

  class FuncSignature {
    +extra
    +args
    +args
    --
    -__init__(args, ret_type)
    +real_args()
    +bound_sig(): FuncSignature
    -__repr__(): str
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): FuncSignature
  }

  class FuncDecl {
    +partial_name
    +decl
    +shortname
    +fullname
    --
    -__init__(name, class_name, module_name, sig, kind, is_prop_setter, is_prop_getter, implicit)
    +line(): int
    +line(line)
    +id(): str
    +{static} compute_shortname(name): str
    +shortname(): str
    +fullname(): str
    +cname(names): str
    +serialize(): JsonDict
    +{static} get_id_from_json(): str
    +{class} deserialize(data, ctx): FuncDecl
  }

  class FuncIR {
    -__init__(decl, arg_regs, blocks, line, traceback_name)
    +line(): int
    +args()
    +ret_type(): RType
    +class_name()
    +sig(): FuncSignature
    +name(): str
    +fullname(): str
    +id(): str
    +cname(names): str
    -__repr__(): str
    +serialize(): JsonDict
    +{class} deserialize(data, ctx): FuncIR
  }

}

package "venv2.lib.python3.12.site-packages.mypyc.codegen" {
  class Literals {
    +str_literals
    +bytes_literals
    +int_literals
    +float_literals
    +complex_literals
    +tuple_literals
    +frozenset_literals
    +n: NUM_SINGLETONS
    +value_by_index
    +result
    +count
    +value
    +index
    --
    -__init__()
    +record_literal(value)
    +literal_index(value): int
    +num_literals(): int
    +encoded_str_values()
    +encoded_int_values()
    +encoded_bytes_values()
    +encoded_float_values()
    +encoded_complex_values()
    +encoded_tuple_values()
    +encoded_frozenset_values()
    -_encode_collection_values(values)
  }

  class MarkedDeclaration {
    -__init__(declaration, mark)
  }

  class MypycPlugin {
    +modules
    +ir_path
    +meta_json
    +ir_json
    +ir_data
    +contents
    +real_hash
    --
    -__init__(options, compiler_options, groups)
    +report_config_data(ctx)
    +get_additional_deps(file)
  }

  class GroupGenerator {
    +file_contents
    +multi_file
    +base_emitter
    +emitter: base_emitter
    +emitter
    +name
    +ext_declarations
    +declarations
    +elib
    +short_lib
    +sorted_decls
    +emitter: base_emitter
    +decls
    +output_dir
    +literals
    +init_str
    +init_bytes
    +init_int
    +init_floats
    +init_complex
    +init_tuple
    +init_frozenset
    +decls
    +name
    +egroup
    +values: str
    +module_prefix
    +name
    +flag: str
    +flag: str
    +declaration
    +declaration
    +module_static
    +module_globals
    +type_structs
    +type_struct
    +static_name
    +undef
    +result
    +marked_declarations
    +decl
    +base
    +base
    +defn: NoneType
    +defn
    +static_name
    +internal_static_name
    +static_name
    +static_name
    +static_name
    +undefined
    +symbol
    --
    -__init__(modules, source_paths, group_name, group_map, names, compiler_options)
    +group_suffix(): str
    +short_group_suffix(): str
    +generate_c_for_modules()
    +generate_literal_tables()
    +generate_export_table(decl_emitter, code_emitter)
    +generate_shared_lib_init(emitter)
    +generate_globals_init(emitter)
    +generate_module_def(emitter, module_name, module)
    +generate_top_level_call(module, emitter)
    +toposort_declarations()
    -_toposort_visit()
    +declare_global(type_spaced, name)
    +declare_internal_globals(module_name, emitter)
    +module_internal_static_name(module_name, emitter): str
    +declare_module(module_name, emitter)
    +declare_imports(imps, emitter)
    +declare_finals(module, final_names, emitter)
    +final_definition(module, name, typ, emitter): str
    +declare_static_pyobject(identifier, emitter)
  }

  class FunctionEmitterVisitor {
    +negated
    +negated_rare: bool
    +negated
    +negated_rare: bool
    +neg
    +cond: str
    +expr_result
    +cond
    +typ
    +compare
    +cond
    +cond
    +cond
    +cond
    +value_str
    +dest
    +tuple_type
    +dest
    +src
    +src
    +typ
    +dest
    +values
    +tmp
    +index
    +cast
    +trait_attr_index
    +offset
    +attr_cast
    +cast
    +dest
    +obj
    +rtype
    +cl
    +prefer_method
    +version
    +attr_expr
    +always_defined
    +merged_branch: NoneType
    +branch
    +merged_branch: branch
    +exc_class: str
    +next_op
    +dest
    +obj
    +src
    +rtype
    +cl
    +version
    +attr_expr
    +always_defined
    +PREFIX_MAP: Final
    +dest
    +prefix
    +name
    +name
    +value
    +prefix
    +name
    +value
    +dest
    +src
    +dest
    +args
    +lib
    +cname
    +dest
    +obj
    +rtype
    +class_ir
    +name
    +method
    +is_direct
    +obj_args
    +args
    +mtype
    +version
    +lib
    +method_idx
    +src
    +src
    +branch
    +handler: NoneType
    +handler
    +message
    +dest: str
    +dest
    +args
    +dest
    +value
    +dest
    +value
    +src_cast
    +src_cast
    +dest
    +dest
    +lhs
    +rhs
    +lhs
    +rhs
    +dest
    +lhs
    +rhs
    +lhs_cast: str
    +rhs_cast: str
    +lhs_cast
    +rhs_cast
    +lhs_cast
    +rhs_cast
    +rhs_cast
    +lhs_cast
    +dest
    +lhs
    +rhs
    +dest
    +src
    +dest
    +lhs
    +rhs
    +dest
    +src
    +type
    +dest
    +src
    +dest_type
    +dest
    +src
    +typ
    +dest
    +src
    +prefix
    +src
    +src
    +dest
    +src
    +val
    +s
    +s: str
    +r
    +globals_static
    --
    -__init__(emitter, declarations, source_path, module_name)
    +temp_name(): str
    +visit_goto(op)
    +visit_branch(op)
    +visit_return(op)
    +visit_tuple_set(op)
    +visit_assign(op)
    +visit_assign_multi(op)
    +visit_load_error_value(op)
    +visit_load_literal(op)
    +get_attr_expr(obj, op, decl_cl): str
    +visit_get_attr(op)
    +next_branch()
    +visit_set_attr(op)
    +visit_load_static(op)
    +visit_init_static(op)
    +visit_tuple_get(op)
    +get_dest_assign(dest): str
    +visit_call(op)
    +visit_method_call(op)
    +visit_inc_ref(op)
    +visit_dec_ref(op)
    +visit_box(op)
    +visit_cast(op)
    +visit_unbox(op)
    +visit_unreachable(op)
    +visit_raise_standard_error(op)
    +visit_call_c(op)
    +visit_truncate(op)
    +visit_extend(op)
    +visit_load_global(op)
    +visit_int_op(op)
    +visit_comparison_op(op)
    +visit_float_op(op)
    +visit_float_neg(op)
    +visit_float_comparison_op(op)
    +visit_load_mem(op)
    +visit_set_mem(op)
    +visit_get_element_ptr(op)
    +visit_load_address(op)
    +visit_keep_alive(op)
    +visit_unborrow(op)
    +label(label): str
    +reg(reg): str
    +ctype(rtype): str
    +c_error_value(rtype): str
    +c_undefined_value(rtype): str
    +emit_line(line)
    +emit_lines()
    +emit_inc_ref(dest, rtype)
    +emit_dec_ref(dest, rtype, is_xdec)
    +emit_declaration(line)
    +emit_traceback(op)
    +emit_attribute_error(op, class_name, attr)
    +emit_signed_int_cast(type): str
    +emit_unsigned_int_cast(type): str
  }

  class HeaderDeclaration {
    -__init__(decl, defn)
  }

  class EmitterContext {
    -__init__(names, group_name, group_map)
  }

  class ErrorHandler {
  }

  class AssignHandler {
  }

  class GotoHandler {
    -__init__(label)
  }

  class TracebackAndGotoHandler {
    -__init__(label, source_path, module_name, traceback_entry)
  }

  class ReturnHandler {
    -__init__(value)
  }

  class Emitter {
    +line_width
    +formatted
    +comment_continued
    +comment
    +text: label
    +text
    +fmt
    +groups
    +target_group_name
    +lib_prefix
    +star_maybe
    +suffix
    +ctype
    +result
    +i: int
    +n
    +cast
    +attr
    +check
    +index
    +mask
    +bitmap
    +check
    +check
    +index
    +bit
    +attr
    +obj_expr
    +check
    +i: int
    +item_type
    +item_type
    +check
    +items
    +dependencies
    +x
    +value_type
    +error
    +value_type
    +check: str
    +check
    +prefix: str
    +prefix: str
    +prefix: str
    +prefix: str
    +prefix: str
    +prefix: str
    +prefix: str
    +prefix: str
    +check: str
    +check
    +check: str
    +check
    +check: str
    +check
    +concrete
    +check
    +full_str: str
    +full_str
    +check
    +check
    +check: str
    +check
    +good_label
    +out_label
    +error
    +failure
    +failure
    +failure
    +raise_exc
    +failure
    +conversion
    +cast_temp
    +temp
    +temp2
    +declaration: str
    +declaration: str
    +inner_name
    +cond
    +func: str
    +type_str
    +globals_static
    +line
    --
    -__init__(context, value_names, capi_version)
    +indent()
    +dedent()
    +label(label): str
    +reg(reg): str
    +attr(name): str
    +object_annotation(obj, line): str
    +emit_line(line)
    +emit_lines()
    +emit_label(label)
    +emit_from_emitter(emitter)
    +emit_printf(fmt)
    +temp_name(): str
    +new_label(): str
    +get_module_group_prefix(module_name): str
    +get_group_prefix(obj): str
    +static_name(id, module, prefix): str
    +type_struct_name(cl): str
    +ctype(rtype): str
    +ctype_spaced(rtype): str
    +c_undefined_value(rtype): str
    +c_error_value(rtype): str
    +native_function_name(fn): str
    +tuple_c_declaration(rtuple)
    +bitmap_field(index): str
    +attr_bitmap_expr(obj, cl, index): str
    +emit_attr_bitmap_set(value, obj, rtype, cl, attr)
    +emit_attr_bitmap_clear(obj, rtype, cl, attr)
    -_emit_attr_bitmap_update(value, obj, rtype, cl, attr, clear)
    +use_vectorcall(): bool
    +emit_undefined_attr_check(rtype, attr_expr, compare, obj, attr, cl)
    +error_value_check(rtype, value, compare): str
    +tuple_undefined_check_cond(rtuple, tuple_expr_in_c, c_type_compare_val, compare): str
    +tuple_undefined_value(rtuple): str
    +c_initializer_undefined_value(rtype): str
    +declare_tuple_struct(tuple_type)
    +emit_inc_ref(dest, rtype)
    +emit_dec_ref(dest, rtype)
    +pretty_name(typ): str
    +emit_cast(src, dest, typ)
    +emit_cast_error_handler(error, src, dest, typ, raise_exception)
    +emit_union_cast(src, dest, typ, declare_dest, error, optional, src_type, raise_exception)
    +emit_tuple_cast(src, dest, typ, declare_dest, error, src_type)
    +emit_arg_check(src, dest, typ, check, optional)
    +emit_unbox(src, dest, typ)
    +emit_box(src, dest, typ, declare_dest, can_borrow)
    +emit_error_check(value, rtype, failure)
    +emit_gc_visit(target, rtype)
    +emit_gc_clear(target, rtype)
    +emit_traceback(source_path, module_name, traceback_entry)
    +emit_type_error_traceback(source_path, module_name, traceback_entry)
    -_emit_traceback(func, source_path, module_name, traceback_entry, type_str, src)
    +emit_unbox_failure_with_overlapping_error_value(dest, typ, failure)
  }

  class WrapperGenerator {
    +input_args
    +error
    +bitmap_arg_index: int
    +typ
    +optional
    +native_args
    +bitmap_args
    +native_args
    +ret_type
    +emitter
    +emitter
    --
    -__init__(cl, emitter)
    +set_target(fn)
    +wrapper_name(): str
    +use_goto(): bool
    +emit_header()
    +emit_arg_processing(error, raise_exception)
    +emit_call(not_implemented_handler)
    +error(): ErrorHandler
    +emit_error_handling()
    +finish()
  }

}

package "venv2.lib.python3.12.site-packages.mypyc.primitives" {
  class CFunctionDescription {
    +name: str
    +arg_types
    +return_type: RType
    +var_arg_type
    +truncated_type
    +c_function_name: str
    +error_kind: int
    +steals: StealsDescription
    +is_borrowed: bool
    +ordering
    +extra_int_constants
    +priority: int
  }

  class LoadAddressDescription {
    +name: str
    +type: RType
    +src: str
  }

  class IntComparisonOpDescription {
    +binary_op_variant: int
    +c_func_description: CFunctionDescription
    +c_func_negated: bool
    +c_func_swap_operands: bool
  }

}

package "venv2.lib.python3.12.site-packages.flask_migrate" {
  class _MigrateConfig {
    -__init__(migrate, db)
    +metadata()
  }

  class Config {
    +package_dir
    --
    -__init__()
    +get_template_directory()
  }

  class Migrate {
    +config
    +directory
    +directory
    +config
    --
    -__init__(app, db, directory, command, compare_type, render_as_batch)
    +init_app(app, db, directory, command, compare_type, render_as_batch)
    +configure(f)
    +call_configure_callbacks(config)
    +get_config(directory, x_arg, opts)
  }

}

package "venv2.lib.python3.12.site-packages.dotenv" {
  class Atom {
    +result
    --
    -__ne__(other): bool
    +resolve(env): str
  }

  class Literal {
    -__init__(value)
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +resolve(env): str
  }

  class Variable {
    +default
    +result
    --
    -__init__(name, default)
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +resolve(env): str
  }

  class Original {
    +string: str
    +line: int
  }

  class Binding {
    +key
    +value
    +original: Original
    +error: bool
  }

  class Position {
    -__init__(chars, line)
    +{class} start()
    +set(other)
    +advance(string)
  }

  class Error {
  }

  class Reader {
    +result
    +match
    --
    -__init__(stream)
    +has_next(): bool
    +set_mark()
    +get_marked(): Original
    +peek(count): str
    +read(count): str
    +read_regex(regex)
  }

  class IPythonDotEnv {
    +args
    +dotenv_path
    +dotenv_path
    --
    +dotenv(line)
  }

  class DotEnv {
    +raw_values
    +data
    --
    -__init__(dotenv_path, stream, verbose, encoding, interpolate, override)
    -_get_stream()
    +dict()
    +parse()
    +set_as_environment_variables(): bool
    +get(key)
  }

}

package "venv2.lib.python3.12.site-packages.annotated_types" {
  class SupportsGt {
    -__gt__(__other): bool
  }

  class SupportsGe {
    -__ge__(__other): bool
  }

  class SupportsLt {
    -__lt__(__other): bool
  }

  class SupportsLe {
    -__le__(__other): bool
  }

  class SupportsMod {
    -__mod__(__other): T
  }

  class SupportsDiv {
    -__div__(__other): T
  }

  class BaseMetadata {
  }

  class Gt {
    +gt: SupportsGt
  }

  class Ge {
    +ge: SupportsGe
  }

  class Lt {
    +lt: SupportsLt
  }

  class Le {
    +le: SupportsLe
  }

  class GroupedMetadata {
    -__is_annotated_types_grouped_metadata__()
    -__iter__()
    -__init_subclass__()
    -__iter__()
  }

  class Interval {
    +gt
    +ge
    +lt
    +le
    --
    -__iter__()
  }

  class MultipleOf {
    +multiple_of
  }

  class MinLen {
    +min_length
  }

  class MaxLen {
    +max_length
  }

  class Len {
    +min_length
    +max_length
    --
    -__iter__()
  }

  class Timezone {
    +tz
  }

  class Unit {
    +unit: str
  }

  class Predicate {
    +func
    --
    -__repr__(): str
  }

  class Not {
    +func
    --
    -__call__(__v): bool
  }

  class DocInfo {
    +documentation: str
  }

  class Case {
    +annotation: Any
    +valid_cases
    +invalid_cases
  }

  class MyCustomGroupedMetadata {
    -__iter__()
  }

}

package "venv2.lib.python3.12.site-packages.pygments" {
  class EndOfText {
  }

  class Scanner {
    +eos
    +m
    --
    -__init__(text, flags)
    +eos()
    +check(pattern)
    +test(pattern)
    +scan(pattern)
    +get_char()
    -__repr__()
  }

  class Formatter {
    +name: NoneType
    +aliases
    +filenames
    +unicodeoutput: bool
    +outfile
    --
    -__init__()
    +get_style_defs(arg)
    +format(tokensource, outfile)
    -__class_getitem__(name)
  }

  class _TokenType {
    +parent: NoneType
    +buf
    +node: self
    +node
    +new
    --
    +split()
    -__init__()
    -__contains__(val)
    -__getattr__(val)
    -__repr__()
    -__copy__()
    -__deepcopy__(memo)
  }

  class StyleMeta {
    +obj
    +col
    +ndef
    +styledefs
    +ndef
    +ndef
    +ndef
    +t
    +ansicolor: NoneType
    +bgansicolor: NoneType
    +color
    +color
    +ansicolor: color
    +color
    +bgcolor
    +bgcolor
    +bgansicolor: bgcolor
    +bgcolor
    --
    -__new__(name, bases, dct)
    +colorformat()
    +style_for_token(token)
    +list_styles()
    +styles_token(ttype)
    -__iter__()
    -__len__()
  }

  class Style {
    +background_color: str
    +highlight_color: str
    +line_number_color: str
    +line_number_background_color: str
    +line_number_special_color: str
    +line_number_special_background_color: str
    +styles
    +name: str
    +aliases
    +web_style_gallery_exclude: bool
  }

  class ClassNotFound {
  }

  class OptionError {
  }

  class Future {
    +get()
  }

  class UnclosingTextIOWrapper {
    +close()
  }

  class PygmentsDoc {
    +has_content: bool
    +required_arguments: int
    +optional_arguments: int
    +final_argument_whitespace: bool
    +option_spec
    +out
    +out
    +out
    +out
    +node
    +vl
    +out
    +table
    +lexer_cls
    +extensions
    +column_names
    +column_lengths
    +out
    +sep
    +out
    +modules
    +moduledocstrings
    +module
    +mod
    +cls
    +docstring
    +docstring
    +example_file
    +p
    +content
    +lexer_name
    +version_line
    +version_line: str
    +moddoc
    +moddoc
    +heading
    +out
    +module
    +mod
    +cls
    +docstring
    +docstring
    +heading
    +out
    +docstring
    +docstring
    --
    +run()
    +document_lexers_overview()
    +format_link(url)
    +write_row()
    +write_seperator()
    +document_lexers()
    +document_formatters()
    +document_filters()
  }

  class HelpFormatter {
    +width
    --
    -__init__(prog, indent_increment, max_help_position, width)
  }

  class LexerMeta {
    -__new__(name, bases, d)
  }

  class Lexer {
    +name: NoneType
    +aliases
    +filenames
    +alias_filenames
    +mimetypes
    +priority: int
    +url: NoneType
    +version_added: NoneType
    +filter_
    +decoded: NoneType
    +decoded
    +enc
    +decoded
    +text: decoded
    +text
    +text
    +text
    +text
    +text
    +text
    +text
    +text
    +text
    +stream
    +stream
    --
    -__init__()
    -__repr__()
    +add_filter(filter_)
    +analyse_text()
    -_preprocess_lexer_input(text)
    +get_tokens(text, unfiltered)
    +streamer()
    +get_tokens_unprocessed(text)
  }

  class DelegatingLexer {
    +buffered: str
    +insertions
    +lng_buffer
    +lng_buffer
    --
    -__init__(_root_lexer, _language_lexer, _needle)
    +get_tokens_unprocessed(text)
  }

  class include {
  }

  class _inherit {
    -__repr__()
  }

  class combined {
    -__new__()
    -__init__()
  }

  class _PseudoMatch {
    -__init__(start, text)
    +start(arg)
    +end(arg)
    +group(arg)
    +groups()
    +groupdict()
  }

  class _This {
  }

  class default {
    -__init__(state)
  }

  class words {
    -__init__(words, prefix, suffix)
    +get()
  }

  class RegexLexerMeta {
    +regex
    +tmp_state
    +itokens
    +tokens
    +rflags
    +new_state
    +rex
    +token
    +new_state: NoneType
    +new_state
    +processed
    +tokendefs
    +tokens
    +inheritable
    +toks
    +curitems
    +inherit_ndx
    +inherit_ndx
    +new_inh_ndx
    --
    -_process_regex(regex, rflags, state)
    -_process_token(token)
    -_process_new_state(new_state, unprocessed, processed)
    -_process_state(unprocessed, processed, state)
    +process_tokendef(name, tokendefs)
    +get_tokendefs()
    -__call__()
  }

  class RegexLexer {
    +flags
    +tokens
    +pos: int
    +tokendefs
    +statestack
    +statetokens
    +m
    +pos
    +statetokens
    +statestack
    +statetokens
    --
    +get_tokens_unprocessed(text, stack)
  }

  class LexerContext {
    -__init__(text, pos, stack, end)
    -__repr__()
  }

  class ExtendedRegexLexer {
    +tokendefs
    +ctx
    +statetokens
    +ctx: context
    +statetokens
    +text
    +m
    +statetokens
    +statetokens
    +statetokens
    --
    +get_tokens_unprocessed(text, context)
  }

  class ProfilingRegexLexerMeta {
    +rex
    +rex: regex
    +compiled
    +info
    +t0
    +res
    +t1
    --
    -_process_regex(regex, rflags, state)
    +match_func(pos, endpos)
  }

  class ProfilingRegexLexer {
    +rawdata
    +data
    +sum_total
    --
    +get_tokens_unprocessed(text, stack)
  }

  class Filter {
    -__init__()
    +filter(lexer, stream)
  }

  class FunctionFilter {
    +function: NoneType
    --
    -__init__()
    +filter(lexer, stream)
  }

}

package "venv2.lib.python3.12.site-packages.pygments.filters" {
  class CodeTagFilter {
    +tags
    +regex
    --
    -__init__()
    +filter(lexer, stream)
  }

  class SymbolFilter {
    +latex_symbols
    +isabelle_symbols
    +lang_map
    +lang
    --
    -__init__()
    +filter(lexer, stream)
  }

  class KeywordCaseFilter {
    +case
    --
    -__init__()
    +filter(lexer, stream)
  }

  class NameHighlightFilter {
    +tokentype
    --
    -__init__()
    +filter(lexer, stream)
  }

  class ErrorToken {
  }

  class RaiseOnErrorTokenFilter {
    -__init__()
    +filter(lexer, stream)
  }

  class VisibleWhitespaceFilter {
    +opt
    +tabsize
    +spaces
    +tabs
    +newlines
    +regex
    +value
    +value
    +value
    --
    -__init__()
    +filter(lexer, stream)
    +replacefunc()
  }

  class GobbleFilter {
    +n
    +left: n
    +parts
    +value
    --
    -__init__()
    +gobble(value, left)
    +filter(lexer, stream)
  }

  class TokenMergeFilter {
    +current_type: NoneType
    +current_value: NoneType
    +current_type: ttype
    +current_value: value
    --
    -__init__()
    +filter(lexer, stream)
  }

}

package "venv2.lib.python3.12.site-packages.pygments.lexers" {
  class SoongLexer {
    +name: str
    +version_added: str
    +url: str
    +aliases
    +filenames
    +tokens
  }

  class PikeLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class NesCLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class ClayLexer {
    +name: str
    +filenames
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class ECLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class ValaLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class CudaLexer {
    +name: str
    +filenames
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +function_qualifiers
    +variable_qualifiers
    +vector_types
    +variables
    +functions
    +execution_confs
    +token
    +token
    +token
    +token
    +token
    +token
    --
    +get_tokens_unprocessed(text, stack)
  }

  class SwigLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +priority: float
    +tokens
    +swig_directives
    +rv: int
    +matches
    +rv: float
    +rv: float
    --
    +analyse_text()
  }

  class MqlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class ArduinoLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +structure
    +operators
    +variables
    +functions
    +suppress_highlight
    --
    +get_tokens_unprocessed(text, stack)
  }

  class CharmciLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +mimetypes
    +tokens
  }

  class OmgIdlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +scoped_name: str
    +tokens
  }

  class PromelaLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class AmplLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class GLShaderLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class HLSLShaderLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class PostScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +delimiter: str
    +delimiter_end
    +valid_name_chars
    +valid_name
    +tokens
  }

  class AsymptoteLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +token
    +token
    --
    +get_tokens_unprocessed(text)
  }

  class GnuplotLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class PovrayLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class VerilogLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class SystemVerilogLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class VhdlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class ECLLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class FutharkLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +num_types
    +other_types
    +reserved
    +ascii
    +num_postfix
    +identifier_re: str
    +tokens
  }

  class AdaLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class VCTreeStatusLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class PyPyLogLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class MIMELexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +field
    +pos
    +body
    +pos_body_start
    +entire_body
    +pos_body_start
    +entire_body
    +bdry_pattern
    +bdry_matcher
    +m
    +pos_part_start
    +pos_iter_start
    +lpos_end
    +pos_part_start: pos_body_start
    +pos_iter_start: int
    +lpos_start
    +lpos_end
    +part
    +pos_part_start
    +lpos_start
    +cte
    +lexer
    +prefix_len
    +boundary
    +boundary
    +attention_headers
    +tokens
    --
    -__init__()
    +get_header_tokens(match)
    +get_body_tokens(match)
    +get_bodypart_tokens(text)
    +store_content_type(match)
    +get_content_type_subtokens(match)
    +store_content_transfer_encoding(match)
  }

  class CapnProtoLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +version_added: str
    +tokens
  }

  class NimrodLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +newWords
    +new
    +new
    +keywords
    +keywordsPseudo
    +opWords
    +types
    +tokens
    --
    +underscorize()
  }

  class RebolLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +escape_re: str
    +word
    +tokens
    --
    +word_callback(match)
    +analyse_text()
  }

  class RedLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +escape_re: str
    +word
    +tokens
    --
    +word_callback(match)
  }

  class GeneratedObjectiveCVariant {
    +tokens
    +token
    --
    +analyse_text()
    +get_tokens_unprocessed(text, stack)
  }

  class ObjectiveCLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +priority: float
  }

  class ObjectiveCppLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +priority: float
  }

  class LogosLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +priority: float
    +tokens
    --
    +analyse_text()
  }

  class SwiftLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
    +token
    --
    +get_tokens_unprocessed(text)
  }

  class SASLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +builtins_macros
    +builtins_conditionals
    +builtins_statements
    +builtins_sql
    +builtins_functions
    +tokens
  }

  class PhixLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +preproc
    +types
    +keywords
    +routines
    +constants
    +tokens
  }

  class GraphQLLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class UsdLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class CrystalLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +start
    +heredocstack
    +outermost
    +lines
    +check
    +check
    +states
    +tokens
    --
    +heredoc_callback(match, ctx)
    +gen_crystalstrings_rules()
  }

  class VerifpalLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class Opener {
    +version: str
  }

  class LdifLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class LdaprcLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class BoogieLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class SilverLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class ErlangLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +builtins
    +operators: str
    +word_operators
    +atom_re: str
    +variable_re: str
    +esc_char_re: str
    +esc_octal_re: str
    +esc_hex_re: str
    +esc_ctrl_re: str
    +escape_re
    +macro_re
    +base_re: str
    +tokens
  }

  class ErlangShellLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +erlexer
    +curcode: str
    +insertions
    +line
    +m
    +end
    +curcode: str
    +insertions
    --
    +get_tokens_unprocessed(text)
  }

  class ElixirLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +KEYWORD
    +KEYWORD_OPERATOR
    +BUILTIN
    +BUILTIN_DECLARATION
    +BUILTIN_NAMESPACE
    +CONSTANT
    +PSEUDO_VAR
    +OPERATORS3
    +OPERATORS2
    +OPERATORS1
    +PUNCTUATION
    +terminators
    +triquotes
    +token
    +states
    +op3_re
    +op2_re
    +op1_re
    +ops_re
    +punctuation_re
    +alnum: str
    +name_re
    +modname_re
    +complex_name_re
    +special_atom_re: str
    +long_hex_char_re: str
    +hex_char_re: str
    +escape_char_re: str
    +tokens
    --
    +get_tokens_unprocessed(text)
    +gen_elixir_sigil_rules()
  }

  class ElixirConsoleLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +exlexer
    +curcode: str
    +in_error: bool
    +insertions
    +line
    +in_error: bool
    +m
    +in_error: bool
    +end
    +curcode: str
    +insertions
    +token
    --
    +get_tokens_unprocessed(text)
  }

  class apdlexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +elafunb
    +elafunc
    +elafund
    +elafune
    +elafunf
    +elafung
    +elafunh
    +special
    +elements
    +tokens
  }

  class SlashLanguageLexer {
    +tokens
    --
    +move_state()
    +right_angle_bracket(match, ctx)
  }

  class SlashLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class BoaLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +reserved
    +keywords
    +classes
    +operators
    +string_sep
    +built_in_functions
    +tokens
  }

  class ElpiLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +lcase_re: str
    +ucase_re: str
    +digit_re: str
    +schar2_re: str
    +schar_re
    +idchar_re
    +idcharstarns_re
    +symbchar_re
    +constant_re
    +symbol_re: str
    +escape_re
    +const_sym_re
    +tokens
  }

  class MaximaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +keywords
    +constants
    +operators
    +operator_words
    +tokens
    +strength: float
    --
    +analyse_text()
  }

  class ChapelLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +version_added: str
    +known_types
    +type_modifiers_par
    +type_modifiers_mem
    +type_modifiers
    +declarations
    +constants
    +other_keywords
    +tokens
  }

  class IniLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    +npos
    --
    +analyse_text()
  }

  class DesktopLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class SystemdLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class RegeditLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class PropertiesLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class KconfigLexer {
    +name: str
    +aliases
    +version_added: str
    +filenames
    +mimetypes
    +url: str
    +flags: int
    +tokens
    --
    +call_indent()
    +do_indent()
  }

  class Cfengine3Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class ApacheConfLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class SquidConfLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +keywords
    +opts
    +actions
    +actions_stats
    +actions_log
    +acls
    +ipv4_group: str
    +ipv4
    +ipv6_group: str
    +ipv6
    +bare_ip
    +ip
    +tokens
  }

  class NginxConfLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class LighttpdConfLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class DockerLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class TerraformLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +classes
    +classes_re
    +types
    +numeric_functions
    +string_functions
    +collection_functions
    +encoding_functions
    +filesystem_functions
    +date_time_functions
    +hash_crypto_functions
    +ip_network_functions
    +type_conversion_functions
    +builtins
    +builtins_re
    +start
    +hdname
    +tolerant: bool
    +lines
    +check
    +check
    +tokens
    --
    +heredoc_callback(match, ctx)
  }

  class TermcapLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class TerminfoLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class PkgConfigLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class PacmanConfLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class AugeasLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class TOMLLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class NestedTextLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class SingularityLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class UnixConfigLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class CleanLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +keywords
    +modulewords
    +lowerId: str
    +upperId: str
    +funnyId: str
    +scoreUpperId
    +scoreLowerId
    +moduleId: str
    +classId
    +tokens
  }

  class MojoLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +uni_name
    +tokens
    --
    +innerstring_rules()
    +fstring_rules()
    +analyse_text()
  }

  class JSLTLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class UL4Lexer {
    +flags
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class HTMLUL4Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class XMLUL4Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class CSSUL4Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class JavascriptUL4Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class PythonUL4Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class NumbaIRLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +identifier: str
    +fun_or_var: str
    +tokens
  }

  class QVToLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class TableGenLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class LimboLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class TlbLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class NixLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +builtins
    +operators
    +punctuations
    +tokens
    +rv: float
    --
    +analyse_text()
  }

  class WrenLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
  }

  class ParaSailLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class SmithyLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +version_added: str
    +unquoted: str
    +identifier: str
    +simple_shapes
    +aggregate_shapes
    +tokens
  }

  class GraphvizLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class RConsoleLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +slexer
    +current_code_block: str
    +insertions
    +line
    +current_code_block: str
    +insertions
    --
    +get_tokens_unprocessed(text)
  }

  class SLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +valid_name: str
    +tokens
    --
    +analyse_text()
  }

  class RdLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class SourcePawnLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    +SM_TYPES
    +token
    +token
    --
    -__init__()
    +get_tokens_unprocessed(text)
  }

  class PawnLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class DnsZoneLexer {
    +flags
    +name: str
    +aliases
    +filenames
    +url: str
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class MapleLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +keywords
    +builtins
    +orig_end
    +tokens
    --
    +delayed_callback(match, ctx)
    +analyse_text()
  }

  class IDLLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class IoLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class AMDGPULexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class ProtoBufLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class ThriftLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class ZeekLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class PuppetLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class RslLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class MscgenLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class VGLLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
  }

  class AlloyLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +iden_rex: str
    +string_rex: str
    +text_tuple
    +tokens
  }

  class PanLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class CrmshLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +elem
    +sub
    +acl
    +bin_rel
    +un_ops
    +date_exp
    +acl_mod: str
    +bin_ops: str
    +val_qual: str
    +rsc_role_action: str
    +tokens
  }

  class FlatlineLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +special_forms
    +builtins
    +valid_name: str
    +tokens
  }

  class SnowballLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +s
    +text
    +string
    +escape
    +pos: int
    +do_string: do_string_first
    +match
    +pos
    +match
    +pos
    +do_string: bool
    +tokens
    --
    -__init__()
    -_reset_stringescapes()
    -_string()
    +callback(match, ctx)
    -_stringescapes(match, ctx)
    +get_tokens_unprocessed(text, context)
  }

  class SuperColliderLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class Comal80Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
  }

  class SolidityLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +datatype: str
    +tokens
  }

  class HareLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class SchemeLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +valid_name: str
    +token_end: str
    +number_rules
    +digit: str
    +radix: str
    +digit: str
    +radix: str
    +digit: str
    +radix: str
    +digit: str
    +radix: str
    +prefix
    +ureal
    +decimal: str
    +ureal
    +naninf: str
    +real
    +complex_
    +num
    +token_type
    +token_type
    +tokens
    --
    +get_tokens_unprocessed(text)
    +decimal_cb(match)
  }

  class CommonLispLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +nonmacro: str
    +constituent
    +terminated: str
    +symbol
    +stack
    +tokens
    --
    -__init__()
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class HyLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +special_forms
    +declarations
    +hy_builtins
    +hy_core
    +builtins
    +valid_name: str
    +tokens
    --
    -_multi_escape()
    +analyse_text()
  }

  class RacketLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class NewLispLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +builtins
    +valid_name: str
    +tokens
  }

  class EmacsLispLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +nonmacro: str
    +constituent
    +terminated: str
    +symbol
    +macros
    +special_forms
    +builtin_function
    +builtin_function_highlighted
    +lambda_list_keywords
    +error_keywords
    +stack
    +tokens
    --
    +get_tokens_unprocessed(text)
  }

  class ShenLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +DECLARATIONS
    +SPECIAL_FORMS
    +BUILTINS
    +BUILTINS_ANYWHERE
    +MAPPINGS
    +valid_symbol_chars: str
    +valid_name
    +symbol_name
    +variable
    +tokens
    +tokens
    +tokens
    +tokens
    +opening_paren: bool
    +declaration: value
    +opening_paren
    +opening_paren: bool
    +token
    +token
    +opening_paren
    +prev_was_colon: bool
    +token
    +token
    +prev_was_colon
    +token
    +token
    +token
    +token
    --
    +get_tokens_unprocessed(text)
    -_relevant(token)
    -_process_declarations(tokens)
    -_process_symbols(tokens)
    -_process_declaration(declaration, tokens)
    -_process_signature(tokens)
  }

  class CPSALexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +valid_name: str
    +tokens
  }

  class XtlangLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +common_keywords
    +scheme_keywords
    +xtlang_bind_keywords
    +xtlang_keywords
    +common_functions
    +scheme_functions
    +xtlang_functions
    +valid_scheme_name: str
    +valid_xtlang_name: str
    +valid_xtlang_type: str
    +tokens
  }

  class FennelLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +special_forms
    +declarations
    +builtins
    +valid_name: str
    +tokens
  }

  class JanetLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +special_forms
    +builtin_macros
    +builtin_functions
    +builtin_variables
    +constants
    +valid_name
    +tokens
  }

  class JLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +validName: str
    +tokens
  }

  class BlueprintLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class MoselLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class SmalltalkLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class NewspeakLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class SpiceLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class MonteLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class DuelLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class XQueryLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +xquery_parse_state
    +ncnamestartchar: str
    +ncnamechar
    +ncname
    +pitarget_namestartchar: str
    +pitarget_namechar
    +pitarget
    +prefixedname
    +unprefixedname: ncname
    +qname
    +entityref: str
    +charref: str
    +stringdouble
    +stringsingle
    +elementcontentchar: str
    +quotattrcontentchar: str
    +aposattrcontentchar: str
    +flags
    +next_state
    +cur_state
    +tokens
    --
    +punctuation_root_callback(match, ctx)
    +operator_root_callback(match, ctx)
    +popstate_tag_callback(match, ctx)
    +popstate_xmlcomment_callback(match, ctx)
    +popstate_kindtest_callback(match, ctx)
    +popstate_callback(match, ctx)
    +pushstate_element_content_starttag_callback(match, ctx)
    +pushstate_cdata_section_callback(match, ctx)
    +pushstate_starttag_callback(match, ctx)
    +pushstate_operator_order_callback(match, ctx)
    +pushstate_operator_map_callback(match, ctx)
    +pushstate_operator_root_validate(match, ctx)
    +pushstate_operator_root_validate_withmode(match, ctx)
    +pushstate_operator_processing_instruction_callback(match, ctx)
    +pushstate_element_content_processing_instruction_callback(match, ctx)
    +pushstate_element_content_cdata_section_callback(match, ctx)
    +pushstate_operator_cdata_section_callback(match, ctx)
    +pushstate_element_content_xmlcomment_callback(match, ctx)
    +pushstate_operator_xmlcomment_callback(match, ctx)
    +pushstate_kindtest_callback(match, ctx)
    +pushstate_operator_kindtestforpi_callback(match, ctx)
    +pushstate_operator_kindtest_callback(match, ctx)
    +pushstate_occurrenceindicator_kindtest_callback(match, ctx)
    +pushstate_operator_starttag_callback(match, ctx)
    +pushstate_operator_root_callback(match, ctx)
    +pushstate_operator_root_construct_callback(match, ctx)
    +pushstate_root_callback(match, ctx)
    +pushstate_operator_attribute_callback(match, ctx)
  }

  class QmlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class CirruLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class SlimLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class TealLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +keywords
    +identifier: str
    +newline: str
    +tokens
  }

  class CFamilyLexer {
    +tokens
    +stdlib_types
    +c99_types
    +linux_types
    +c11_atomic_types
    +token
    +token
    +token
    +token
    --
    -__init__()
    +get_tokens_unprocessed(text, stack)
  }

  class CLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +priority: float
    +tokens
    --
    +analyse_text()
  }

  class CppLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +priority: float
    +tokens
    --
    +analyse_text()
  }

  class PerlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class Perl6Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +PERL6_IDENTIFIER_RANGE: str
    +PERL6_KEYWORDS
    +PERL6_BUILTINS
    +PERL6_BUILTIN_CLASSES
    +PERL6_OPERATORS
    +PERL6_BRACKETS
    +groups
    +opening_chars
    +n_chars
    +adverbs
    +closer
    +text
    +end_pos
    +closing_chars
    +nesting_level: int
    +search_pos
    +next_open_pos
    +next_close_pos
    +next_close_pos
    +nesting_level: int
    +search_pos: next_open_pos
    +search_pos: next_close_pos
    +end_pos: next_close_pos
    +end_pos
    +heredoc_terminator
    +end_heredoc
    +end_pos
    +stack
    +stack
    +tokens
    +in_pod: bool
    +stripped_lines
    +in_pod: bool
    +in_pod: bool
    +lines
    +lines
    +text
    +saw_perl_decl: bool
    +rating: bool
    +rating: float
    +saw_perl_decl: bool
    +line
    +class_decl
    +rating: float
    --
    -_build_word_match(boundary_regex_fragment, prefix, suffix)
    +brackets_callback()
    +callback(match, context)
    +opening_brace_callback(match, context)
    +closing_brace_callback(match, context)
    +embedded_perl6_callback(match, context)
    +analyse_text()
    +strip_pod()
    -__init__()
  }

  class RobotFrameworkLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +row_tokenizer
    +var_tokenizer
    +index: int
    --
    -__init__()
    +get_tokens_unprocessed(text)
  }

  class VariableTokenizer {
    +var
    +before
    --
    +tokenize(string, token)
    -_tokenize(var, string, orig_token)
  }

  class RowTokenizer {
    +testcases
    +settings
    +variables
    +keywords
    +commented: bool
    +heading: bool
    +commented: bool
    +heading: bool
    +name
    --
    -__init__()
    +tokenize(row)
    -_start_table(header)
    -_tokenize(value, index, commented, separator, heading)
  }

  class RowSplitter {
    +splitter
    --
    +split(row)
    -_split_from_spaces(row)
    -_split_from_pipes(row)
  }

  class Tokenizer {
    +values_and_tokens
    +values_and_tokens
    +index
    +value
    +var
    --
    -__init__()
    +tokenize(value)
    -_tokenize(value, index)
    -_is_assign(value)
  }

  class Comment {
  }

  class Setting {
    +normalized
    --
    -__init__(template_setter)
    -_tokenize(value, index)
  }

  class ImportSetting {
  }

  class TestCaseSetting {
    +type
    --
    -_tokenize(value, index)
  }

  class KeywordSetting {
  }

  class Variable {
    -_tokenize(value, index)
  }

  class KeywordCall {
    -__init__(support_assign)
    -_tokenize(value, index)
  }

  class GherkinTokenizer {
    +match
    +end
    --
    +tokenize(value, token)
  }

  class TemplatedKeywordCall {
  }

  class ForLoop {
    +token
    --
    -__init__()
    -_tokenize(value, index)
  }

  class _Table {
    -__init__(prev_tokenizer)
    +tokenize(value, index)
    -_continues(value, index)
    -_is_empty(value)
    -_tokenize(value, index)
    +end_row()
  }

  class UnknownTable {
    -_continues(value, index)
  }

  class VariableTable {
  }

  class SettingTable {
    -__init__(template_setter, prev_tokenizer)
    -_tokenize(value, index)
    +end_row()
  }

  class TestCaseTable {
    -_tokenizer_class()
    -_continues(value, index)
    -_tokenize(value, index)
    -_is_setting(value)
    -_is_template(value)
    -_is_for_loop(value)
    +set_test_template(template)
    +set_default_template(template)
    -_is_template_set(template)
  }

  class KeywordTable {
    -_is_template(value)
  }

  class VariableSplitter {
    +max_end_index
    +start_index
    +index
    +escaped: bool
    +escaped
    --
    -__init__(string, identifiers)
    +get_replaced_base(variables)
    -_finalize()
    -_has_list_or_dict_variable_index()
    -_split(string)
    -_scanning_list_variable_index()
    -_find_variable(string)
    -_find_start_index(string, start, end)
    -_start_index_is_ok(string, index)
    -_is_escaped(string, index)
    -_variable_state(char, index)
    -_is_list_or_dict_variable()
    -_internal_variable_start_state(char, index)
    -_waiting_list_variable_index_state(char, index)
    -_list_variable_index_state(char, index)
  }

  class IrcLogsLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +timestamp: str
    +tokens
  }

  class GettextLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class HttpLexer {
    +name: str
    +aliases
    +url: str
    +version_added: str
    +flags
    +content_type
    +content_type
    +content_type
    +content
    +offset
    +possible_lexer_mimetypes
    +general_type
    +lexer
    +tokens
    --
    +get_tokens_unprocessed(text, stack)
    +header_callback(match)
    +continuous_header_callback(match)
    +content_callback(match)
    +analyse_text()
  }

  class TodotxtLexer {
    +name: str
    +url: str
    +aliases
    +version_added: str
    +filenames
    +mimetypes
    +CompleteTaskText: Operator
    +IncompleteTaskText: Text
    +Priority
    +Date
    +Project
    +Context: String
    +date_regex: str
    +priority_regex: str
    +project_regex: str
    +context_regex: str
    +complete_one_date_regex
    +complete_two_date_regex
    +priority_date_regex
    +tokens
  }

  class NotmuchLexer {
    +name: str
    +url: str
    +aliases
    +version_added: str
    +code
    +lexer
    +lexer
    +lexer
    +tokens
    --
    -_highlight_code(match)
    +analyse_text()
    -__init__()
  }

  class KernelLogLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class JsonnetLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class CplintLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class JsxLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class TsxLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class PrologLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class LogtalkLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class RNCCompactLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class WoWTocLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
    +result: int
    +interface_pattern
    +match
    +casefolded
    --
    +analyse_text()
  }

  class GAPLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
    +score: float
    --
    +analyse_text()
  }

  class GAPConsoleLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +gaplexer
    +start: int
    +curcode: str
    +insertions
    +output: bool
    +error: bool
    +output: bool
    +error: bool
    +curcode: str
    +insertions
    +error: bool
    +output: bool
    --
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class MathematicaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +operators
    +punctuation
    +tokens
    --
    -_multi_escape()
  }

  class MuPADLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class BCLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class TypoScriptCssDataLexer {
    +name: str
    +aliases
    +url: str
    +version_added: str
    +tokens
  }

  class TypoScriptHtmlDataLexer {
    +name: str
    +aliases
    +url: str
    +version_added: str
    +tokens
  }

  class TypoScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class AutohotkeyLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class AutoItLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +functions
    +macros
    +tokens
  }

  class SieveLexer {
    +name: str
    +filenames
    +aliases
    +url: str
    +version_added: str
    +tokens
  }

  class BrainfuckLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +plus_minus_count: int
    +greater_less_count: int
    +range_to_check
    +result: int
    --
    +analyse_text()
  }

  class BefungeLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class CAmkESLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class CapDLLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class RedcodeLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +opcodes
    +modifiers
    +tokens
  }

  class AheuiLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class CypherLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
  }

  class HtmlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class DtdLexer {
    +flags
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class XmlLexer {
    +flags
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class XsltLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +EXTRA_KEYWORDS
    +m
    --
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class HamlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class ScamlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class PugLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class UrlEncodedLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class VueLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class BashLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class SlurmBashLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +EXTRA_KEYWORDS
    --
    +get_tokens_unprocessed(text)
  }

  class ShellSessionBaseLexer {
    +innerlexer
    +pos: int
    +curcode: str
    +insertions
    +backslash_continuation: bool
    +line
    +venv_match
    +venv
    +venv_whitespace
    +line
    +m
    +pos
    +backslash_continuation
    +backslash_continuation
    +toks
    +insertions
    +curcode: str
    --
    +get_tokens_unprocessed(text)
  }

  class BashSessionLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
  }

  class BatchLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +rest
    +rest_of_line
    +rest_of_line_compound
    +set_space
    +suffix: str
    +suffix: str
    +suffix
    +state
    +op: str
    +state
    +state
    +state
    +stoken_compound
    +tokens
    --
    -_make_begin_state(_core_token, _core_token_compound, _keyword_terminator, _nl, _punct, _string, _space, _start_label, _stoken, _token_terminator, _variable, _ws)
    -_make_follow_state(_label, _label_compound, _nl, _space, _start_label, _token, _token_compound, _ws)
    -_make_arithmetic_state(_nl, _punct, _string, _variable, _ws, _nlws)
    -_make_call_state(_label, _label_compound)
    -_make_label_state(_label, _label_compound, _nl, _punct, _string, _variable)
    -_make_redirect_state(_core_token_compound, _nl, _punct, _stoken, _string, _space, _variable, _nlws)
  }

  class MSDOSSessionLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
  }

  class TcshLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class TcshSessionLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
  }

  class PowerShellLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +keywords
    +operators
    +verbs
    +aliases_
    +commenthelp
    +tokens
  }

  class PowerShellSessionLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
  }

  class FishShellLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class ExeclineLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class LuaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    -__init__()
    +get_tokens_unprocessed(text)
  }

  class LuauLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
    +split_value
    +complete_value
    +new_index: index
    +potential_string
    --
    -__init__()
    +get_tokens_unprocessed(text)
  }

  class MoonScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +token: Operator
    --
    +get_tokens_unprocessed(text)
  }

  class ChaiscriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class LSLLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +lsl_keywords: str
    +lsl_types: str
    +lsl_states: str
    +lsl_events: str
    +lsl_functions_builtin: str
    +lsl_constants_float: str
    +lsl_constants_integer: str
    +lsl_constants_integer_boolean: str
    +lsl_constants_rotation: str
    +lsl_constants_string: str
    +lsl_constants_vector: str
    +lsl_invalid_broken: str
    +lsl_invalid_deprecated: str
    +lsl_invalid_illegal: str
    +lsl_invalid_unimplemented: str
    +lsl_reserved_godmode: str
    +lsl_reserved_log: str
    +lsl_operators: str
    +tokens
  }

  class AppleScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +Identifiers: str
    +Literals
    +Classes
    +BuiltIn
    +HandlerParams
    +Commands
    +References
    +Operators
    +Control
    +Declarations
    +Reserved
    +StudioClasses
    +StudioEvents
    +StudioCommands
    +StudioProperties
    +tokens
  }

  class RexxLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    +PATTERNS_AND_WEIGHTS
    +lowerText
    +result
    --
    -_c()
    +analyse_text()
  }

  class MOOCodeLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class HybrisLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class EasytrieveLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags: int
    +tokens
    +result: float
    +lines
    +hasEndProc: bool
    +hasHeaderComment: bool
    +hasFile: bool
    +hasJob: bool
    +hasProc: bool
    +hasParm: bool
    +hasReport: bool
    +hasHeaderComment: bool
    +result: float
    +words
    +firstWord
    +hasParm: bool
    +hasFile: bool
    +hasJob: bool
    +hasProc: bool
    +hasEndProc: bool
    +hasReport: bool
    --
    +analyse_text()
    +isCommentLine()
    +isEmptyLine()
  }

  class JclLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +result: float
    +lines
    +result: float
    --
    +analyse_text()
  }

  class MiniScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class GSQLLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
  }

  class GDScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +score: float
    --
    +innerstring_rules()
    +analyse_text()
  }

  class AmbientTalkLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +flags
    +builtin
    +tokens
  }

  class ArrowLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class ComponentPascalLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class FloScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
    --
    +innerstring_rules()
  }

  class ResourceLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class _automodule {
    +info
    +cls
    --
    -__getattr__(name)
  }

  class DLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class CrocLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class MiniDLexer {
    +name: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
  }

  class RubyLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +start
    +heredocstack
    +outermost
    +lines
    +check
    +check
    +nctx
    +nctx
    +states
    +tokens
    --
    +heredoc_callback(match, ctx)
    +gen_rubystrings_rules()
    +intp_regex_callback(match, ctx)
    +intp_string_callback(match, ctx)
    +analyse_text()
  }

  class RubyConsoleLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +rblexer
    +curcode: str
    +insertions
    +line
    +m
    +end
    +curcode: str
    +insertions
    --
    +get_tokens_unprocessed(text)
  }

  class FancyLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class PonyLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class MatlabLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    +first_non_comment
    --
    +analyse_text()
  }

  class MatlabSessionLexer {
    +name: str
    +aliases
    +url: str
    +version_added: str
    +mlexer
    +curcode: str
    +insertions
    +continuation: bool
    +line
    +idx
    +token
    +line_start
    +curcode: str
    +insertions
    +continuation: bool
    +continuation: bool
    --
    +get_tokens_unprocessed(text)
  }

  class OctaveLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +builtin_kw
    +command_kw
    +function_kw
    +loadable_kw
    +mapping_kw
    +builtin_consts
    +tokens
    --
    +analyse_text()
  }

  class ScilabLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +score: float
    --
    +analyse_text()
  }

  class FelixLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +preproc
    +keywords
    +keyword_directives
    +keyword_declarations
    +keyword_types
    +keyword_constants
    +operator_words
    +name_builtins
    +name_pseudo
    +decimal_suffixes: str
    +tokens
  }

  class TNTLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +cur
    +LOGIC
    +OPERATORS
    +VARIABLES
    +PRIMES
    +NEGATORS
    +QUANTIFIERS
    +NUMBERS
    +WHITESPACE
    +RULES
    +LINENOS
    +COMMENT
    +end: start
    +end
    +end
    +end
    +start
    +start
    +end
    +start
    +start
    +start
    +start
    +start
    +match
    +groups
    +end: start
    +start: end
    +match
    +end: start
    +end
    +end
    +start
    +end
    +orig
    +start
    +end
    +start
    +end
    +match
    +start
    +end
    +start
    +end
    +orig
    +start
    +end
    +start: end
    +orig
    +start
    +end
    +start
    +end
    +orig
    +start
    +end
    +start
    +end
    +start
    +end
    +orig
    +start
    +end
    +start
    +end
    +start
    +end
    --
    -__init__()
    +whitespace(start, text, required)
    +variable(start, text)
    +term(start, text)
    +formula(start, text)
    +rule(start, text)
    +lineno(start, text)
    +error_till_line_end(start, text)
    +get_tokens_unprocessed(text)
  }

  class FreeFemLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +operators
    +types
    +fespaces
    +preprocessor
    +keywords
    +functions
    +parameters
    +deprecated
    +suppress_highlight
    --
    +get_tokens_unprocessed(text, stack)
  }

  class ThingsDBLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class TeraTermLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class RagelLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class RagelEmbeddedLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class RagelRubyLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class RagelCLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class RagelDLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class RagelCppLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class RagelObjectiveCLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class RagelJavaLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class AntlrLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class AntlrCppLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class AntlrObjectiveCLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class AntlrCSharpLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class AntlrPythonLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class AntlrJavaLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class AntlrRubyLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class AntlrPerlLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class AntlrActionScriptLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class TreetopBaseLexer {
    +tokens
  }

  class TreetopLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class EbnfLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class JMESPathLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +version_added: str
    +tokens
  }

  class CarbonLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +flags
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class CoqLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags: int
    +keywords1
    +keywords2
    +keywords3
    +keywords4
    +keywords5
    +keywords6
    +keyopts
    +operators: str
    +prefix_syms: str
    +infix_syms: str
    +tokens
    --
    +analyse_text()
  }

  class IsabelleLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keyword_minor
    +keyword_diag
    +keyword_thy
    +keyword_section
    +keyword_subsection
    +keyword_theory_decl
    +keyword_theory_script
    +keyword_theory_goal
    +keyword_qed
    +keyword_abandon_proof
    +keyword_proof_goal
    +keyword_proof_block
    +keyword_proof_chain
    +keyword_proof_decl
    +keyword_proof_asm
    +keyword_proof_asm_goal
    +keyword_proof_script
    +operators
    +proof_operators
    +tokens
  }

  class Inform6Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
    +objectloop_queue
    +objectloop_token_count
    +previous_token: NoneType
    +objectloop_queue
    +objectloop_token_count: int
    +objectloop_token_count
    +previous_token: token
    +result: int
    --
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class Inform7Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
    +token_variants
    +level
    --
    -__init__()
  }

  class Inform6TemplateLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    --
    +get_tokens_unprocessed(text, stack)
  }

  class Tads3Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +verbatim
    +char
    +token
    +escaped_quotes
    +prefix
    +tag_state_name
    +state
    +char
    +quantifier
    +state_name
    +token
    +escaped_quotes
    +token
    +host_char
    +host_quantifier
    +host_token
    +escaped_quotes
    +tokens
    +pp
    +if_false_level: int
    +if_false_level: int
    +if_false_level: int
    +token: Comment
    +result: int
    --
    -_make_string_state(double, verbatim, _escape)
    -_make_tag_state(double, _escape)
    -_make_attribute_value_state(host_triple, host_double, _escape)
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class NCLLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class VyperLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class LilyPondLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +token
    +token
    +tokens
    --
    +get_tokens_unprocessed(text)
  }

  class BBCodeLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class MoinWikiLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class RstLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +lexer: NoneType
    +lexer
    +indention
    +indention_size
    +code
    +ins
    +codelines
    +code: str
    +closers: str
    +unicode_delimiters: str
    +end_string_suffix
    +tokens
    +p1
    +p2
    --
    -_handle_sourcecode(match)
    -__init__()
    +analyse_text()
  }

  class TexLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class GroffLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class MozPreprocHashLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class MozPreprocPercentLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class MozPreprocXulLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MozPreprocJavascriptLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MozPreprocCssLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MarkdownLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +lexer: NoneType
    +lexer
    +code
    +tokens
    --
    -_handle_codeblock(match)
    -__init__()
  }

  class OrgLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    -_inline(end)
  }

  class TiddlyWiki5Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +lexer: NoneType
    +lexer
    +code
    +lexer: NoneType
    +lexer
    +code
    +tokens
    --
    -_handle_codeblock(match)
    -_handle_cssblock(match)
    -__init__()
  }

  class WikitextLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +attr_content
    +start: int
    +index: int
    +index
    +start
    +attr
    +lexer: NoneType
    +content
    +lang_match
    +lang
    +lexer
    +attr_content
    +start: int
    +index: int
    +index
    +start
    +attr
    +content
    +lang_match
    +lang
    +title_char: str
    +nbsp_char: str
    +link_address: str
    +link_char_class: str
    +double_slashes_i
    +double_slashes
    +protocols
    +non_relative_protocols
    +html_tags
    +parser_tags
    +variant_langs
    +magic_vars_i
    +magic_vars
    +parser_functions_i
    +parser_functions
    +tokens
    --
    +nowiki_tag_rules()
    +plaintext_tag_rules()
    +delegate_tag_rules(lexer)
    +text_rules()
    +handle_syntaxhighlight(match, ctx)
    +handle_score(match, ctx)
  }

  class PddlLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class IgorLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +flowControl
    +types
    +keywords
    +operations
    +functions
    +tokens
  }

  class SMLLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +alphanumid_reserved
    +symbolicid_reserved
    +nonid_reserved
    +alphanumid_re: str
    +symbolicid_re: str
    +token: Error
    +token
    +token: Error
    +token: Error
    +token: Name
    +str
    +token
    +token: Punctuation
    +token: Name
    +tokens
    --
    +stringy()
    +long_id_callback(match)
    +end_id_callback(match)
    +id_callback(match)
  }

  class OcamlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +keyopts
    +operators: str
    +word_operators
    +prefix_syms: str
    +infix_syms: str
    +primitives
    +tokens
  }

  class OpaLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +keywords
    +ident_re: str
    +op_re: str
    +punc_re: str
    +tokens
  }

  class ReasonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +keyopts
    +operators: str
    +word_operators
    +prefix_syms: str
    +infix_syms: str
    +primitives
    +tokens
  }

  class FStarLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +decl_keywords
    +assume_keywords
    +keyopts
    +operators: str
    +prefix_syms: str
    +infix_syms: str
    +primitives
    +tokens
  }

  class SaviLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class BQNLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class TalLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +instructions
    +tokens
    --
    +analyse_text()
  }

  class TlsLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class ErbLexer {
    +name: str
    +url: str
    +aliases
    +mimetypes
    +version_added: str
    +tokens
    +state: int
    +idx: int
    +val
    +state: int
    +tag
    +state: int
    +val
    +state: int
    +data
    +r_idx: int
    +state: int
    +state: int
    +r_idx: int
    +state: int
    +tag
    +state: int
    --
    -__init__()
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class SmartyLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    +rv: float
    --
    +analyse_text()
  }

  class VelocityLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +identifier: str
    +tokens
    +rv: float
    --
    +analyse_text()
  }

  class VelocityHtmlLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
  }

  class VelocityXmlLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class DjangoLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +rv: float
    --
    +analyse_text()
  }

  class MyghtyLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class MyghtyHtmlLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MyghtyXmlLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MyghtyJavascriptLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MyghtyCssLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MasonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +result: float
    +result: float
    +result: float
    --
    +analyse_text()
  }

  class MakoLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class MakoHtmlLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MakoXmlLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MakoJavascriptLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class MakoCssLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class CheetahPythonLexer {
    +pylexer
    +type_
    --
    +get_tokens_unprocessed(text)
  }

  class CheetahLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class CheetahHtmlLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class CheetahXmlLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class CheetahJavascriptLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class GenshiTextLexer {
    +name: str
    +url: str
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class GenshiMarkupLexer {
    +flags
    +tokens
  }

  class HtmlGenshiLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv: float
    --
    -__init__()
    +analyse_text()
  }

  class GenshiLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv: float
    --
    -__init__()
    +analyse_text()
  }

  class JavascriptGenshiLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class CssGenshiLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class RhtmlLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class XmlErbLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class CssErbLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class JavascriptErbLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class HtmlPhpLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class XmlPhpLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class CssPhpLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class JavascriptPhpLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class HtmlSmartyLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class XmlSmartyLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class CssSmartyLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class JavascriptSmartyLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class HtmlDjangoLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class XmlDjangoLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class CssDjangoLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class JavascriptDjangoLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    --
    -__init__()
    +analyse_text()
  }

  class JspRootLexer {
    +tokens
  }

  class JspLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class EvoqueLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class EvoqueHtmlLexer {
    +name: str
    +aliases
    +alias_filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class EvoqueXmlLexer {
    +name: str
    +aliases
    +alias_filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class ColdfusionLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class ColdfusionMarkupLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +tokens
  }

  class ColdfusionHtmlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class ColdfusionCFCLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class SspLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +rv: float
    --
    -__init__()
    +analyse_text()
  }

  class TeaTemplateRootLexer {
    +tokens
  }

  class TeaTemplateLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class LassoHtmlLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class LassoXmlLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class LassoCssLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class LassoJavascriptLexer {
    +name: str
    +aliases
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +rv
    --
    -__init__()
    +analyse_text()
  }

  class HandlebarsLexer {
    +name: str
    +url: str
    +aliases
    +version_added: str
    +tokens
  }

  class HandlebarsHtmlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class YamlJinjaLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class LiquidLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class TwigLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class TwigHtmlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class Angular2Lexer {
    +name: str
    +url: str
    +aliases
    +version_added: str
    +tokens
  }

  class Angular2HtmlLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class SqlJinjaLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +rv: float
    --
    -__init__()
    +analyse_text()
  }

  class ForthLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class CssLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class SassLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class ScssLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class LessCssLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class GasLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +string: str
    +char: str
    +identifier
    +number: str
    +register
    +tokens
    --
    +analyse_text()
  }

  class ObjdumpLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class DObjdumpLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class CppObjdumpLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class CObjdumpLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class HsailLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +string: str
    +identifier: str
    +register_number: str
    +register
    +alignQual: str
    +widthQual: str
    +allocQual: str
    +roundingMod: str
    +datatypeMod: str
    +float: str
    +hexfloat: str
    +ieeefloat: str
    +tokens
  }

  class LlvmLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +string: str
    +identifier
    +block_label
    +tokens
  }

  class LlvmMirBodyLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class LlvmMirLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class NasmLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +priority: float
    +identifier: str
    +hexn: str
    +octn: str
    +binn: str
    +decn: str
    +floatn
    +string
    +declkw: str
    +register: str
    +wordop: str
    +type: str
    +directives: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class NasmObjdumpLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class TasmLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +identifier: str
    +hexn: str
    +octn: str
    +binn: str
    +decn: str
    +floatn
    +string
    +declkw: str
    +register: str
    +wordop: str
    +type: str
    +directives: str
    +datatype: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class Ca65Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text(text)
  }

  class Dasm16Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +INSTRUCTIONS
    +REGISTERS
    +char: str
    +identifier
    +number: str
    +binary_number: str
    +instruction
    +single_char
    +string: str
    +ident
    +klass
    +tokens
    --
    +guess_identifier(match)
  }

  class RoboconfGraphLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class RoboconfInstancesLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class PortugolLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
    +get_tokens_unprocessed(text)
  }

  class DelphiLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +TURBO_PASCAL_KEYWORDS
    +DELPHI_KEYWORDS
    +FREE_PASCAL_KEYWORDS
    +BLOCK_KEYWORDS
    +FUNCTION_MODIFIERS
    +DIRECTIVES
    +BUILTIN_TYPES
    +BUILTIN_UNITS
    +ASM_REGISTERS
    +ASM_INSTRUCTIONS
    +PORTUGOL_KEYWORDS
    +PORTUGOL_BUILTIN_TYPES
    +scanner
    +stack
    +in_function_block: bool
    +in_property_block: bool
    +was_dot: bool
    +next_token_is_function: bool
    +next_token_is_property: bool
    +collect_labels: bool
    +block_labels
    +brace_balance
    +token: Error
    +token: Whitespace
    +token
    +token
    +token
    +token: Operator
    +token: Operator
    +collect_labels: bool
    +token: Punctuation
    +next_token_is_function: bool
    +lowercase_name
    +token
    +token: Keyword
    +in_function_block: bool
    +next_token_is_function: bool
    +in_function_block: bool
    +in_property_block: bool
    +brace_balance
    +block_labels
    +collect_labels: bool
    +in_property_block: bool
    +next_token_is_property: bool
    +in_function_block: bool
    +next_token_is_function: bool
    +token
    +token
    +next_token_is_function: bool
    +token
    +token
    +next_token_is_function: bool
    +token
    +next_token_is_property: bool
    +token
    +token
    +token
    +token
    +token
    +token
    +token: Name
    +token: String
    +token: String
    +token
    +token
    +token
    +token
    +token
    +token: String
    +token: String
    +token
    +token: String
    +token: String
    +token: Whitespace
    +token: Keyword
    +token
    +token
    +token
    +token: String
    +token
    +lowercase_name
    +token: Keyword
    +token
    +token: Name
    +token: Operator
    +token: Punctuation
    +token
    +token
    +token
    +was_dot
    --
    -__init__()
    +get_tokens_unprocessed(text)
  }

  class CsoundLexer {
    +url: str
    +tokens
  }

  class CsoundScoreLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class CsoundOrchestraLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +user_defined_opcodes
    +opcode
    +type_annotation_token
    +name
    +type_annotation_token: Name
    +name_match
    +tokens
    --
    +opcode_name_callback(match)
    +name_callback(match)
  }

  class CsoundDocumentLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class TypstLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +MATH_SHORTHANDS
    +tokens
    +stack
    --
    -__init__()
    +get_tokens_unprocessed(text)
  }

  class PtxLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +string: str
    +followsym: str
    +identifier
    +block_label
    +tokens
  }

  class SmartGameFormatLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class KustoLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class WatLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class ProcfileLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class CodeQLLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class AwkLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class SedLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class VimLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +p
    --
    -__init__()
    +is_in(w, mapping)
    +get_tokens_unprocessed(text)
  }

  class NSISLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class RPMSpecLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class DebianSourcesLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +url: str
    +tokens
  }

  class SourcesListLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +mimetype
    +url: str
    +tokens
    +line
    --
    +analyse_text()
  }

  class DebianControlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class CobolLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class CobolFreeformatLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class ABAPLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class OpenEdgeLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +types: str
    +keywords
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class GoodDataCLLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class MaqlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class TclLexer {
    +keyword_cmds_re
    +builtin_cmds_re
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    -_gen_command_rules(builtin_cmds_re, context)
    +analyse_text()
  }

  class SNBTLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class MCFunctionLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class MCSchemaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class VisualPrologBaseLexer {
    +minorendkw
    +minorkwexp
    +dockw
    +tokens
  }

  class VisualPrologLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +majorkw
    +minorkw
    +directivekw
    +tokens
    --
    +analyse_text()
  }

  class VisualPrologGrammarLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +majorkw
    +directivekw
    +tokens
    --
    +analyse_text()
  }

  class MIPSLexer {
    +name: str
    +aliases
    +version_added: str
    +filenames
    +url: str
    +keywords
    +pseudoinstructions
    +directives
    +deprecated
    +tokens
  }

  class MesonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class BlitzMaxLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +bmax_vopwords: str
    +bmax_sktypes: str
    +bmax_lktypes: str
    +bmax_name: str
    +bmax_var
    +bmax_func
    +flags
    +tokens
  }

  class BlitzBasicLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +bb_sktypes: str
    +bb_name: str
    +bb_var
    +flags
    +tokens
  }

  class MonkeyLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +name_variable: str
    +name_function: str
    +name_constant: str
    +name_class: str
    +name_module: str
    +keyword_type: str
    +keyword_type_special: str
    +flags
    +tokens
  }

  class CbmBasicV2Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class QBasicLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +declarations
    +functions
    +metacommands
    +operators
    +statements
    +keywords
    +tokens
    --
    +analyse_text()
  }

  class VBScriptLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class BBCBasicLexer {
    +base_keywords
    +basic5_keywords
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class PrqlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +builtinTypes
    +tokens
    --
    +innerstring_rules()
    +fstring_rules()
  }

  class EiffelLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class ScdocLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +tokens
    +result: int
    +first_line
    +scdoc_preamble_pattern: str
    --
    +analyse_text()
  }

  class DaxLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +mimetypes
    +version_added: str
    +tokens
  }

  class SparqlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +PN_CHARS_BASE_GRP: str
    +PN_CHARS_U_GRP
    +PN_CHARS_GRP
    +HEX_GRP: str
    +PN_LOCAL_ESC_CHARS_GRP: str
    +PN_CHARS_BASE
    +PN_CHARS_U
    +PN_CHARS
    +HEX
    +PN_LOCAL_ESC_CHARS
    +IRIREF: str
    +BLANK_NODE_LABEL
    +PN_PREFIX
    +VARNAME
    +PERCENT
    +PN_LOCAL_ESC
    +PLX
    +PN_LOCAL
    +EXPONENT: str
    +tokens
  }

  class TurtleLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +PN_CHARS_BASE_GRP: str
    +PN_CHARS_U_GRP
    +PN_CHARS_GRP
    +PN_CHARS
    +PN_CHARS_BASE
    +PN_PREFIX
    +HEX_GRP: str
    +HEX
    +PERCENT
    +PN_LOCAL_ESC_CHARS_GRP: str
    +PN_LOCAL_ESC_CHARS
    +PN_LOCAL_ESC
    +PLX
    +PN_LOCAL
    +patterns
    +tokens
    --
    +analyse_text()
  }

  class ShExCLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +PN_CHARS_BASE_GRP: str
    +PN_CHARS_U_GRP
    +PN_CHARS_GRP
    +HEX_GRP: str
    +PN_LOCAL_ESC_CHARS_GRP: str
    +PN_CHARS_BASE
    +PN_CHARS_U
    +PN_CHARS
    +HEX
    +PN_LOCAL_ESC_CHARS
    +UCHAR_NO_BACKSLASH
    +UCHAR
    +IRIREF
    +BLANK_NODE_LABEL
    +PN_PREFIX
    +PERCENT
    +PN_LOCAL_ESC
    +PLX
    +PN_LOCAL
    +EXPONENT: str
    +tokens
  }

  class GleamLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +keywords
    +tokens
  }

  class EmailHeaderLexer {
    +default_actions
    +tokens
    --
    -__init__()
    +get_x_header_tokens(match)
  }

  class EmailLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
  }

  class SophiaLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +keywords
    +builtins
    +word_operators
    +primitive_types
    +tokens
  }

  class Modula2Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    +common_reserved_words
    +common_builtins
    +common_pseudo_builtins
    +pim_lexemes_to_reject
    +pim_additional_reserved_words
    +pim_additional_builtins
    +pim_additional_pseudo_builtins
    +iso_lexemes_to_reject
    +iso_additional_reserved_words
    +iso_additional_builtins
    +iso_additional_pseudo_builtins
    +m2r10_lexemes_to_reject
    +m2r10_additional_reserved_words
    +m2r10_additional_builtins
    +m2r10_additional_pseudo_builtins
    +objm2_lexemes_to_reject
    +objm2_additional_reserved_words
    +objm2_additional_builtins
    +objm2_additional_pseudo_builtins
    +aglet_additional_reserved_words
    +aglet_additional_builtins
    +aglet_additional_pseudo_builtins
    +gm2_additional_reserved_words
    +gm2_additional_builtins
    +gm2_additional_pseudo_builtins
    +p1_additional_reserved_words
    +p1_additional_builtins
    +p1_additional_pseudo_builtins
    +xds_additional_reserved_words
    +xds_additional_builtins
    +xds_additional_pseudo_builtins
    +pim_stdlib_module_identifiers
    +pim_stdlib_type_identifiers
    +pim_stdlib_proc_identifiers
    +pim_stdlib_var_identifiers
    +pim_stdlib_const_identifiers
    +iso_stdlib_module_identifiers
    +iso_stdlib_type_identifiers
    +iso_stdlib_proc_identifiers
    +iso_stdlib_var_identifiers
    +iso_stdlib_const_identifiers
    +m2r10_stdlib_adt_identifiers
    +m2r10_stdlib_blueprint_identifiers
    +m2r10_stdlib_module_identifiers
    +m2r10_stdlib_type_identifiers
    +m2r10_stdlib_proc_identifiers
    +m2r10_stdlib_var_identifiers
    +m2r10_stdlib_const_identifiers
    +dialects
    +lexemes_to_reject_db
    +reserved_words_db
    +builtins_db
    +pseudo_builtins_db
    +stdlib_adts_db
    +stdlib_modules_db
    +stdlib_types_db
    +stdlib_procedures_db
    +stdlib_variables_db
    +stdlib_constants_db
    +dialects
    +styles
    +dialect: str
    +dialect: dialect_id
    +lexemes_to_reject_set
    +reswords_set
    +builtins_set
    +pseudo_builtins_set
    +adts_set
    +modules_set
    +types_set
    +procedures_set
    +variables_set
    +constants_set
    +left_tag_delim: str
    +right_tag_delim: str
    +left_tag_delim_len
    +right_tag_delim_len
    +indicator_start: left_tag_delim_len
    +indicator_end
    +indicator
    +indicated_dialect
    +token
    +value
    +token
    +value
    +token
    +value
    +token
    +token
    +value
    +token
    +token
    +token
    +token
    +token
    +token: Error
    +token: Error
    +token: Error
    +token: Error
    +token: Error
    +token: Error
    +token
    +token: Error
    +value: str
    +value: str
    +value: str
    +value: str
    +value: str
    +result: int
    +result: float
    --
    -__init__()
    +set_dialect(dialect_id)
    +get_dialect_from_dialect_tag(dialect_tag)
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class NitLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class ActionScriptLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class ActionScript3Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +identifier: str
    +typeidentifier
    +flags
    +tokens
    --
    +analyse_text()
  }

  class MxmlLexer {
    +flags
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class QlikLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class APLLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class SrcinfoLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class RegoLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +reserved_words
    +builtins
    +tokens
  }

  class AtomsLexer {
    +tokens
  }

  class OdinLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class CadlLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class AdlLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class PythonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +uni_name
    +tokens
    --
    +innerstring_rules()
    +fstring_rules()
    +analyse_text()
  }

  class Python2Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +innerstring_rules()
    +analyse_text()
  }

  class _PythonConsoleLexerBase {
    +name: str
    +aliases
    +mimetypes
    +tokens
  }

  class PythonConsoleLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +python3
    +pylexer: PythonLexer
    +tblexer: PythonTracebackLexer
    +pylexer: Python2Lexer
    +tblexer: Python2TracebackLexer
    --
    -__init__()
  }

  class _ReplaceInnerCode {
    -__init__()
  }

  class PythonTracebackLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class Python2TracebackLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class CythonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class DgLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class NumPyLexer {
    +name: str
    +url: str
    +aliases
    +version_added: str
    +mimetypes
    +filenames
    +EXTRA_KEYWORDS
    +ltext
    --
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class FactorLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +builtin_kernel
    +builtin_assocs
    +builtin_combinators
    +builtin_math
    +builtin_sequences
    +builtin_namespaces
    +builtin_arrays
    +builtin_io
    +builtin_strings
    +builtin_vectors
    +builtin_continuations
    +tokens
  }

  class SmaliLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +score: int
    --
    +analyse_text()
  }

  class GoLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class BerryLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class UniconLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class IconLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class UcodeLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class CddlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class DylanLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +builtins
    +keywords
    +operators
    +functions
    +valid_name: str
    +lowercase_value
    +tokens
    --
    +get_tokens_unprocessed(text)
  }

  class DylanLidLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class DylanConsoleLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +dylexer
    +curcode: str
    +insertions
    +line
    +m
    +end
    +curcode: str
    +insertions
    --
    +get_tokens_unprocessed(text)
  }

  class MakefileLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +r_special
    +r_comment
    +ins
    +lines
    +done: str
    +lex
    +backslashflag: bool
    +backslashflag
    --
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class BaseMakefileLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class CMakeLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    +exp: str
    --
    +analyse_text()
  }

  class DiffLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class DarcsPatchLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +DPATCH_KEYWORDS
    +tokens
  }

  class WDiffLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +ins_op: str
    +ins_cl: str
    +del_op: str
    +del_cl: str
    +normal: str
    +tokens
  }

  class XorgLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class RtsLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class KuinLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class JavaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class AspectJLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +aj_keywords
    +aj_inter_type
    +aj_inter_type_annotation
    --
    +get_tokens_unprocessed(text)
  }

  class ScalaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +opchar
    +letter
    +upperLetter
    +letterOrDigit
    +letterOrDigitNoDollarSign
    +alphaId
    +simpleInterpolatedVariable
    +idrest
    +idUpper
    +plainid
    +backQuotedId: str
    +anyId
    +notStartOfComment: str
    +endOfLineMaybeWithComment: str
    +keywords
    +operators
    +storage_modifiers
    +tokens
  }

  class GosuLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class GosuTemplateLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +lexer
    +stack
    --
    +get_tokens_unprocessed(text)
  }

  class GroovyLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class IokeLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class ClojureLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +special_forms
    +declarations
    +builtins
    +valid_name: str
    +tokens
  }

  class ClojureScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
  }

  class TeaLangLexer {
    +flags
    +tokens
  }

  class CeylonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class KotlinLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +kt_name
    +kt_space_name
    +kt_id
    +modifiers: str
    +tokens
  }

  class XtendLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class PigLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class GoloLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +version_added: str
    +tokens
  }

  class JasminLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
    +score: int
    --
    +analyse_text()
  }

  class SarlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class NuSMVLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class TactLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class PromQLLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +base_keywords
    +aggregator_keywords
    +function_keywords
    +tokens
  }

  class ZephirLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +zephir_keywords
    +zephir_type
    +flags
    +tokens
  }

  class PsyshConsoleLexer {
    +name: str
    +url: str
    +aliases
    +version_added: str
    +phplexer
    +curcode: str
    +insertions
    +line
    +curcode: str
    +insertions
    --
    -__init__()
    +get_tokens_unprocessed(text)
  }

  class PhpLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
    +stack
    +rv: float
    --
    -__init__()
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class PostgresBase {
    +tries
    --
    +get_tokens_unprocessed(text)
    -_get_lexer(lang)
  }

  class PostgresLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class PlPgsqlLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
  }

  class PsqlRegexLexer {
    +name: str
    +aliases
    +flags
    +tokens
  }

  class lookahead {
    +ni
    +next: __next__
    --
    -__init__(x)
    -__iter__()
    +send(i)
    -__next__()
  }

  class PostgresConsoleLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +sql
    +lines
    +curcode: str
    +insertions
    +lexer
    +mprompt
    +out_token
    +mprompt
    +mmsg
    +out_token
    --
    +get_tokens_unprocessed(data)
  }

  class PostgresExplainLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class SqlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text(text)
  }

  class TransactSqlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +rating: int
    +rating: float
    +name_between_backtick_count
    +name_between_bracket_count
    +dialect_name_count
    --
    +analyse_text()
  }

  class MySqlLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +rating: int
    +name_between_backtick_count
    +name_between_bracket_count
    +dialect_name_count
    --
    +analyse_text()
  }

  class GoogleSqlLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    +tokens
    --
    +analyse_text()
  }

  class SqliteConsoleLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +sql
    +curcode: str
    +insertions
    +line
    +prompt_match
    +curcode: str
    +insertions
    --
    +get_tokens_unprocessed(data)
  }

  class RqlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class X10Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +types: str
    +values
    +modifiers
    +tokens
  }

  class Json5Lexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class GcodeLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class PraatLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +keywords
    +functions_string
    +functions_numeric
    +functions_array
    +objects
    +variables_numeric
    +variables_string
    +object_attributes
    +tokens
  }

  class Lean3Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class Lean4Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords1
    +keywords2
    +keywords3
    +operators
    +punctuation
    +tokens
    --
    +analyse_text()
  }

  class BibTeXLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +url: str
    +ALLOWED_CHARS: str
    +IDENTIFIER
    +opening_brace
    +closing_brace
    +tokens
    --
    +open_brace_callback(match, ctx)
    +close_brace_callback(match, ctx)
  }

  class BSTLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +url: str
    +tokens
  }

  class WhileyLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class KLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class QLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class SnobolLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class WebIDLLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class RitaLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +tokens
  }

  class HaskellLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +reserved
    +ascii
    +tokens
  }

  class HspecLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class IdrisLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +reserved
    +ascii
    +directives
    +tokens
  }

  class AgdaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +reserved
    +tokens
  }

  class CryptolLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +reserved
    +ascii
    +tokens
    +EXTRA_KEYWORDS
    +stack
    --
    +get_tokens_unprocessed(text)
  }

  class LiterateLexer {
    +bird_re
    +style
    +style
    +code: str
    +insertions
    +line
    +m
    +lxlexer
    +codelines: int
    +latex: str
    +line
    +codelines: int
    +codelines: int
    +latex: str
    --
    -__init__(baselexer)
    +get_tokens_unprocessed(text)
  }

  class LiterateHaskellLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +hslexer
    --
    -__init__()
  }

  class LiterateIdrisLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +hslexer
    --
    -__init__()
  }

  class LiterateAgdaLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +agdalexer
    --
    -__init__()
  }

  class LiterateCryptolLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +crylexer
    --
    -__init__()
  }

  class KokaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +typeStartKeywords
    +typekeywords
    +builtin
    +symbols: str
    +sboundary
    +boundary: str
    +tokenType
    +tokenTypeDef
    +tokenConstructor
    +tokens
  }

  class GherkinLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +feature_keywords: str
    +feature_element_keywords: str
    +examples_keywords: str
    +step_keywords: str
    +tokens
    --
    +analyse_text(text)
  }

  class TAPLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class FortranLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class FortranFixedLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +flags
    +lexer
    +text
    +value
    +tokens
    --
    -_lex_fortran(match, ctx)
  }

  class ModelicaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class BugsLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class JagsLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class StanLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class ArturoLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +lexer: NoneType
    +lexer
    +code
    +tokens
    --
    -__init__()
    +handle_annotated_strings(match)
  }

  class VCLLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class VCLSnippetLexer {
    +name: str
    +aliases
    +mimetypes
    +filenames
    +url: str
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class ElmLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +validName: str
    +specialName: str
    +builtinOps
    +reservedWords
    +tokens
  }

  class AscLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class JavascriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class TypeScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +priority: float
    +tokens
  }

  class KalLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class LiveScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class DartLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class LassoLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +alias_filenames
    +mimetypes
    +url: str
    +flags
    +tokens
    +stack
    +rv: float
    --
    -__init__()
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class ObjectiveJLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +tokens
    --
    +analyse_text()
  }

  class CoffeeScriptLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class MaskLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class EarlGreyLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class JuttleLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +tokens
  }

  class NodeConsoleLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +jslexer
    +curcode: str
    +insertions
    +line
    +code
    +lead
    +curcode: str
    +insertions
    --
    +get_tokens_unprocessed(text)
  }

  class OocLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class BddLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +step_keywords: str
    +tokens
    --
    +analyse_text(text)
  }

  class JuliaLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
  }

  class JuliaConsoleLexer {
    +name: str
    +aliases
    +url: str
    +version_added: str
    +jllexer
    +start: int
    +curcode: str
    +insertions
    +output: bool
    +error: bool
    +output: bool
    +error: bool
    +output: bool
    +error: bool
    +curcode: str
    +insertions
    +error: bool
    +output: bool
    --
    +get_tokens_unprocessed(text)
  }

  class HexdumpLexer {
    +name: str
    +aliases
    +url: str
    +version_added: str
    +hd: str
    +tokens
  }

  class FoxProLexer {
    +name: str
    +aliases
    +filenames
    +version_added: str
    +mimetype
    +url: str
    +flags
    +tokens
  }

  class StataLexer {
    +name: str
    +url: str
    +version_added: str
    +aliases
    +filenames
    +mimetypes
    +flags
    +tokens
  }

  class ZigLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +type_keywords
    +storage_keywords
    +structure_keywords
    +statement_keywords
    +conditional_keywords
    +repeat_keywords
    +other_keywords
    +constant_keywords
    +tokens
  }

  class BnfLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class AbnfLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class JsgfLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class PegLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class BareLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +version_added: str
    +keywords
    +tokens
  }

  class OpenScadLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class CSharpLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +levels
    +tokens
    +token_variants: bool
    +level
    --
    -__init__()
  }

  class NemerleLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +flags
    +levels
    +tokens
    +token_variants: bool
    +level
    +result: int
    --
    -__init__()
    +analyse_text()
  }

  class BooLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class VbNetLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +uni_name
    +flags
    +tokens
    --
    +analyse_text()
  }

  class GenericAspxLexer {
    +name: str
    +filenames
    +mimetypes
    +url: str
    +flags
    +tokens
  }

  class CSharpAspxLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class VbNetAspxLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    --
    -__init__()
    +analyse_text()
  }

  class FSharpLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keywords
    +keyopts
    +operators: str
    +word_operators
    +prefix_syms: str
    +infix_syms: str
    +primitives
    +tokens
    +result: int
    --
    +analyse_text()
  }

  class XppLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +flags
    +XPP_CHARS
    +XPP_CHARS
    +OPERATORS
    +KEYWORDS
    +RUNTIME_FUNCTIONS
    +COMPILE_FUNCTIONS
    +tokens
    +tokens
  }

  class FantomLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
    --
    +s()
  }

  class TextLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +priority: float
    --
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

  class OutputLexer {
    +name: str
    +aliases
    +url: str
    +version_added: str
    --
    +get_tokens_unprocessed(text)
  }

  class RawTokenLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +text
    +text
    +text
    +text
    +text
    +length: int
    +ttype
    +ttype: Token
    +ttypes
    +ttype
    +val
    +val
    +ttype: Error
    --
    -__init__()
    +get_tokens(text)
    +get_tokens_unprocessed(text)
  }

  class YangLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +TOP_STMTS_KEYWORDS
    +MODULE_HEADER_STMT_KEYWORDS
    +META_STMT_KEYWORDS
    +LINKAGE_STMTS_KEYWORDS
    +BODY_STMT_KEYWORDS
    +DATA_DEF_STMT_KEYWORDS
    +TYPE_STMT_KEYWORDS
    +LIST_STMT_KEYWORDS
    +CONSTANTS_KEYWORDS
    +TYPES
    +suffix_re_pattern: str
    +tokens
  }

  class FiftLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class EzhilLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +analyse_text()
    -__init__()
  }

  class RideLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +validName: str
    +builtinOps
    +globalVariablesName
    +typesName
    +functionsName
    +reservedWords
    +tokens
  }

  class DevicetreeLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class Macaulay2Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class UrbiscriptLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +flags
    +text_before_blob
    +blob_start
    +blob_size_str
    +blob_size
    +result
    +blob_text
    +tokens
    +result: int
    --
    +blob_callback(match, ctx)
    +analyse_text()
  }

  class HaxeLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keyword: str
    +typeid: str
    +ident
    +binop: str
    +ident_no_keyword
    +flags
    +preproc_stack
    +proc
    +tokens
    --
    +preproc_callback(match, ctx)
    +analyse_text()
  }

  class HxmlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +tokens
  }

  class FuncLexer {
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +identifier: str
    +tokens
  }

  class YamlLexerContext {
    -__init__()
  }

  class YamlLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +text
    +text
    +text
    +extra: str
    +extra
    +text
    +text
    +text
    +increment
    +current_indent
    +increment
    +text
    +indentation
    +content
    +text
    +text
    +tokens
    +context
    --
    +something()
    +callback(match, context)
    +reset_indent()
    +callback(match, context)
    +save_indent(start)
    +callback(match, context)
    +set_indent(implicit)
    +callback(match, context)
    +set_block_scalar_indent()
    +callback(match, context)
    +parse_block_scalar_empty_line(content_token_class)
    +callback(match, context)
    +parse_block_scalar_indent()
    +callback(match, context)
    +parse_plain_scalar_indent()
    +callback(match, context)
    +get_tokens_unprocessed(text, context)
  }

  class JsonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +integers
    +floats
    +constants
    +hexadecimals
    +punctuations
    +whitespaces
    +in_string: bool
    +in_escape: bool
    +in_unicode_escape: int
    +in_whitespace: bool
    +in_constant: bool
    +in_number: bool
    +in_float: bool
    +in_punctuation: bool
    +in_comment_single: bool
    +in_comment_multiline: bool
    +expecting_second_comment_opener: bool
    +expecting_second_comment_closer: bool
    +start: int
    +queue
    +in_escape: bool
    +in_unicode_escape: int
    +in_escape: bool
    +in_unicode_escape: int
    +in_escape: bool
    +in_escape: bool
    +in_string: bool
    +in_escape: bool
    +in_unicode_escape: int
    +in_whitespace: bool
    +in_constant: bool
    +in_float: bool
    +in_number: bool
    +in_float: bool
    +in_punctuation: bool
    +in_comment_single: bool
    +expecting_second_comment_closer: bool
    +expecting_second_comment_closer: bool
    +in_comment_multiline: bool
    +expecting_second_comment_opener: bool
    +in_comment_single: bool
    +in_comment_multiline: bool
    +start: stop
    +in_string: bool
    +in_whitespace: bool
    +in_constant: bool
    +in_number: bool
    +in_punctuation: bool
    +in_punctuation: bool
    +expecting_second_comment_opener: bool
    --
    +get_tokens_unprocessed(text)
  }

  class JsonBareObjectLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
  }

  class JsonLdLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +json_ld_keywords
    --
    +get_tokens_unprocessed(text)
  }

  class YaraLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class PointlessLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +version_added: str
    +ops
    +keywords
    +tokens
  }

  class Asn1Lexer {
    +flags
    +name: str
    +aliases
    +filenames
    +url: str
    +version_added: str
    +tokens
  }

  class WgslLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +keyword_decl
    +keywords
    +keyword_reserved
    +predeclared_enums
    +predeclared_types
    +predeclared_type_generators
    +predeclared_type_alias_vectors
    +predeclared_type_alias_matrices
    +tokens
  }

  class RustLexer {
    +name: str
    +url: str
    +filenames
    +aliases
    +mimetypes
    +version_added: str
    +keyword_types
    +builtin_funcs_types
    +builtin_macros
    +tokens
  }

}

package "venv2.lib.python3.12.site-packages.pygments.formatters" {
  class TerminalFormatter {
    +name: str
    +aliases
    +filenames
    +colors
    +ttype
    +colors
    +color
    --
    -__init__()
    +format(tokensource, outfile)
    -_write_lineno(outfile)
    -_get_color(ttype)
    +format_unencoded(tokensource, outfile)
  }

  class HtmlFormatter {
    +name: str
    +aliases
    +filenames
    +linenos
    +ttypeclass
    +cls
    +ttype
    +cls
    +cclass
    +ttype
    +cclass
    +t2c
    +c2s
    +name
    +style: str
    +style_lines
    +prefix
    +styles
    +lines
    +prefix
    +bg_color
    +hl_color
    +lines
    +text_style: str
    +text_style
    +lines
    +arg
    +args
    +args
    +cls
    +tmp
    +color
    +background_color
    +color
    +background_color
    +cssfilename
    +filename
    +cssfilename
    +cssfilename
    +dummyoutfile
    +lncount: int
    +fl
    +mw
    +sp
    +st
    +anchor_name
    +aln
    +nocls
    +lines
    +print_line
    +special_line
    +line
    +line
    +line
    +style
    +style
    +style: str
    +style: str
    +line
    +ls
    +filename_tr: str
    +filename_tr
    +inner_lines
    +sp
    +st
    +num
    +mw
    +anchor_name
    +aln
    +nocls
    +print_line
    +special_line
    +line
    +line
    +style
    +style
    +style: str
    +style: str
    +linenos
    +linenos: line
    +s
    +i
    +href
    +s
    +i
    +style
    +style
    +style
    +style
    +nocls
    +lsep
    +tagsfile
    +lspan: str
    +line
    +cspan
    +title
    +css_style
    +css_style
    +cspan
    +cspan: str
    +css_class
    +cspan
    +cspan: str
    +parts
    +url
    +line
    +lspan: cspan
    +line
    +lspan: cspan
    +entry
    +hls
    +style: str
    +style
    +output: source
    +output
    +output
    +source
    +source
    +source
    +source
    +source
    +source
    +source
    +source
    +source
    --
    -__init__()
    -_get_css_class(ttype)
    -_get_css_classes(ttype)
    -_get_css_inline_styles(ttype)
    -_create_stylesheet()
    +get_style_defs(arg)
    +get_token_style_defs(arg)
    +get_background_style_defs(arg)
    +get_linenos_style_defs()
    +get_css_prefix(arg)
    +prefix()
    -_pre_style()
    -_linenos_style()
    -_linenos_special_style()
    -_decodeifneeded(value)
    -_wrap_full(inner, outfile)
    -_wrap_tablelinenos(inner)
    -_wrap_inlinelinenos(inner)
    -_wrap_lineanchors(inner)
    -_wrap_linespans(inner)
    -_wrap_div(inner)
    -_wrap_pre(inner)
    -_wrap_code(inner)
    -_translate_parts(value)
    -_format_lines(tokensource)
    -_lookup_ctag(token)
    -_highlight_lines(tokensource)
    +wrap(source)
    +format_unencoded(tokensource, outfile)
  }

  class IRCFormatter {
    +name: str
    +aliases
    +filenames
    +color
    +ttype
    +color
    +color
    +spl
    --
    -__init__()
    -_write_lineno(outfile)
    +format_unencoded(tokensource, outfile)
  }

  class _automodule {
    +info
    +cls
    --
    -__getattr__(name)
  }

  class NullFormatter {
    +name: str
    +aliases
    +filenames
    +enc
    --
    +format(tokensource, outfile)
  }

  class RawTokenFormatter {
    +name: str
    +aliases
    +filenames
    +unicodeoutput: bool
    +outfile
    +write
    +flush
    +compressor
    +write
    +flush
    +line
    --
    -__init__()
    +format(tokensource, outfile)
    +write()
    +flush()
  }

  class TestcaseFormatter {
    +name: str
    +aliases
    +indentation
    +rawbuf
    +outbuf
    +before
    +during
    +after: TESTCASE_AFTER
    --
    -__init__()
    +format(tokensource, outfile)
  }

  class PilNotAvailable {
  }

  class FontNotFound {
  }

  class FontManager {
    +font
    +proc
    +lines
    +path
    +path
    +path
    +font_map
    +path
    +path
    +valname
    +lookuperror: NoneType
    +keynames
    +key
    +path
    +path
    +lookuperror: err
    +font
    +font
    --
    -__init__(font_name, font_size)
    -_get_nix_font_path(name, style)
    -_create_nix()
    -_get_mac_font_path(font_map, name, style)
    -_create_mac()
    -_lookup_win(key, basename, styles, fail)
    -_create_win()
    +get_char_size()
    +get_text_size(text)
    +get_font(bold, oblique)
    +get_style(style)
  }

  class ImageFormatter {
    +name: str
    +aliases
    +filenames
    +unicodeoutput: bool
    +default_image_format: str
    +fontsize
    +hl_lines_str
    +fill
    +fill: str
    +bg_color
    +bg_color: NoneType
    +lineno: int
    +charno: int
    +maxcharno: int
    +maxlinelength: int
    +linelength: int
    +ttype
    +style
    +value
    +lines
    +temp
    +maxlinelength
    +maxcharno
    +linelength: int
    +charno: int
    +n
    +draw
    +recth
    +rectw
    +im
    +draw
    +x
    +recth
    +rectw
    +y
    +text_size
    +text_size
    --
    -__init__()
    +get_style_defs(arg)
    -_get_line_height()
    -_get_line_y(lineno)
    -_get_char_width()
    -_get_char_x(linelength)
    -_get_text_pos(linelength, lineno)
    -_get_linenumber_pos(lineno)
    -_get_text_color(style)
    -_get_text_bg_color(style)
    -_get_style_font(style)
    -_get_image_size(maxlinelength, maxlineno)
    -_draw_linenumber(posno, lineno)
    -_draw_text(pos, text, font, text_fg, text_bg)
    -_create_drawables(tokensource)
    -_draw_line_numbers()
    -_paint_line_number_bg(im)
    +format(tokensource, outfile)
  }

  class GifImageFormatter {
    +name: str
    +aliases
    +filenames
    +default_image_format: str
  }

  class JpgImageFormatter {
    +name: str
    +aliases
    +filenames
    +default_image_format: str
  }

  class BmpImageFormatter {
    +name: str
    +aliases
    +filenames
    +default_image_format: str
  }

  class EscapeSequence {
    +attrs
    +esc
    +esc
    +attrs
    +attrs
    --
    -__init__(fg, bg, bold, underline, italic)
    +escape(attrs)
    +color_string()
    +true_color_string()
    +reset_string()
  }

  class Terminal256Formatter {
    +name: str
    +aliases
    +filenames
    +valuerange
    +r
    +g
    +b
    +v
    +distance
    +match: int
    +values
    +rd
    +gd
    +bd
    +d
    +match: i
    +distance: d
    +index
    +index: color
    +rgb
    +rgb: int
    +r
    +g
    +b
    +index
    +escape
    +not_found: bool
    +spl
    +not_found: bool
    +ttype
    --
    -__init__()
    -_build_color_table()
    -_closest_color(r, g, b)
    -_color_index(color)
    -_setup_styles()
    -_write_lineno(outfile)
    +format(tokensource, outfile)
    +format_unencoded(tokensource, outfile)
  }

  class TerminalTrueColorFormatter {
    +name: str
    +aliases
    +filenames
    +rgb
    +r
    +g
    +b
    +escape
    --
    -_build_color_table()
    -_color_tuple(color)
    -_setup_styles()
  }

  class RtfFormatter {
    +name: str
    +aliases
    +filenames
    +lineno
    +lineno
    +text
    +buf
    +cn
    +hex_color
    +lines
    +color_mapping
    +offset: int
    +lines
    +tokensource
    +line_count: int
    +tokens
    +linenos_width
    +tokensource: tokens
    +lineno: int
    +start_new_line: bool
    +current_lineno
    +lineno_str
    +lineno_str
    +ttype
    +style
    +buf
    +start
    +start_new_line: bool
    +start_new_line: bool
    --
    -__init__()
    -_escape(text)
    -_escape_text(text)
    +{static} hex_to_rtf_color()
    -_split_tokens_on_newlines(tokensource)
    -_create_color_mapping()
    -_lineno_template()
    -_hl_open_str()
    -_rtf_header()
    +format_unencoded(tokensource, outfile)
  }

  class SvgFormatter {
    +name: str
    +aliases
    +filenames
    +fs
    +fs
    +int_fs
    +int_fs: int
    +x
    +y
    +counter
    +counter_step
    +counter_style
    +line_x: x
    +style
    +tspan
    +tspanend
    +value
    +value
    +parts
    +otokentype: tokentype
    +tokentype
    +value
    +result: str
    +result
    --
    -__init__()
    +format_unencoded(tokensource, outfile)
    -_get_style(tokentype)
  }

  class BBCodeFormatter {
    +name: str
    +aliases
    +filenames
    +start: str
    +end: str
    +end
    +end
    +end
    +end
    +lastval: str
    +lasttype: NoneType
    +ttype
    +lastval: value
    +lasttype: ttype
    --
    -__init__()
    -_make_styles()
    +format_unencoded(tokensource, outfile)
  }

  class PangoMarkupFormatter {
    +name: str
    +aliases
    +filenames
    +start: str
    +end: str
    +end
    +end
    +end
    +end
    +lastval: str
    +lasttype: NoneType
    +ttype
    +lastval
    +lasttype: ttype
    --
    -__init__()
    +format_unencoded(tokensource, outfile)
  }

  class GroffFormatter {
    +name: str
    +aliases
    +filenames
    +regular
    +bold
    +italic
    +start: str
    +end: str
    +end
    +end
    +end
    +end
    +colors
    +length
    +space
    +newline: str
    +chunk
    +remainder
    +newline
    +newline: line
    +text
    +copy: text
    +uni
    +text
    +ttype
    +line
    +text
    --
    -__init__()
    -_make_styles()
    -_define_colors(outfile)
    -_write_lineno(outfile)
    -_wrap_line(line)
    -_escape_chars(text)
    +format_unencoded(tokensource, outfile)
  }

  class LatexFormatter {
    +name: str
    +aliases
    +filenames
    +t2n
    +c2d
    +cp
    +name
    +cmndef: str
    +cmndef
    +cp
    +styles
    +t2n
    +cp
    +realoutfile: outfile
    +outfile
    +start
    +value
    +start
    +value
    +parts
    +in_math: bool
    +in_math
    +value
    +text: value
    +value: str
    +value
    +value
    +styles
    +ttype
    +styleval
    +spl
    +encoding
    +encoding
    --
    -__init__()
    -_create_stylesheet()
    +rgbcolor()
    +get_style_defs(arg)
    +format_unencoded(tokensource, outfile)
  }

  class LatexEmbeddedLexer {
    +buffered: str
    +insertions
    +insertion_buf
    +insertion_buf
    +buf: str
    +idx: int
    +buf: str
    +idx: i
    +index: int
    +text: b
    --
    -__init__(left, right, lang)
    +get_tokens_unprocessed(text)
    -_find_safe_escape_tokens(text)
    -_filter_to(it, pred)
    -_find_escape_tokens(text)
  }

}

package "venv2.lib.python3.12.site-packages.pygments.styles" {
  class SasStyle {
    +name: str
    +styles
  }

  class MaterialStyle {
    +name: str
    +dark_teal: str
    +white: str
    +black: str
    +red: str
    +orange: str
    +yellow: str
    +green: str
    +cyan: str
    +blue: str
    +paleblue: str
    +purple: str
    +brown: str
    +pink: str
    +violet: str
    +foreground: str
    +faded: str
    +background_color: dark_teal
    +highlight_color: str
    +line_number_color: str
    +line_number_background_color: dark_teal
    +line_number_special_color: str
    +line_number_special_background_color: dark_teal
    +styles
  }

  class FriendlyGrayscaleStyle {
    +name: str
    +background_color: str
    +styles
  }

  class PastieStyle {
    +name: str
    +styles
  }

  class OneDarkStyle {
    +name: str
    +background_color: str
    +styles
  }

  class InkPotStyle {
    +name: str
    +background_color: str
    +styles
  }

  class XcodeStyle {
    +name: str
    +styles
  }

  class GruvboxDarkStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class GruvboxLightStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class MonokaiStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class TangoStyle {
    +name: str
    +background_color: str
    +styles
  }

  class FriendlyStyle {
    +name: str
    +background_color: str
    +line_number_color: str
    +styles
  }

  class StarofficeStyle {
    +name: str
    +styles
  }

  class ParaisoDarkStyle {
    +name: str
    +background_color: BACKGROUND
    +highlight_color: SELECTION
    +styles
  }

  class SolarizedDarkStyle {
    +name: str
    +styles
    +background_color
    +highlight_color
    +line_number_color
    +line_number_background_color
  }

  class SolarizedLightStyle {
    +name: str
    +styles
    +background_color
    +highlight_color
    +line_number_color
    +line_number_background_color
  }

  class Algol_NuStyle {
    +name: str
    +background_color: str
    +styles
  }

  class GhDarkStyle {
    +name: str
    +background_color: BG_DEFAULT
    +highlight_color: GRAY_4
    +line_number_special_color: FG_DEFAULT
    +line_number_special_background_color: FG_SUBTLE
    +line_number_color: GRAY_4
    +line_number_background_color: BG_DEFAULT
    +styles
  }

  class NativeStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +line_number_color: str
    +styles
  }

  class ColorfulStyle {
    +name: str
    +styles
  }

  class LilyPondStyle {
    +name: str
    +web_style_gallery_exclude: bool
    +styles
  }

  class IgorStyle {
    +name: str
    +styles
  }

  class ZenburnStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +line_number_color: str
    +line_number_background_color: str
    +line_number_special_color: str
    +line_number_special_background_color: str
    +styles
  }

  class BlackWhiteStyle {
    +name: str
    +background_color: str
    +styles
  }

  class EmacsStyle {
    +name: str
    +background_color: str
    +styles
  }

  class DraculaStyle {
    +name: str
    +background_color: background
    +highlight_color: selection
    +line_number_color: yellow
    +line_number_background_color: selection
    +line_number_special_color: green
    +line_number_special_background_color: comment
    +styles
  }

  class VisualStudioStyle {
    +name: str
    +background_color: str
    +styles
  }

  class DefaultStyle {
    +name: str
    +background_color: str
    +styles
  }

  class ParaisoLightStyle {
    +name: str
    +background_color: BACKGROUND
    +highlight_color: SELECTION
    +styles
  }

  class LovelaceStyle {
    +name: str
    +styles
  }

  class StataDarkStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class VimStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class BorlandStyle {
    +name: str
    +styles
  }

  class CoffeeStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +line_number_color: str
    +line_number_special_color: str
    +styles
  }

  class MurphyStyle {
    +name: str
    +styles
  }

  class LightbulbStyle {
    +name: str
    +background_color
    +highlight_color
    +line_number_color
    +line_number_special_color
    +styles
  }

  class FruityStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class AbapStyle {
    +name: str
    +styles
  }

  class RainbowDashStyle {
    +name: str
    +background_color: WHITE
    +styles
  }

  class ManniStyle {
    +name: str
    +background_color: str
    +styles
  }

  class AutumnStyle {
    +name: str
    +styles
  }

  class RrtStyle {
    +name: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class PerldocStyle {
    +name: str
    +background_color: str
    +styles
  }

  class TracStyle {
    +name: str
    +styles
  }

  class AlgolStyle {
    +name: str
    +background_color: str
    +styles
  }

  class ArduinoStyle {
    +name: str
    +background_color: str
    +styles
  }

  class NordStyle {
    +name: str
    +line_number_color: str
    +line_number_background_color: str
    +line_number_special_color: str
    +line_number_special_background_color: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class NordDarkerStyle {
    +name: str
    +line_number_color: str
    +line_number_background_color: str
    +line_number_special_color: str
    +line_number_special_background_color: str
    +background_color: str
    +highlight_color: str
    +styles
  }

  class StataLightStyle {
    +name: str
    +styles
  }

}

package "venv2.lib.python3.12.site-packages.mako" {
  class FindIdentifiers {
    +in_a
    +visit_SetComp: visit_ListComp
    +visit_GeneratorExp: visit_ListComp
    +inf
    +local_ident_stack
    --
    -__init__(listener)
    -_add_declared(name)
    +visit_ClassDef(node)
    +visit_Assign(node)
    +visit_ExceptHandler(node)
    +visit_Lambda(node)
    +visit_FunctionDef(node)
    +visit_ListComp(node)
    +visit_DictComp(node)
    -_expand_tuples(args)
    -_visit_function(node, islambda)
    +visit_For(node)
    +visit_Name(node)
    +visit_Import(node)
    +visit_ImportFrom(node)
  }

  class FindTuple {
    +p
    +ldi
    +lui
    --
    -__init__(listener, code_factory)
    +visit_Tuple(node)
  }

  class ParseFunc {
    +argnames
    +kwargnames
    --
    -__init__(listener)
    +visit_FunctionDef(node)
  }

  class ExpressionGenerator {
    -__init__(astnode)
    +value()
  }

  class PluginLoader {
    +mod
    +mod
    --
    -__init__(group)
    +load(name)
    +register(name, modulepath, objname)
    +load()
  }

  class memoized_property {
    +result
    --
    -__init__(fget, doc)
    -__get__(obj, cls)
  }

  class memoized_instancemethod {
    +result
    --
    -__init__(fget, doc)
    -__get__(obj, cls)
    +oneshot()
    +memo()
  }

  class SetLikeDict {
    +x
    --
    +union(other)
  }

  class FastEncodingBuffer {
    -__init__(encoding, errors)
    +truncate()
    +getvalue()
  }

  class LRUCache {
  }

  class _Item {
    -__init__(key, value)
    -__repr__()
  }

  class NodeVisitor {
    +method
    +f
    --
    +get_visitor(node)
    +visit(node)
    +generic_visit(node)
  }

  class NodeTransformer {
    +old_value
    +new_values
    +value
    +new_node
    --
    +generic_visit(node)
  }

  class SourceGenerator {
    +want_comma
    +padding
    +have_args
    +else_
    +node
    +want_comma: bool
    +want_comma: bool
    +want_comma: bool
    +want_comma
    +idx
    +visit_List
    +visit_Set
    +op
    +visit_ListComp
    +visit_GeneratorExp
    +visit_SetComp
    --
    -__init__(indent_with)
    +write(x)
    +newline(n)
    +body(statements)
    +body_or_else(node)
    +signature(node)
    +write_comma()
    +decorators(node)
    +visit_Assign(node)
    +visit_AugAssign(node)
    +visit_ImportFrom(node)
    +visit_Import(node)
    +visit_Expr(node)
    +visit_FunctionDef(node)
    +visit_ClassDef(node)
    +paren_or_comma()
    +visit_If(node)
    +visit_For(node)
    +visit_While(node)
    +visit_With(node)
    +visit_Pass(node)
    +visit_Print(node)
    +visit_Delete(node)
    +visit_TryExcept(node)
    +visit_TryFinally(node)
    +visit_Global(node)
    +visit_Nonlocal(node)
    +visit_Return(node)
    +visit_Break(node)
    +visit_Continue(node)
    +visit_Raise(node)
    +visit_Attribute(node)
    +visit_Call(node)
    +write_comma()
    +visit_Name(node)
    +visit_NameConstant(node)
    +visit_arg(node)
    +visit_Str(node)
    +visit_Bytes(node)
    +visit_Num(node)
    +visit_Constant(node)
    +visit_Tuple(node)
    +sequence_visit(right)
    +visit(node)
    +visit_Dict(node)
    +visit_BinOp(node)
    +visit_BoolOp(node)
    +visit_Compare(node)
    +visit_UnaryOp(node)
    +visit_Subscript(node)
    +visit_Slice(node)
    +visit_ExtSlice(node)
    +visit_Yield(node)
    +visit_Lambda(node)
    +visit_Ellipsis(node)
    +generator_visit(right)
    +visit(node)
    +visit_DictComp(node)
    +visit_IfExp(node)
    +visit_Starred(node)
    +visit_Repr(node)
    +visit_alias(node)
    +visit_comprehension(node)
    +visit_excepthandler(node)
  }

  class TemplateCollection {
    +has_template(uri)
    +get_template(uri, relativeto)
    +filename_to_uri(uri, filename)
    +adjust_uri(uri, filename)
  }

  class TemplateLookup {
    +cache_args
    +u
    +dir_
    +srcfile
    +key
    +v: uri
    +v
    +v
    +value
    +filename
    +module_filename
    +module_filename: NoneType
    +template
    +template_stat
    --
    -__init__(directories, module_directory, filesystem_checks, collection_size, format_exceptions, error_handler, output_encoding, encoding_errors, cache_args, cache_impl, cache_enabled, cache_type, cache_dir, cache_url, modulename_callable, module_writer, default_filters, buffer_filters, strict_undefined, imports, future_imports, enable_loop, input_encoding, preprocessor, lexer_cls, include_error_handler)
    +get_template(uri)
    +adjust_uri(uri, relativeto)
    +filename_to_uri(filename)
    -_relativeize(filename)
    -_load(filename, uri)
    -_check(uri, template)
    +put_string(uri, text)
    +put_template(uri, template)
  }

  class Cache {
    +impl: NoneType
    +id: NoneType
    +starttime: NoneType
    +put: set
    +defname
    +tmpl_kw
    +tmpl_kw
    +tmpl_kw
    +tmpl_kw
    --
    -__init__(template)
    -_load_impl(name)
    +get_or_create(key, creation_function)
    -_ctx_get_or_create(key, creation_function, context)
    +set(key, value)
    +get(key)
    +invalidate(key)
    +invalidate_body()
    +invalidate_def(name)
    +invalidate_closure(name)
    -_get_cache_kw(kw, context)
  }

  class CacheImpl {
    +pass_context: bool
    --
    -__init__(cache)
    +get_or_create(key, creation_function)
    +set(key, value)
    +get(key)
    +invalidate(key)
  }

  class Context {
    +illegal_names
    +buf
    +buf
    +c
    +c
    +c
    +x
    --
    -__init__(buffer)
    -_set_with_template(t)
    +lookup()
    +kwargs()
    +push_caller(caller)
    +pop_caller()
    +keys()
    -__getitem__(key)
    -_push_writer()
    -_pop_buffer_and_writer()
    -_push_buffer()
    -_pop_buffer()
    +get(key, default)
    +write(string)
    +writer()
    -_copy()
    -_locals(d)
    -_clean_inheritance_tokens()
  }

  class CallerStack {
    +frame
    --
    -__init__()
    -__nonzero__()
    -__bool__()
    -_get_caller()
    -__getattr__(key)
    -_push_frame()
    -_pop_frame()
  }

  class Undefined {
    -__str__()
    -__nonzero__()
    -__bool__()
  }

  class LoopStack {
    +new
    --
    -__init__()
    -_enter(iterable)
    -_exit()
    -_top()
    -_pop()
    -_push(iterable)
    -__getattr__(key)
    -__iter__()
  }

  class LoopContext {
    -__init__(iterable)
    -__iter__()
    -__len__()
    +reverse_index()
    +first()
    +last()
    +even()
    +odd()
    +cycle()
  }

  class _NSAttr {
    +ns
    +ns
    --
    -__init__(parent)
    -__getattr__(key)
  }

  class Namespace {
    +callables
    +module: NoneType
    +template: NoneType
    +context: NoneType
    +filename: NoneType
    +uri: NoneType
    +key
    +ns
    +val
    +val
    --
    -__init__(name, context, callables, inherits, populate_self, calling_uri)
    +attr()
    +get_namespace(uri)
    +get_template(uri)
    +get_cached(key)
    +cache()
    +include_file(uri)
    -_populate(d, l)
    -_get_star()
    -__getattr__(key)
  }

  class TemplateNamespace {
    +callable_
    +val
    +callable_
    +val
    +val
    --
    -__init__(name, context, template, templateuri, callables, inherits, populate_self, calling_uri)
    +module()
    +filename()
    +uri()
    -_get_star()
    +get()
    -__getattr__(key)
  }

  class ModuleNamespace {
    +mod
    +mod
    +callable_
    +val
    +callable_
    +val
    +val
    --
    -__init__(name, context, module, callables, inherits, populate_self, calling_uri)
    +filename()
    -_get_star()
    -__getattr__(key)
  }

  class Lexer {
    +reg
    +reg
    +mp
    +match
    +cp
    +cp
    +startpos
    +text_re
    +brace_level: int
    +paren_level: int
    +bracket_level: int
    +match
    +match
    +match
    +match
    +node
    +control_frame
    +m
    +encoding
    +text
    +parsed_encoding: str
    +m
    +m
    +parsed_encoding
    +text
    +reg: str
    +match
    +attributes
    +text
    +text
    +match
    +match
    +match
    +string
    +match
    +match
    +text
    +match
    +text
    +match
    +escapes: str
    +text
    +match
    +operator
    +text
    +m2
    +isend
    +match
    --
    -__init__(text, filename, input_encoding, preprocessor)
    +exception_kwargs()
    +match(regexp, flags)
    +match_reg(reg)
    +parse_until_text(watch_nesting)
    +append_node(nodecls)
    +decode_raw_stream(text, decode_raw, known_encoding, filename)
    +parse()
    +match_tag_start()
    +match_tag_end()
    +match_end()
    +match_percent()
    +match_text()
    +match_python_block()
    +match_expression()
    +match_control_line()
    +match_comment()
  }

  class Template {
    +lexer_cls: Lexer
    +path
    +u_norm
    +u_norm
    +u_norm
    +path: module_filename
    +path
    +path: NoneType
    +module
    +filemtime
    +data
    +module
    +data
    +module
    +data
    --
    -__init__(text, filename, uri, format_exceptions, error_handler, lookup, output_encoding, encoding_errors, module_directory, cache_args, cache_impl, cache_enabled, cache_type, cache_dir, cache_url, module_filename, input_encoding, module_writer, default_filters, buffer_filters, strict_undefined, imports, future_imports, enable_loop, preprocessor, lexer_cls, include_error_handler)
    +reserved_names()
    -_setup_cache_args(cache_impl, cache_enabled, cache_args, cache_type, cache_dir, cache_url)
    -_compile_from_file(path, filename)
    +source()
    +code()
    +cache()
    +cache_dir()
    +cache_url()
    +cache_type()
    +render()
    +render_unicode()
    +render_context(context)
    +has_def(name)
    +get_def(name)
    +list_defs()
    -_get_def_callable(name)
    +last_modified()
  }

  class ModuleTemplate {
    -__init__(module, module_filename, template, template_filename, module_source, template_source, output_encoding, encoding_errors, format_exceptions, error_handler, lookup, cache_args, cache_impl, cache_enabled, cache_type, cache_dir, cache_url, include_error_handler)
  }

  class DefTemplate {
    -__init__(parent, callable_)
    +get_def(name)
  }

  class ModuleInfo {
    +source_map
    +source_map
    +f_line_map
    +line_map
    +curr_templ_line: int
    +curr_templ_line
    +data
    --
    -__init__(module, module_filename, template, template_filename, module_source, template_source, template_uri)
    +{class} get_module_source_metadata(module_source, full_line_map)
    +code()
    +source()
  }

  class PythonCode {
    +expr
    +expr: code
    +f
    --
    -__init__(code)
  }

  class ArgumentList {
    +expr
    +expr: code
    +f
    --
    -__init__(code)
  }

  class PythonFragment {
    +m
    +code
    +code
    +code
    +code
    +code
    +code
    --
    -__init__(code)
  }

  class FunctionDecl {
    +expr
    +f
    +namedecls
    +argnames
    +kwargnames
    +defaults
    +kwdefaults
    +default
    +default
    --
    -__init__(code, allow_kwargs)
    +get_argument_expressions(as_call)
    +allargnames()
  }

  class FunctionArgs {
    -__init__(code)
  }

  class MakoException {
  }

  class RuntimeException {
  }

  class CompileException {
    -__init__(message, source, lineno, pos, filename)
  }

  class SyntaxException {
    -__init__(message, source, lineno, pos, filename)
  }

  class UnsupportedError {
  }

  class NameConflictError {
  }

  class TemplateLookupException {
  }

  class TopLevelLookupException {
  }

  class RichTraceback {
    +error
    +traceback: tback
    +mods
    +rawrecords
    +new_trcback
    +line: str
    +info
    +module_source
    +template_source
    +template_filename
    +template_ln: int
    +mtm
    +source_map
    +line_map
    +template_lines
    +template_ln
    +template_line
    +template_line: NoneType
    +encoding
    +encoding: str
    --
    -__init__(error, traceback)
    +errorname()
    -_init_message()
    -_get_reformatted_records(records)
    +traceback()
    +reverse_records()
    +reverse_traceback()
    -_init(trcback)
  }

  class Node {
    +method
    --
    -__init__(source, lineno, pos, filename)
    +exception_kwargs()
    +get_children()
    +accept_visitor(visitor)
    +traverse()
  }

  class TemplateNode {
    -__init__(filename)
    +get_children()
    -__repr__()
  }

  class ControlLine {
    +has_loop_context: bool
    +code
    +cases
    --
    -__init__(keyword, isend, text)
    +get_children()
    +declared_identifiers()
    +undeclared_identifiers()
    +is_ternary(keyword)
    -__repr__()
  }

  class Text {
    -__init__(content)
    -__repr__()
  }

  class Code {
    -__init__(text, ismodule)
    +declared_identifiers()
    +undeclared_identifiers()
    -__repr__()
  }

  class Comment {
    -__init__(text)
    -__repr__()
  }

  class Expression {
    -__init__(text, escapes)
    +declared_identifiers()
    +undeclared_identifiers()
    -__repr__()
  }

  class _TagMeta {
    +cls
    --
    -__init__(clsname, bases, dict_)
    -__call__(keyword, attributes)
  }

  class Tag {
    +missing
    +undeclared_identifiers
    +expr
    +m
    +code
    +undeclared_identifiers
    --
    -__init__(keyword, attributes, expressions, nonexpressions, required)
    +is_root()
    +get_children()
    -_parse_attributes(expressions, nonexpressions)
    +declared_identifiers()
    +undeclared_identifiers()
    -__repr__()
  }

  class IncludeTag {
    +identifiers
    --
    -__init__(keyword, attributes)
    +declared_identifiers()
    +undeclared_identifiers()
  }

  class NamespaceTag {
    -__init__(keyword, attributes)
    +declared_identifiers()
  }

  class TextTag {
    -__init__(keyword, attributes)
    +undeclared_identifiers()
  }

  class DefTag {
    +expressions
    +name
    +is_anonymous: bool
    +is_block: bool
    +res
    --
    -__init__(keyword, attributes)
    +funcname()
    +get_argument_expressions()
    +declared_identifiers()
    +undeclared_identifiers()
  }

  class BlockTag {
    +expressions
    +name
    +is_block: bool
    --
    -__init__(keyword, attributes)
    +is_anonymous()
    +funcname()
    +get_argument_expressions()
    +declared_identifiers()
    +undeclared_identifiers()
  }

  class CallTag {
    -__init__(keyword, attributes)
    +declared_identifiers()
    +undeclared_identifiers()
  }

  class CallNamespaceTag {
    -__init__(namespace, defname, attributes)
    +declared_identifiers()
    +undeclared_identifiers()
  }

  class InheritTag {
    -__init__(keyword, attributes)
  }

  class PageTag {
    +expressions
    --
    -__init__(keyword, attributes)
    +declared_identifiers()
  }

  class _CompileContext {
    -__init__(uri, filename, default_filters, buffer_filters, imports, future_imports, source_encoding, generate_magic_comment, strict_undefined, enable_loop, reserved_names)
  }

  class _GenerateRenderMethod {
    +name
    +args
    +filtered
    +buffered
    +cached
    +defs: NoneType
    +pagetag: NoneType
    +defs
    +pagetag
    +name: str
    +args
    +cached
    +args
    +cached: bool
    +buffered: bool
    +filtered: bool
    +args
    +args
    +struct
    +inherit
    +namespaces
    +module_code
    --
    -__init__(printer, compiler, node)
    +write_metadata_struct()
    +identifiers()
    +write_toplevel()
  }

  class FindTopLevel {
    +visitInheritTag(node)
    +visitNamespaceTag(node)
    +visitPageTag(node)
    +visitCode(node)
  }

  class NSDefVisitor {
    +visitDefTag(node)
    +visitBlockTag(node)
    +visitDefOrBase(node)
  }

  class DefVisitor {
    +visitDefTag(node)
    +visitBlockTag(node)
    +visitDefOrBase(node)
  }

  class _Identifiers {
    +illegal_names
    +existing
    --
    -__init__(compiler, node, parent, nested)
    +branch(node)
    +defs()
    -__repr__()
    +check_declared(node)
    +add_declared(ident)
    +visitExpression(node)
    +visitControlLine(node)
    +visitCode(node)
    +visitNamespaceTag(node)
    -_check_name_exists(collection, node)
    +visitDefTag(node)
    +visitBlockTag(node)
    +visitTextTag(node)
    +visitIncludeTag(node)
    +visitPageTag(node)
    +visitCallNamespaceTag(node)
    +visitCallTag(node)
  }

  class LoopVariable {
    -__init__()
    -_loop_reference_detected(node)
    +visitControlLine(node)
    +visitCode(node)
    +visitExpression(node)
  }

  class Decode {
    -__getattr__(key)
    +decode()
  }

  class XMLEntityEscaper {
    +codepoint
    +codepoint
    +codepoint
    +codepoint
    --
    -__init__(codepoint2name, name2codepoint)
    +escape_entities(text)
    -__escape(m)
    +escape(text)
    -__unescape(m)
    +unescape(text)
  }

  class PythonPrinter {
    +hastext: bool
    +hastext: bool
    +is_comment
    +match
    +indentor
    +indentor: NoneType
    +m2
    +indentor
    +match
    +current_state
    +triples
    +stripspace: NoneType
    +entry
    +stripspace
    --
    -__init__(stream)
    -_update_lineno(num)
    +start_source(lineno)
    +write_blanks(num)
    +write_indented_block(block, starting_lineno)
    +writelines()
    +writeline(line)
    +close()
    -_is_unindentor(line)
    -_indent_line(line, stripspace)
    -_reset_multi_line_flags()
    -_in_multi_line(line)
    -_flush_adjusted_lines()
  }

}

package "venv2.lib.python3.12.site-packages.mako.ext" {
  class LinguaMakoExtractor {
    +use_bytes: bool
    +extensions
    +default_config
    +ctx
    +ctx
    +source
    +source: str
    +source
    +code
    +msg
    --
    -__call__(filename, options, fileobj)
    +process_python(code, code_lineno, translator_strings)
  }

  class BeakerCacheImpl {
    +expiretime
    +region
    +cache
    +cache
    +cache_args
    --
    -__init__(cache)
    -_get_cache()
    +get_or_create(key, creation_function)
    +put(key, value)
    +get(key)
    +invalidate(key)
  }

  class BabelMakoExtractor {
    +comment_tags
    --
    -__init__(keywords, comment_tags, options)
    -__call__(fileobj)
    +process_python(code, code_lineno, translator_strings)
  }

  class MessageExtractor {
    +use_bytes: bool
    +template_node
    +translator_comments
    +in_translator_comments: bool
    +input_encoding
    +comment_tags
    +child_nodes: NoneType
    +value
    +in_translator_comments: bool
    +code
    +child_nodes
    +code
    +child_nodes
    +code
    +child_nodes
    +code
    +code
    +child_nodes
    +in_translator_comments: bool
    +code
    +in_translator_comments: bool
    +code
    +code
    +translator_comments
    +translator_strings
    +code
    +used_translator_comments: bool
    +code
    +code
    +used_translator_comments: bool
    +translator_comments
    +in_translator_comments: bool
    --
    +process_file(fileobj)
    +extract_nodes(nodes)
    -{static} _split_comment(comment)
  }

  class MakoLexer {
    +name: str
    +aliases
    +filenames
    +tokens
  }

  class MakoHtmlLexer {
    +name: str
    +aliases
    --
    -__init__()
  }

  class MakoXmlLexer {
    +name: str
    +aliases
    --
    -__init__()
  }

  class MakoJavascriptLexer {
    +name: str
    +aliases
    --
    -__init__()
  }

  class MakoCssLexer {
    +name: str
    +aliases
    --
    -__init__()
  }

  class TGPlugin {
    +options
    +lookup_options
    +templatename
    +template
    --
    -__init__(extra_vars_func, options, extension)
    +load_template(templatename, template_string)
    +render(info, format, fragment, template)
  }

}

package "venv2.lib.python3.12.site-packages.mako.testing" {
  class Config {
    +module_base: Path
    +template_base: Path
    +section_header: str
    +converters
  }

  class _ErrorContainer {
    +error: NoneType
  }

  class ConfigError {
  }

  class MissingConfig {
  }

  class MissingConfigSection {
  }

  class MissingConfigItem {
  }

  class ConfigValueTypeError {
  }

  class _GetterDispatch {
    +get_fn
    --
    -__init__(initialdata, default_getter)
    +get_fn_for_type(type_)
    +get_typed_value(type_, name)
  }

  class ReadsCfg {
    +section_header
    +converters
    +cfg
    +dispatch
    +kwargs
    --
    +{class} from_cfg_file(filespec)
  }

  class TemplateTest {
    +filepath
    +py3k_path
    +t1
    +t1
    +template_args
    +output
    +output
    +output
    +var
    +error_msgs
    --
    -_file_template(filename)
    -_file_path(filename)
    -_do_file_test(filename, expected, filters, unicode_, template_args)
    -_do_memory_test(source, expected, filters, unicode_, template_args)
    -_do_test(template, expected, filters, template_args, unicode_)
    +indicates_unbound_local_error(rendered_output, unbound_var)
  }

  class PlainCacheImpl {
    +data
    --
    -__init__(cache)
    +get_or_create(key, creation_function)
    +put(key, value)
    +get(key)
    +invalidate(key)
  }

}

package "venv2.lib.python3.12.site-packages.flask_cors" {
  class CORS {
    +options
    +resources
    +resources
    +resources_human
    +cors_after_request
    --
    -__init__(app)
    +init_app(app)
    -_after_request_decorator()
    +wrapped_function()
  }

}

package "venv2.lib.python3.12.site-packages.jinja2" {
  class MacroRef {
    -__init__(node)
  }

  class Frame {
    +rv
    +rv
    --
    -__init__(eval_ctx, parent, level)
    +copy()
    +inner(isolated)
    +soft()
  }

  class VisitorExit {
  }

  class DependencyFinderVisitor {
    -__init__()
    +visit_Filter(node)
    +visit_Test(node)
    +visit_Block(node)
  }

  class UndeclaredNameVisitor {
    -__init__(names)
    +visit_Name(node)
    +visit_Block(node)
  }

  class CompilerExit {
  }

  class CodeGenerator {
    +stream
    +kwarg_workaround
    +visitor
    +undefs
    +undefs
    +frame
    +macro_ref
    +explicit_caller: NoneType
    +skip_special_params
    +args
    +explicit_caller: idx
    +undeclared
    +ref
    +default
    +arg_tuple
    +name
    +rv
    +rv
    +items_kv
    +target
    +vars
    +public_names
    +name
    +ref
    +ref
    +names_str
    +eval_ctx
    +exported_names
    +exported_names
    +envenv
    +have_extends
    +imp
    +alias
    +frame
    +ref
    +block_frame
    +undeclared
    +ref
    +ref
    +blocks_kv_str
    +debug_kv_str
    +level: int
    +context
    +context
    +func_name: str
    +func_name: str
    +func_name: str
    +func_name: str
    +f_name
    +var_names
    +discarded_names
    +alias: name
    +position
    +message
    +name
    +names_kv
    +names_str
    +loop_frame
    +test_frame
    +else_frame
    +extended_loop
    +loop_ref: NoneType
    +loop_ref
    +loop_filter_func
    +iteration_indicator
    +if_frame
    +filter_frame
    +with_frame
    --
    -__init__(environment, name, filename, stream, defer_init, optimized)
    +optimized(): bool
    +fail(msg, lineno)
    +temporary_identifier(): str
    +buffer(frame)
    +return_buffer_contents(frame, force_unescaped)
    +indent()
    +outdent(step)
    +start_write(frame, node)
    +end_write(frame)
    +simple_write(s, frame, node)
    +blockvisit(nodes, frame)
    +write(x)
    +writeline(x, node, extra)
    +newline(node, extra)
    +signature(node, frame, extra_kwargs)
    +pull_dependencies(nodes)
    +enter_frame(frame)
    +leave_frame(frame, with_python_scope)
    +choose_async(async_value, sync_value): str
    +func(name): str
    +macro_body(node, frame)
    +macro_def(macro_ref, frame)
    +position(node): str
    +dump_local_context(frame): str
    +write_commons()
    +push_parameter_definitions(frame)
    +pop_parameter_definitions()
    +mark_parameter_stored(target)
    +push_context_reference(target)
    +pop_context_reference()
    +get_context_ref(): str
    +get_resolve_func(): str
    +derive_context(frame): str
    +parameter_is_undeclared(target): bool
    +push_assign_tracking()
    +pop_assign_tracking(frame)
    +visit_Template(node, frame)
    +visit_Block(node, frame)
    +visit_Extends(node, frame)
    +visit_Include(node, frame)
    +loop_body()
    -_import_common(node, frame)
    +visit_Import(node, frame)
    +visit_FromImport(node, frame)
    +visit_For(node, frame)
    +visit_If(node, frame)
    +visit_Macro(node, frame)
    +visit_CallBlock(node, frame)
    +visit_FilterBlock(node, frame)
    +visit_With(node, frame)
    +visit_ExprStmt(node, frame)
  }

  class _FinalizeInfo {
    +const
    +src
  }

  class _IteratorToAsyncIterator {
    -__init__(iterator)
    -__aiter__()
  }

  class BaseLoader {
    +has_source_access: bool
    +code: NoneType
    +globals
    +bcc
    +bucket
    +code
    +code
    --
    +get_source(environment, template)
    +list_templates()
    +load(environment, name, globals)
  }

  class FileSystemLoader {
    +searchpath
    +pieces
    +filename
    +plural
    +paths_str
    +contents
    +mtime
    +found
    +walk_dir
    +template
    +template
    --
    -__init__(searchpath, encoding, followlinks)
    +get_source(environment, template)
    +uptodate(): bool
    +list_templates()
  }

  class PackageLoader {
    +package_path
    +package_path: str
    +package_path
    +spec
    +loader
    +pkgdir
    +template_root
    +roots
    +root
    +template_root: root
    +p
    +up_to_date
    +source
    +mtime
    +source
    +up_to_date: NoneType
    +results
    +offset
    +dirpath
    +files
    +prefix
    +offset
    --
    -__init__(package_name, package_path, encoding)
    +get_source(environment, template)
    +up_to_date(): bool
    +list_templates()
  }

  class DictLoader {
    +source
    --
    -__init__(mapping)
    +get_source(environment, template)
    +list_templates()
  }

  class FunctionLoader {
    +rv
    --
    -__init__(load_func)
    +get_source(environment, template)
  }

  class PrefixLoader {
    +loader
    +result
    --
    -__init__(mapping, delimiter)
    +get_loader(template)
    +get_source(environment, template)
    +load(environment, name, globals)
    +list_templates()
  }

  class ChoiceLoader {
    +found
    --
    -__init__(loaders)
    +get_source(environment, template)
    +load(environment, name, globals)
    +list_templates()
  }

  class _TemplateModule {
  }

  class ModuleLoader {
    +has_source_access: bool
    +package_name
    +mod
    +path
    +key
    +module
    +mod
    +mod
    +globals
    --
    -__init__(path)
    +{static} get_template_key(): str
    +{static} get_module_filename(): str
    +load(environment, name, globals)
  }

  class Symbols {
    +level: int
    +level
    +visitor
    +ident
    +rv
    +rv
    +outer_ref
    +stores
    +target
    +outer_target
    +rv
    +node
    +node
    +rv
    +node
    +node
    --
    -__init__(parent, level)
    +analyze_node(node)
    -_define_ref(name, load): str
    +find_load(target)
    +find_ref(name)
    +ref(name): str
    +copy()
    +store(name)
    +declare_parameter(name): str
    +load(name)
    +branch_update(branch_symbols)
    +dump_stores()
    +dump_param_targets()
  }

  class RootVisitor {
    +visit_Template: _simple_visit
    +visit_Block: _simple_visit
    +visit_Macro: _simple_visit
    +visit_FilterBlock: _simple_visit
    +visit_Scope: _simple_visit
    +visit_If: _simple_visit
    +visit_ScopedEvalContextModifier: _simple_visit
    +branch
    +branch
    --
    -__init__(symbols)
    -_simple_visit(node)
    +visit_AssignBlock(node)
    +visit_CallBlock(node)
    +visit_OverlayScope(node)
    +visit_For(node, for_branch)
    +visit_With(node)
    +generic_visit(node)
  }

  class FrameSymbolVisitor {
    +original_symbols
    +rv
    +body_symbols
    +elif_symbols
    +else_symbols
    --
    -__init__(symbols)
    +visit_Name(node, store_as_param)
    +visit_NSRef(node)
    +visit_If(node)
    +inner_visit()
    +visit_Macro(node)
    +visit_Import(node)
    +visit_FromImport(node)
    +visit_Assign(node)
    +visit_For(node)
    +visit_CallBlock(node)
    +visit_FilterBlock(node)
    +visit_With(node)
    +visit_AssignBlock(node)
    +visit_Scope(node)
    +visit_Block(node)
    +visit_OverlayScope(node)
  }

  class LoopRenderFunc {
    -__call__(reciter, loop_render_func, depth): str
  }

  class TemplateReference {
    +blocks
    --
    -__init__(context)
    -__getitem__(name): t.Any
    -__repr__(): str
  }

  class Context {
    +blocks
    +index
    +rv
    +pass_arg
    +args
    +args
    +args
    +context
    +keys
    +values
    +items
    +item
    --
    -__init__(environment, parent, name, blocks, globals)
    +super(name, current)
    +get(key, default): t.Any
    +resolve(key)
    +resolve_or_missing(key): t.Any
    +get_exported()
    +get_all()
    +call(__obj)
    +derived(locals)
    -__contains__(name): bool
    -__getitem__(key): t.Any
    -__repr__(): str
  }

  class BlockReference {
    +rv
    +rv
    --
    -__init__(name, context, stack, depth)
    +super()
    -__call__(): str
  }

  class LoopContext {
    +index0
    -_length
    -_after: t.Any
    -_current: t.Any
    -_before: t.Any
    -_last_changed_value: t.Any
    +iterable
    +rv
    +rv
    +rv
    --
    -__init__(iterable, undefined, recurse, depth0)
    -{static} _to_iterator()
    +length(): int
    -__len__(): int
    +depth(): int
    +index(): int
    +revindex0(): int
    +revindex(): int
    +first(): bool
    -_peek_next(): t.Any
    +last(): bool
    +previtem()
    +nextitem()
    +cycle(): V
    +changed(): bool
    -__iter__()
    -__next__()
    -__call__(iterable): str
    -__repr__(): str
  }

  class AsyncLoopContext {
    -_iterator
    +iterable
    +rv
    +rv
    +rv
    --
    -{static} _to_iterator()
    -__aiter__()
  }

  class Macro {
    +fields
    +name: str
    +args
    +defaults
    +body
  }

  class Undefined {
    -__init__(hint, obj, name, exc)
    -_undefined_message(): str
    -_fail_with_undefined_error()
    -__getattr__(name): t.Any
    -__eq__(other): bool
    -__ne__(other): bool
    -__hash__(): int
    -__str__(): str
    -__len__(): int
    -__iter__()
    -__bool__(): bool
    -__repr__(): str
  }

  class LoggingUndefined {
    -_fail_with_undefined_error()
    -__str__(): str
    -__iter__()
    -__bool__(): bool
  }

  class ChainableUndefined {
    -__html__(): str
    -__getattr__(name)
    -__getitem__(_name)
  }

  class DebugUndefined {
    +message
    +message
    +message
    --
    -__str__(): str
  }

  class StrictUndefined {
  }

  class Parser {
    +lineno
    +expected
    +currently_looking
    +currently_looking: NoneType
    +message
    +message
    +stack
    +rv
    +token
    +pop_tag: bool
    +f
    +ext
    +pop_tag: bool
    +result
    +lineno
    +target
    +expr
    +filter_node
    +body
    +lineno
    +target
    +iter
    +test: NoneType
    +test
    +recursive
    +body
    +else_
    +else_
    +node
    +result
    +token
    +node
    +node
    +targets
    +values
    +target
    +node
    +node
    +node
    +node
    +node
    +node
    +target
    +alias
    +args
    +defaults
    +arg
    +node
    +call_node
    +node
    +node
    +node
    +target: nodes.Expr
    +token
    +target
    +target
    +target
    +lineno
    +expr1
    +expr3
    +expr2
    +expr3
    +expr3: NoneType
    +expr1
    +lineno
    +lineno
    +left
    +right
    +left
    +lineno
    +lineno
    +left
    +right
    +left
    +lineno
    +lineno
    +lineno
    +expr
    +ops
    +token_type
    +lineno
    +lineno
    +left
    +cls
    +right
    +left
    +lineno
    +lineno
    +args
    +lineno
    +left
    +cls
    +right
    +left
    +lineno
    +lineno
    +left
    +right
    +left
    +lineno
    +token_type
    +lineno
    +node: nodes.Expr
    +node
    +node
    +node
    +node
    +node
    +token
    +node: nodes.Expr
    +node
    +node
    +attr
    +node
    +node
    +buf
    +lineno
    +node
    +node
    +node
    +node
    +node
    +lineno
    +args
    +is_tuple: bool
    +is_tuple: bool
    +lineno
    +token
    +items
    +token
    +items
    +key
    +value
    +token_type
    +node
    +node
    +token_type
    +node
    +node
    +node
    +token
    +arg: nodes.Expr
    +attr_token
    +arg
    +args
    +arg
    +arg
    +lineno
    +args
    +args
    +node
    +args
    +token
    +args
    +kwargs
    +dyn_args: NoneType
    +dyn_kwargs: NoneType
    +require_comma: bool
    +dyn_args
    +dyn_kwargs
    +key
    +value
    +require_comma: bool
    +token
    +token
    +name
    +args
    +kwargs
    +dyn_args: NoneType
    +dyn_kwargs: NoneType
    +node
    +start_inline: bool
    +token
    +negated: bool
    +negated: bool
    +name
    +dyn_args: NoneType
    +dyn_kwargs: NoneType
    +kwargs
    +arg_node
    +arg_node
    +args
    +args
    +node
    +node
    +body
    +data_buffer
    +add_data
    +lineno
    +token
    +rv
    +result
    --
    -__init__(environment, source, name, filename, state)
    +fail(msg, lineno, exc)
    -_fail_ut_eof(name, end_token_stack, lineno)
    +fail_unknown_tag(name, lineno)
    +fail_eof(end_tokens, lineno)
    +is_tuple_end(extra_end_rules): bool
    +free_identifier(lineno): nodes.InternalName
    +parse_statement()
    +parse_statements(end_tokens, drop_needle)
    +parse_set()
    +parse_for(): nodes.For
    +parse_if(): nodes.If
    +parse_with(): nodes.With
    +parse_autoescape(): nodes.Scope
    +parse_block(): nodes.Block
    +parse_extends(): nodes.Extends
    +parse_import_context(node, default): _ImportInclude
    +parse_include(): nodes.Include
    +parse_import(): nodes.Import
    +parse_from(): nodes.FromImport
    +parse_context(): bool
    +parse_signature(node)
    +parse_call_block(): nodes.CallBlock
    +parse_filter_block(): nodes.FilterBlock
    +parse_macro(): nodes.Macro
    +parse_print(): nodes.Output
    +parse_assign_target(with_tuple, name_only): nodes.Name
    +parse_assign_target(with_tuple, name_only, extra_end_rules, with_namespace)
    +parse_assign_target(with_tuple, name_only, extra_end_rules, with_namespace)
    +parse_expression(with_condexpr): nodes.Expr
    +parse_condexpr(): nodes.Expr
    +parse_or(): nodes.Expr
    +parse_and(): nodes.Expr
    +parse_not(): nodes.Expr
    +parse_compare(): nodes.Expr
    +parse_math1(): nodes.Expr
    +parse_concat(): nodes.Expr
    +parse_math2(): nodes.Expr
    +parse_pow(): nodes.Expr
    +parse_unary(with_filter): nodes.Expr
    +parse_primary(with_namespace): nodes.Expr
    +parse_tuple(simplified, with_condexpr, extra_end_rules, explicit_parentheses, with_namespace)
    +parse(): nodes.Expr
    +parse(): nodes.Expr
    +parse_list(): nodes.List
    +parse_dict(): nodes.Dict
    +parse_postfix(node): nodes.Expr
    +parse_filter_expr(node): nodes.Expr
    +parse_subscript(node)
    +parse_subscribed(): nodes.Expr
    +parse_call_args()
    +ensure()
    +parse_call(node): nodes.Call
    +parse_filter(node, start_inline)
    +parse_test(node): nodes.Expr
    +subparse(end_tokens)
    +flush_data()
    +parse(): nodes.Template
  }

  class SandboxedEnvironment {
    +sandboxed: bool
    +default_binop_table
    +default_unop_table
    +intercepted_binops
    +intercepted_unops
    +attr
    +value
    +fmt
    +value
    +fmt
    +f_self: t.Any
    +str_type
    +is_format_map
    +formatter: SandboxedFormatter
    +formatter
    +formatter
    +vformat
    +kwargs
    +args
    --
    -__init__()
    +is_safe_attribute(obj, attr, value): bool
    +is_safe_callable(obj): bool
    +call_binop(context, operator, left, right): t.Any
    +call_unop(context, operator, arg): t.Any
    +getitem(obj, argument)
    +getattr(obj, attribute)
    +unsafe_undefined(obj, attribute): Undefined
    +wrap_str_format(value)
    +wrapper(): str
    +call(__context, __obj): t.Any
  }

  class ImmutableSandboxedEnvironment {
    +is_safe_attribute(obj, attr, value): bool
  }

  class SandboxedFormatter {
    +obj
    +obj
    +obj
    --
    -__init__(env)
    +get_field(field_name, args, kwargs)
  }

  class SandboxedEscapeFormatter {
  }

  class VisitCallable {
    -__call__(node): t.Any
  }

  class NodeVisitor {
    +f
    --
    +get_visitor(node)
    +visit(node): t.Any
    +generic_visit(node): t.Any
  }

  class NodeTransformer {
    +new_values
    +value
    +new_node
    +rv
    --
    +generic_visit(node): Node
    +visit_list(node)
  }

  class _MissingType {
    -__repr__(): str
    -__reduce__(): str
  }

  class _PassArg {
    +context
    +eval_context
    +environment
    --
    +{class} from_obj(obj)
  }

  class LRUCache {
    +rv
    +rv
    +result
    --
    -__init__(capacity)
    -_postinit()
    -__getstate__()
    -__setstate__(d)
    -__getnewargs__()
    +copy()
    +get(key, default): t.Any
    +setdefault(key, default): t.Any
    +clear()
    -__contains__(key): bool
    -__len__(): int
    -__repr__(): str
    -__getitem__(key): t.Any
    -__setitem__(key, value)
    -__delitem__(key)
    +items()
    +values()
    +keys()
    -__iter__()
    -__reversed__()
  }

  class Cycler {
    +rv
    --
    -__init__()
    +reset()
    +current(): t.Any
    +next(): t.Any
  }

  class Joiner {
    -__init__(sep)
    -__call__(): str
  }

  class Namespace {
    -__init__()
    -__getattribute__(name): t.Any
    -__setitem__(name, value)
    -__repr__(): str
  }

  class Failure {
    -__init__(message, cls)
    -__call__(lineno, filename)
  }

  class Token {
    +lineno: int
    +type: str
    +value: str
    --
    -__str__(): str
    +test(expr): bool
    +test_any(): bool
  }

  class TokenStreamIterator {
    +token
    --
    -__init__(stream)
    -__iter__()
    -__next__(): Token
  }

  class TokenStream {
    +old_token
    +result
    +rv
    +expr
    --
    -__init__(generator, name, filename)
    -__iter__(): TokenStreamIterator
    -__bool__(): bool
    +eos(): bool
    +push(token)
    +look(): Token
    +skip(n)
    +next_if(expr)
    +skip_if(expr): bool
    -__next__(): Token
    +close()
    +expect(expr): Token
  }

  class OptionalLStrip {
    -__new__()
  }

  class _Rule {
    +pattern
    +tokens
    +command
  }

  class Lexer {
    +e
    +tag_rules
    +root_tag_rules
    +block_start_re
    +block_end_re
    +comment_end_re
    +variable_end_re
    +block_suffix_re
    +root_raw_re
    +root_parts_re
    +stream
    +value: t.Any
    +token: TOKEN_BLOCK_BEGIN
    +token: TOKEN_BLOCK_END
    +value
    +token: value_str
    +value: value_str
    +value
    +msg
    +value
    +value
    +token
    +lines
    +source
    +pos: int
    +lineno: int
    +stack
    +statetokens
    +source_length
    +balancing_stack
    +newlines_stripped: int
    +line_starting: bool
    +m
    +groups
    +text
    +strip_sign
    +stripped
    +newlines_stripped
    +groups
    +l_pos
    +groups
    +data
    +newlines_stripped: int
    +data
    +expected_op
    +line_starting
    +pos2
    +statetokens
    +pos: pos2
    --
    -__init__(environment)
    +c()
    -_normalize_newlines(value): str
    +tokenize(source, name, filename, state): TokenStream
    +wrap(stream, name, filename)
    +tokeniter(source, name, filename, state)
  }

  class Environment {
    +sandboxed: bool
    +overlayed: bool
    +linked_to
    +shared: bool
    +code_generator_class
    +concat
    +context_class
    +template_class
    +args
    +rv
    +attr
    +env_map
    +type_name: str
    +env_map
    +type_name: str
    +func
    +msg
    +msg
    +args
    +kwargs
    +pass_arg
    +eval_ctx
    +eval_ctx
    +source
    +source
    +stream
    +stream
    +stream
    +source_hint: NoneType
    +source_hint: source
    +source
    +source
    +filename: str
    +parser
    +expr
    +body
    +template
    +info
    +zip_file
    +code
    +filename
    +names
    +names
    +cache_key
    +template
    +template
    +name
    +name
    +gs
    +cls
    +d
    --
    -__init__(block_start_string, block_end_string, variable_start_string, variable_end_string, comment_start_string, comment_end_string, line_statement_prefix, line_comment_prefix, trim_blocks, lstrip_blocks, newline_sequence, keep_trailing_newline, extensions, optimized, undefined, finalize, autoescape, loader, cache_size, auto_reload, bytecode_cache, enable_async)
    +add_extension(extension)
    +extend()
    +overlay(block_start_string, block_end_string, variable_start_string, variable_end_string, comment_start_string, comment_end_string, line_statement_prefix, line_comment_prefix, trim_blocks, lstrip_blocks, newline_sequence, keep_trailing_newline, extensions, optimized, undefined, finalize, autoescape, loader, cache_size, auto_reload, bytecode_cache, enable_async)
    +lexer(): Lexer
    +iter_extensions()
    +getitem(obj, argument)
    +getattr(obj, attribute): t.Any
    -_filter_test_common(name, value, args, kwargs, context, eval_ctx, is_filter): t.Any
    +call_filter(name, value, args, kwargs, context, eval_ctx): t.Any
    +call_test(name, value, args, kwargs, context, eval_ctx): t.Any
    +parse(source, name, filename): nodes.Template
    -_parse(source, name, filename): nodes.Template
    +lex(source, name, filename)
    +preprocess(source, name, filename): str
    -_tokenize(source, name, filename, state): TokenStream
    -_generate(source, name, filename, defer_init): str
    -_compile(source, filename): CodeType
    +compile(source, name, filename, raw, defer_init): CodeType
    +compile(source, name, filename, raw, defer_init): str
    +compile(source, name, filename, raw, defer_init)
    +compile_expression(source, undefined_to_none)
    +compile_templates(target, extensions, filter_func, zip, log_function, ignore_errors)
    +log_function()
    +write_file(data)
    +list_templates(extensions, filter_func)
    +filter_func(): bool
    +handle_exception(source)
    +join_path(template, parent): str
    -_load_template(name, globals)
    +get_template(name, parent, globals)
    +select_template(names, parent, globals)
    +get_or_select_template(template_name_or_list, parent, globals)
    +from_string(source, globals, template_class)
    +make_globals(d)
  }

  class Template {
    +fields
    +body
  }

  class TemplateModule {
    +body_stream
    +name
    +name
    --
    -__init__(template, context, body_stream)
    -__html__(): Markup
    -__str__(): str
    -__repr__(): str
  }

  class TemplateExpression {
    +context
    +rv
    +rv: NoneType
    --
    -__init__(template, undefined_to_none)
    -__call__()
  }

  class TemplateStream {
    +close: bool
    +encoding: str
    +real_fp
    +close: bool
    +real_fp: fp
    +iterable
    +iterable: self
    +buf
    +c_size: int
    +push
    +c
    +c_size: int
    --
    -__init__(gen)
    +dump(fp, encoding, errors)
    +disable_buffering()
    -_buffered_generator(size)
    +enable_buffering(size)
    -__iter__()
    -__next__(): str
  }

  class Optimizer {
    +node
    --
    -__init__(environment)
    +generic_visit(node): nodes.Node
  }

  class TemplateError {
    -__init__(message)
    +message()
  }

  class TemplateNotFound {
    +message
    +message: name
    --
    -__init__(name, message)
    -__str__(): str
  }

  class TemplatesNotFound {
    +parts
    +parts_str
    +message
    --
    -__init__(names, message)
  }

  class TemplateSyntaxError {
    +location
    +name
    +location
    +lines
    +line
    --
    -__init__(message, lineno, name, filename)
    -__str__(): str
    -__reduce__()
  }

  class TemplateAssertionError {
  }

  class TemplateRuntimeError {
  }

  class UndefinedError {
  }

  class SecurityError {
  }

  class FilterArgumentError {
  }

  class NativeCodeGenerator {
    +const
    --
    -{static} _default_finalize(): t.Any
    -_output_const_repr(group): str
    -_output_child_to_const(node, frame, finalize): t.Any
    -_output_child_pre(node, frame, finalize)
    -_output_child_post(node, frame, finalize)
  }

  class NativeEnvironment {
    +code_generator_class: NativeCodeGenerator
    +concat
  }

  class NativeTemplate {
    +environment_class: NativeEnvironment
    +ctx
    +ctx
    --
    +render(): t.Any
  }

  class Impossible {
  }

  class NodeType {
    +storage
    --
    -__new__(name, bases, d)
  }

  class EvalContext {
    -__init__(environment, template_name)
    +save()
    +revert(old)
  }

  class Node {
    +fields
    +attributes
    +abstract: bool
    +lineno: int
    +environment
    +todo
    +node
    +todo
    +node
    +todo
    +node
    +args_str
    +value
    +buf
    --
    -__init__()
    +iter_fields(exclude, only)
    +iter_child_nodes(exclude, only)
    +find(node_type)
    +find_all(node_type)
    +set_ctx(ctx)
    +set_lineno(lineno, override)
    +set_environment(environment)
    -__eq__(other): bool
    -__repr__(): str
    +dump(): str
    -_dump()
  }

  class Stmt {
    +abstract: bool
  }

  class Helper {
    +abstract: bool
  }

  class Output {
    +fields
    +nodes
  }

  class Extends {
    +fields
    +template
  }

  class For {
    +fields
    +target: Node
    +iter: Node
    +body
    +else_
    +test
    +recursive: bool
  }

  class If {
    +fields
    +test: Node
    +body
    +elif_
    +else_
  }

  class CallBlock {
    +fields
    +call
    +args
    +defaults
    +body
  }

  class FilterBlock {
    +fields
    +body
    +filter
  }

  class With {
    +fields
    +targets
    +values
    +body
  }

  class Block {
    +fields
    +name: str
    +body
    +scoped: bool
    +required: bool
  }

  class Include {
    +fields
    +template
    +with_context: bool
    +ignore_missing: bool
  }

  class Import {
    +fields
    +template
    +target: str
    +with_context: bool
  }

  class FromImport {
    +fields
    +template
    +names
    +with_context: bool
  }

  class ExprStmt {
    +fields
    +node: Node
  }

  class Assign {
    +fields
    +target
    +node: Node
  }

  class AssignBlock {
    +fields
    +target
    +filter
    +body
  }

  class Expr {
    +abstract: bool
    --
    +as_const(eval_ctx): t.Any
    +can_assign(): bool
  }

  class BinExpr {
    +fields
    +left: Expr
    +right: Expr
    +operator: str
    +abstract: bool
    +eval_ctx
    +f
    --
    +as_const(eval_ctx): t.Any
  }

  class UnaryExpr {
    +fields
    +node: Expr
    +operator: str
    +abstract: bool
    +eval_ctx
    +f
    --
    +as_const(eval_ctx): t.Any
  }

  class Name {
    +fields
    +name: str
    +ctx: str
    --
    +can_assign(): bool
  }

  class NSRef {
    +fields
    +name: str
    +attr: str
    --
    +can_assign(): bool
  }

  class Literal {
    +abstract: bool
  }

  class Const {
    +fields
    +value: t.Any
    --
    +as_const(eval_ctx): t.Any
    +{class} from_untrusted(value, lineno, environment)
  }

  class TemplateData {
    +fields
    +data: str
    +eval_ctx
    --
    +as_const(eval_ctx): str
  }

  class Tuple {
    +fields
    +items
    +ctx: str
    +eval_ctx
    --
    +as_const(eval_ctx)
    +can_assign(): bool
  }

  class List {
    +fields
    +items
    +eval_ctx
    --
    +as_const(eval_ctx)
  }

  class Dict {
    +fields
    +items
    +eval_ctx
    --
    +as_const(eval_ctx)
  }

  class Pair {
    +fields
    +key: Expr
    +value: Expr
    +eval_ctx
    --
    +as_const(eval_ctx)
  }

  class Keyword {
    +fields
    +key: str
    +value: Expr
    +eval_ctx
    --
    +as_const(eval_ctx)
  }

  class CondExpr {
    +fields
    +test: Expr
    +expr1: Expr
    +expr2
    +eval_ctx
    --
    +as_const(eval_ctx): t.Any
  }

  class _FilterTestCommon {
    +fields
    +node: Expr
    +name: str
    +args
    +kwargs
    +dyn_args
    +dyn_kwargs
    +abstract: bool
    +eval_ctx
    +env_map
    +env_map
    +func
    +pass_arg
    --
    +as_const(eval_ctx): t.Any
  }

  class Filter {
    +node
    --
    +as_const(eval_ctx): t.Any
  }

  class Test {
  }

  class Call {
    +fields
    +node: Expr
    +args
    +kwargs
    +dyn_args
    +dyn_kwargs
  }

  class Getitem {
    +fields
    +node: Expr
    +arg: Expr
    +ctx: str
    +eval_ctx
    --
    +as_const(eval_ctx): t.Any
  }

  class Getattr {
    +fields
    +node: Expr
    +attr: str
    +ctx: str
    +eval_ctx
    --
    +as_const(eval_ctx): t.Any
  }

  class Slice {
    +fields
    +start
    +stop
    +step
    +eval_ctx
    --
    +as_const(eval_ctx): slice
    +const()
  }

  class Concat {
    +fields
    +nodes
    +eval_ctx
    --
    +as_const(eval_ctx): str
  }

  class Compare {
    +fields
    +expr: Expr
    +ops
    +eval_ctx
    +result
    +value
    +new_value
    +result
    +value: new_value
    --
    +as_const(eval_ctx): t.Any
  }

  class Operand {
    +fields
    +op: str
    +expr: Expr
  }

  class Mul {
    +operator: str
  }

  class Div {
    +operator: str
  }

  class FloorDiv {
    +operator: str
  }

  class Add {
    +operator: str
  }

  class Sub {
    +operator: str
  }

  class Mod {
    +operator: str
  }

  class Pow {
    +operator: str
  }

  class And {
    +operator: str
    +eval_ctx
    --
    +as_const(eval_ctx): t.Any
  }

  class Or {
    +operator: str
    +eval_ctx
    --
    +as_const(eval_ctx): t.Any
  }

  class Not {
    +operator: str
  }

  class Neg {
    +operator: str
  }

  class Pos {
    +operator: str
  }

  class EnvironmentAttribute {
    +fields
    +name: str
  }

  class ExtensionAttribute {
    +fields
    +identifier: str
    +name: str
  }

  class ImportedName {
    +fields
    +importname: str
  }

  class InternalName {
    +fields
    +name: str
    --
    -__init__()
  }

  class MarkSafe {
    +fields
    +expr: Expr
    +eval_ctx
    --
    +as_const(eval_ctx): Markup
  }

  class MarkSafeIfAutoescape {
    +fields
    +expr: Expr
    +eval_ctx
    +expr
    --
    +as_const(eval_ctx)
  }

  class ContextReference {
  }

  class DerivedContextReference {
  }

  class Continue {
  }

  class Break {
  }

  class Scope {
    +fields
    +body
  }

  class OverlayScope {
    +fields
    +context: Expr
    +body
  }

  class EvalContextModifier {
    +fields
    +options
  }

  class ScopedEvalContextModifier {
    +fields
    +body
  }

  class _MemcachedClient {
    +get(key): bytes
    +set(key, value, timeout)
  }

  class Bucket {
    +magic
    +checksum
    +out
    --
    -__init__(environment, key, checksum)
    +reset()
    +load_bytecode(f)
    +write_bytecode(f)
    +bytecode_from_string(string)
    +bytecode_to_string(): bytes
  }

  class BytecodeCache {
    +hash
    +key
    +checksum
    +bucket
    --
    +load_bytecode(bucket)
    +dump_bytecode(bucket)
    +clear()
    +get_cache_key(name, filename): str
    +get_source_checksum(source): str
    +get_bucket(environment, name, filename, source): Bucket
    +set_bucket(bucket)
  }

  class FileSystemBytecodeCache {
    +directory
    +tmpdir
    +dirname
    +actual_dir
    +actual_dir_stat
    +actual_dir_stat
    +filename
    +f
    +name
    +f
    +files
    --
    -__init__(directory, pattern)
    -_get_default_cache_dir(): str
    -_unsafe_dir()
    -_get_cache_filename(bucket): str
    +load_bytecode(bucket)
    +dump_bytecode(bucket)
    +remove_silent()
    +clear()
  }

  class MemcachedBytecodeCache {
    +code
    +key
    +value
    --
    -__init__(client, prefix, timeout, ignore_memcache_errors)
    +load_bytecode(bucket)
    +dump_bytecode(bucket)
  }

  class HasHTML {
    -__html__(): str
  }

  class _GroupTuple {
    +grouper: t.Any
    +list
    --
    -__repr__(): str
    -__str__(): str
  }

  class _TranslationsBasic {
    +gettext(message): str
    +ngettext(singular, plural, n): str
  }

  class _TranslationsContext {
    +pgettext(context, message): str
    +npgettext(context, singular, plural, n): str
  }

  class Extension {
    +identifier
    +tags
    +priority: int
    +rv
    +args
    +kwargs
    --
    -__init_subclass__()
    -__init__(environment)
    +bind(environment)
    +preprocess(source, name, filename): str
    +filter_stream(stream)
    +parse(parser)
    +attr(name, lineno): nodes.ExtensionAttribute
    +call_method(name, args, kwargs, dyn_args, dyn_kwargs, lineno): nodes.Call
  }

  class InternationalizationExtension {
    +tags
    +gettext
    +gettext
    +ngettext
    +ngettext
    +pgettext
    +npgettext
    +translations
    +pgettext
    +npgettext
    +gettext
    +ngettext
    +pgettext
    +npgettext
    +source
    +lineno
    +context: NoneType
    +context_token
    +context
    +plural_expr
    +plural_expr_assignment
    +num_called_num: bool
    +variables
    +trimmed: NoneType
    +token
    +var
    +trimmed
    +var
    +plural_expr
    +plural_expr_assignment
    +plural_expr: var
    +num_called_num
    +plural: NoneType
    +have_plural: bool
    +referenced
    +plural_expr
    +num_called_num
    +have_plural: bool
    +token
    +plural_expr
    +num_called_num
    +plural_expr: NoneType
    +trimmed
    +singular
    +plural
    +node
    +referenced
    +buf
    +name
    +block_name
    +newstyle
    +node: nodes.Expr
    +singular
    +plural
    +func_name: str
    +func_args
    +func_name
    +func_name
    +node
    +node
    +node
    --
    -__init__(environment)
    -_install(translations, newstyle)
    -_install_null(newstyle)
    +pgettext(s): str
    +npgettext(s, p, n): str
    -_install_callables(gettext, ngettext, newstyle, pgettext, npgettext)
    -_uninstall(translations)
    -_extract(source, gettext_functions)
    +parse(parser)
    -_trim_whitespace(string, _ws_re): str
    -_parse_block(parser, allow_pluralize)
    -_make_node(singular, plural, context, variables, plural_expr, vars_referenced, num_called_num): nodes.Output
  }

  class ExprStmtExtension {
    +tags
    +node
    --
    +parse(parser): nodes.ExprStmt
  }

  class LoopControlExtension {
    +tags
    +token
    --
    +parse(parser)
  }

  class DebugExtension {
    +tags
    +lineno
    +context
    +result
    +result
    --
    +parse(parser): nodes.Output
    -_render(context): str
  }

  class _CommentFinder {
    -__init__(tokens, comment_tags)
    +find_backwards(offset)
    +find_comments(lineno)
  }

  class TrackingCodeGenerator {
    -__init__(environment)
    +write(x)
    +enter_frame(frame)
  }

}

package "venv2.lib.python3.12.site-packages.pathspec" {
  class AlreadyRegisteredError {
    -__init__(name, pattern_factory)
    +message(): str
    +name(): str
    +pattern_factory()
  }

  class RecursionError {
    -__init__(real_path, first_path, second_path)
    +first_path(): str
    +message(): str
    +real_path(): str
    +second_path(): str
  }

  class CheckResult {
    +file: TStrPath
    +include
    +index
  }

  class MatchDetail {
    -__init__(patterns)
  }

  class TreeEntry {
    +follow_links: bool
    +node_stat
    +follow_links: bool
    +node_stat
    +follow_links: bool
    --
    -__init__(name, path, lstat, stat)
    +is_dir(follow_links): bool
    +is_file(follow_links): bool
    +is_symlink(): bool
    +stat(follow_links): os.stat_result
  }

  class Pattern {
    -__init__(include)
    +match(files)
    +match_file(file)
  }

  class RegexPattern {
    +regex
    +regex: pattern
    +match
    --
    -__init__(pattern, include)
    -__eq__(other): bool
    +match_file(file)
    +{class} pattern_to_regex(pattern)
  }

  class RegexMatchResult {
    +match: MatchHint
  }

  class PathSpec {
    +patterns
    +paired_patterns
    +norm_file
    +use_patterns
    +norm_file
    +files
    +pattern_factory
    +patterns
    +use_patterns
    +norm_file
    +include
    +norm_file
    +use_patterns
    +norm_file
    +include
    +entries
    +files
    +match_tree: match_tree_files
    --
    -__init__(patterns)
    -__eq__(other): bool
    -__len__(): int
    -__add__(other): Self
    -__iadd__(other): Self
    +check_file(file, separators)
    +check_files(files, separators)
    +check_tree_files(root, on_error, follow_links)
    +{class} from_lines(pattern_factory, lines): Self
    +match_entries(entries, separators)
    +match_file(file, separators): bool
    +match_files(files, separators)
    +match_tree_entries(root, on_error, follow_links)
    +match_tree_files(root, on_error, follow_links)
  }

  class GitIgnoreSpec {
    +pattern_factory: GitWildMatchPattern
    +self
    +out_include
    +out_index
    +out_priority: int
    +match
    +dir_mark
    +priority: int
    +priority: int
    +out_include
    +out_index: index
    +out_priority: priority
    +out_include
    +out_index: index
    +out_priority: priority
    --
    -__eq__(other): bool
    +{class} from_lines(pattern_factory, lines): Self
    +{class} from_lines(lines, pattern_factory): Self
    +{class} from_lines(lines, pattern_factory): Self
    -{static} _match_file(file)
  }

}

package "venv2.lib.python3.12.site-packages.pathspec.patterns" {
  class GitWildMatchPatternError {
  }

  class GitWildMatchPattern {
    +return_type: str
    +return_type: bytes
    +pattern
    +original_pattern: pattern
    +pattern
    +pattern
    +regex: NoneType
    +include: NoneType
    +regex: NoneType
    +include: NoneType
    +include: bool
    +pattern
    +include: bool
    +override_regex: NoneType
    +pattern_segs
    +is_dir_pattern
    +prev
    +seg
    +override_regex
    +output
    +need_slash: bool
    +end
    +need_slash: bool
    +need_slash: bool
    +need_slash: bool
    +need_slash: bool
    +regex
    +regex: override_regex
    +regex: NoneType
    +include: NoneType
    +regex
    +escape: bool
    +regex: str
    +char
    +escape: bool
    +escape: bool
    +j: i
    +expr: str
    +i: j
    +return_type: str
    +string: s
    +return_type: bytes
    +string
    +meta_characters: str
    +out_string
    --
    +{class} pattern_to_regex(pattern)
    -{static} _translate_segment_glob(): str
    +{static} escape(): AnyStr
  }

  class GitIgnorePattern {
    -__init__()
    -{static} _deprecated()
    +{class} pattern_to_regex()
  }

}

package "venv2.lib.python3.12.site-packages.markdown_it" {
  class ParserBlock {
    +rules
    +line: startLine
    +maxNesting
    +hasEmptyLines: bool
    +line
    +line
    +hasEmptyLines: bool
    +hasEmptyLines: bool
    +state
    --
    -__init__()
    +tokenize(state, startLine, endLine)
    +parse(src, md, env, outTokens)
  }

  class _NesterTokens {
    +opening: Token
    +closing: Token
  }

  class SyntaxTreeNode {
    +inline_token
    +tokens
    +self_index
    +self_index
    +child
    +reversed_tokens
    +token
    +nested_tokens
    +nesting: int
    +token
    +prefix
    +text
    +map_
    --
    -__init__(tokens)
    -__repr__(): str
    -__getitem__(item): _NodeType
    -__getitem__(item)
    -__getitem__(item)
    +to_tokens()
    +recursive_collect_tokens(token_list)
    +children()
    +children(value)
    +parent()
    +parent(value)
    +is_root(): bool
    +is_nested(): bool
    +siblings()
    +type(): str
    +next_sibling()
    +previous_sibling()
    -_add_child(tokens)
    -_set_children_from_tokens(tokens)
    +pretty(): str
    +walk()
    -_attribute_token(): Token
    +tag(): str
    +attrs()
    +attrGet(name)
    +map()
    +level(): int
    +content(): str
    +markup(): str
    +info(): str
    +meta()
    +block(): bool
    +hidden(): bool
  }

  class Token {
    +type: str
    +tag: str
    +nesting
    +attrs
    +map
    +level: int
    +children
    +content: str
    +markup: str
    +info: str
    +meta
    +block: bool
    +hidden: bool
    +current
    +mapping
    +mapping
    +token
    --
    -__post_init__()
    +attrIndex(name): int
    +attrItems()
    +attrPush(attrData)
    +attrSet(name, value)
    +attrGet(name)
    +attrJoin(name, value)
    +copy(): Token
    +as_dict()
    +{class} from_dict(dct): Token
  }

  class RendererProtocol {
    -__output__
    --
    +render(tokens, options, env): Any
  }

  class RendererHTML {
    +result: str
    +result: str
    +result: str
    +needLf: bool
    +token
    +needLf: bool
    +nextToken
    +needLf: bool
    +needLf: bool
    +result: str
    +result: str
    +token
    +token
    +token
    +info
    +langName: str
    +langAttrs: str
    +arr
    +langName
    +langAttrs
    +highlighted
    +highlighted
    +tmpToken
    +token
    --
    -__init__(parser)
    +render(tokens, options, env): str
    +renderInline(tokens, options, env): str
    +renderToken(tokens, idx, options, env): str
    +{static} renderAttrs(): str
    +renderInlineAsText(tokens, options, env): str
    +code_inline(tokens, idx, options, env): str
    +code_block(tokens, idx, options, env): str
    +fence(tokens, idx, options, env): str
    +image(tokens, idx, options, env): str
    +hardbreak(tokens, idx, options, env): str
    +softbreak(tokens, idx, options, env): str
    +text(tokens, idx, options, env): str
    +html_block(tokens, idx, options, env): str
    +html_inline(tokens, idx, options, env): str
  }

  class StateBase {
    -__init__(src, md, env)
    +src(): str
    +src(value)
    +srcCharCode()
  }

  class RuleOptionsType {
    +alt
  }

  class Rule {
    +name: str
    +enabled: bool
    +fn: RuleFuncTv
    +alt
  }

  class Ruler {
    +chains
    +index
    +options
    +index
    +options
    +index
    +options
    +names
    +result
    +idx
    +names
    +names
    +result
    +idx
    --
    -__init__()
    -__find__(name): int
    -__compile__()
    +at(ruleName, fn, options)
    +before(beforeName, ruleName, fn, options)
    +after(afterName, ruleName, fn, options)
    +push(ruleName, fn, options)
    +enable(names, ignoreInvalid)
    +enableOnly(names, ignoreInvalid)
    +disable(names, ignoreInvalid)
    +getRules(chainName)
    +get_all_rules()
    +get_active_rules()
  }

  class ParserCore {
    -__init__()
    +process(state)
  }

  class OptionsType {
    +maxNesting: int
    +html: bool
    +linkify: bool
    +typographer: bool
    +quotes: str
    +xhtmlOut: bool
    +breaks: bool
    +langPrefix: str
    +highlight
  }

  class PresetType {
    +options: OptionsType
    +components
  }

  class OptionsDict {
    -__init__(options)
    -__getitem__(key): Any
    -__setitem__(key, value)
    -__delitem__(key)
    -__iter__()
    -__len__(): int
    -__repr__(): str
    -__str__(): str
    +maxNesting(): int
    +maxNesting(value)
    +html(): bool
    +html(value)
    +linkify(): bool
    +linkify(value)
    +typographer(): bool
    +typographer(value)
    +quotes(): str
    +quotes(value)
    +xhtmlOut(): bool
    +xhtmlOut(value)
    +breaks(): bool
    +breaks(value)
    +langPrefix(): str
    +langPrefix(value)
    +highlight()
    +highlight(value)
  }

  class ParserInline {
    +ok: bool
    +pos
    +rules
    +maxNesting
    +cache
    +ok
    +ok: bool
    +rules
    +end
    +maxNesting
    +ok
    +state
    +rules2
    --
    -__init__()
    +skipToken(state)
    +tokenize(state)
    +parse(src, md, env, tokens)
  }

  class MarkdownIt {
    +config
    +config: presets
    +options
    +options
    +rules
    +rules2
    +rules
    +rules
    +result
    +names
    +missed
    +result
    +names
    +missed
    +chain_rules
    +env
    +state
    +env
    +env
    +state
    +env
    --
    -__init__(config, options_update)
    -__repr__(): str
    -__getitem__(name): ParserInline
    -__getitem__(name): ParserBlock
    -__getitem__(name): ParserCore
    -__getitem__(name): RendererProtocol
    -__getitem__(name): Any
    -__getitem__(name): Any
    +set(options)
    +configure(presets, options_update): MarkdownIt
    +get_all_rules()
    +get_active_rules()
    +enable(names, ignoreInvalid): MarkdownIt
    +disable(names, ignoreInvalid): MarkdownIt
    +reset_rules()
    +add_render_rule(name, function, fmt)
    +use(plugin): MarkdownIt
    +parse(src, env)
    +render(src, env): Any
    +parseInline(src, env)
    +renderInline(src, env): Any
    +validateLink(url): bool
    +normalizeLink(url): str
    +normalizeLinkText(link): str
  }

}

package "venv2.lib.python3.12.site-packages.markdown_it.rules_block" {
  class StateBlock {
    +indent_found: bool
    +start: int
    +pos: int
    +indent: int
    +offset: int
    +length
    +indent_found: bool
    +indent_found: bool
    +indent: int
    +offset: int
    +start
    +token
    +current
    +current
    +current
    +line: begin
    +queue
    +i: int
    +lineIndent: int
    +lineStart
    +first
    +last
    +ch
    --
    -__init__(src, md, env, tokens)
    -__repr__(): str
    +push(ttype, tag, nesting): Token
    +isEmpty(line): bool
    +skipEmptyLines(from_pos): int
    +skipSpaces(pos): int
    +skipSpacesBack(pos, minimum): int
    +skipChars(pos, code): int
    +skipCharsStr(pos, ch): int
    +skipCharsBack(pos, code, minimum): int
    +skipCharsStrBack(pos, ch, minimum): int
    +getLines(begin, end, indent, keepLastLF): str
    +is_code_block(line): bool
  }

}

package "venv2.lib.python3.12.site-packages.markdown_it.rules_core" {
  class StateCore {
    -__init__(src, md, env, tokens)
  }

  class _LinkType {
    +url: str
    +text: str
    +index: int
    +last_index: int
    +schema
  }

}

package "venv2.lib.python3.12.site-packages.markdown_it.rules_inline" {
  class Delimiter {
    +marker: int
    +length: int
    +token: int
    +end: int
    +open: bool
    +close: bool
    +level
  }

  class StateInline {
    +token
    +token
    +token_meta: NoneType
    +token_meta
    +pos: start
    +maximum
    +marker
    +lastChar
    +count
    +nextChar
    +isLastPunctChar
    +isNextPunctChar
    +isLastWhiteSpace
    +isNextWhiteSpace
    +left_flanking
    +right_flanking
    +can_open
    +can_close
    +can_open: left_flanking
    +can_close: right_flanking
    --
    -__init__(src, md, env, outTokens)
    -__repr__(): str
    +pushPending(): Token
    +push(ttype, tag, nesting): Token
    +scanDelims(start, canSplitWord): Scanned
  }

}

package "venv2.lib.python3.12.site-packages.markdown_it.presets" {
  class gfm_like {
    +config
    --
    +{static} make(): PresetType
  }

}

package "venv2.lib.python3.12.site-packages.markdown_it.helpers" {
  class _Result {
    -__init__()
    -__str__(): str
  }

}

package "venv2.lib.python3.12.site-packages.werkzeug" {
  class UserAgent {
    +platform
    +browser
    +version
    +language
    --
    -__init__(string)
    -__repr__(): str
    -__str__(): str
    -__bool__(): bool
    +to_header(): str
  }

  class ReloaderLoop {
    +name: str
    +args
    +new_environ
    +exit_code
    +filename
    --
    -__init__(extra_files, exclude_patterns, interval)
    -__enter__(): ReloaderLoop
    -__exit__(exc_type, exc_val, exc_tb)
    +run()
    +run_step()
    +restart_with_reloader(): int
    +trigger_reload(filename)
    +log_reload(filename)
  }

  class StatReloaderLoop {
    +name: str
    +mtime
    +old_time
    --
    -__enter__(): ReloaderLoop
    +run_step()
  }

  class WatchdogReloaderLoop {
    +trigger_reload
    --
    -__init__()
  }

  class EventHandler {
    +on_any_event(event)
  }

  class _Missing {
    -__repr__(): str
    -__reduce__(): str
  }

  class _ColorStreamHandler {
    +stream: NoneType
    +stream
    --
    -__init__()
  }

  class _DictAccessorProperty {
    +read_only: bool
    +storage
    +value
    --
    -__init__(name, default, load_func, dump_func, read_only, doc)
    +lookup(instance)
    -__get__(instance, owner)
    -__get__(instance, owner): _TAccessorValue
    -__get__(instance, owner)
    -__set__(instance, value)
    -__delete__(instance)
    -__repr__(): str
  }

  class _SslDummy {
    -__getattr__(name): t.Any
  }

  class ForkingMixIn {
  }

  class DechunkedInput {
    +line
    +read: int
    +n
    +read
    +terminator
    --
    -__init__(rfile)
    +readable(): bool
    +read_chunk_len(): int
    +readinto(buf): int
  }

  class WSGIRequestHandler {
    +server: BaseWSGIServer
    +request_url
    +url_scheme
    +path_info
    +path_info
    +path_info
    +environ: WSGIEnvironment
    +key
    +value
    +key
    +value
    +peer_cert
    +environ
    +status_set
    +headers_set
    +status_sent
    +headers_sent
    +chunk_response: bool
    +status_sent: status_set
    +headers_sent: headers_set
    +code
    +header_keys
    +chunk_response: bool
    +exc_info: NoneType
    +status_set: status
    +headers_set: headers
    +application_iter
    +selector
    +total_size: int
    +total_reads: int
    +data
    +status_set: NoneType
    +headers_set: NoneType
    +msg
    +path
    +msg
    +msg
    +msg
    +code
    +msg
    +msg
    +msg
    +msg
    +msg
    +msg
    +address_string
    --
    +server_version(): str
    +make_environ(): WSGIEnvironment
    +run_wsgi()
    +write()
    +start_response(headers, exc_info)
    +execute()
    +handle()
    +connection_dropped(error, environ)
    -__getattr__(name): t.Any
    +address_string(): str
    +port_integer(): int
    +log_request(code, size)
    +log_error(format)
    +log_message(format)
    +log(type, message)
  }

  class BaseWSGIServer {
    +multithread: bool
    +multiprocess: bool
    +request_queue_size: LISTEN_QUEUE
    +allow_reuse_address: bool
    +handler: WSGIRequestHandler
    +address_family
    +server_address
    +server_address
    +ssl_context
    +ssl_context
    +dev_warning: str
    +dev_warning
    +messages
    +scheme
    +display_hostname
    +localhost: str
    +display_hostname
    +localhost: str
    +display_hostname
    +display_hostname
    --
    -__init__(host, port, app, handler, passthrough_errors, ssl_context, fd)
    +log(type, message)
    +serve_forever(poll_interval)
    +handle_error(request, client_address)
    +log_startup()
  }

  class ThreadedWSGIServer {
    +multithread: bool
    +daemon_threads: bool
  }

  class ForkingWSGIServer {
    +multiprocess: bool
    --
    -__init__(host, port, app, processes, handler, passthrough_errors, ssl_context, fd)
  }

  class Local {
    +context_var
    +values
    +values
    +values
    +values
    --
    -__init__(context_var)
    -__iter__()
    -__call__(name)
    -__release_local__()
    -__getattr__(name): t.Any
    -__setattr__(name, value)
    -__delattr__(name)
  }

  class LocalStack {
    +context_var
    +stack
    +stack
    +rv
    +stack
    --
    -__init__(context_var)
    -__release_local__()
    +push(obj)
    +pop()
    +top()
    -__call__(name)
  }

  class LocalManager {
    -__init__(locals)
    +cleanup()
    +make_middleware(app): WSGIApplication
    +application(start_response)
    +middleware(func): WSGIApplication
    -__repr__(): str
  }

  class _ProxyLookup {
    +bind_f
    +bind_f: NoneType
    +obj
    +fallback
    --
    -__init__(f, fallback, class_value, is_attr)
    +bind_f(obj)
    +bind_f(obj)
    -__set_name__(owner, name)
    -__get__(instance, owner): t.Any
    -__repr__(): str
    -__call__(instance): t.Any
  }

  class _ProxyIOp {
    -__init__(f, fallback)
    +bind_f(obj)
    +i_op(other)
  }

  class LocalProxy {
    -_get_current_object
    +get_name: _identity
    +get_name
    +unbound_message: str
    +obj
    +obj
    --
    -__init__(local, name)
    -_get_current_object(): T
    -_get_current_object(): T
    -_get_current_object(): T
    -_get_current_object(): T
  }

  class EnvironBuilder {
    +server_protocol: str
    +wsgi_version
    +request_class: Request
    +json_dumps
    -_args
    -_query_string
    -_input_stream
    -_form
    -_files
    +request_uri
    +query_string
    +base_url
    +query_string
    +query_string
    +headers
    +headers
    +errors_stream
    +auth
    +data
    +data
    +data
    +headers
    +out
    +scheme: str
    +netloc: str
    +script_root: str
    +ct
    +ct
    +d
    +rv
    +rv
    +pieces
    +files
    +files
    +input_stream
    +content_length
    +mimetype
    +content_type
    +start_pos
    +end_pos
    +content_length
    +content_type
    +form_encoded
    +content_length
    +input_stream
    +input_stream
    +result: WSGIEnvironment
    +raw_uri
    +headers
    +combined_headers
    +cls
    --
    -__init__(path, base_url, query_string, method, input_stream, content_type, content_length, errors_stream, multithread, multiprocess, run_once, headers, data, environ_base, environ_overrides, mimetype, json, auth)
    +{class} from_environ(environ): EnvironBuilder
    -_add_file_from_data(key, value)
    -{static} _make_base_url(host, script_root): str
    +base_url(): str
    +base_url(value)
    +content_type()
    +content_type(value)
    +mimetype()
    +mimetype(value)
    +mimetype_params()
    +on_update()
    +content_length()
    +content_length(value)
    -_get_form(name, storage): _TAnyMultiDict
    -_set_form(name, value)
    +form()
    +form(value)
    +files(): FileMultiDict
    +files(value)
    +input_stream()
    +input_stream(value)
    +query_string(): str
    +query_string(value)
    +args()
    +args(value)
    +server_name(): str
    +server_port(): int
    -__del__()
    +close()
    +get_environ(): WSGIEnvironment
    -_path_encode(): str
    +get_request(cls): Request
  }

  class ClientRedirectError {
  }

  class Client {
    +response_wrapper: TestResponse
    +response_wrapper
    +cookie
    +url
    +server_name
    +value
    +cookie
    +rv
    +url
    +builder
    +to_name_parts
    +from_name_parts
    +to_name_parts: from_name_parts
    +path_parts
    +root_parts
    +request
    +arg
    +request
    +request
    +request: arg
    +builder
    +request
    +response_parts
    +response
    +redirects
    +history
    +new_redirect_entry
    +response
    --
    -__init__(application, response_wrapper, use_cookies, allow_subdomain_redirects)
    +get_cookie(key, domain, path)
    +set_cookie(key, value)
    +delete_cookie(key)
    -_add_cookies_to_wsgi(environ)
    -_update_cookies_from_response(server_name, path, headers)
    +run_wsgi_app(environ, buffered)
    +resolve_redirect(response, buffered): TestResponse
    +open(): TestResponse
    +get(): TestResponse
    +post(): TestResponse
    +put(): TestResponse
    +delete(): TestResponse
    +patch(): TestResponse
    +options(): TestResponse
    +head(): TestResponse
    +trace(): TestResponse
    -__repr__(): str
  }

  class TestResponse {
    +default_mimetype: NoneType
    +request: Request
    +history
    --
    -__init__(response, status, headers, request, history)
    +text(): str
  }

  class Cookie {
    +key: str
    +value: str
    +decoded_key: str
    +decoded_value: str
    +expires
    +max_age
    +domain: str
    +origin_only: bool
    +path: str
    +secure
    +http_only
    +same_site
    +params
    --
    -_matches_request(server_name, path): bool
    -_to_request_header(): str
    -{class} _from_response_header(server_name, path, header): te.Self
    -_storage_key()
    -_should_delete(): bool
  }

  class TStreamFactory {
    -__call__(total_content_length, content_type, filename, content_length)
  }

  class FormDataParser {
    +stream_factory: default_stream_factory
    +cls
    +stream
    +content_length
    +parse_func
    +parse_func
    +options
    +parser
    +boundary
    +items
    --
    -__init__(stream_factory, max_form_memory_size, max_content_length, cls, silent)
    +parse_from_environ(environ): t_parse_result
    +parse(stream, mimetype, content_length, options): t_parse_result
    -_parse_multipart(stream, mimetype, content_length, options): t_parse_result
    -_parse_urlencoded(stream, mimetype, content_length, options): t_parse_result
  }

  class MultiPartParser {
    +stream_factory: default_stream_factory
    +cls
    +content_type
    +parameters
    +ct_charset
    +content_type
    +content_length
    +content_length: int
    +container
    +current_part
    +field_size
    +container
    -_write
    +parser
    +fields
    +files
    +event
    +current_part: event
    +field_size: int
    +container
    +current_part: event
    +field_size: NoneType
    +container
    +value
    +container
    +event
    --
    -__init__(stream_factory, max_form_memory_size, cls, buffer_size, max_form_parts)
    +fail(message): te.NoReturn
    +get_part_charset(headers): str
    +start_file_streaming(event, total_content_length)
    +parse(stream, boundary, content_length)
  }

  class cached_property {
    +obj_dict
    +value: _T
    +value
    +value
    --
    -__init__(fget, name, doc)
    -__set__(obj, value)
    -__get__(obj, type): _T
    -__delete__(obj)
  }

  class environ_property {
    +read_only: bool
    --
    +lookup(obj): WSGIEnvironment
  }

  class header_property {
    +lookup(obj): Headers
  }

  class ImportStringError {
    +import_name: str
    +exception: BaseException
    +msg: import_name
    +name: str
    +tracked
    +name
    +imported
    +track
    +track_str
    +msg
    --
    -__init__(import_name, exception)
    -__repr__(): str
  }

  class COEP {
    +UNSAFE_NONE: str
    +REQUIRE_CORP: str
  }

  class COOP {
    +UNSAFE_NONE: str
    +SAME_ORIGIN_ALLOW_POPUPS: str
    +SAME_ORIGIN: str
  }

  class HTTPException {
    +code
    +description
    +description: str
    +description
    +description
    +environ
    +headers
    +response
    +code
    +code
    --
    -__init__(description, response)
    +name(): str
    +get_description(environ, scope): str
    +get_body(environ, scope): str
    +get_headers(environ, scope)
    +get_response(environ, scope): Response
    -__call__(environ, start_response)
    -__str__(): str
    -__repr__(): str
  }

  class BadRequest {
    +code: int
    +description: str
  }

  class BadRequestKeyError {
    +show_exception: bool
    --
    -__init__(arg)
    +description(): str
    +description(value)
  }

  class ClientDisconnected {
  }

  class SecurityError {
  }

  class BadHost {
  }

  class Unauthorized {
    +code: int
    +description: str
    +www_authenticate
    +headers
    --
    -__init__(description, response, www_authenticate)
    +get_headers(environ, scope)
  }

  class Forbidden {
    +code: int
    +description: str
  }

  class NotFound {
    +code: int
    +description: str
  }

  class MethodNotAllowed {
    +code: int
    +description: str
    +headers
    --
    -__init__(valid_methods, description, response)
    +get_headers(environ, scope)
  }

  class NotAcceptable {
    +code: int
    +description: str
  }

  class RequestTimeout {
    +code: int
    +description: str
  }

  class Conflict {
    +code: int
    +description: str
  }

  class Gone {
    +code: int
    +description: str
  }

  class LengthRequired {
    +code: int
    +description: str
  }

  class PreconditionFailed {
    +code: int
    +description: str
  }

  class RequestEntityTooLarge {
    +code: int
    +description: str
  }

  class RequestURITooLarge {
    +code: int
    +description: str
  }

  class UnsupportedMediaType {
    +code: int
    +description: str
  }

  class RequestedRangeNotSatisfiable {
    +code: int
    +description: str
    +headers
    --
    -__init__(length, units, description, response)
    +get_headers(environ, scope)
  }

  class ExpectationFailed {
    +code: int
    +description: str
  }

  class ImATeapot {
    +code: int
    +description: str
  }

  class MisdirectedRequest {
    +code: int
    +description: str
  }

  class UnprocessableEntity {
    +code: int
    +description: str
  }

  class Locked {
    +code: int
    +description: str
  }

  class FailedDependency {
    +code: int
    +description: str
  }

  class PreconditionRequired {
    +code: int
    +description: str
  }

  class _RetryAfter {
    +headers
    +value
    +value
    --
    -__init__(description, response, retry_after)
    +get_headers(environ, scope)
  }

  class TooManyRequests {
    +code: int
    +description: str
  }

  class RequestHeaderFieldsTooLarge {
    +code: int
    +description: str
  }

  class UnavailableForLegalReasons {
    +code: int
    +description: str
  }

  class InternalServerError {
    +code: int
    +description: str
    --
    -__init__(description, response, original_exception)
  }

  class NotImplemented {
    +code: int
    +description: str
  }

  class BadGateway {
    +code: int
    +description: str
  }

  class ServiceUnavailable {
    +code: int
    +description: str
  }

  class GatewayTimeout {
    +code: int
    +description: str
  }

  class HTTPVersionNotSupported {
    +code: int
    +description: str
  }

  class Aborter {
    +mapping: default_exceptions
    --
    -__init__(mapping, extra)
    -__call__(code): t.NoReturn
  }

  class ClosingIterator {
    +iterator
    +callbacks
    +callbacks
    +callbacks
    +iterable_close
    --
    -__init__(iterable, callbacks)
    -__iter__(): ClosingIterator
    -__next__(): bytes
    +close()
  }

  class FileWrapper {
    +data
    --
    -__init__(file, buffer_size)
    +close()
    +seekable(): bool
    +seek()
    +tell()
    -__iter__(): FileWrapper
    -__next__(): bytes
  }

  class _RangeWrapper {
    +chunk
    +chunk: NoneType
    +contextual_read_length
    +chunk
    +chunk
    +contextual_read_length
    +chunk: NoneType
    +contextual_read_length
    +chunk
    +chunk
    --
    -__init__(iterable, start_byte, byte_range)
    -__iter__(): _RangeWrapper
    -_next_chunk(): bytes
    -_first_iteration()
    -_next(): bytes
    -__next__(): bytes
    +close()
  }

  class LimitedStream {
    +size
    +remaining
    +out_size
    +temp_b
    +out_size
    +data
    +out_size
    +out
    +data
    --
    -__init__(stream, limit, is_max)
    +is_exhausted(): bool
    +on_exhausted()
    +on_disconnect(error)
    +exhaust(): bytes
    +readinto(b)
    +readall(): bytes
    +tell(): int
    +readable(): bool
  }

}

package "venv2.lib.python3.12.site-packages.werkzeug.middleware" {
  class DispatcherMiddleware {
    +script
    +path_info: str
    +app
    +path_info
    +app
    +original_script_name
    --
    -__init__(app, mounts)
    -__call__(environ, start_response)
  }

  class ProxyFix {
    +values
    +environ_get
    +orig_remote_addr
    +orig_wsgi_url_scheme
    +orig_http_host
    +x_for
    +x_proto
    +x_host
    +x_port
    +host
    +host
    +x_prefix
    --
    -__init__(app, x_for, x_proto, x_host, x_port, x_prefix)
    -_get_real_value(trusted, value)
    -__call__(environ, start_response)
  }

  class SharedDataMiddleware {
    +exports
    +loader
    +loader
    +loader
    +load_time
    +spec
    +reader
    +path
    +basename
    +resource
    +path
    +path: directory
    +fn_str
    +timestamp
    +checksum
    +path
    +file_loader: NoneType
    +guessed_type
    +mime_type
    +headers
    +timeout
    +etag
    --
    -__init__(app, exports, disallow, cache, cache_timeout, fallback_mimetype)
    +is_allowed(filename): bool
    -_opener(filename): _TOpener
    +get_file_loader(filename): _TLoader
    +get_package_loader(package, package_path): _TLoader
    +loader()
    +get_directory_loader(directory): _TLoader
    +loader()
    +generate_etag(mtime, file_size, real_filename): str
    -__call__(environ, start_response)
  }

  class ProxyMiddleware {
    +target
    +host
    +headers
    +remote_path: path
    +remote_path
    +remote_path
    +content_length
    +chunked: bool
    +chunked: bool
    +con
    +con
    +remote_url
    +querystring
    +remote_url
    +v: str
    +stream
    +data
    +resp
    +data
    +path
    +app
    +app
    --
    -__init__(app, targets, chunk_size, timeout)
    -_set_defaults()
    +proxy_to(opts, path, prefix): WSGIApplication
    +application(start_response)
    +read()
    -__call__(environ, start_response)
  }

  class ProfilerMiddleware {
    +response_body
    +app_iter
    +profile
    +start
    +body
    +elapsed
    +filename
    +filename
    +filename
    +stats
    +path_info
    --
    -__init__(app, stream, sort_by, restrictions, profile_dir, filename_format)
    -__call__(environ, start_response)
    +catching_start_response(headers, exc_info)
    +runapp()
  }

  class WSGIWarning {
  }

  class HTTPWarning {
  }

  class InputStream {
    -__init__(stream)
    +read(): bytes
    +readline(): bytes
    -__iter__()
    +close()
  }

  class ErrorStream {
    -__init__(stream)
    +write(s)
    +flush()
    +writelines(seq)
    +close()
  }

  class GuardedWrite {
    -__init__(write, chunks)
    -__call__(s)
  }

  class GuardedIterator {
    +rv
    +bytes_sent
    +content_length
    +key
    --
    -__init__(iterator, headers_set, chunks)
    -__iter__(): GuardedIterator
    -__next__(): bytes
    +close()
    -__del__()
  }

  class LintMiddleware {
    +script_name
    +path_info
    +status_code_str
    +status_code
    +headers_obj
    +etag
    +etag
    +location
    +environ: WSGIEnvironment
    +start_response: StartResponse
    +headers_set
    +chunks
    +status: str
    +headers
    +exc_info
    +app_iter
    --
    -__init__(app)
    +check_environ(environ)
    +check_start_response(status, headers, exc_info)
    +check_headers(headers)
    +check_iterator(app_iter)
    -__call__()
    +checking_start_response()
  }

}

package "venv2.lib.python3.12.site-packages.werkzeug.wrappers" {
  class Request {
    +max_content_length
    +max_form_memory_size
    +max_form_parts: int
    +form_data_parser_class
    +environ: WSGIEnvironment
    +shallow: bool
    +builder
    +request
    +resp
    +resp
    +parser
    +data
    +data
    +d
    +cached_data
    +files
    +input_stream
    +rv
    +rv
    +rv
    +sources
    +args
    +d
    +remote_user
    +is_multithread
    +is_multiprocess
    +is_run_once
    +json_module: json
    -_cached_json
    +data
    +rv
    +rv: NoneType
    +rv
    --
    -__init__(environ, populate_request, shallow)
    +{class} from_values(): Request
    +{class} application(f): WSGIApplication
    +application()
    -_get_file_stream(total_content_length, content_type, filename, content_length)
    +want_form_data_parsed(): bool
    +make_form_data_parser(): FormDataParser
    -_load_form_data()
    -_get_stream_for_parsing()
    +close()
    -__enter__(): Request
    -__exit__(exc_type, exc_value, tb)
    +stream()
    +data(): bytes
    +get_data(cache, as_text, parse_form_data): bytes
    +get_data(cache, as_text, parse_form_data): str
    +get_data(cache, as_text, parse_form_data)
    +form()
    +values()
    +files()
    +script_root(): str
    +url_root(): str
    +json()
    +get_json(force, silent, cache): t.Any
    +get_json(force, silent, cache)
    +get_json(force, silent, cache)
    +on_json_loading_failed(e): t.Any
  }

  class Response {
    +implicit_sequence_conversion: bool
    +autocorrect_location_header: bool
    +automatically_set_content_length: bool
    +response
    +body_info
    +body_info
    +response
    +rv
    +value
    +data
    +close
    +headers
    +location
    +content_location
    +content_length
    +status
    +ikey
    +location: value
    +content_location: value
    +content_length: value
    +location
    +current_url
    +current_url
    +location
    +content_length
    +status
    +iterable
    +iterable
    +headers
    +app_iter
    +json_module: json
    +data
    +accept_ranges: str
    +parsed_range
    +range_tuple
    +content_range_header
    +content_length
    +environ
    +is206
    +length
    --
    -__init__(response, status, headers, mimetype, content_type, direct_passthrough)
    +call_on_close(func)
    -__repr__(): str
    +{class} force_type(response, environ): Response
    +{class} from_app(app, environ, buffered): Response
    +get_data(as_text): bytes
    +get_data(as_text): str
    +get_data(as_text)
    +set_data(value)
    +calculate_content_length()
    -_ensure_sequence(mutable)
    +make_sequence()
    +iter_encoded()
    +is_streamed(): bool
    +is_sequence(): bool
    +close()
    -__enter__(): Response
    -__exit__(exc_type, exc_value, tb)
    +freeze()
    +get_wsgi_headers(environ): Headers
    +get_app_iter(environ)
    +get_wsgi_response(environ)
    -__call__(environ, start_response)
    +json()
    +get_json(force, silent): t.Any
    +get_json(force, silent)
    +get_json(force, silent)
    +stream(): ResponseStream
    -_wrap_range_response(start, length)
    -_is_range_request_processable(environ): bool
    -_process_range_request(environ, complete_length, accept_ranges): bool
    +make_conditional(request_or_environ, accept_ranges, complete_length): Response
    +add_etag(overwrite, weak)
  }

  class ResponseStream {
    +mode: str
    --
    -__init__(response)
    +write(value): int
    +writelines(seq)
    +close()
    +flush()
    +isatty(): bool
    +tell(): int
    +encoding(): str
  }

}

package "venv2.lib.python3.12.site-packages.werkzeug.sansio" {
  class Event {
  }

  class Preamble {
    +data: bytes
  }

  class Field {
    +name: str
    +headers: Headers
  }

  class File {
    +name: str
    +filename: str
    +headers: Headers
  }

  class Data {
    +data: bytes
    +more_data: bool
  }

  class Epilogue {
    +data: bytes
  }

  class NeedData {
  }

  class State {
    +PREAMBLE
    +PART
    +DATA
    +DATA_START
    +EPILOGUE
    +COMPLETE
  }

  class MultipartDecoder {
    +last_nl
    +last_nl
    +last_cr
    +last_cr
    +event: Event
    +match
    +data
    +event
    +match
    +headers
    +headers_end
    +name
    +filename
    +event
    +event
    +event
    +event
    +event
    +headers
    +data
    +line
    +match
    +data_start
    +data_start: int
    +boundary
    +data_end
    +del_index
    +data_end
    +del_index
    +more_data: bool
    +match
    +data_end
    +del_index
    +data_end
    +del_index
    +more_data
    --
    -__init__(boundary, max_form_memory_size)
    +last_newline(data): int
    +receive_data(data)
    +next_event(): Event
    -_parse_headers(data): Headers
    -_parse_data(data)
  }

  class MultipartEncoder {
    +data
    --
    -__init__(boundary)
    +send_event(event): bytes
  }

  class Request {
    +parameter_storage_class
    +dict_storage_class
    +list_storage_class
    +user_agent_class
    +trusted_hosts
    +url
    +url
    +wsgi_combined_cookie
    +content_type
    +content_encoding
    +content_md5
    +referrer
    +date
    +max_forwards
    +cache_control
    +origin
    +access_control_request_headers
    +access_control_request_method
    +mt
    --
    -__init__(method, scheme, server, root_path, path, query_string, headers, remote_addr)
    -__repr__(): str
    +args()
    +access_route()
    +full_path(): str
    +is_secure(): bool
    +url(): str
    +base_url(): str
    +root_url(): str
    +host_url(): str
    +host(): str
    +cookies()
    +content_length()
    -_parse_content_type()
    +mimetype(): str
    +mimetype_params()
    +pragma(): HeaderSet
    +accept_mimetypes(): MIMEAccept
    +accept_charsets(): CharsetAccept
    +accept_encodings(): Accept
    +accept_languages(): LanguageAccept
    +cache_control(): RequestCacheControl
    +if_match(): ETags
    +if_none_match(): ETags
    +if_modified_since()
    +if_unmodified_since()
    +if_range(): IfRange
    +range()
    +user_agent(): UserAgent
    +authorization()
    +is_json(): bool
  }

  class Response {
    +default_status: int
    +default_mimetype
    +max_cookie_size: int
    +headers: Headers
    +mimetype
    +mimetype
    +content_type: mimetype
    +status
    +status_code
    +value
    +status_code
    +status
    +status
    +mt
    +ct
    +d
    +location
    +age
    +content_type
    +content_length
    +content_location
    +content_encoding
    +content_md5
    +date
    +expires
    +last_modified
    +value
    +seconds
    +value
    +value
    +vary
    +content_language
    +allow
    +accept_ranges
    +rv
    +rv
    +value
    +value
    +rv
    +rv
    +rv
    +rv
    +access_control_allow_headers
    +access_control_allow_methods
    +access_control_allow_origin
    +access_control_expose_headers
    +access_control_max_age
    +cross_origin_opener_policy
    +cross_origin_embedder_policy
    --
    -__init__(status, headers, mimetype, content_type)
    -__repr__(): str
    +status_code(): int
    +status_code(code)
    +status(): str
    +status(value)
    -_clean_status(value)
    +set_cookie(key, value, max_age, expires, path, domain, secure, httponly, samesite, partitioned)
    +delete_cookie(key, path, domain, secure, httponly, samesite, partitioned)
    +is_json(): bool
    +mimetype()
    +mimetype(value)
    +mimetype_params()
    +on_update()
    +retry_after()
    +retry_after(value)
    +cache_control(): ResponseCacheControl
    +on_update()
    +set_etag(etag, weak)
    +get_etag()
    +content_range(): ContentRange
    +on_update()
    +content_range(value)
    +www_authenticate(): WWWAuthenticate
    +on_update()
    +www_authenticate(value)
    +on_update()
    +www_authenticate()
    +content_security_policy(): ContentSecurityPolicy
    +on_update()
    +content_security_policy(value)
    +content_security_policy_report_only(): ContentSecurityPolicy
    +on_update()
    +content_security_policy_report_only(value)
    +access_control_allow_credentials(): bool
    +access_control_allow_credentials(value)
  }

}

package "venv2.lib.python3.12.site-packages.werkzeug.datastructures" {
  class Authorization {
    +data
    +scheme
    +rest
    +value
    --
    -__init__(auth_type, data, token)
    -__getattr__(name)
    -__getitem__(name)
    +get(key, default)
    -__contains__(key): bool
    -__eq__(other): bool
    +{class} from_header(value)
    +to_header(): str
    -__str__(): str
    -__repr__(): str
  }

  class WWWAuthenticate {
    +scheme
    +rest
    +items
    +value
    +value
    --
    -__init__(auth_type, values, token)
    -_trigger_on_update()
    +type(): str
    +type(value)
    +parameters()
    +parameters(value)
    +token()
    +token(value)
    -__getitem__(key)
    -__setitem__(key, value)
    -__delitem__(key)
    -__getattr__(name)
    -__setattr__(name, value)
    -__delattr__(name)
    -__contains__(key): bool
    -__eq__(other): bool
    +get(key, default)
    +{class} from_header(value)
    +to_header(): str
    -__str__(): str
    -__repr__(): str
  }

  class ImmutableListMixin {
    -_hash_cache
    +rv
    --
    -__hash__(): int
    -__reduce_ex__(protocol): t.Any
    -__delitem__(key): t.NoReturn
    -__iadd__(other): t.NoReturn
    -__imul__(other): t.NoReturn
    -__setitem__(key, value): t.NoReturn
    +append(item): t.NoReturn
    +remove(item): t.NoReturn
    +extend(iterable): t.NoReturn
    +insert(pos, value): t.NoReturn
    +pop(index): t.NoReturn
    +reverse(): t.NoReturn
    +sort(key, reverse): t.NoReturn
  }

  class ImmutableDictMixin {
    -_hash_cache
    +instance
    +rv
    --
    +{class} fromkeys(keys, value)
    +{class} fromkeys(keys, value)
    +{class} fromkeys(keys, value)
    -__reduce_ex__(protocol): t.Any
    -_iter_hashitems()
    -__hash__(): int
    +setdefault(key, default): t.NoReturn
    +update(): t.NoReturn
    -__ior__(other): t.NoReturn
    +pop(key, default): t.NoReturn
    +popitem(): t.NoReturn
    -__setitem__(key, value): t.NoReturn
    -__delitem__(key): t.NoReturn
    +clear(): t.NoReturn
  }

  class ImmutableMultiDictMixin {
    -__reduce_ex__(protocol): t.Any
    -_iter_hashitems()
    +add(key, value): t.NoReturn
    +popitemlist(): t.NoReturn
    +poplist(key): t.NoReturn
    +setlist(key, new_list): t.NoReturn
    +setlistdefault(key, default_list): t.NoReturn
  }

  class ImmutableHeadersMixin {
    -__delitem__(key): t.NoReturn
    -__setitem__(key, value): t.NoReturn
    +set(): t.NoReturn
    +setlist(key, values): t.NoReturn
    +add(): t.NoReturn
    +add_header(): t.NoReturn
    +remove(key): t.NoReturn
    +extend(): t.NoReturn
    +update(): t.NoReturn
    -__ior__(other): t.NoReturn
    +insert(pos, value): t.NoReturn
    +pop(key, default): t.NoReturn
    +popitem(): t.NoReturn
    +setdefault(key, default): t.NoReturn
    +setlistdefault(key, default): t.NoReturn
  }

  class UpdateDictMixin {
    +on_update
    +modified
    +rv
    +modified
    +rv
    +rv
    --
    +setdefault(key, default): V
    +pop(key): V
    +pop(key, default): V
    +pop(key, default): T
    +pop(key, default)
    -__setitem__(key, value)
    -__delitem__(key)
    +clear()
    +popitem()
    +update()
    -__ior__(other): te.Self
  }

  class IfRange {
    -__init__(etag, date)
    +to_header(): str
    -__str__(): str
    -__repr__(): str
  }

  class Range {
    +end: length
    +rng
    +ranges
    +range
    --
    -__init__(units, ranges)
    +range_for_length(length)
    +make_content_range(length)
    +to_header(): str
    +to_content_range_header(length)
    -__str__(): str
    -__repr__(): str
  }

  class _CallbackProperty {
    -__set_name__(owner, name)
    -__get__(instance, owner): te.Self
    -__get__(instance, owner): T
    -__get__(instance, owner)
    -__set__(instance, value)
  }

  class ContentRange {
    +units
    +start
    +stop
    +length
    +length
    +length
    --
    -__init__(units, start, stop, length, on_update)
    +set(start, stop, length, units)
    +unset()
    +to_header(): str
    -__bool__(): bool
    -__str__(): str
    -__repr__(): str
  }

  class ContentSecurityPolicy {
    +base_uri
    +child_src
    +connect_src
    +default_src
    +font_src
    +form_action
    +frame_ancestors
    +frame_src
    +img_src
    +manifest_src
    +media_src
    +navigate_to
    +object_src
    +prefetch_src
    +plugin_types
    +report_to
    +report_uri
    +sandbox
    +script_src
    +script_src_attr
    +script_src_elem
    +style_src
    +style_src_attr
    +style_src_elem
    +worker_src
    +kv_str
    --
    -__init__(values, on_update)
    -_get_value(key)
    -_set_value(key, value)
    -_del_value(key)
    +to_header(): str
    -__str__(): str
    -__repr__(): str
  }

  class ETags {
    +rv
    +etag
    --
    -__init__(strong_etags, weak_etags, star_tag)
    +as_set(include_weak)
    +is_weak(etag): bool
    +is_strong(etag): bool
    +contains_weak(etag): bool
    +contains(etag): bool
    +contains_raw(etag): bool
    +to_header(): str
    -__call__(etag, data, include_weak): bool
    -__bool__(): bool
    -__str__(): str
    -__len__(): int
    -__iter__()
    -__contains__(etag): bool
    -__repr__(): str
  }

  class _CacheControl {
    +no_store: bool
    +max_age
    +no_transform: bool
    +stale_if_error
    +value
    +value
    +kv_str
    +cache_property
    --
    -__init__(values, on_update)
    -_get_cache_value(key, empty, type): t.Any
    -_set_cache_value(key, value, type)
    -_del_cache_value(key)
    +to_header(): str
    -__str__(): str
    -__repr__(): str
  }

  class RequestCacheControl {
    +no_cache: bool
    +max_stale
    +min_fresh
    +only_if_cached: bool
  }

  class ResponseCacheControl {
    +no_cache
    +public: bool
    +private
    +must_revalidate: bool
    +proxy_revalidate: bool
    +s_maxage
    +immutable: bool
    +must_understand: bool
    +stale_while_revalidate
  }

  class Accept {
    +values
    +pairs_str
    +result
    +value
    +result: default
    +best_quality: float
    +best_specificity
    +match
    +specificity
    +result: server_item
    +best_quality: quality
    +best_specificity: specificity
    --
    -__init__(values)
    -_specificity(value)
    -_value_matches(value, item): bool
    -__getitem__(key): float
    -__getitem__(key)
    -__getitem__(key)
    -__getitem__(key)
    +quality(key): float
    -__contains__(value): bool
    -__repr__(): str
    +index(key): int
    +find(key): int
    +values()
    +to_header(): str
    -__str__(): str
    -_best_single_match(match)
    +best_match(matches)
    +best_match(matches, default): str
    +best_match(matches, default)
    +best()
  }

  class MIMEAccept {
    +normalized_value
    +value_params
    +normalized_item
    +item_params
    --
    -_specificity(value)
    -_value_matches(value, item): bool
    +accept_html(): bool
    +accept_xhtml(): bool
    +accept_json(): bool
  }

  class LanguageAccept {
    +result
    +fallback
    +result
    +fallback_matches
    +result
    --
    -_value_matches(value, item): bool
    +best_match(matches)
    +best_match(matches, default): str
    +best_match(matches, default)
  }

  class CharsetAccept {
    -_value_matches(value, item): bool
    -_normalize(): str
  }

  class FileStorage {
    +filename
    +filename
    +filename: NoneType
    +filename
    +headers
    +close_dst: bool
    +dst
    +dst
    +close_dst: bool
    --
    -__init__(stream, filename, name, content_type, content_length, headers)
    -_parse_content_type()
    +content_type()
    +content_length(): int
    +mimetype(): str
    +mimetype_params()
    +save(dst, buffer_size)
    +close()
    -__bool__(): bool
    -__getattr__(name): t.Any
    -__iter__()
    -__repr__(): str
  }

  class FileMultiDict {
    +filename
    +file_obj
    +file_obj: file
    +content_type
    --
    +add_file(name, file, filename, content_type)
  }

  class ImmutableList {
    -__repr__(): str
  }

  class TypeConversionDict {
    +rv
    --
    +get(key)
    +get(key, default): V
    +get(key, default)
    +get(key, type)
    +get(key, default, type): T
    +get(key, default, type)
  }

  class ImmutableTypeConversionDict {
    +copy()
    -__copy__(): te.Self
  }

  class MultiDict {
    +tmp
    +value
    +value
    +tmp
    +lst
    +rv
    +result
    +values
    +values
    +values
    +rv
    +lst
    +lst
    +item
    +item
    --
    -__init__(mapping)
    -__getstate__(): t.Any
    -__setstate__(value)
    -__iter__()
    -__getitem__(key): V
    -__setitem__(key, value)
    +add(key, value)
    +getlist(key)
    +getlist(key, type)
    +getlist(key, type)
    +setlist(key, new_list)
    +setdefault(key)
    +setdefault(key, default): V
    +setdefault(key, default)
    +setlistdefault(key, default_list)
    +items(multi)
    +lists()
    +values()
    +listvalues()
    +copy(): te.Self
    +deepcopy(memo): te.Self
    +to_dict()
    +to_dict(flat)
    +to_dict(flat)
    +update(mapping)
    -__or__(other)
    -__ior__(other): te.Self
    +pop(key): V
    +pop(key, default): V
    +pop(key, default)
    +pop(key, default)
    +popitem()
    +poplist(key)
    +popitemlist()
    -__copy__(): te.Self
    -__deepcopy__(memo): te.Self
    -__repr__(): str
  }

  class _omd_bucket {
    -__init__(omd, key, value)
    +unlink(omd)
  }

  class _OrderedMultiDict {
    +iter1
    +iter2
    +ptr
    +ptr
    +returned_keys
    +ptr
    +returned_keys
    +ptr
    +ptr
    +rv
    +rv
    +result
    +buckets
    +buckets
    +buckets
    +key: K
    +buckets
    +key: K
    +buckets
    --
    -__init__(mapping)
    -__eq__(other): bool
    -__reduce_ex__(protocol): t.Any
    -__getstate__(): t.Any
    -__setstate__(values)
    -__getitem__(key): V
    -__setitem__(key, value)
    -__delitem__(key)
    +keys()
    -__iter__()
    +values()
    +items(multi)
    +lists()
    +listvalues()
    +add(key, value)
    +getlist(key)
    +getlist(key, type)
    +getlist(key, type)
    +setlist(key, new_list)
    +setlistdefault(key, default_list): t.NoReturn
    +update(mapping)
    +poplist(key)
    +pop(key): V
    +pop(key, default): V
    +pop(key, default)
    +pop(key, default)
    +popitem()
    +popitemlist()
  }

  class CombinedMultiDict {
    +rv
    +found
    +rv
    --
    -__reduce_ex__(protocol): t.Any
    -__init__(dicts)
    +{class} fromkeys(keys, value): t.NoReturn
    -__getitem__(key): V
    +get(key)
    +get(key, default): V
    +get(key, default)
    +get(key, type)
    +get(key, default, type): T
    +get(key, default, type)
    +getlist(key)
    +getlist(key, type)
    +getlist(key, type)
    -_keys_impl()
    +keys()
    -__iter__()
    +items()
    +items(multi)
    +items(multi)
    +values()
    +lists()
    +listvalues()
    +copy()
    -__len__(): int
    -__contains__(key): bool
    -__repr__(): str
  }

  class ImmutableDict {
    -__repr__(): str
    +copy()
    -__copy__(): te.Self
  }

  class ImmutableMultiDict {
    +copy()
    -__copy__(): te.Self
  }

  class _ImmutableOrderedMultiDict {
    -__init__(mapping)
    -_iter_hashitems()
    +copy()
    -__copy__(): te.Self
  }

  class CallbackDict {
    -__init__(initial, on_update)
    -__repr__(): str
  }

  class HeaderSet {
    +key
    +inserted_any: bool
    +key
    +inserted_any: bool
    +header
    +rv
    +rv
    +old
    --
    -__init__(headers, on_update)
    +add(header)
    +remove(header)
    +update(iterable)
    +discard(header)
    +find(header): int
    +index(header): int
    +clear()
    +as_set(preserve_casing)
    +to_header(): str
    -__getitem__(idx): str
    -__delitem__(idx)
    -__setitem__(idx, value)
    -__contains__(header): bool
    -__len__(): int
    -__iter__()
    -__bool__(): bool
    -__str__(): str
    -__repr__(): str
  }

  class Headers {
    +ikey
    +rv
    +ikey
    +result
    +key
    +key
    +new
    +rv
    +value
    +value_str
    +value
    +value_str
    +iter_list
    +ikey
    +values_iter
    +rv
    +strs
    --
    -__init__(defaults)
    -__getitem__(key): str
    -__getitem__(key)
    -__getitem__(key): te.Self
    -__getitem__(key)
    -_get_key(key): str
    -__eq__(other): bool
    +lowered()
    +get(key)
    +get(key, default): str
    +get(key, default)
    +get(key, type)
    +get(key, default, type): T
    +get(key, default, type)
    +getlist(key)
    +getlist(key, type)
    +getlist(key, type)
    +get_all(name)
    +items(lower)
    +keys(lower)
    +values()
    +extend()
    -__delitem__(key)
    -_del_key(key)
    +remove(key)
    +pop()
    +pop(key): str
    +pop(key)
    +pop(key, default): str
    +pop(key, default)
    +pop(key, default)
    +popitem()
    -__contains__(key): bool
    -__iter__()
    -__len__(): int
    +add()
    +add_header()
    +clear()
    +set()
    +setlist(key, values)
    +setdefault(key, default): str
    +setlistdefault(key, default)
    -__setitem__(key, value)
    -__setitem__(key, value)
    -__setitem__(key, value)
    -__setitem__(key, value)
    +update()
    -__or__(other): te.Self
    -__ior__(other): te.Self
    +to_wsgi_list()
    +copy(): te.Self
    -__copy__(): te.Self
    -__str__(): str
    -__repr__(): str
  }

  class EnvironHeaders {
    +key
    --
    -__init__(environ)
    -__eq__(other): bool
    -__getitem__(key): str
    -_get_key(key): str
    -__len__(): int
    -__iter__()
    +copy(): t.NoReturn
    -__or__(other): t.NoReturn
  }

}

package "venv2.lib.python3.12.site-packages.werkzeug.routing" {
  class SlashRequired {
  }

  class State {
    +dynamic
    +rules
    +static
  }

  class StateMachineMatcher {
    +state
    +state
    +state: new_state
    +new_state
    +state: new_state
    +state
    +have_match_for
    +websocket_mismatch: bool
    +websocket_mismatch: bool
    +part
    +rv
    +target: part
    +remaining
    +target
    +remaining
    +match
    +suffix
    +remaining
    +converter_groups
    +groups
    +rv
    +websocket_mismatch: bool
    +rv
    +path
    +rv
    +result
    +value
    --
    -__init__(merge_slashes)
    +add(rule)
    +update()
    -_update_state()
    +match(domain, path, method, websocket)
    -_match(parts, values)
  }

  class Weighting {
    +number_static_weights: int
    +static_weights
    +number_argument_weights: int
    +argument_weights
  }

  class RulePart {
    +content: str
    +final: bool
    +static: bool
    +suffixed: bool
    +weight: Weighting
  }

  class RuleFactory {
    +get_rules(map)
  }

  class Subdomain {
    +rule
    --
    -__init__(subdomain, rules)
    +get_rules(map)
  }

  class Submount {
    +rule
    --
    -__init__(path, rules)
    +get_rules(map)
  }

  class EndpointPrefix {
    +rule
    --
    -__init__(prefix, rules)
    +get_rules(map)
  }

  class RuleTemplate {
    -__init__(rules)
    -__call__(): RuleTemplateFactory
  }

  class RuleTemplateFactory {
    +new_defaults: NoneType
    +subdomain: NoneType
    +new_defaults
    +value
    +subdomain
    +new_endpoint
    +new_endpoint
    --
    -__init__(rules, context)
    +get_rules(map)
  }

  class Rule {
    +methods
    +defaults: NoneType
    +defaults
    +items
    +items
    +content: str
    +static: bool
    +argument_weights
    +static_weights
    +final: bool
    +convertor_number: int
    +pos: int
    +match
    +data
    +content
    +static: bool
    +convobj
    +final: bool
    +weight
    +content: str
    +static: bool
    +argument_weights
    +static_weights
    +final: bool
    +convertor_number: int
    +pos
    +suffixed: bool
    +suffixed: bool
    +content
    +weight
    +domain_rule
    +domain_rule
    +rule
    +rule
    +globs
    +locs
    +defaults
    +dom_ops
    +url_ops
    +opl: dom_ops
    +opl: url_ops
    +data
    +ret
    +parts
    +parts
    +ret
    +dom_parts
    +url_parts
    +body
    +body
    +body
    +pargs
    +kargs
    +func_ast
    +module
    +code
    +defaults
    +parts
    +parts_str
    +methods
    --
    -__init__(string, defaults, subdomain, methods, build_only, endpoint, strict_slashes, merge_slashes, redirect_to, alias, host, websocket)
    +empty(): Rule
    +get_empty_kwargs()
    +get_rules(map)
    +refresh()
    +bind(map, rebind)
    +get_converter(variable_name, converter_name, args, kwargs): BaseConverter
    -_encode_query_vars(query_vars): str
    -_parse_rule(rule)
    +compile()
    -{static} _get_func_code(name)
    -_compile_builder(append_unknown)
    -_convert(): ast.Call
    -_parts()
    -_join(): ast.expr
    +build(values, append_unknown)
    +provides_defaults_for(rule): bool
    +suitable_for(values, method): bool
    +build_compare_key()
    -__eq__(other): bool
    -__str__(): str
    -__repr__(): str
  }

  class Map {
    +default_converters
    +lock_class: Lock
    +arguments_set
    +server_name
    +subdomain
    +script_name: str
    +path_info: str
    +server_name
    +env
    +wsgi_server_name
    +scheme
    +upgrade
    +scheme
    +server_name: wsgi_server_name
    +server_name
    +server_name
    +server_name
    +cur_server_name
    +real_server_name
    +offset
    +subdomain: str
    +subdomain
    +val
    +script_name
    +path_info
    +query_args
    +rules
    --
    -__init__(rules, default_subdomain, strict_slashes, merge_slashes, redirect_defaults, converters, sort_parameters, sort_key, host_matching)
    +merge_slashes(): bool
    +merge_slashes(value)
    +is_endpoint_expecting(endpoint): bool
    -_rules()
    +iter_rules(endpoint)
    +add(rulefactory)
    +bind(server_name, script_name, subdomain, url_scheme, default_method, path_info, query_args): MapAdapter
    +bind_to_environ(environ, server_name, subdomain): MapAdapter
    -_get_wsgi_string()
    +update()
    -__repr__(): str
  }

  class MapAdapter {
    +path_info
    +query_args
    +method
    +websocket
    +domain_part
    +domain_part
    +path_part
    +result
    +new_path
    +redirect_url
    +value
    +redirect_url
    +redirect_url
    +netloc
    +netloc
    +subdomain
    +subdomain: domain_part
    +query_args
    +query_str
    +query_str: NoneType
    +scheme
    +host
    +path
    +url
    +rv
    +first_match: NoneType
    +build_rv
    +rv
    +first_match: rv
    +values
    +values
    +values
    +rv
    +host
    +url_scheme
    +secure
    +force_external: bool
    +url_scheme
    +url_scheme
    +scheme
    --
    -__init__(map, server_name, script_name, subdomain, url_scheme, path_info, default_method, query_args)
    +dispatch(view_func, path_info, method, catch_http_exceptions): WSGIApplication
    +match(path_info, method, return_rule, query_args, websocket)
    +match(path_info, method, return_rule, query_args, websocket)
    +match(path_info, method, return_rule, query_args, websocket)
    -_handle_match(): str
    +test(path_info, method): bool
    +allowed_methods(path_info)
    +get_host(domain_part): str
    +get_default_redirect(rule, method, values, query_args)
    +encode_query_args(query_args): str
    +make_redirect_url(path_info, query_args, domain_part): str
    +make_alias_redirect_url(path, endpoint, values, method, query_args): str
    -_partial_build(endpoint, values, method, append_unknown)
    +build(endpoint, values, method, force_external, append_unknown, url_scheme): str
  }

  class RoutingException {
  }

  class RequestRedirect {
    +code: int
    --
    -__init__(new_url)
    +get_response(environ, scope): Response
  }

  class RequestPath {
    -__init__(path_info)
  }

  class RequestAliasRedirect {
    -__init__(matched_values, endpoint)
  }

  class BuildError {
    +message
    +missing_values
    --
    -__init__(endpoint, values, method, adapter)
    +suggested()
    +closest_rule(adapter)
    -_score_rule(): float
    -__str__(): str
  }

  class WebsocketMismatch {
  }

  class NoMatch {
    -__init__(have_match_for, websocket_mismatch)
  }

  class ValidationError {
  }

  class BaseConverter {
    +regex: str
    +weight: int
    +part_isolating: bool
    --
    -__init_subclass__()
    -__init__(map)
    +to_python(value): t.Any
    +to_url(value): str
  }

  class UnicodeConverter {
    +length_regex
    +maxlength_value: str
    +maxlength_value
    +length_regex
    --
    -__init__(map, minlength, maxlength, length)
  }

  class AnyConverter {
    +valid_values
    --
    -__init__(map)
    +to_url(value): str
  }

  class PathConverter {
    +part_isolating: bool
    +regex: str
    +weight: int
  }

  class NumberConverter {
    +weight: int
    +num_convert
    +value_num
    +value_str
    +value_str
    --
    -__init__(map, fixed_digits, min, max, signed)
    +to_python(value): t.Any
    +to_url(value): str
    +signed_regex(): str
  }

  class IntegerConverter {
    +regex: str
  }

  class FloatConverter {
    +regex: str
    +num_convert: float
    --
    -__init__(map, min, max, signed)
  }

  class UUIDConverter {
    +regex: str
    --
    +to_python(value): uuid.UUID
    +to_url(value): str
  }

}

package "venv2.lib.python3.12.site-packages.werkzeug.debug" {
  class HTMLStringO {
    +ret
    +val
    --
    -__init__()
    +isatty(): bool
    +close()
    +flush()
    +seek(n, mode)
    +readline(): str
    +reset(): str
    -_write(x)
    +write(x)
    +writelines(x)
  }

  class ThreadedStream {
    +stream
    +stream
    +stream
    +stream
    --
    +{static} push()
    +{static} fetch(): str
    +{static} displayhook()
    -__setattr__(name, value)
    -__dir__()
    -__getattribute__(name): t.Any
    -__repr__(): str
  }

  class _ConsoleLoader {
    -__init__()
    +register(code, source)
    +get_source_by_code(code)
  }

  class _InteractiveConsole {
    +locals
    +locals
    +original_compile
    +code
    +source
    +prompt
    +source_to_eval
    +output
    +exc
    +te
    +exc
    +te
    --
    -__init__(globals, locals)
    +compile(filename, symbol)
    +runsource(source): str
    +runcode(code)
    +showtraceback()
    +showsyntaxerror(filename)
    +write(data)
  }

  class Console {
    +locals
    +globals
    +old_sys_stdout
    --
    -__init__(globals, locals)
    +eval(code): str
  }

  class DebugTraceback {
    +out
    +current
    +chained_msg: str
    +chained_exc
    +chained_msg: str
    +chained_exc
    +chained_msg: NoneType
    +chained_exc: NoneType
    +current: chained_exc
    +library_frames
    +mark_library
    +rows
    +classes: str
    +classes: str
    +row_parts
    +frame
    +info
    +exc_type_str
    +exc_type_str
    +is_syntax_error
    +title: str
    +title: str
    +title: str
    +exc_full
    +description
    +description
    +exc_lines
    +plaintext
    +exc_type_str
    +exc_type_str
    --
    -__init__(exc, te)
    -__str__(): str
    +all_tracebacks()
    +all_frames()
    +render_traceback_text(): str
    +render_traceback_html(include_title): str
    +render_debugger_html(evalex, secret, evalex_trusted): str
  }

  class DebugFrameSummary {
    +context: int
    +lines
    +line_idx
    +start_idx
    +stop_idx
    +rendered_lines
    +line
    +stripped_line
    +prefix
    +colno
    +end_colno
    +arrow
    +arrow: str
    --
    -__init__()
    +info()
    +is_library(): bool
    +console(): Console
    +eval(code): t.Any
    +render_html(mark_library): str
    +render_line(cls)
  }

  class _ConsoleFrame {
    -__init__(namespace)
    +eval(code): t.Any
  }

  class DebuggedApplication {
    -_pin: str
    -_pin_cookie: str
    +console_init_func: NoneType
    +pin_cookie
    +pin_cookie
    +contexts
    +app_iter: NoneType
    +app_iter
    +tb
    +is_trusted
    +html
    +response
    +contexts
    +ns
    +ns
    +is_trusted
    +path
    +data
    +etag
    +val
    +ts
    +count
    +exhausted: bool
    +auth: bool
    +trust
    +pin
    +bad_cookie: bool
    +bad_cookie: bool
    +auth: bool
    +exhausted: bool
    +entered_pin
    +auth: bool
    +rv
    +request
    +response
    +cmd
    +arg
    +secret
    +frame
    +response
    +response
    +response
    +response
    +response
    --
    -__init__(app, evalex, request_key, console_path, console_init_func, show_hidden_frames, pin_security, pin_logging)
    +pin()
    +pin(value)
    +pin_cookie_name(): str
    +debug_application(environ, start_response)
    +execute_command(request, command, frame): Response
    +display_console(request): Response
    +get_resource(request, filename): Response
    +check_pin_trust(environ)
    +check_host_trust(environ): bool
    -_fail_pin_auth()
    +pin_auth(request): Response
    +log_pin_request(request): Response
    -__call__(environ, start_response)
  }

  class _Helper {
    +rv
    +paragraphs
    +title
    +text
    +title: str
    +text
    --
    -__repr__(): str
    -__call__(topic)
  }

  class DebugReprGenerator {
    +list_repr
    +tuple_repr
    +set_repr
    +frozenset_repr
    +deque_repr
    +pattern
    +pattern
    +pattern
    +buf
    +r
    +out
    +buf
    +have_extended_section: bool
    +have_extended_section: bool
    +r
    +info
    +info: str
    +recursive: bool
    +recursive: bool
    +repr: NoneType
    +items
    +title: str
    +items
    +items: NoneType
    +items
    +repr
    +title: str
    +items
    +html_items
    --
    -__init__()
    +regex_repr(obj): str
    +string_repr(obj, limit): str
    +dict_repr(d, recursive, limit): str
    +object_repr(obj): str
    +dispatch_repr(obj, recursive): str
    +fallback_repr(): str
    +repr(obj): str
    +dump_object(obj): str
    +dump_locals(d): str
    +render_object_dump(items, title, repr): str
  }

}

package "venv2.lib.python3.12.site-packages.click" {
  class Py_buffer {
  }

  class _WindowsConsoleRawIOBase {
    -__init__(handle)
    +isatty()
  }

  class _WindowsConsoleReader {
    +bytes_to_be_read
    +buffer
    +code_units_to_be_read
    +code_units_read
    +rv
    --
    +readable()
    +readinto(b): int
  }

  class _WindowsConsoleWriter {
    +bytes_to_be_written
    +buf
    +code_units_to_be_written
    +code_units_written
    +bytes_written
    --
    +writable()
    -{static} _get_error_message(): str
    +write(b): int
  }

  class ConsoleStream {
    -__init__(text_stream, byte_stream)
    +name(): str
    +write(x): int
    +writelines(lines)
    -__getattr__(name): t.Any
    +isatty(): bool
    -__repr__(): str
  }

  class TextWrapper {
    +space_left
    +last
    +cut
    +res
    +old_initial_indent
    +old_subsequent_indent
    +rv
    +indent
    +indent
    --
    -_handle_long_word(reversed_chunks, cur_line, cur_len, width)
    +extra_indent(indent)
    +indent_only(text): str
  }

  class ParameterSource {
    +COMMANDLINE
    +ENVIRONMENT
    +DEFAULT
    +DEFAULT_MAP
    +PROMPT
  }

  class Context {
    +formatter_class
    +obj
    +default_map
    +terminal_width
    +max_content_width
    +allow_extra_args
    +allow_interspersed_args
    +ignore_unknown_options
    +help_option_names
    +help_option_names
    +token_normalize_func
    +auto_envvar_prefix
    +auto_envvar_prefix
    +auto_envvar_prefix
    +color
    +show_default
    +rv: str
    +rv
    +parent_command_path
    +rv
    +node: self
    +node
    +node
    +node
    +rv
    +rv
    +value
    +other_cmd: callback
    +callback
    +ctx
    +ctx: self
    --
    -__init__(command, parent, info_name, obj, auto_envvar_prefix, default_map, terminal_width, max_content_width, resilient_parsing, allow_extra_args, allow_interspersed_args, ignore_unknown_options, help_option_names, token_normalize_func, color, show_default)
    +protected_args()
    +to_info_dict()
    -__enter__(): Context
    -__exit__(exc_type, exc_value, tb)
    +scope(cleanup)
    +meta()
    +make_formatter(): HelpFormatter
    +with_resource(context_manager): V
    +call_on_close(f)
    +close()
    +command_path(): str
    +find_root(): Context
    +find_object(object_type)
    +ensure_object(object_type): V
    +lookup_default(name, call)
    +lookup_default(name, call)
    +lookup_default(name, call)
    +fail(message): t.NoReturn
    +abort(): t.NoReturn
    +exit(code): t.NoReturn
    +get_usage(): str
    +get_help(): str
    -_make_sub_context(command): Context
    +invoke(): V
    +invoke(): t.Any
    +invoke()
    +forward(): t.Any
    +set_parameter_source(name, source)
    +get_parameter_source(name)
  }

  class Command {
    +context_class
    +allow_extra_args: bool
    +allow_interspersed_args: bool
    +ignore_unknown_options: bool
    +context_settings
    +formatter
    +params
    +help_option
    +params
    +opts
    +opts_counter
    +duplicate_opts
    +pieces
    +rv
    +all_names
    +help_option_names
    +parser
    +formatter
    +text
    +text
    +text: str
    +deprecated_message
    +text
    +text
    +text: str
    +deprecated_message
    +text
    +opts
    +rv
    +epilog
    +ctx
    +parser
    +extra_message
    +message
    +results
    +ctx
    +args
    +args
    +args
    +prog_name
    +rv
    +complete_name
    +complete_var
    +instruction
    +rv
    --
    -__init__(name, context_settings, callback, params, help, epilog, short_help, options_metavar, add_help_option, no_args_is_help, hidden, deprecated)
    +to_info_dict(ctx)
    -__repr__(): str
    +get_usage(ctx): str
    +get_params(ctx)
    +format_usage(ctx, formatter)
    +collect_usage_pieces(ctx)
    +get_help_option_names(ctx)
    +get_help_option(ctx)
    +make_parser(ctx): _OptionParser
    +get_help(ctx): str
    +get_short_help_str(limit): str
    +format_help(ctx, formatter)
    +format_help_text(ctx, formatter)
    +format_options(ctx, formatter)
    +format_epilog(ctx, formatter)
    +make_context(info_name, args, parent): Context
    +parse_args(ctx, args)
    +invoke(ctx): t.Any
    +shell_complete(ctx, incomplete)
    +main(args, prog_name, complete_var, standalone_mode): t.NoReturn
    +main(args, prog_name, complete_var, standalone_mode): t.Any
    +main(args, prog_name, complete_var, standalone_mode, windows_expand_args): t.Any
    -_main_shell_completion(ctx_args, prog_name, complete_var)
    -__call__(): t.Any
  }

  class _FakeSubclassCheck {
    -__subclasscheck__(subclass): bool
    -__instancecheck__(instance): bool
  }

  class _BaseCommand {
  }

  class Group {
    +allow_extra_args: bool
    +allow_interspersed_args: bool
    +command_class
    +group_class
    +commands
    +commands
    +no_args_is_help
    +subcommand_metavar: str
    +subcommand_metavar: str
    +info_dict
    +commands
    +command
    +sub_ctx
    +name
    +func
    +args
    +cmd: Command
    +func
    +args
    +cmd: Group
    +old_callback
    +inner
    +rv
    +rv
    +commands
    +cmd
    +limit
    +rows
    +help
    +rest
    +value
    +rv
    +args
    +sub_ctx
    +contexts
    +sub_ctx
    +rv
    +cmd_name
    +original_cmd_name: cmd_name
    +cmd
    +cmd_name
    +cmd
    +results
    --
    -__init__(name, commands, invoke_without_command, no_args_is_help, subcommand_metavar, chain, result_callback)
    +to_info_dict(ctx)
    +add_command(cmd, name)
    +command(__func): Command
    +command()
    +command()
    +decorator(): Command
    +group(__func): Group
    +group()
    +group()
    +decorator(): Group
    +result_callback(replace)
    +decorator(): F
    +function(): t.Any
    +get_command(ctx, cmd_name)
    +list_commands(ctx)
    +collect_usage_pieces(ctx)
    +format_options(ctx, formatter)
    +format_commands(ctx, formatter)
    +parse_args(ctx, args)
    +invoke(ctx): t.Any
    -_process_result(): t.Any
    +resolve_command(ctx, args)
    +shell_complete(ctx, incomplete)
  }

  class _MultiCommand {
  }

  class CommandCollection {
    +rv
    +rv
    +rv
    --
    -__init__(name, sources)
    +add_source(group)
    +get_command(ctx, cmd_name)
    +list_commands(ctx)
  }

  class Parameter {
    +param_type_name: str
    +nargs
    +nargs: int
    +check_default
    +check_default
    +message: str
    +message: str
    +subject
    +metavar
    +metavar
    +value
    +value
    +value
    +value
    +source
    +value
    +source
    +value
    +source
    +value
    +source
    +value
    +value
    +value
    +rv
    +rv
    +rv
    +rv
    +extra_message
    +message
    +value
    +value: NoneType
    +hint_list
    +results
    +results
    --
    -__init__(param_decls, type, required, default, callback, nargs, multiple, metavar, expose_value, is_eager, envvar, shell_complete, deprecated)
    +to_info_dict()
    -__repr__(): str
    -_parse_decls(decls, expose_value)
    +human_readable_name(): str
    +make_metavar(ctx): str
    +get_default(ctx, call)
    +get_default(ctx, call)
    +get_default(ctx, call)
    +add_to_parser(parser, ctx)
    +consume_value(ctx, opts)
    +type_cast_value(ctx, value): t.Any
    +check_iter()
    +convert(): t.Any
    +convert(): t.Any
    +convert(): t.Any
    +value_is_missing(value): bool
    +process_value(ctx, value): t.Any
    +resolve_envvar_value(ctx)
    +value_from_envvar(ctx)
    +handle_parse_result(ctx, opts, args)
    +get_help_record(ctx)
    +get_usage_pieces(ctx)
    +get_error_hint(ctx): str
    +shell_complete(ctx, incomplete)
  }

  class Option {
    +param_type_name: str
    +help
    +default_is_missing
    +prompt_text
    +prompt_text: NoneType
    +prompt_text: prompt
    +deprecated_message
    +help
    +is_flag: bool
    +is_flag: bool
    +is_flag
    +flag_value
    +info_dict
    +result
    +opts
    +secondary_opts
    +name: NoneType
    +possible_names
    +name: decl
    +split_char
    +first
    +second
    +name
    +name: NoneType
    +action: str
    +action: str
    +action: str
    +action
    +any_prefix_is_slash: bool
    +any_prefix_is_slash: bool
    +rv
    +help
    +extra
    +extra_items
    +extra_str
    +help
    +extra: types.OptionHelpExtra
    +envvar
    +envvar
    +resilient
    +default_value
    +show_default: bool
    +show_default_is_str: bool
    +show_default_is_str: bool
    +show_default: bool
    +show_default
    +show_default
    +default_string
    +default_string
    +default_string
    +default_string
    +default_string: str
    +default_string: str
    +default_string
    +range_str
    +default
    +prompt_kwargs: t.Any
    +rv
    +envvar
    +rv
    +rv
    +value_depth
    +rv
    +rv
    +value
    +source
    +value
    +source
    +value
    +source
    +value
    +source
    --
    -__init__(param_decls, show_default, prompt, confirmation_prompt, prompt_required, hide_input, is_flag, flag_value, multiple, count, allow_from_autoenv, type, help, hidden, show_choices, show_envvar, deprecated)
    +to_info_dict()
    +get_error_hint(ctx): str
    -_parse_decls(decls, expose_value)
    +add_to_parser(parser, ctx)
    +get_help_record(ctx)
    -_write_opts(): str
    +get_help_extra(ctx): types.OptionHelpExtra
    +get_default(ctx, call)
    +get_default(ctx, call)
    +get_default(ctx, call)
    +prompt_for_value(ctx): t.Any
    +resolve_envvar_value(ctx)
    +value_from_envvar(ctx)
    +consume_value(ctx, opts)
  }

  class Argument {
    +param_type_name: str
    +required: bool
    +required
    +var
    +var
    +var
    +name
    +arg
    +name
    --
    -__init__(param_decls, required)
    +human_readable_name(): str
    +make_metavar(ctx): str
    -_parse_decls(decls, expose_value)
    +get_usage_pieces(ctx)
    +get_error_hint(ctx): str
    +add_to_parser(parser, ctx)
  }

  class ParamType {
    +is_composite
    +arity
    +name: str
    +envvar_list_splitter
    +param_type
    +param_type
    +name
    +name: param_type
    --
    +to_info_dict()
    -__call__(value, param, ctx): t.Any
    +get_metavar(param, ctx)
    +get_missing_message(param, ctx)
    +convert(value, param, ctx): t.Any
    +split_envvar_value(rv)
    +fail(message, param, ctx): t.NoReturn
    +shell_complete(ctx, param, incomplete)
  }

  class CompositeParamType {
    +is_composite: bool
    --
    +arity(): int
  }

  class FuncParamType {
    +info_dict
    +value
    +value
    --
    -__init__(func)
    +to_info_dict()
    +convert(value, param, ctx): t.Any
  }

  class UnprocessedParamType {
    +name: str
    --
    +convert(value, param, ctx): t.Any
    -__repr__(): str
  }

  class StringParamType {
    +name: str
    +enc
    +value
    +fs_enc
    +value
    +value
    +value
    --
    +convert(value, param, ctx): t.Any
    -__repr__(): str
  }

  class Choice {
    +name: str
    +info_dict
    +normed_value
    +normed_value
    +normed_value
    +choice_metavars
    +choices_str
    +choices_str
    +normed_value
    +normalized_mapping
    +choices_str
    +str_choices
    +matched
    +incomplete
    +matched
    --
    -__init__(choices, case_sensitive)
    +to_info_dict()
    -_normalized_mapping(ctx)
    +normalize_choice(choice, ctx): str
    +get_metavar(param, ctx)
    +get_missing_message(param, ctx): str
    +convert(value, param, ctx): ParamTypeValue
    +get_invalid_choice_message(value, ctx): str
    -__repr__(): str
    +shell_complete(ctx, param, incomplete)
  }

  class DateTime {
    +name: str
    +info_dict
    +converted
    +formats_str
    --
    -__init__(formats)
    +to_info_dict()
    +get_metavar(param, ctx)
    -_try_to_convert_date(value, format)
    +convert(value, param, ctx): t.Any
    -__repr__(): str
  }

  class _NumberParamTypeBase {
    -_number_class
    --
    +convert(value, param, ctx): t.Any
  }

  class _NumberRangeBase {
    +info_dict
    +rv
    +lt_min: bool
    +gt_max: bool
    +op
    +op
    +lop
    +rop
    +clamp
    --
    -__init__(min, max, min_open, max_open, clamp)
    +to_info_dict()
    +convert(value, param, ctx): t.Any
    -_clamp(bound, dir, open): float
    -_describe_range(): str
    -__repr__(): str
  }

  class IntParamType {
    +name: str
    --
    -__repr__(): str
  }

  class IntRange {
    +name: str
    --
    -_clamp(bound, dir, open): int
  }

  class FloatParamType {
    +name: str
    --
    -__repr__(): str
  }

  class FloatRange {
    +name: str
    --
    -__init__(min, max, min_open, max_open, clamp)
    -_clamp(bound, dir, open): float
  }

  class BoolParamType {
    +name: str
    +norm
    --
    +convert(value, param, ctx): t.Any
    -__repr__(): str
  }

  class UUIDParameterType {
    +name: str
    +value
    --
    +convert(value, param, ctx): t.Any
    -__repr__(): str
  }

  class File {
    +name: str
    +envvar_list_splitter
    +info_dict
    +value
    +lazy
    +lf
    --
    -__init__(mode, encoding, errors, lazy, atomic)
    +to_info_dict()
    +resolve_lazy_flag(value): bool
    +convert(value, param, ctx)
    +shell_complete(ctx, param, incomplete)
  }

  class Path {
    +envvar_list_splitter
    +info_dict
    +rv: value
    +is_dash
    +rv
    +st
    +type
    --
    -__init__(exists, file_okay, dir_okay, writable, readable, resolve_path, allow_dash, path_type, executable)
    +to_info_dict()
    +coerce_path_result(value)
    +convert(value, param, ctx)
    +shell_complete(ctx, param, incomplete)
  }

  class Tuple {
    +info_dict
    +len_type
    +len_value
    --
    -__init__(types)
    +to_info_dict()
    +name(): str
    +arity(): int
    +convert(value, param, ctx): t.Any
  }

  class OptionHelpExtra {
    +envvars
    +default: str
    +range: str
    +required: str
  }

  class HelpFormatter {
    +max_width: int
    +width: FORCED_WIDTH
    +width
    +prefix
    +usage_prefix
    +text_width
    +indent
    +indent
    +indent
    +rows
    +widths
    +first_col
    +text_width
    +wrapped_text
    +lines
    --
    -__init__(indent_increment, width, max_width)
    +write(string)
    +indent()
    +dedent()
    +write_usage(prog, args, prefix)
    +write_heading(heading)
    +write_paragraph()
    +write_text(text)
    +write_dl(rows, col_max, col_spacing)
    +section(name)
    +indentation()
    +getvalue(): str
  }

  class _Option {
    +action: str
    --
    -__init__(obj, opts, dest, action, nargs, const)
    +takes_value(): bool
    +process(value, state)
  }

  class _Argument {
    +holes
    +value: NoneType
    +value: NoneType
    --
    -__init__(obj, dest, nargs)
    +process(value, state)
  }

  class _ParsingState {
    -__init__(rargs)
  }

  class _OptionParser {
    +opts
    +option
    +state
    +arg
    +arglen
    +possibilities
    +option
    +value
    +value: NoneType
    +stop: bool
    +i: int
    +prefix
    +unknown_options
    +opt
    +option
    +stop: bool
    +value
    +value: NoneType
    +nargs
    +value: _flag_needs_value
    +next_rarg
    +value: _flag_needs_value
    +value
    +value
    +explicit_value: NoneType
    +long_opt: arg
    +norm_long_opt
    --
    -__init__(ctx)
    +add_option(obj, opts, dest, action, nargs, const)
    +add_argument(obj, dest, nargs)
    +parse_args(args)
    -_process_args_for_args(state)
    -_process_args_for_options(state)
    -_match_long_opt(opt, explicit_value, state)
    -_match_short_opt(arg, state)
    -_get_value_from_state(option_name, option, state): t.Any
    -_process_opts(arg, state)
  }

  class LazyFile {
    -__init__(filename, mode, encoding, errors, atomic)
    -__getattr__(name): t.Any
    -__repr__(): str
    +open()
    +close()
    +close_intelligently()
    -__enter__(): LazyFile
    -__exit__(exc_type, exc_value, tb)
    -__iter__()
  }

  class KeepOpenFile {
    -__init__(file)
    -__getattr__(name): t.Any
    -__enter__(): KeepOpenFile
    -__exit__(exc_type, exc_value, tb)
    -__repr__(): str
    -__iter__()
  }

  class PacifyFlushWrapper {
    -__init__(wrapped)
    +flush()
    -__getattr__(attr): t.Any
  }

  class ClickException {
    +exit_code: int
    +file
    --
    -__init__(message)
    +format_message(): str
    -__str__(): str
    +show(file)
  }

  class UsageError {
    +exit_code: int
    +file
    +color: NoneType
    +hint: str
    +hint
    +hint
    +color
    --
    -__init__(message, ctx)
    +show(file)
  }

  class BadParameter {
    +param_hint
    +param_hint
    --
    -__init__(message, ctx, param, param_hint)
    +format_message(): str
  }

  class MissingParameter {
    +param_hint
    +param_hint
    +param_hint: NoneType
    +param_hint
    +param_hint
    +param_type
    +param_type
    +msg
    +msg_extra
    +msg: msg_extra
    +msg
    +missing
    +missing
    +missing
    +missing
    +param_name
    --
    -__init__(message, ctx, param, param_hint, param_type)
    +format_message(): str
    -__str__(): str
  }

  class NoSuchOption {
    +message
    +possibility_str
    +suggest
    --
    -__init__(option_name, message, possibilities, ctx)
    +format_message(): str
  }

  class BadOptionUsage {
    -__init__(option_name, message, ctx)
  }

  class BadArgumentUsage {
  }

  class NoArgsIsHelpError {
    -__init__(ctx)
    +show(file)
  }

  class FileError {
    +hint
    --
    -__init__(filename, hint)
    +format_message(): str
  }

  class Abort {
  }

  class Exit {
    -__init__(code)
  }

  class CompletionItem {
    -__init__(value, type, help)
    -__getattr__(name): t.Any
  }

  class ShellComplete {
    +name
    +source_template
    +safe_name
    +ctx
    +completions
    +out
    --
    -__init__(cli, ctx_args, prog_name, complete_var)
    +func_name(): str
    +source_vars()
    +source(): str
    +get_completion_args()
    +get_completions(args, incomplete)
    +format_completion(item): str
    +complete(): str
  }

  class BashComplete {
    +name: str
    +source_template: _SOURCE_BASH
    +bash_exe
    +match: NoneType
    +output
    +match
    +cwords
    +cword
    +args
    +incomplete
    +incomplete: str
    --
    -{static} _check_version()
    +source(): str
    +get_completion_args()
    +format_completion(item): str
  }

  class ZshComplete {
    +name: str
    +source_template: _SOURCE_ZSH
    +cwords
    +cword
    +args
    +incomplete
    +incomplete: str
    --
    +get_completion_args()
    +format_completion(item): str
  }

  class FishComplete {
    +name: str
    +source_template: _SOURCE_FISH
    +cwords
    +incomplete
    +args
    --
    +get_completion_args()
    +format_completion(item): str
  }

  class _NonClosingTextIOWrapper {
    +stream
    --
    -__init__(stream, encoding, errors, force_readable, force_writable)
    -__del__()
    +isatty(): bool
  }

  class _FixupStream {
    +f
    +x
    +x
    +x
    --
    -__init__(stream, force_readable, force_writable)
    -__getattr__(name): t.Any
    +read1(size): bytes
    +readable(): bool
    +writable(): bool
    +seekable(): bool
  }

  class _AtomicFile {
    -__init__(f, tmp_filename, real_filename)
    +name(): str
    +close(delete)
    -__getattr__(name): t.Any
    -__enter__(): _AtomicFile
    -__exit__(exc_type, exc_value, tb)
    -__repr__(): str
  }

  class ProgressBar {
    +file
    +file
    +length
    +length: NoneType
    +iterable
    +t
    +seconds
    +minutes
    +hours
    +pos
    +bar_length
    +bar
    +bar
    +chars
    +bar
    +show_percent
    +info_bits
    +show_percent
    +item_info
    +buf
    +old_width
    +clutter_length
    +new_width
    +clear_width
    +clear_width
    +line
    +line_len
    +line
    +step
    +step
    --
    -__init__(iterable, length, fill_char, empty_char, bar_template, info_sep, hidden, show_eta, show_percent, show_pos, item_show_func, label, file, color, update_min_steps, width)
    -__enter__()
    -__exit__(exc_type, exc_value, tb)
    -__iter__()
    -__next__(): V
    +render_finish()
    +pct(): float
    +time_per_iteration(): float
    +eta(): float
    +format_eta(): str
    +format_pos(): str
    +format_pct(): str
    +format_bar(): str
    +format_progress_line(): str
    +render_progress()
    +make_step(n_steps)
    +update(n_steps, current_item)
    +finish()
    +generator()
  }

  class Editor {
    +rv
    +editor
    +environ
    +environ
    +exc_filename
    +c
    +exit_code
    +data: bytes
    +data: text
    +data
    +data
    +f: t.BinaryIO
    +timestamp
    +rv
    --
    -__init__(editor, env, require_save, extension)
    +get_editor(): str
    +edit_files(filenames)
    +edit(text)
    +edit(text)
    +edit(text)
  }

  class EchoingStdin {
    -__init__(input, output)
    -__getattr__(x): t.Any
    -_echo(rv): bytes
    +read(n): bytes
    +read1(n): bytes
    +readline(n): bytes
    +readlines()
    -__iter__()
    -__repr__(): str
  }

  class BytesIOCopy {
    -__init__(copy_to)
    +flush()
    +write(b): int
  }

  class StreamMixer {
    -__init__()
  }

  class _NamedTextIOWrapper {
    +line
    --
    -__init__(buffer, name, mode)
    +name(): str
    +mode(): str
    -__next__(): str
  }

  class Result {
    +exc_str
    --
    -__init__(runner, stdout_bytes, stderr_bytes, output_bytes, return_value, exit_code, exception, exc_info)
    +output(): str
    +stdout(): str
    +stderr(): str
    -__repr__(): str
  }

  class CliRunner {
    +rv
    +bytes_input
    +echo_input: NoneType
    +old_stdin
    +old_stdout
    +old_stderr
    +old_forced_width
    +env
    +stream_mixer
    +bytes_input
    +echo_input
    +text_input
    +val
    +char
    +default_color: color
    +old_visible_prompt_func
    +old_hidden_prompt_func
    +old__getchar_func
    +old_should_strip_ansi
    +old__compat_should_strip_ansi
    +old_env
    +exc_info: NoneType
    +catch_exceptions
    +return_value: NoneType
    +exception
    +exit_code: int
    +args
    +prog_name
    +prog_name
    +return_value
    +exc_info
    +e_code
    +e_code: int
    +exception: e
    +e_code: int
    +exit_code: e_code
    +exception: e
    +exit_code: int
    +exc_info
    +stdout
    +stderr
    +output
    +cwd
    +dt
    --
    -__init__(charset, env, echo_stdin, catch_exceptions)
    +get_default_prog_name(cli): str
    +make_env(overrides)
    +isolation(input, env, color)
    +visible_input(): str
    +hidden_input(): str
    -_getchar(): str
    +should_strip_ansi(color): bool
    +invoke(cli, args, input, env, catch_exceptions, color): Result
    +isolated_filesystem(temp_dir)
  }

}

package "venv2.lib.python3.12.site-packages.limits" {
  class RateLimiter {
    -__init__(storage)
    +hit(item): bool
    +test(item): bool
    +get_window_stats(item): WindowStats
    +clear(item)
  }

  class MovingWindowRateLimiter {
    +reset
    --
    -__init__(storage)
    +hit(item): bool
    +test(item): bool
    +get_window_stats(item): WindowStats
  }

  class FixedWindowRateLimiter {
    +remaining
    +reset
    --
    +hit(item): bool
    +test(item): bool
    +get_window_stats(item): WindowStats
  }

  class SlidingWindowCounterRateLimiter {
    +remaining
    +now
    +expiry
    +previous_reset_in
    +current_reset_in
    --
    -__init__(storage)
    -_weighted_count(item, previous_count, previous_expires_in, current_count): float
    +hit(item): bool
    +test(item): bool
    +get_window_stats(item): WindowStats
    +clear(item)
  }

  class Granularity {
    +seconds: int
    +name: str
  }

  class RateLimitItemMeta {
    +granularity
    --
    -__new__(name, parents, dct): RateLimitItemMeta
  }

  class RateLimitItem {
    +GRANULARITY
    +remainder
    --
    -__init__(amount, multiples, namespace)
    +{class} check_granularity_string(granularity_string): bool
    +get_expiry(): int
    +key_for(): str
    -__eq__(other): bool
    -__repr__(): str
    -__lt__(other): bool
    -__hash__(): int
  }

  class RateLimitItemPerYear {
    +GRANULARITY
  }

  class RateLimitItemPerMonth {
    +GRANULARITY
  }

  class RateLimitItemPerDay {
    +GRANULARITY
  }

  class RateLimitItemPerHour {
    +GRANULARITY
  }

  class RateLimitItemPerMinute {
    +GRANULARITY
  }

  class RateLimitItemPerSecond {
    +GRANULARITY
  }

  class WindowStats {
    +reset_time: float
    +remaining: int
  }

  class Dependency {
    +name: str
    +version_required
    +version_found
    +module: ModuleType
  }

  class DependencyDict {
    +dependency
    +message
    --
    -__getitem__(key): Dependency
  }

  class LazyDependency {
    +DEPENDENCIES
    +dependencies
    +mapping
    +mapping
    +mapping
    --
    -__init__()
    +dependencies(): DependencyDict
  }

  class ConfigurationError {
  }

  class ConcurrentUpdateError {
    -__init__(key, attempts)
  }

  class StorageError {
    -__init__(storage_error)
  }

  class MemcachedClientP {
    +add(key, value, expire, noreply, flags): bool
    +get(key, default): bytes
    +get_many(keys)
    +incr(key, value, noreply)
    +decr(key, value, noreply)
    +delete(key, noreply)
    +set(key, value, expire, noreply, flags): bool
    +touch(key, expire, noreply): bool
  }

  class RedisClientP {
    +incrby(key, amount): int
    +get(key)
    +delete(key): int
    +ttl(key): int
    +expire(key, seconds): bool
    +ping(): bool
    +register_script(script): redis.commands.core.Script
  }

  class AsyncRedisClientP {
    +register_script(script): redis.commands.core.Script
  }

}

package "venv2.lib.python3.12.site-packages.limits.aio" {
  class RateLimiter {
    -__init__(storage)
  }

  class MovingWindowRateLimiter {
    +res
    +amount
    +reset
    --
    -__init__(storage)
  }

  class FixedWindowRateLimiter {
    +remaining
    +reset
  }

  class SlidingWindowCounterRateLimiter {
    +remaining
    +now
    +expiry
    +previous_reset_in
    +current_reset_in
    --
    -__init__(storage)
    -_weighted_count(item, previous_count, previous_expires_in, current_count): float
  }

}

package "venv2.lib.python3.12.site-packages.limits.aio.storage" {
  class Entry {
    -__init__(expiry)
  }

  class MemoryStorage {
    +STORAGE_SCHEME
    +state
    +now
    +cutoff
    +timestamp
    +entry
    +entry: NoneType
    +timestamp
    +oldest
    +now
    +weighted_count
    +current_count
    +weighted_count
    +now
    +now
    +previous_count
    +current_count
    +previous_ttl
    +previous_ttl
    +current_ttl
    +num_items
    --
    -__init__(uri, wrap_exceptions)
    -__getstate__()
    -__setstate__(state)
    +base_exceptions()
    -__del__()
  }

  class MongoDBStorage {
    +STORAGE_SCHEME
    +DEPENDENCIES
    +uri
    +num_keys
    +counter
    +counter
    +expiration
    +response
    +timestamp
    +timestamp
    +updates
    +expiry_ms
    +result
    +expiry_ms
    +expires_at
    +current_ttl
    +prev_ttl
    --
    -__init__(uri, database_name, counter_collection_name, window_collection_name, wrap_exceptions)
    +base_exceptions()
    +database()
    -__del__()
  }

  class Storage {
    +STORAGE_SCHEME
    --
    -__init_subclass__()
    -__init__(uri, wrap_exceptions)
    +base_exceptions()
  }

  class MovingWindowSupport {
    -__init_subclass__()
  }

  class SlidingWindowCounterSupport {
    -__init_subclass__()
  }

}

package "venv2.lib.python3.12.site-packages.limits.aio.storage.redis" {
  class ValkeyBridge {
    +base_exceptions()
  }

  class RedisBridge {
    +RES_DIR: str
    +SCRIPT_MOVING_WINDOW
    +SCRIPT_ACQUIRE_MOVING_WINDOW
    +SCRIPT_CLEAR_KEYS
    +SCRIPT_INCR_EXPIRE
    +SCRIPT_SLIDING_WINDOW
    +SCRIPT_ACQUIRE_SLIDING_WINDOW
    --
    -__init__(uri, dependency, key_prefix)
    +prefixed_key(key): str
    +register_scripts()
    +use_sentinel(service_name, use_replicas, sentinel_kwargs)
    +use_basic()
    +use_cluster()
    +base_exceptions()
  }

  class RedisStorage {
    +STORAGE_SCHEME
    +DEPENDENCIES
    +MODE
    +PREFIX: str
    +bridge: RedisBridge
    +storage_exceptions
    +target_server
    +uri
    +uri
    +current_key
    +previous_key
    +previous_key
    +current_key
    +previous_key
    +current_key
    --
    -__init__(uri, wrap_exceptions, implementation, key_prefix)
    -_current_window_key(key): str
    -_previous_window_key(key): str
    +configure_bridge()
    +base_exceptions()
  }

  class RedisClusterStorage {
    +STORAGE_SCHEME
    +MODE: str
    --
    -__init__(uri, wrap_exceptions, implementation, key_prefix)
    +configure_bridge()
  }

  class RedisSentinelStorage {
    +STORAGE_SCHEME
    +MODE: str
    +DEPENDENCIES
    --
    -__init__(uri, wrap_exceptions, implementation, key_prefix, service_name, use_replicas, sentinel_kwargs)
    +configure_bridge()
  }

  class CoredisBridge {
    +DEFAULT_CLUSTER_OPTIONS
    +sentinel_configuration
    +connection_options
    +sep
    +service_name
    +sep
    +cluster_hosts
    +lua_moving_window
    +lua_acquire_moving_window
    +lua_sliding_window
    +lua_acquire_sliding_window
    +lua_clear_keys
    +lua_incr_expire
    +connection_getter
    +key
    +key
    +key
    +key
    +timestamp
    +window
    +previous_key
    +current_key
    +key
    +timestamp
    +acquired
    +previous_key
    +current_key
    +acquired
    +key
    +prefix
    +keys
    +count: int
    --
    +base_exceptions()
    +use_sentinel(service_name, use_replicas, sentinel_kwargs)
    +use_basic()
    +use_cluster()
    +get_connection(readonly): AsyncCoRedisClient
    +register_scripts()
  }

  class RedispyBridge {
    +DEFAULT_CLUSTER_OPTIONS
    +sentinel_configuration
    +connection_options
    +sep
    +service_name
    +sep
    +cluster_hosts
    +lua_moving_window: redis.commands.core.Script
    +lua_acquire_moving_window: redis.commands.core.Script
    +lua_sliding_window: redis.commands.core.Script
    +lua_acquire_sliding_window: redis.commands.core.Script
    +lua_clear_keys: redis.commands.core.Script
    +lua_incr_expire: redis.commands.core.Script
    +connection_getter
    +key
    +key
    +key
    +key
    +timestamp
    +window
    +key
    +timestamp
    +acquired
    +previous_key
    +current_key
    +acquired
    +key
    +prefix
    +keys
    +count: int
    --
    +base_exceptions()
    +use_sentinel(service_name, use_replicas, sentinel_kwargs)
    +use_basic()
    +use_cluster()
    +get_connection(readonly): AsyncRedisClient
    +register_scripts()
  }

}

package "venv2.lib.python3.12.site-packages.limits.aio.storage.memcached" {
  class EmcacheBridge {
    +item
    +results
    +storage
    +limit_key
    +value
    +value: int
    +storage
    +limit_key
    +expire_key
    +storage
    +value: amount
    +storage
    +value
    +storage
    +item
    +storage
    --
    -__init__(uri, dependency)
    +base_exceptions()
  }

  class MemcachedBridge {
    +sep
    --
    -__init__(uri, dependency)
    -_expiration_key(key): str
    +base_exceptions()
  }

  class MemcachedStorage {
    +STORAGE_SCHEME
    +DEPENDENCIES
    +bridge: MemcachedBridge
    +storage_exceptions
    +now
    +t0
    +weighted_count
    +current_count
    +t1
    +actualised_previous_ttl
    +weighted_count
    +now
    +now
    +result
    +previous_count
    +current_count
    +previous_ttl
    +previous_ttl
    +current_ttl
    --
    -__init__(uri, wrap_exceptions, implementation)
    +base_exceptions()
  }

  class MemcachioBridge {
    +results
    +storage
    +limit_key
    +storage
    +limit_key
    +expire_key
    +storage
    +storage
    +storage
    +expiration_key
    +item
    +storage
    --
    -__init__(uri, dependency)
    +base_exceptions()
  }

}

package "venv2.lib.python3.12.site-packages.limits.storage" {
  class MemcachedStorage {
    +STORAGE_SCHEME
    +DEPENDENCIES
    +parsed
    +argspec
    +dependency
    +now
    +weighted_count
    +current_count
    +actualised_previous_ttl
    +weighted_count
    +now
    +now
    +result
    +previous_ttl
    +previous_ttl
    +current_ttl
    --
    -__init__(uri, wrap_exceptions)
    +base_exceptions()
    +get_client(module, hosts): MemcachedClientP
    +call_memcached_func(func): R
    +storage(): MemcachedClientP
    +get(key): int
    +get_many(keys)
    +clear(key)
    +incr(key, expiry, amount, set_expiration_key): int
    +get_expiry(key): float
    -_expiration_key(key): str
    +check(): bool
    +reset()
    +acquire_sliding_window_entry(key, limit, expiry, amount): bool
    +get_sliding_window(key, expiry)
    +clear_sliding_window(key, expiry)
    -_get_sliding_window_info(previous_key, current_key, expiry, now)
  }

  class Entry {
    -__init__(expiry)
  }

  class MemoryStorage {
    +STORAGE_SCHEME
    +state
    +oldest
    +timestamp
    +entry
    +entry: NoneType
    +timestamp
    +oldest
    +now
    +weighted_count
    +current_count
    +weighted_count
    +previous_count
    +current_count
    +previous_ttl
    +previous_ttl
    +current_ttl
    +now
    +now
    +num_items
    --
    -__init__(uri, wrap_exceptions)
    -__getstate__()
    -__setstate__(state)
    -__expire_events()
    -__schedule_expiry()
    +base_exceptions()
    +incr(key, expiry, amount): int
    +decr(key, amount): int
    +get(key): int
    +clear(key)
    +acquire_entry(key, limit, expiry, amount): bool
    +get_expiry(key): float
    +get_moving_window(key, limit, expiry)
    +acquire_sliding_window_entry(key, limit, expiry, amount): bool
    -_get_sliding_window_info(previous_key, current_key, expiry, now)
    +get_sliding_window(key, expiry)
    +clear_sliding_window(key, expiry)
    +check(): bool
    +reset()
  }

  class StorageRegistry {
    +storage_scheme
    +cls
    +schemes
    +schemes: storage_scheme
    --
    -__new__(name, bases, dct): StorageRegistry
  }

  class RedisClusterStorage {
    +STORAGE_SCHEME
    +DEFAULT_OPTIONS
    +DEPENDENCIES
    +parsed
    +parsed_auth
    +sep
    +cluster_hosts
    +merged_options
    +startup_nodes
    +prefix
    +count: int
    +node
    +keys
    --
    -__init__(uri, key_prefix, wrap_exceptions)
    +reset()
  }

  class MongoDBStorageBase {
    +DEPENDENCIES
    +num_keys
    +counter
    +counter
    +expiration
    +timestamp
    +timestamp
    +updates
    +expiry_ms
    +expires_at
    +current_ttl
    +prev_ttl
    +expiry_ms
    +result
    --
    -__init__(uri, database_name, counter_collection_name, window_collection_name, wrap_exceptions)
    +storage(): MongoClient
    -_database(): MongoDatabase
    +counters(): MongoCollection
    +windows(): MongoCollection
    -_init_mongo_client(uri): MongoClient
    +base_exceptions()
    -__initialize_database()
    +reset()
    +clear(key)
    +get_expiry(key): float
    +get(key): int
    +incr(key, expiry, amount): int
    +check(): bool
    +get_moving_window(key, limit, expiry)
    +acquire_entry(key, limit, expiry, amount): bool
    +get_sliding_window(key, expiry)
    +acquire_sliding_window_entry(key, limit, expiry, amount): bool
    +clear_sliding_window(key, expiry)
    -__del__()
  }

  class MongoDBStorage {
    +STORAGE_SCHEME
    --
    -_init_mongo_client(uri): MongoClient
  }

  class RedisSentinelStorage {
    +STORAGE_SCHEME
    +DEPENDENCIES
    +parsed
    +sentinel_configuration
    +sentinel_options
    +parsed_auth
    +sep
    +sentinel_dep
    --
    -__init__(uri, service_name, use_replicas, sentinel_kwargs, key_prefix, wrap_exceptions)
    +base_exceptions()
    +get_connection(readonly): RedisClient
  }

  class RedisStorage {
    +STORAGE_SCHEME
    +DEPENDENCIES
    +RES_DIR: str
    +SCRIPT_MOVING_WINDOW
    +SCRIPT_ACQUIRE_MOVING_WINDOW
    +SCRIPT_CLEAR_KEYS
    +SCRIPT_INCR_EXPIRE
    +SCRIPT_SLIDING_WINDOW
    +SCRIPT_ACQUIRE_SLIDING_WINDOW
    +lua_moving_window: redis.commands.core.Script
    +lua_acquire_moving_window: redis.commands.core.Script
    +lua_sliding_window: redis.commands.core.Script
    +lua_acquire_sliding_window: redis.commands.core.Script
    +PREFIX: str
    +target_server
    +uri
    +key
    +timestamp
    +previous_key
    +current_key
    +previous_key
    +current_key
    +key
    +key
    +key
    +key
    +timestamp
    +acquired
    +previous_key
    +current_key
    +acquired
    +key
    +prefix
    --
    -__init__(uri, connection_pool, key_prefix, wrap_exceptions)
    +base_exceptions()
    +initialize_storage(_uri)
    +get_connection(readonly): RedisClient
    -_current_window_key(key): str
    -_previous_window_key(key): str
    +prefixed_key(key): str
    +get_moving_window(key, limit, expiry)
    +get_sliding_window(key, expiry)
    +clear_sliding_window(key, expiry)
    +incr(key, expiry, amount): int
    +get(key): int
    +clear(key)
    +acquire_entry(key, limit, expiry, amount): bool
    +acquire_sliding_window_entry(key, limit, expiry, amount): bool
    +get_expiry(key): float
    +check(): bool
    +reset()
  }

  class Storage {
    +STORAGE_SCHEME
    --
    -__init_subclass__()
    -__init__(uri, wrap_exceptions)
    +base_exceptions()
    +incr(key, expiry, amount): int
    +get(key): int
    +get_expiry(key): float
    +check(): bool
    +reset()
    +clear(key)
  }

  class MovingWindowSupport {
    -__init_subclass__()
    +acquire_entry(key, limit, expiry, amount): bool
    +get_moving_window(key, limit, expiry)
  }

  class SlidingWindowCounterSupport {
    -__init_subclass__()
    +acquire_sliding_window_entry(key, limit, expiry, amount): bool
    +get_sliding_window(key, expiry)
    +clear_sliding_window(key, expiry)
  }

  class TimestampedSlidingWindow {
    +{class} sliding_window_keys(key, expiry, at)
  }

}

package "venv2.lib.python3.12.site-packages.gunicorn" {
  class Pidfile {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class Reloader {
    +fnames
    +mtimes
    +mtime
    +old_time
    --
    -__init__(extra_files, interval, callback)
    +add_extra_file(filename)
    +get_files()
    +run()
  }

  class InotifyReloader {
    -__init__(extra_files, callback)
  }

  class Config {
    +lines
    +kmax
    +v
    +v
    +kwargs
    +parser
    +keys
    +uri
    +is_sync
    +uri
    +is_sync
    +uri: str
    +worker_class
    +s
    +pn
    +uri
    +uri
    +uri: str
    +logger_class
    +opts
    +raw_env
    +env
    +s
    +sendfile
    +raw_global_conf
    +global_conf
    +s
    +k
    +v
    --
    -__init__(usage, prog)
    -__str__()
    -__getattr__(name)
    -__setattr__(name, value)
    +set(name, value)
    +get_cmd_args_from_env()
    +parser()
    +worker_class_str()
    +worker_class()
    +address()
    +uid()
    +gid()
    +proc_name()
    +logger_class()
    +is_ssl()
    +ssl_options()
    +env()
    +sendfile()
    +reuse_port()
    +paste_global_conf()
  }

  class SettingMeta {
    +super_new
    +parents
    +new_class
    +desc
    --
    -__new__(name, bases, attrs)
    +fmt_desc(desc)
  }

  class Setting {
    +name: NoneType
    +value: NoneType
    +section: NoneType
    +cli: NoneType
    +validator: NoneType
    +type: NoneType
    +meta: NoneType
    +action: NoneType
    +default: NoneType
    +short: NoneType
    +desc: NoneType
    +nargs: NoneType
    +const: NoneType
    +args
    +help_txt
    +help_txt
    +kwargs
    --
    -__init__()
    +add_option(parser)
    +copy()
    +get()
    +set(val)
    -__lt__(other)
    -__repr__()
  }

  class ConfigFile {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: str
    +desc: str
  }

  class WSGIApp {
    +name: str
    +section: str
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class Bind {
    +name: str
    +action: str
    +section: str
    +cli
    +meta: str
    +validator: validate_list_string
    +default
    +default
    +desc: str
  }

  class Backlog {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class Workers {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default
    +desc: str
  }

  class WorkerClass {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_class
    +default: str
    +desc: str
  }

  class WorkerThreads {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class WorkerConnections {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class MaxRequests {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class MaxRequestsJitter {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class Timeout {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class GracefulTimeout {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class Keepalive {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class LimitRequestLine {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class LimitRequestFields {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class LimitRequestFieldSize {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: int
    +default: int
    +desc: str
  }

  class Reload {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class ReloadEngine {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_reload_engine
    +default: str
    +desc: str
  }

  class ReloadExtraFiles {
    +name: str
    +action: str
    +section: str
    +cli
    +meta: str
    +validator: validate_list_of_existing_files
    +default
    +desc: str
  }

  class Spew {
    +lineno
    +filename
    +filename
    +name
    +line
    +name: str
    +src
    +line
    +line
    +details
    +tokens
    --
    -__init__(trace_names, show_values)
    -__call__(frame, event, arg)
  }

  class ConfigCheck {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class PrintConfig {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class PreloadApp {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class Sendfile {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +const: bool
    +desc: str
  }

  class ReusePort {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class Chdir {
    +name: str
    +section: str
    +cli
    +validator: validate_chdir
    +default
    +default_doc: str
    +desc: str
  }

  class Daemon {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class Env {
    +name: str
    +action: str
    +section: str
    +cli
    +meta: str
    +validator: validate_list_string
    +default
    +desc: str
  }

  class WorkerTmpDir {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class User {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_user
    +default
    +default_doc: str
    +desc: str
  }

  class Group {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_group
    +default
    +default_doc: str
    +desc: str
  }

  class Umask {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_pos_int
    +type: auto_int
    +default: int
    +desc: str
  }

  class Initgroups {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class TmpUploadDir {
    +name: str
    +section: str
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class SecureSchemeHeader {
    +name: str
    +section: str
    +validator: validate_dict
    +default
    +desc: str
  }

  class ForwardedAllowIPS {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string_to_list
    +default
    +desc: str
  }

  class AccessLog {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class DisableRedirectAccessToSyslog {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class AccessLogFormat {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: str
    +desc: str
  }

  class ErrorLog {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: str
    +desc: str
  }

  class Loglevel {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: str
    +desc: str
  }

  class CaptureOutput {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class LoggerClass {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_class
    +default: str
    +desc: str
  }

  class LogConfig {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class LogConfigDict {
    +name: str
    +section: str
    +validator: validate_dict
    +default
    +desc: str
  }

  class LogConfigJson {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class SyslogTo {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: str
    +default: str
    +default: str
    +default: str
    +desc: str
  }

  class Syslog {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class SyslogPrefix {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class SyslogFacility {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: str
    +desc: str
  }

  class EnableStdioInheritance {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +default: bool
    +action: str
    +desc: str
  }

  class StatsdHost {
    +name: str
    +section: str
    +cli
    +meta: str
    +default: NoneType
    +validator: validate_statsd_address
    +desc: str
  }

  class DogstatsdTags {
    +name: str
    +section: str
    +cli
    +meta: str
    +default: str
    +validator: validate_string
    +desc: str
  }

  class StatsdPrefix {
    +name: str
    +section: str
    +cli
    +meta: str
    +default: str
    +validator: validate_string
    +desc: str
  }

  class Procname {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class DefaultProcName {
    +name: str
    +section: str
    +validator: validate_string
    +default: str
    +desc: str
  }

  class PythonPath {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class Paste {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class OnStarting {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +on_starting()
  }

  class OnReload {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +on_reload()
  }

  class WhenReady {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +when_ready()
  }

  class Prefork {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +pre_fork(worker)
  }

  class Postfork {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +post_fork(worker)
  }

  class PostWorkerInit {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +post_worker_init()
  }

  class WorkerInt {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +worker_int()
  }

  class WorkerAbort {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +worker_abort()
  }

  class PreExec {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +pre_exec()
  }

  class PreRequest {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +pre_request(req)
  }

  class PostRequest {
    +name: str
    +section: str
    +validator: validate_post_request
    +type: callable
    +default
    +desc: str
    --
    +post_request(req, environ, resp)
  }

  class ChildExit {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +child_exit(worker)
  }

  class WorkerExit {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +worker_exit(worker)
  }

  class NumWorkersChanged {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +nworkers_changed(new_value, old_value)
  }

  class OnExit {
    +name: str
    +section: str
    +validator
    +default
    +desc: str
    --
    +on_exit()
  }

  class NewSSLContext {
    +name: str
    +section: str
    +validator
    +type: callable
    +default
    +desc: str
    --
    +ssl_context(default_ssl_context_factory)
  }

  class ProxyProtocol {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +default: bool
    +action: str
    +desc: str
  }

  class ProxyAllowFrom {
    +name: str
    +section: str
    +cli
    +validator: validate_string_to_list
    +default: str
    +desc: str
  }

  class KeyFile {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class CertFile {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class SSLVersion {
    +name: str
    +section: str
    +cli
    +validator: validate_ssl_version
    +default
    +default
    +default
    +desc: str
  }

  class CertReqs {
    +name: str
    +section: str
    +cli
    +validator: validate_pos_int
    +default
    +desc: str
  }

  class CACerts {
    +name: str
    +section: str
    +cli
    +meta: str
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class SuppressRaggedEOFs {
    +name: str
    +section: str
    +cli
    +action: str
    +default: bool
    +validator: validate_bool
    +desc: str
  }

  class DoHandshakeOnConnect {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class Ciphers {
    +name: str
    +section: str
    +cli
    +validator: validate_string
    +default: NoneType
    +desc: str
  }

  class PasteGlobalConf {
    +name: str
    +action: str
    +section: str
    +cli
    +meta: str
    +validator: validate_list_string
    +default
    +desc: str
  }

  class StripHeaderSpaces {
    +name: str
    +section: str
    +cli
    +validator: validate_bool
    +action: str
    +default: bool
    +desc: str
  }

  class BaseSocket {
    +sock
    +bound: bool
    +sock
    +bound: bool
    --
    -__init__(address, conf, log, fd)
    -__str__()
    -__getattr__(name)
    +set_options(sock, bound)
    +bind(sock)
    +close()
  }

  class TCPSocket {
    +FAMILY
    +scheme: str
    +scheme: str
    +addr
    --
    -__str__()
    +set_options(sock, bound)
  }

  class TCP6Socket {
    +FAMILY
    --
    -__str__()
  }

  class UnixSocket {
    +FAMILY
    +st
    +old_umask
    --
    -__init__(addr, conf, log, fd)
    -__str__()
    +bind(sock)
  }

  class Arbiter {
    +WORKER_BOOT_ERROR: int
    +APP_LOAD_ERROR: int
    +START_CTX
    +LISTENERS
    +WORKERS
    +PIPE
    +SIG_QUEUE
    +SIGNALS
    +SIG_NAMES
    +cwd
    +args
    +old_value
    +num_workers
    +pidname
    +fds: NoneType
    +listen_fds
    +fds
    +fds
    +listeners_str
    +pair
    +sig
    +signame
    +handler
    +log_func
    +ready
    +error_number
    +unlink
    +sig
    +sig
    +limit
    +master_pid
    +environ
    +old_address
    +listeners_str
    +workers
    +exitcode
    +reason: str
    +reason: str
    +sig_name
    +sig_name
    +msg
    +worker
    +workers
    +workers
    +active_worker_count
    +worker
    +pid
    +worker_pids
    +worker
    --
    -__init__(app)
    -_get_num_workers()
    -_set_num_workers(value)
    +setup(app)
    +start()
    +init_signals()
    +signal(sig, frame)
    +run()
    +handle_chld(sig, frame)
    +handle_hup()
    +handle_term()
    +handle_int()
    +handle_quit()
    +handle_ttin()
    +handle_ttou()
    +handle_usr1()
    +handle_usr2()
    +handle_winch()
    +maybe_promote_master()
    +wakeup()
    +halt(reason, exit_status)
    +sleep()
    +stop(graceful)
    +reexec()
    +reload()
    +murder_workers()
    +reap_workers()
    +manage_workers()
    +spawn_worker()
    +spawn_workers()
    +kill_workers(sig)
    +kill_worker(pid, sig)
  }

  class HaltServer {
    -__init__(reason, exit_status)
    -__str__()
  }

  class ConfigError {
  }

  class AppImportError {
  }

  class SafeAtoms {
    +kl
    --
    -__init__(atoms)
    -__getitem__(k)
  }

  class Logger {
    +LOG_LEVELS
    +loglevel
    +error_fmt: str
    +datefmt: str
    +access_fmt: str
    +syslog_fmt: str
    +atoms_wrapper_class: SafeAtoms
    +config
    +config
    +config_json
    +defaults
    +msg: str
    +lvl
    +status
    +status
    +atoms
    +req_headers
    +req_headers: req
    +req_headers
    +resp_headers
    +resp_headers
    +environ_variables
    +safe_atoms
    +h
    +h
    +h
    +prefix
    +prefix
    +fmt
    +facility
    +h
    +user: NoneType
    +http_auth
    +auth
    +auth
    +user
    --
    -__init__(cfg)
    +setup(cfg)
    +critical(msg)
    +error(msg)
    +warning(msg)
    +info(msg)
    +debug(msg)
    +exception(msg)
    +log(lvl, msg)
    +atoms(resp, req, environ, request_time)
    +access(resp, req, environ, request_time)
    +now()
    +reopen_files()
    +close_on_exec()
    -_get_gunicorn_handler(log)
    -_set_handler(log, output, fmt, stream)
    -_set_syslog_handler(log, cfg, fmt, name)
    -_get_user(environ)
  }

}

package "venv2.lib.python3.12.site-packages.gunicorn.app" {
  class WSGIApplication {
    +config_uri
    +config_file
    --
    +init(parser, opts, args)
    +load_config()
    +load_wsgiapp()
    +load_pasteapp()
    +load()
  }

  class PasterServerApplication {
    +default_gunicorn_config_file
    --
    +load_config()
    +load()
  }

  class BaseApplication {
    -__init__(usage, prog)
    +do_load_config()
    +load_default_config()
    +init(parser, opts, args)
    +load()
    +load_config()
    +reload()
    +wsgi()
    +run()
  }

  class Application {
    +ext
    +module_name: str
    +spec
    +msg: str
    +loader_
    +spec
    +mod
    +module_name
    +cfg
    +filename
    +filename: location
    +cfg
    +parser
    +args
    +cfg
    +env_args
    +default_config
    +msg: str
    +msg: str
    +paths
    +pythonpath
    --
    +chdir()
    +get_config_from_filename(filename)
    +get_config_from_module_name(module_name)
    +load_config_from_module_name_or_filename(location)
    +load_config_from_file(filename)
    +load_config()
    +run()
  }

}

package "venv2.lib.python3.12.site-packages.gunicorn.instrument" {
  class Statsd {
    +address_family
    +address_family
    +extra
    +metric
    +value
    +typ
    +duration_in_ms
    +status
    +status
    +msg
    +msg
    --
    -__init__(cfg)
    +critical(msg)
    +error(msg)
    +warning(msg)
    +exception(msg)
    +info(msg)
    +debug(msg)
    +log(lvl, msg)
    +access(resp, req, environ, request_time)
    +gauge(name, value)
    +increment(name, value, sampling_rate)
    +decrement(name, value, sampling_rate)
    +histogram(name, value)
    -_sock_send(msg)
  }

}

package "venv2.lib.python3.12.site-packages.gunicorn.http" {
  class ChunkedReader {
    +data
    +buf
    +idx
    +done
    +idx
    +done
    +rest
    +rest
    +buf
    +idx
    +idx
    +data
    +chunk_size
    +chunk_size
    +data
    --
    -__init__(req, unreader)
    +read(size)
    +parse_trailers(unreader, data)
    +parse_chunked(unreader)
    +parse_chunk_size(unreader, data)
    +get_data(unreader, buf)
  }

  class LengthReader {
    +size
    +buf
    +data
    +data
    +buf
    --
    -__init__(unreader, length)
    +read(size)
  }

  class EOFReader {
    +data
    +data
    +data
    +data
    --
    -__init__(unreader)
    +read(size)
  }

  class Body {
    +ret
    +next: __next__
    +size
    +data
    +data
    +data
    +size
    +data
    +ret
    +idx
    +idx
    +data
    +ret
    +data
    +pos
    +data: bytes
    --
    -__init__(reader)
    -__iter__()
    -__next__()
    +getsize(size)
    +read(size)
    +readline(size)
    +readlines(size)
  }

  class Message {
    +max_header_field_size
    +unused
    +cfg
    +headers
    +lines
    +scheme_header: bool
    +secure_scheme_headers
    +secure_scheme_headers
    +curr
    +header_length
    +name
    +name
    +curr
    +value
    +secure
    +scheme
    +scheme_header: bool
    +chunked: bool
    +content_length: NoneType
    +content_length: value
    +chunked: bool
    +content_length
    +v
    --
    -__init__(cfg, unreader, peer_addr)
    +parse(unreader)
    +parse_headers(data)
    +set_body_reader()
    +should_close()
  }

  class Request {
    +data
    +buf
    +buf
    +buf
    +data
    +idx
    +done
    +idx
    +done
    +data
    +ret
    +buf: NoneType
    +data
    +idx
    +data
    +bits
    +proto
    +s_addr
    +d_addr
    +s_port
    +d_port
    +bits
    +parts
    +match
    --
    -__init__(cfg, unreader, peer_addr, req_number)
    +get_data(unreader, buf, stop)
    +parse(unreader)
    +read_line(unreader, buf, limit)
    +proxy_protocol(line)
    +proxy_protocol_access_check()
    +parse_proxy_protocol(line)
    +parse_request_line(line_bytes)
    +set_body_reader()
  }

  class Unreader {
    +size: NoneType
    +ret
    +d
    +chunk
    +ret
    +data
    --
    -__init__()
    +chunk()
    +read(size)
    +unread(data)
  }

  class SocketUnreader {
    -__init__(sock, max_chunk)
    +chunk()
  }

  class IterUnreader {
    -__init__(iterable)
    +chunk()
  }

  class Parser {
    +mesg_class: NoneType
    +data
    +data
    +next: __next__
    --
    -__init__(cfg, source, source_addr)
    -__iter__()
    -__next__()
  }

  class RequestParser {
    +mesg_class: Request
  }

  class ParseException {
  }

  class NoMoreData {
    -__init__(buf)
    -__str__()
  }

  class InvalidRequestLine {
    -__init__(req)
    -__str__()
  }

  class InvalidRequestMethod {
    -__init__(method)
    -__str__()
  }

  class InvalidHTTPVersion {
    -__init__(version)
    -__str__()
  }

  class InvalidHeader {
    -__init__(hdr, req)
    -__str__()
  }

  class InvalidHeaderName {
    -__init__(hdr)
    -__str__()
  }

  class InvalidChunkSize {
    -__init__(data)
    -__str__()
  }

  class ChunkMissingTerminator {
    -__init__(term)
    -__str__()
  }

  class LimitRequestLine {
    -__init__(size, max_size)
    -__str__()
  }

  class LimitRequestHeaders {
    -__init__(msg)
    -__str__()
  }

  class InvalidProxyLine {
    -__init__(line)
    -__str__()
  }

  class ForbiddenProxyRequest {
    -__init__(host)
    -__str__()
  }

  class InvalidSchemeHeaders {
    -__str__()
  }

  class FileWrapper {
    +data
    --
    -__init__(filelike, blksize)
    -__getitem__(key)
  }

  class WSGIErrorsWrapper {
    +errorlog
    +handlers
    +handlers
    --
    -__init__(cfg)
    +write(data)
  }

  class Response {
    +exc_info: NoneType
    +value
    +lname
    +connection: str
    +connection: str
    +connection: str
    +headers
    +tosend
    +header_str
    +arglen
    +tosend: arglen
    +tosend
    +arg
    +fileno
    +offset
    +filesize
    +nbytes
    +nbytes
    +chunk_size
    --
    -__init__(req, sock, cfg)
    +force_close()
    +should_close()
    +start_response(status, headers, exc_info)
    +process_headers(headers)
    +is_chunked()
    +default_headers()
    +send_headers()
    +write(arg)
    +can_sendfile()
    +sendfile(respiter)
    +write_file(respiter)
    +close()
  }

}

package "venv2.lib.python3.12.site-packages.gunicorn.workers" {
  class StopWaiting {
  }

  class SyncWorker {
    +ret
    +listener
    +ready
    +timeout
    +req: NoneType
    +client
    +parser
    +req
    +environ
    +resp: NoneType
    +request_start
    +respiter
    +request_time
    --
    +accept(listener)
    +wait(timeout)
    +is_parent_alive()
    +run_for_one(timeout)
    +run_for_multiple(timeout)
    +run()
    +handle(listener, client, addr)
    +handle_request(listener, req, client, addr)
  }

  class AsyncWorker {
    +req: NoneType
    +parser
    +listener_name
    +req
    +proxy_protocol_info
    +req: NoneType
    +req
    +proxy_protocol_info
    +request_start
    +environ
    +resp: NoneType
    +respiter
    +request_time
    --
    -__init__()
    +timeout_ctx()
    +is_already_handled(respiter)
    +handle(listener, client, addr)
    +handle_request(listener_name, req, sock, addr)
  }

  class TornadoWorker {
    +web
    +old_clear
    +app
    +app
    +app
    +httpserver
    +old_connection_finish
    +server_class
    --
    +{class} setup()
    +clear()
    +handle_exit(sig, frame)
    +handle_request()
    +watchdog()
    +heartbeat()
    +init_process()
    +run()
    +finish()
  }

  class _HTTPServer {
    +on_close(server_conn)
  }

  class EventletWorker {
    +client
    +acceptors
    +gsock
    +hfun
    +acceptor
    +t: NoneType
    --
    +patch()
    +is_already_handled(respiter)
    +init_process()
    +handle_quit(sig, frame)
    +handle_usr1(sig, frame)
    +timeout_ctx()
    +handle(listener, client, addr)
    +run()
  }

  class WorkerTmp {
    +old_umask
    +fdir
    --
    -__init__(cfg)
    +notify()
    +last_update()
    +fileno()
    +close()
  }

  class GeventWorker {
    +server_class: NoneType
    +wsgi_handler: NoneType
    +sockets
    +servers
    +ssl_args
    +ssl_args
    +pool
    +environ
    +server
    +hfun
    +server
    +ts
    +accepting: int
    --
    +patch()
    +notify()
    +timeout_ctx()
    +run()
    +handle(listener, client, addr)
    +handle_request(listener_name, req, sock, addr)
    +handle_quit(sig, frame)
    +handle_usr1(sig, frame)
    +init_process()
  }

  class GeventResponse {
    +status: NoneType
    +headers: NoneType
    +sent: NoneType
    --
    -__init__(status, headers, clength)
  }

  class PyWSGIHandler {
    +start
    +finish
    +response_time
    +resp_headers
    +resp
    +req_headers
    +req_headers
    +env
    --
    +log_request()
    +get_environ()
  }

  class PyWSGIServer {
  }

  class GeventPyWSGIWorker {
    +server_class: PyWSGIServer
    +wsgi_handler: PyWSGIHandler
  }

  class TConn {
    -__init__(cfg, sock, client, server)
    +init()
    +set_timeout()
    +close()
  }

  class ThreadWorker {
    +max_keepalived
    +fs
    +conn
    +now
    +conn
    +delta
    +server
    +acceptor
    +events
    +callback
    +result
    +result
    +keepalive: bool
    +req: NoneType
    +req
    +keepalive
    +environ
    +resp: NoneType
    +request_start
    +respiter
    +request_time
    --
    -__init__()
    +{class} check_config(cfg, log)
    +init_process()
    +get_thread_pool()
    +handle_quit(sig, frame)
    -_wrap_future(fs, conn)
    +enqueue_req(conn)
    +accept(server, listener)
    +on_client_socket_readable(conn, client)
    +murder_keepalived()
    +is_parent_alive()
    +run()
    +finish_request(fs)
    +handle(conn)
    +handle_request(req, conn)
  }

  class Worker {
    +SIGNALS
    +PIPE
    +jitter
    +reloader_cls
    +tb_string
    +request_start
    +addr
    +status_int: int
    +reason: str
    +mesg
    +mesg
    +mesg
    +mesg
    +req
    +mesg
    +reason: str
    +mesg
    +status_int: int
    +mesg
    +reason: str
    +mesg: str
    +status_int: int
    +mesg
    +reason: str
    +mesg
    +status_int: int
    +msg: str
    +status_int: int
    +reason: str
    +mesg: str
    +request_time
    +environ
    +resp
    --
    -__init__(age, ppid, sockets, app, timeout, cfg, log)
    -__str__()
    +notify()
    +run()
    +init_process()
    +changed()
    +load_wsgi()
    +init_signals()
    +handle_usr1(sig, frame)
    +handle_exit(sig, frame)
    +handle_quit(sig, frame)
    +handle_abort(sig, frame)
    +handle_error(req, client, addr, exc)
    +handle_winch(sig, fname)
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy" {
  class Identified {
    +logging_name
    +logger: _IdentifiedLoggerType
    -_echo: _EchoFlagType
    --
    -_should_log_debug(): bool
    -_should_log_info(): bool
  }

  class InstanceLogger {
    -_echo: _EchoFlagType
    +warn: warning
    +selected_level
    +selected_level
    +level
    +level
    --
    -__init__(echo, name)
    +debug(msg)
    +info(msg)
    +warning(msg)
    +error(msg)
    +exception(msg)
    +critical(msg)
    +log(level, msg)
    +isEnabledFor(level): bool
    +getEffectiveLevel(): int
  }

  class echo_property {
    -__get__(instance, owner): echo_property
    -__get__(instance, owner): _EchoFlagType
    -__get__(instance, owner)
    -__set__(instance, value)
  }

  class Inspectable {
  }

  class _InspectableTypeProtocol {
    -_sa_inspect_type(): _TCov
  }

  class _InspectableProtocol {
    -_sa_inspect_instance(): _TCov
  }

  class HasDescriptionCode {
    +code
    +code
    +message
    +message
    --
    -__init__()
    -_code_str(): str
    -__str__(): str
  }

  class SQLAlchemyError {
    +text: str
    +arg_text
    +text
    +text
    +message
    +message
    --
    -_message(): str
    -_sql_message(): str
    -__str__(): str
  }

  class ArgumentError {
  }

  class DuplicateColumnError {
  }

  class ObjectNotExecutableError {
    -__init__(target)
    -__reduce__()
  }

  class NoSuchModuleError {
  }

  class NoForeignKeysError {
  }

  class AmbiguousForeignKeysError {
  }

  class ConstraintColumnNotFoundError {
  }

  class CircularDependencyError {
    +message: msg
    --
    -__init__(message, cycles, edges, msg, code)
    -__reduce__()
  }

  class CompileError {
  }

  class UnsupportedCompilationError {
    +code: str
    --
    -__init__(compiler, element_type, message)
    -__reduce__()
  }

  class IdentifierError {
  }

  class DisconnectionError {
    +invalidate_pool: bool
  }

  class InvalidatePoolError {
    +invalidate_pool: bool
  }

  class TimeoutError {
  }

  class InvalidRequestError {
  }

  class IllegalStateChangeError {
  }

  class NoInspectionAvailable {
  }

  class PendingRollbackError {
  }

  class ResourceClosedError {
  }

  class NoSuchColumnError {
  }

  class NoResultFound {
  }

  class MultipleResultsFound {
  }

  class NoReferenceError {
    +table_name: str
  }

  class AwaitRequired {
    +code: str
  }

  class MissingGreenlet {
    +code: str
  }

  class NoReferencedTableError {
    -__init__(message, tname)
    -__reduce__()
  }

  class NoReferencedColumnError {
    -__init__(message, tname, cname)
    -__reduce__()
  }

  class NoSuchTableError {
  }

  class UnreflectableTableError {
  }

  class UnboundExecutionError {
  }

  class DontWrapMixin {
  }

  class StatementError {
    +statement
    +params
    +orig
    +ismulti
    +connection_invalidated: bool
    +util
    +details
    +stmt_detail
    +params_repr
    +code_str
    --
    -__init__(message, statement, params, orig, hide_parameters, code, ismulti)
    +add_detail(msg)
    -__reduce__()
    -_sql_message(): str
  }

  class DBAPIError {
    +code: str
    +glob
    +name
    +name
    +cls
    +text
    +text
    --
    +{class} instance(statement, params, orig, dbapi_base_err, hide_parameters, connection_invalidated, dialect, ismulti): StatementError
    +{class} instance(statement, params, orig, dbapi_base_err, hide_parameters, connection_invalidated, dialect, ismulti): DontWrapMixin
    +{class} instance(statement, params, orig, dbapi_base_err, hide_parameters, connection_invalidated, dialect, ismulti): BaseException
    +{class} instance(statement, params, orig, dbapi_base_err, hide_parameters, connection_invalidated, dialect, ismulti)
    -__reduce__()
    -__init__(statement, params, orig, hide_parameters, connection_invalidated, code, ismulti)
  }

  class InterfaceError {
    +code: str
  }

  class DatabaseError {
    +code: str
  }

  class DataError {
    +code: str
  }

  class OperationalError {
    +code: str
  }

  class IntegrityError {
    +code: str
  }

  class InternalError {
    +code: str
  }

  class ProgrammingError {
    +code: str
  }

  class NotSupportedError {
    +code: str
  }

  class SATestSuiteWarning {
  }

  class SADeprecationWarning {
    +deprecated_since
  }

  class Base20DeprecationWarning {
    +deprecated_since
    --
    -__str__(): str
  }

  class LegacyAPIWarning {
  }

  class MovedIn20Warning {
  }

  class SAPendingDeprecationWarning {
    +deprecated_since
  }

  class SAWarning {
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.connectors" {
  class AsyncAdapt_dbapi_cursor {
    +server_side: bool
    +cursor
    +result
    +size
    +rr
    +retval
    +retval
    --
    -__init__(adapt_connection)
    +description()
    +rowcount()
    +arraysize()
    +arraysize(value)
    +lastrowid()
    +close()
    +execute(operation, parameters)
    +executemany(operation, seq_of_parameters)
    +nextset()
    +setinputsizes()
    -__iter__()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_dbapi_ss_cursor {
    +server_side: bool
    +cursor
    --
    -__init__(adapt_connection)
    +close()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_dbapi_connection {
    +await_
    --
    -__init__(dbapi, connection)
    +ping(reconnect)
    +add_output_converter()
    +character_set_name()
    +autocommit()
    +autocommit(value)
    +cursor(server_side)
    +rollback()
    +commit()
    +close()
  }

  class AsyncAdaptFallback_dbapi_connection {
    +await_
  }

  class Connector {
  }

  class AsyncAdapt_aioodbc_cursor {
    +setinputsizes()
  }

  class AsyncAdapt_aioodbc_ss_cursor {
  }

  class AsyncAdapt_aioodbc_connection {
    +autocommit()
    +autocommit(value)
    +cursor(server_side)
    +rollback()
    +commit()
    +close()
  }

  class AsyncAdaptFallback_aioodbc_connection {
  }

  class AsyncAdapt_aioodbc_dbapi {
    +async_fallback
    +creator_fn
    --
    -__init__(aioodbc, pyodbc)
    -_init_dbapi_attributes()
    +connect()
  }

  class aiodbcConnector {
    +is_async: bool
    +supports_statement_cache: bool
    +supports_server_side_cursors: bool
    +async_fallback
    --
    +{class} import_dbapi()
    +create_connect_args(url): ConnectArgsType
    +{class} get_pool_class(url)
    -_do_isolation_level(connection, autocommit, isolation_level)
    -_do_autocommit(connection, value)
    +set_readonly(connection, value)
    +set_deferrable(connection, value)
    +get_driver_connection(connection)
  }

  class PyODBCConnector {
    +driver: str
    +supports_sane_rowcount_returning: bool
    +supports_sane_multi_rowcount: bool
    +supports_native_decimal: bool
    +default_paramstyle: str
    +fast_executemany: bool
    +pyodbc_driver_name
    +dbapi: ModuleType
    +opts
    +keys: opts
    +query
    +connect_args
    +connectors
    +connectors
    +token
    +keys
    +dsn_connection
    +connectors
    +port: str
    +port
    +connectors
    +driver
    +user
    +pwd
    +authentication
    +m
    +vers_tuple: interfaces.VersionInfoType
    +dbapi_con
    +version
    +r
    --
    -__init__(use_setinputsizes)
    +{class} import_dbapi(): ModuleType
    +create_connect_args(url): ConnectArgsType
    +check_quote(): str
    +is_disconnect(e, connection, cursor): bool
    -_dbapi_version(): interfaces.VersionInfoType
    -_parse_dbapi_version(vers): interfaces.VersionInfoType
    -_get_server_version_info(connection): interfaces.VersionInfoType
    +do_set_input_sizes(cursor, list_of_tuples, context)
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.util" {
  class Empty {
  }

  class Full {
  }

  class QueueCommon {
    +maxsize: int
    +use_lifo: bool
    --
    -__init__(maxsize, use_lifo)
    +empty(): bool
    +full(): bool
    +qsize(): int
    +put_nowait(item)
    +put(item, block, timeout)
    +get_nowait(): _T
    +get(block, timeout): _T
  }

  class Queue {
    +queue
    +endtime
    +remaining
    +endtime
    +remaining
    +item
    --
    -__init__(maxsize, use_lifo)
    +qsize(): int
    +empty(): bool
    +full(): bool
    +put(item, block, timeout)
    +put_nowait(item)
    +get(block, timeout): _T
    +get_nowait(): _T
    -_init(maxsize)
    -_qsize(): int
    -_empty(): bool
    -_full(): bool
    -_put(item)
    -_get(): _T
  }

  class AsyncAdaptedQueue {
    +await_
    +queue
    +queue
    +queue
    --
    +{static} await_(): _T
    -__init__(maxsize, use_lifo)
    +empty(): bool
    +full()
    +qsize()
    -_queue()
    +put_nowait(item)
    +put(item, block, timeout)
    +get_nowait(): _T
    +get(block, timeout): _T
  }

  class FallbackAsyncAdaptedQueue {
    +await_
  }

  class greenlet {
    +dead: bool
    +gr_context
    --
    -__init__(fn, driver)
    +throw(): Any
    +switch(value): Any
  }

  class _AsyncIoGreenlet {
    +dead: bool
    --
    -__init__(fn, driver)
  }

  class AsyncAdaptedLock {
    +mutex(): asyncio.Lock
    -__enter__(): bool
    -__exit__()
  }

  class FullArgSpec {
    +args
    +varargs
    +varkw
    +defaults
    +kwonlyargs
    +kwonlydefaults
    +annotations
  }

  class _ModuleRegistry {
    +key
    +key: module
    --
    -__init__(prefix)
    +preload_module()
    +import_prefix(path)
  }

  class FacadeDict {
    +new
    --
    -__new__()
    +copy(): NoReturn
    -__reduce__(): Any
    -_insert_item(key, value)
    -__repr__(): str
  }

  class Properties {
    -_data
    --
    -__init__(data)
    -__len__(): int
    -__iter__()
    -__dir__()
    -__add__(other)
    -__setitem__(key, obj)
    -__getitem__(key): _T
    -__delitem__(key)
    -__setattr__(key, obj)
    -__getstate__()
    -__setstate__(state)
    -__getattr__(key): _T
    -__contains__(key): bool
    +as_readonly()
    +update(value)
    +get(key)
    +get(key, default)
    +get(key, default)
    +keys()
    +values()
    +items()
    +has_key(key): bool
    +clear()
  }

  class OrderedProperties {
    -__init__()
  }

  class ReadOnlyProperties {
  }

  class WeakSequence {
    +self
    +obj
    --
    -__init__(__elements)
    -_remove(selfref)
    +append(item)
    -__len__()
    -__iter__()
    -__getitem__(index)
  }

  class OrderedIdentitySet {
    -__init__(iterable)
  }

  class PopulateDict {
    +val
    --
    -__init__(creator)
    -__missing__(key): Any
  }

  class WeakPopulateDict {
    +weakself
    +val
    --
    -__init__(creator_method)
    -__missing__(key): Any
  }

  class UniqueAppender {
    +data
    -_data_appender
    -_unique
    +id_
    --
    -__init__(data, via)
    +append(item)
    -__iter__()
  }

  class LRUCache {
    +capacity: int
    +threshold: float
    +size_alert
    +item
    +item
    +size_alert
    +size_alert: bool
    +by_counter
    --
    -__init__(capacity, threshold, size_alert)
    -_inc_counter()
    +get(key)
    +get(key, default)
    +get(key, default)
    -__getitem__(key): _VT
    -__iter__()
    -__len__(): int
    +values()
    -__setitem__(key, value)
    -__delitem__(__v)
    +size_threshold(): float
    -_manage_size()
  }

  class _CreateFuncType {
    -__call__(): _T_co
  }

  class _ScopeFuncType {
    -__call__(): Any
  }

  class ScopedRegistry {
    +createfunc
    +scopefunc: _ScopeFuncType
    +registry: Any
    +key
    --
    -__init__(createfunc, scopefunc)
    -__call__(): _T
    +has(): bool
    +set(obj)
    +clear()
  }

  class ThreadLocalRegistry {
    +val
    --
    -__init__(createfunc)
    -__call__(): _T
    +has(): bool
    +set(obj)
    +clear()
  }

  class safe_reraise {
    -_exc_info
    --
    -__enter__()
    -__exit__(type_, value, traceback): NoReturn
  }

  class PluginLoader {
    +loader
    +mod
    +mod
    --
    -__init__(group, auto_fn)
    +clear()
    +load(name): Any
    +register(name, modulepath, objname)
    +load()
  }

  class portable_instancemethod {
    -__getstate__()
    -__setstate__(state)
    -__init__(meth, kwargs)
    -__call__()
  }

  class AnonymousInterface {
  }

  class generic_fn_descriptor {
    +fget
    -__doc__
    -__name__: str
    --
    -__init__(fget, doc)
    -__get__(obj, cls): _GFD
    -__get__(obj, cls): _T_co
    -__get__(obj, cls)
    -__set__(instance, value)
    -__delete__(instance)
    -_reset(obj)
    +{class} reset(obj, name)
  }

  class _non_memoized_property {
    -__get__(obj, cls)
  }

  class _memoized_property {
    +result
    --
    -__get__(obj, cls)
    -_reset(obj)
    +{class} reset(obj, name)
  }

  class HasMemoized {
    -_memoized_keys
    --
    -_reset_memoizations()
    -_assert_no_memoizations()
    -_set_memoized_attribute(key, value)
  }

  class memoized_attribute {
    +fget
    -__doc__
    -__name__: str
    +result
    --
    -__init__(fget, doc)
    -__get__(obj, cls): _MA
    -__get__(obj, cls): _T
    -__get__(obj, cls)
  }

  class MemoizedSlots {
    +value
    +fn
    +result
    --
    -_fallback_getattr(key)
    -__getattr__(key): Any
    +oneshot()
    +memo()
  }

  class classproperty {
    +fget
    --
    -__init__(fget)
    -__get__(obj, cls): Any
  }

  class hybridproperty {
    +clsval
    --
    -__init__(func)
    -__get__(instance, owner): _T
    +classlevel(func)
  }

  class rw_hybridproperty {
    +clsval
    --
    -__init__(func)
    -__get__(instance, owner): _T
    -__set__(instance, value)
    +setter(func)
    +classlevel(func)
  }

  class hybridmethod {
    -__init__(func)
    -__get__(instance, owner)
    +classlevel(func)
  }

  class symbol {
    +name: str
    +symbols
    +sym
    +canonical
    +sym
    --
    -__new__(name, doc, canonical): symbol
    -__reduce__()
    -__str__()
    -__repr__()
  }

  class _IntFlagMeta {
    +items
    +items
    +sym
    --
    -__init__(classname, bases, dict_)
    -__iter__()
  }

  class _FastIntFlag {
  }

  class _hash_limit_string {
    -_hash: int
    +interpolated
    +self
    --
    -__new__(value, num, args): _hash_limit_string
    -__hash__(): int
    -__eq__(other): bool
  }

  class TypingOnly {
    +remaining
    --
    -__init_subclass__()
  }

  class EnsureKWArg {
    +ensure_kwarg: str
    +fn_reg
    +clsdict
    +m
    +fn
    +spec
    +wrapped
    --
    -__init_subclass__()
    -{class} _wrap_w_kw(fn)
    +wrap(): Any
  }

  class ArgsTypeProcotol {
    -__args__
  }

  class GenericProtocol {
    -__args__
    -__origin__
  }

  class SupportsKeysAndGetItem {
    +keys()
    -__getitem__(__k): _VT_co
  }

  class DescriptorProto {
    -__get__(instance, owner): Any
    -__set__(instance, value)
    -__delete__(instance)
  }

  class DescriptorReference {
    -__get__(instance, owner): _DESC
    -__set__(instance, value)
    -__delete__(instance)
  }

  class RODescriptorReference {
    -__get__(instance, owner): _DESC_co
    -__set__(instance, value): NoReturn
    -__delete__(instance): NoReturn
  }

  class CallableReference {
    -__get__(instance, owner): _FN
    -__set__(instance, value)
    -__delete__(instance)
  }

  class code_writer_cmd {
    +parser: ArgumentParser
    +args: Namespace
    +suppress_output: bool
    +diffs_detected: bool
    +source_root: Path
    +pyproject_toml_path: Path
    +is_posix
    +entrypoint_name
    +impl: entry
    +cmdline_options_str
    +cmdline_options_list
    +kw
    +source_lines
    +source_lines
    +d
    +d_as_list
    --
    -__init__(tool_script)
    +run_zimports(tempfile)
    +run_black(tempfile)
    -_run_console_script(path, options)
    +write_status()
    +write_output_file_from_text(text, destination_path)
    +write_output_file_from_tempfile(tempfile, destination_path)
    -_run_diff(destination_path)
    +add_arguments()
    +run_program()
  }

  class ReadOnlyContainer {
    -_readonly(): NoReturn
    -_immutable(): NoReturn
    -__delitem__(key): NoReturn
    -__setitem__(key, value): NoReturn
    -__setattr__(key, value): NoReturn
  }

  class ImmutableDictBase {
    -__new__(): Self
    -__init__()
    -_readonly(): NoReturn
    +clear(): NoReturn
    +pop(key, default): NoReturn
    +popitem(): NoReturn
    +setdefault(key, default): NoReturn
    +update(): NoReturn
  }

  class immutabledict {
    +new
    +new
    +new
    +new: NoneType
    +new
    --
    -__new__()
    -__init__()
    -__reduce__()
    +union(__d)
    -_union_w_kw(__d)
    +merge_with()
    -__repr__(): str
    -__ior__(__value): NoReturn
    -__or__(__value)
    -__ror__(__value)
  }

  class OrderedSet {
    -_list
    +cp
    +value
    +result
    +other_set
    +collection
    +collection: other
    +other_set: other
    +collection: other
    +other_set
    +collection
    +other_set
    +result
    +other_set
    +collection
    --
    -__init__(d)
    +copy()
    +add(element)
    +remove(element)
    +pop(): _T
    +insert(pos, element)
    +discard(element)
    +clear()
    -__getitem__(key): _T
    -__iter__()
    -__add__(other)
    -__repr__(): str
    +update()
    -__ior__(other)
    +union()
    -__or__(other)
    +intersection()
    -__and__(other)
    +symmetric_difference(other)
    -__xor__(other)
    +difference()
    -__sub__(other)
    +intersection_update()
    -__iand__(other)
    +symmetric_difference_update(other)
    -__ixor__(other)
    +difference_update()
    -__isub__(other)
  }

  class IdentitySet {
    -_members
    +pair
    +other: iterable
    +other
    +other: iterable
    +other
    +result
    +members
    +result
    +other
    +other
    +other
    +result
    +other
    +other
    +other
    +result
    +other
    +other
    +result
    --
    -__init__(iterable)
    +add(value)
    -__contains__(value): bool
    +remove(value)
    +discard(value)
    +pop(): Any
    +clear()
    -__eq__(other): bool
    -__ne__(other): bool
    +issubset(iterable): bool
    -__le__(other): bool
    -__lt__(other): bool
    +issuperset(iterable): bool
    -__ge__(other): bool
    -__gt__(other): bool
    +union(iterable): IdentitySet
    -__or__(other): IdentitySet
    +update(iterable)
    -__ior__(other): IdentitySet
    +difference(iterable): IdentitySet
    -__sub__(other): IdentitySet
    +difference_update(iterable)
    -__isub__(other): IdentitySet
    +intersection(iterable): IdentitySet
    -__and__(other): IdentitySet
    +intersection_update(iterable)
    -__iand__(other): IdentitySet
    +symmetric_difference(iterable): IdentitySet
    -__xor__(other): IdentitySet
    +symmetric_difference_update(iterable)
    -__ixor__(other): IdentitySet
    +copy(): IdentitySet
    -__len__(): int
    -__iter__()
    -__hash__(): NoReturn
    -__repr__(): str
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.ext" {
  class ExtendedInstrumentationRegistry {
    +factory
    +manager
    +existing_factories
    +manager
    +manager
    +hierarchy
    +factories
    +manager
    +factory
    +factory: NoneType
    +finder
    +finder
    +manager
    --
    -_locate_extended_factory(class_)
    -_check_conflicts(class_, factory)
    -_extended_class_manager(class_, factory)
    -_collect_management_factories_for(cls)
    +unregister(class_)
    +opt_manager_of_class(cls)
    +manager_of_class(cls)
    +state_of(instance)
    +dict_of(instance)
  }

  class InstrumentationManager {
    -__init__(class_)
    +manage(class_, manager)
    +unregister(class_, manager)
    +manager_getter(class_)
    +get()
    +instrument_attribute(class_, key, inst)
    +post_configure_attribute(class_, key, inst)
    +install_descriptor(class_, key, inst)
    +uninstall_descriptor(class_, key)
    +install_member(class_, key, implementation)
    +uninstall_member(class_, key)
    +instrument_collection_class(class_, key, collection_class)
    +get_instance_dict(class_, instance)
    +initialize_instance_dict(class_, instance)
    +install_state(class_, instance, state)
    +remove_state(class_, instance)
    +state_getter(class_)
    +dict_getter(class_)
  }

  class _ClassInstrumentationAdapter {
    +delegate
    +instance
    +state
    --
    -__init__(class_, override)
    +manage()
    +unregister()
    +manager_getter()
    +instrument_attribute(key, inst, propagated)
    +post_configure_attribute(key)
    +install_descriptor(key, inst)
    +uninstall_descriptor(key)
    +install_member(key, implementation)
    +uninstall_member(key)
    +instrument_collection_class(key, collection_class)
    +initialize_collection(key, state, factory)
    +new_instance(state)
    -_new_state_if_none(instance)
    +setup_instance(instance, state)
    +teardown_instance(instance)
    +has_state(instance)
    +state_getter()
    +dict_getter()
  }

  class _dispatcher {
    +fn
    +fn
    +arm
    +arm_collection
    +expr
    --
    -__init__()
    -__call__(element, compiler)
  }

  class OrderingList {
    +ordering_attr: str
    +ordering_func: OrderingFunc
    +reorder_on_append: bool
    +ordering_func: count_from_0
    +have
    +should_be
    +adapter
    +entity
    +step
    +start
    +stop
    --
    -__init__(ordering_attr, ordering_func, reorder_on_append)
    -_get_order_value(entity)
    -_set_order_value(entity, value)
    +reorder()
    -_order_entity(index, entity, reorder)
    +append(entity)
    -_raw_append(entity)
    +insert(index, entity)
    +remove(entity)
    +pop(index)
    -__setitem__(index, entity)
    -__delitem__(index)
    -__setslice__(start, end, values)
    -__delslice__(start, end)
    -__reduce__()
  }

  class HybridExtensionType {
    +HYBRID_METHOD: str
    +HYBRID_PROPERTY: str
  }

  class _HybridGetterType {
    -__call__(self): _T_co
  }

  class _HybridSetterType {
    -__call__(self, value)
  }

  class _HybridUpdaterType {
    -__call__(cls, value)
  }

  class _HybridDeleterType {
    -__call__(self)
  }

  class _HybridExprCallableType {
    -__call__(cls)
  }

  class _HybridComparatorCallableType {
    -__call__(cls)
  }

  class _HybridClassLevelAccessor {
    +getter(fget)
    +setter(fset)
    +deleter(fdel)
    +overrides()
    +update_expression(meth)
  }

  class hybrid_method {
    +is_attribute: bool
    +extension_type
    --
    -__init__(func, expr)
    +inplace(): Self
    -__get__(instance, owner)
    -__get__(instance, owner)
    -__get__(instance, owner)
    +expression(expr)
  }

  class hybrid_property {
    +is_attribute: bool
    +extension_type
    -__name__: str
    +defaults
    --
    -__init__(fget, fset, fdel, expr, custom_comparator, update_expr)
    -__get__(instance, owner): Self
    -__get__(instance, owner)
    -__get__(instance, owner): _T
    -__get__(instance, owner)
    -__set__(instance, value)
    -__delete__(instance)
    -_copy()
    +overrides(): Self
  }

  class _InPlace {
    -__init__(attr)
    -_set()
    +getter(fget)
    +setter(fset)
    +deleter(fdel)
    +expression(expr)
    +comparator(comparator)
    +update_expression(meth)
  }

  class Comparator {
    +expr
    +ret_expr
    +ret_expr: expr
    --
    -__init__(expression)
    -__clause_element__(): roles.ColumnsClauseRole
    +property()
    +adapt_to_entity(adapt_to_entity)
  }

  class ExprComparator {
    -__init__(cls, expression, hybrid)
    -__getattr__(key): Any
    +info(): _InfoType
    -_bulk_update_tuples(value)
    +property()
    +operate(op)
    +reverse_operate(op, other)
  }

  class index_property {
    +is_numeric
    +onebased
    +attr_name
    +column_value
    +value
    +attr_name
    +column_value
    +column_value
    +attr_name
    +column_value
    +column
    +index
    --
    -__init__(attr_name, index, default, datatype, mutable, onebased)
    -_fget_default(err)
    +fget(instance)
    +fset(instance, value)
    +fdel(instance)
    +expr(model)
  }

  class Bakery {
    -__init__(cls_, cache)
    -__call__(initial_fn)
  }

  class BakedQuery {
    +b1
    +q
    +key
    +cache_path: effective_path
    +ck
    +query
    +query
    +query
    +statement
    +session: query_or_session
    +session
    +query
    +query
    --
    -__init__(bakery, initial_fn, args)
    +{class} bakery(size, _size_alert)
    -_clone()
    -_update_cache_key(fn, args)
    -__iadd__(other)
    -__add__(other)
    +add_criteria(fn)
    +with_criteria(fn)
    +for_session(session)
    -__call__(session)
    +spoil(full)
    -_effective_key(session)
    -_with_lazyload_options(options, effective_path, cache_path)
    -_add_lazyload_options(options, effective_path, cache_path)
    -_retrieve_baked_query(session)
    -_bake(session)
    +to_query(query_or_session)
    -_as_query(session)
  }

  class Result {
    +q
    +q
    +bq
    +q
    +q: query
    +q
    +params
    +execution_options
    +result
    +result
    +result
    +col
    +bq
    +ret
    +bq
    +query
    +mapper
    +q
    +nones
    +q
    +bq
    +bq
    +bq
    +params
    +result
    +l
    --
    -__init__(bq, session)
    +params()
    -_using_post_criteria(fns)
    +with_post_criteria(fn)
    -_as_query()
    -__str__()
    -__iter__()
    -_iter()
    +count()
    +scalar()
    +first()
    +one()
    +one_or_none()
    +all()
    +get(ident)
    -_load_on_pk_identity(session, query, primary_key_identity)
    +setup()
  }

  class PythonNameForTableType {
    -__call__(base, tablename, table): str
  }

  class NameForScalarRelationshipType {
    -__call__(base, local_cls, referred_cls, constraint): str
  }

  class NameForCollectionRelationshipType {
    -__call__(base, local_cls, referred_cls, constraint): str
  }

  class GenerateRelationshipType {
    -__call__(base, direction, return_fn, attrname, local_cls, referred_cls)
    -__call__(base, direction, return_fn, attrname, local_cls, referred_cls): ORMBackrefArgument
    -__call__(base, direction, return_fn, attrname, local_cls, referred_cls)
  }

  class AutomapBase {
    +classes
    +by_module
    +metadata
    -_sa_automapbase_bookkeeping
    +automap_base
    +glbls
    +classname_for_table
    +name_for_scalar_relationship
    +name_for_collection_relationship
    +generate_relationship
    +collection_class: list
    +reflect: bool
    +autoload_with: engine
    +opts
    +table_to_map_config
    +many_to_many
    +many_to_many
    +bookkeeping
    +metadata_tables
    +table
    +clsdict
    +new_module
    +new_module: NoneType
    +newname
    +mapped_cls
    +map_config
    +by_module_properties: ByModuleProperties
    +props
    +by_module_properties: props
    --
    +{class} prepare(autoload_with, engine, reflect, schema, classname_for_table, modulename_for_table, collection_class, name_for_scalar_relationship, name_for_collection_relationship, generate_relationship, reflection_options)
    -{class} _sa_raise_deferred_config(): NoReturn
  }

  class _Bookkeeping {
    +table_keys
  }

  class ShardChooser {
    -__call__(mapper, instance, clause): Any
  }

  class IdentityChooser {
    -__call__(mapper, primary_key): Any
  }

  class ShardedQuery {
    -__init__()
    +set_shard(shard_id): Self
  }

  class ShardedSession {
    +shard_chooser: ShardChooser
    +identity_chooser: IdentityChooser
    +execute_chooser
    +q
    +q
    +execute_chooser: _default_execute_chooser
    +obj
    +obj2
    +state
    +token
    +shard_id
    +shard_id
    +trans
    +bind
    +shard_id
    --
    -__init__(shard_chooser, identity_chooser, execute_chooser, shards, query_cls)
    -_legacy_identity_chooser(primary_key): Any
    -_default_execute_chooser()
    -_identity_lookup(mapper, primary_key_identity, identity_token, passive, lazy_loaded_from, execution_options, bind_arguments)
    -_choose_shard_and_assign(mapper, instance): Any
    +connection_callable(mapper, instance, shard_id): Connection
    +get_bind(mapper): _SessionBind
    +bind_shard(shard_id, bind)
  }

  class set_shard_id {
    -__init__(shard_id, propagate_to_loaders)
  }

  class MutableBase {
    +msg: str
    +key
    +parent_cls
    +listen_keys
    +val
    +val
    +value
    +val
    +collection
    --
    -_parents()
    +{class} coerce(key, value)
    -{class} _get_listen_keys(attribute)
    -{class} _listen_on_attribute(attribute, coerce, parent_cls)
    +load()
    +load_attrs(ctx, attrs)
    +set_(value, oldvalue, initiator)
    +pickle(state_dict)
    +unpickle(state_dict)
  }

  class Mutable {
    +sqltype
    +schema_event_check: bool
    +schema_event_check: bool
    --
    +changed()
    +{class} associate_with_attribute(attribute)
    +{class} associate_with(sqltype)
    +listen_for_type(class_)
    +{class} as_mutable(sqltype)
    -_add_column_memo(parent)
    +listen_for_type(class_)
  }

  class MutableComposite {
    +prop
    --
    -{class} _get_listen_keys(attribute)
    +changed()
  }

  class MutableDict {
    +result
    +result
    +result
    --
    -__setitem__(key, value)
    +setdefault(key, value)
    +setdefault(key, value): _VT
    +setdefault(key, value): object
    +setdefault()
    -__delitem__(key)
    +update()
    +pop(__key): _VT
    +pop(__key, __default)
    +pop(__key, __default)
    +pop()
    +popitem()
    +clear()
    +{class} coerce(key, value)
    -__getstate__()
    -__setstate__(state)
  }

  class MutableList {
    +result
    --
    -__reduce_ex__(proto)
    -__setstate__(state)
    +is_scalar(value)
    +is_iterable(value)
    -__setitem__(index, value)
    -__delitem__(index)
    +pop(): _T
    +append(x)
    +extend(x)
    -__iadd__(x)
    +insert(i, x)
    +remove(i)
    +clear()
    +sort()
    +reverse()
    +{class} coerce(key, value)
  }

  class MutableSet {
    +result
    --
    +update()
    +intersection_update()
    +difference_update()
    +symmetric_difference_update()
    -__ior__(other)
    -__iand__(other)
    -__ixor__(other)
    -__isub__(other)
    +add(elem)
    +remove(elem)
    +discard(elem)
    +pop(): _T
    +clear()
    +{class} coerce(index, value)
    -__getstate__()
    -__setstate__(state)
    -__reduce_ex__(proto)
  }

  class AssociationProxyExtensionType {
    +ASSOCIATION_PROXY: str
  }

  class _GetterProtocol {
    -__call__(instance): _T_co
  }

  class _SetterProtocol {
  }

  class _PlainSetterProtocol {
    -__call__(instance, value)
  }

  class _DictSetterProtocol {
    -__call__(instance, key, value)
  }

  class _CreatorProtocol {
  }

  class _PlainCreatorProtocol {
    -__call__(value): Any
  }

  class _KeyCreatorProtocol {
    -__call__(key, value): Any
  }

  class _LazyCollectionProtocol {
    -__call__()
  }

  class _GetSetFactoryProtocol {
    -__call__(collection_class, assoc_instance)
  }

  class _ProxyFactoryProtocol {
    -__call__(lazy_collection, creator, value_attr, parent): Any
  }

  class _ProxyBulkSetProtocol {
    -__call__(proxy, collection)
  }

  class _AssociationProxyProtocol {
    +creator
    +key: str
    +target_collection: str
    +value_attr: str
    +cascade_scalar_deletes: bool
    +create_on_none_assignment: bool
    +getset_factory
    +proxy_factory
    +proxy_bulk_set
    --
    +info(): _InfoType
    +for_class(class_, obj)
    -_default_getset(collection_class)
  }

  class AssociationProxy {
    +is_attribute: bool
    +extension_type
    +inst
    +class_
    +class_
    +inst
    +inst: NoneType
    +owner
    +inst
    +inst: NoneType
    +insp
    +attr
    --
    -__init__(target_collection, attr)
    -__get__(instance, owner): Self
    -__get__(instance, owner)
    -__get__(instance, owner): _T
    -__get__(instance, owner)
    -__set__(instance, values)
    -__delete__(instance)
    +for_class(class_, obj)
    -_as_instance(class_, obj)
    -_calc_owner(target_cls): Any
    -_default_getset(collection_class)
    +getter()
    +dict_setter(k, value)
    +plain_setter(v)
    -__repr__(): str
  }

  class AssociationProxyInstance {
    +collection_class
    +parent
    +target_class
    +target_collection
    +value_attr
    +prop
    +target_class
    +target_assoc
    +attr
    +is_object
    +attr
    +scalar
    -_scalar_get
    -_scalar_set
    +attr
    +proxy: _T
    +target
    +creator
    +target
    +proxy
    +target
    +creator
    +collection_class
    +creator
    +is_has
    +target_assoc
    +inner
    +attr
    +value_expr
    +value_expr: criterion
    --
    -__init__(parent, owning_class, target_class, value_attr)
    +{class} for_proxy(parent, owning_class, parent_instance)
    -{class} _construct_for_assoc(target_assoc, parent, owning_class, target_class, value_attr)
    -_get_property()
    -_comparator()
    -__clause_element__(): NoReturn
    -{class} _cls_unwrap_target_assoc_proxy(target_class, value_attr)
    -_unwrap_target_assoc_proxy()
    +remote_attr()
    +local_attr()
    +attr()
    +scalar(): bool
    -_value_is_scalar(): bool
    -_target_is_object(): bool
    -_initialize_scalar_accessors()
    -_default_getset(collection_class)
    +getter()
    +dict_setter(k, value)
    +plain_setter(v)
    +info(): _InfoType
    +get(obj): _Self
    +get(obj): _T
    +get(obj)
    +set(obj, values)
    +delete(obj)
    -_new(lazy_collection)
    -_set(proxy, values)
    -_inflate(proxy)
    -_criterion_exists(criterion)
    +any(criterion)
    +has(criterion)
    -__repr__(): str
  }

  class AmbiguousAssociationProxyInstance {
    +actual_obj
    +insp
    +mapper
    +instance_class
    +prop
    +target_class: instance_class
    +target_assoc
    --
    -_ambiguous(): NoReturn
    +get(obj): Any
    -__eq__(obj): NoReturn
    -__ne__(obj): NoReturn
    +any(criterion): NoReturn
    +has(criterion): NoReturn
    -_lookup_cache()
    -_non_canonical_get_for_object(parent_instance)
    -_populate_cache(instance_class, mapper)
  }

  class ObjectAssociationProxyInstance {
    -_target_is_object: bool
    +target_assoc
    --
    +contains(other)
    -__eq__(obj)
    -__ne__(obj)
  }

  class ColumnAssociationProxyInstance {
    -_target_is_object: bool
    +expr
    --
    -__eq__(other)
    +operate(op)
  }

  class _lazy_collection {
    -__init__(obj, target)
    -__call__()
    -__getstate__(): Any
    -__setstate__(state)
  }

  class _AssociationCollection {
    +getter
    +creator: _CreatorProtocol
    +parent
    +setter: _SetterProtocol
    +lazy_collection
    +col
    +col
    --
    -__init__(lazy_collection, creator, getter, setter, parent)
    -__len__(): int
    -__bool__(): bool
    -__getstate__(): Any
    -__setstate__(state)
    +clear()
  }

  class _AssociationSingleItem {
    +setter
    +creator
    --
    -_create(value): Any
    -_get(object_): _T
    -_bulk_replace(assoc_proxy, values)
  }

  class _AssociationList {
    +col
    +stop
    +stop
    +stop
    +step
    +start
    +rng
    +sized_value
    +i: start
    +col
    +item
    +count: int
    +other
    +other
    +ls
    --
    -_set(object_, value)
    -__getitem__(index): _T
    -__getitem__(index)
    -__getitem__(index)
    -__setitem__(index, value)
    -__setitem__(index, value)
    -__setitem__(index, value)
    -__delitem__(index)
    -__delitem__(index)
    -__delitem__(index)
    -__contains__(value): bool
    -__iter__()
    +append(value)
    +count(value): int
    +extend(values)
    +insert(index, value)
    +pop(index): _T
    +remove(value)
    +reverse(): NoReturn
    +sort(): NoReturn
    +clear()
    -__eq__(other): bool
    -__ne__(other): bool
    -__lt__(other): bool
    -__le__(other): bool
    -__gt__(other): bool
    -__ge__(other): bool
    -__add__(other)
    -__radd__(other)
    -__mul__(n)
    -__rmul__(n)
    -__iadd__(iterable): Self
    -__imul__(n): Self
    +index(value, start, stop): int
    +index(value): int
    +copy()
    -__repr__(): str
    -__hash__(): NoReturn
  }

  class _AssociationDict {
    +setter
    +creator
    +col
    +member
    +item
    +up
    +existing
    +constants
    +additions
    +removals
    --
    -_create(key, value): Any
    -_get(object_): _VT
    -_set(object_, key, value)
    -__getitem__(key): _VT
    -__setitem__(key, value)
    -__delitem__(key)
    -__contains__(key): bool
    -__iter__()
    +clear()
    -__eq__(other): bool
    -__ne__(other): bool
    -__repr__(): str
    +get(__key)
    +get(__key, default)
    +get(key, default)
    +setdefault(key, default): _VT
    +keys()
    +items()
    +values()
    +pop(__key): _VT
    +pop(__key, default)
    +pop(__key)
    +popitem()
    +update(__m)
    +update(__m)
    +update()
    +update()
    -_bulk_replace(assoc_proxy, values)
    +copy()
    -__hash__(): NoReturn
  }

  class _AssociationSet {
    +col
    +member
    +existing
    +constants
    +additions
    +removals
    +appender
    +remover
    +want
    +have
    --
    -__len__(): int
    -__bool__(): bool
    -__contains__(__o): bool
    -__iter__()
    +add(__element)
    +discard(__element)
    +remove(__element)
    +pop(): _T
    +update()
    -_bulk_replace(assoc_proxy, values)
    -__ior__(other)
    -_set()
    +union()
    -__or__(__s)
    +difference()
    -__sub__(s)
    +difference_update()
    -__isub__(s): Self
    +intersection()
    -__and__(s)
    +intersection_update()
    -__iand__(s): Self
    +symmetric_difference(__s)
    -__xor__(s)
    +symmetric_difference_update(other)
    -__ixor__(other)
    +issubset(__s): bool
    +issuperset(__s): bool
    +clear()
    +copy()
    -__eq__(other): bool
    -__ne__(other): bool
    -__lt__(other): bool
    -__le__(other): bool
    -__gt__(other): bool
    -__ge__(other): bool
    -__repr__(): str
    -__hash__(): NoReturn
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.ext.mypy" {
  class SQLAlchemyAttribute {
    +data
    +typ
    --
    -__init__(name, line, column, typ, info)
    +serialize(): JsonDict
    +expand_typevar_from_subtype(sub_type)
    +{class} deserialize(info, data, api): SQLAlchemyAttribute
  }

  class SQLAlchemyPlugin {
    +sym
    +type_id
    +sym
    --
    +get_dynamic_class_hook(fullname)
    +get_customize_class_mro_hook(fullname)
    +get_class_decorator_hook(fullname)
    +get_metaclass_hook(fullname)
    +get_base_class_hook(fullname)
    +get_attribute_hook(fullname)
    +get_additional_deps(file)
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.ext.declarative" {
  class ConcreteBase {
    +m
    +discriminator_name
    +mappers
    +pjoin
    --
    -{class} _create_polymorphic_union(mappers, discriminator_name)
    -{class} __declare_first__()
  }

  class AbstractConcreteBase {
    +to_map
    +mappers
    +stack
    +klass
    +mn
    +discriminator_name
    +pjoin
    +declared_cols
    +declared_col_keys
    +strict_attrs
    +m_args
    +args
    +stack
    +scls
    +sm
    +sup_sm
    --
    -{class} __declare_first__()
    -{class} _sa_decl_prepare_nocascade()
    +mapper_args()
    -{class} _sa_raise_deferred_config()
  }

  class DeferredReflection {
    +to_map
    +metadata_to_table
    +conn: bind
    +ctx
    +ctx
    +mapper
    +metadata
    +secondary_arg
    +secondary_table
    +resolver
    --
    +{class} prepare(bind)
    -{class} _sa_deferred_table_resolver(metadata)
    -_resolve(): Table
    -{class} _sa_raise_deferred_config()
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.ext.asyncio" {
  class async_scoped_session {
    +session_factory
    +registry
    +sess
    +sess
    +result
    --
    -__init__(session_factory, scopefunc)
    -_proxied(): _AS
    -__call__(): _AS
    +configure()
    -__contains__(instance): bool
    -__iter__()
    +add(instance, _warn)
    +add_all(instances)
    +begin(): AsyncSessionTransaction
    +begin_nested(): AsyncSessionTransaction
    +expire(instance, attribute_names)
    +expire_all()
    +expunge(instance)
    +expunge_all()
    +get_bind(mapper, clause, bind)
    +is_modified(instance, include_collections): bool
    +bind(): Any
    +bind(attr)
    +dirty(): Any
    +deleted(): Any
    +new(): Any
    +identity_map(): Any
    +identity_map(attr)
    +is_active(): Any
    +autoflush(): Any
    +autoflush(attr)
    +no_autoflush(): Any
    +info(): Any
    +{class} object_session(instance)
    +{class} identity_key(class_, ident)
  }

  class AsyncAttrs {
  }

  class _AsyncAttrGetitem {
    -__init__(_instance)
    -__getattr__(name)
  }

  class AsyncSession {
    +dispatch
    +sync_bind: NoneType
    +sync_binds: NoneType
    +sync_bind
    +sync_binds
    +sync_session_class
    +sync_session: Session
    +execution_options
    +execution_options: _EXECUTE_OPTIONS
    +result
    +execution_options
    +execution_options: _EXECUTE_OPTIONS
    +result
    +execution_options
    +execution_options: _STREAM_OPTIONS
    +result
    +result
    +trans
    +trans
    +sync_connection
    +task
    --
    -__init__(bind)
    -{class} _no_async_engine_events(): NoReturn
    +get_transaction()
    +get_nested_transaction()
    +get_bind(mapper, clause, bind)
    +begin(): AsyncSessionTransaction
    +begin_nested(): AsyncSessionTransaction
    -_maker_context_manager()
    -__contains__(instance): bool
    -__iter__()
    +add(instance, _warn)
    +add_all(instances)
    +expire(instance, attribute_names)
    +expire_all()
    +expunge(instance)
    +expunge_all()
    +is_modified(instance, include_collections): bool
    +in_transaction(): bool
    +in_nested_transaction(): bool
    +dirty(): Any
    +deleted(): Any
    +new(): Any
    +identity_map(): IdentityMap
    +identity_map(attr)
    +is_active(): Any
    +autoflush(): bool
    +autoflush(attr)
    +no_autoflush(): Any
    +info(): Any
    +{class} object_session(instance)
    +{class} identity_key(class_, ident)
  }

  class async_sessionmaker {
    +class_
    +session
    +d
    --
    -__init__(bind)
    -__init__(bind)
    -__init__(bind)
    +begin()
    -__call__(): _AS
    +configure()
    -__repr__(): str
  }

  class _AsyncSessionContextManager {
    +async_session: _AS
    +trans: AsyncSessionTransaction
    +task
    --
    -__init__(async_session)
  }

  class AsyncSessionTransaction {
    +session: AsyncSession
    +sync_transaction
    --
    -__init__(session, nested)
    +is_active(): bool
    -_sync_transaction(): SessionTransaction
  }

  class AsyncCommon {
    -_real_result
    -_metadata: ResultMetaData
    --
    +closed(): bool
  }

  class AsyncResult {
    -_real_result
    +getter
    +partition
    +row
    +row
    --
    -__init__(real_result)
    +t()
    +tuples()
    +unique(strategy): Self
    +columns(): Self
    -__aiter__()
    +scalars(index)
    +scalars()
    +scalars(index)
    +scalars(index)
    +mappings(): AsyncMappingResult
  }

  class AsyncScalarResult {
    +getter
    +partition
    +row
    --
    -__init__(real_result, index)
    +unique(strategy): Self
    -__aiter__()
  }

  class AsyncMappingResult {
    +getter
    +partition
    +row
    +row
    --
    -__init__(result)
    +unique(strategy): Self
    +columns(): Self
    -__aiter__(): AsyncMappingResult
  }

  class AsyncTupleResult {
  }

  class AsyncConnectable {
    -{class} _no_async_engine_events(): NoReturn
  }

  class AsyncConnection {
    +sync_connection
    +sync_engine: Engine
    +trans
    +trans
    +conn
    +c2
    +result
    +result
    +ar
    +task
    +result
    +result
    +result
    +task
    --
    -__init__(async_engine, sync_connection)
    -{class} _regenerate_proxy_for_target(target): AsyncConnection
    +connection(): NoReturn
    +info(): _InfoType
    -_proxied(): Connection
    +begin(): AsyncTransaction
    +begin_nested(): AsyncTransaction
    +in_transaction(): bool
    +in_nested_transaction(): bool
    +get_transaction()
    +get_nested_transaction()
    +stream(statement, parameters)
    +stream(statement, parameters)
    +stream_scalars(statement, parameters)
    +stream_scalars(statement, parameters)
    -__await__()
    +closed(): Any
    +invalidated(): Any
    +dialect(): Any
    +dialect(attr)
    +default_isolation_level(): Any
  }

  class AsyncEngine {
    -_connection_cls
    +sync_engine: Engine
    +conn
    --
    -__init__(sync_engine)
    -_proxied(): Engine
    -{class} _regenerate_proxy_for_target(target): AsyncEngine
    +connect(): AsyncConnection
    +execution_options(): AsyncEngine
    +execution_options(): AsyncEngine
    +execution_options(): AsyncEngine
    +clear_compiled_cache()
    +update_execution_options()
    +get_execution_options(): _ExecuteOptions
    +url(): URL
    +url(attr)
    +pool(): Pool
    +pool(attr)
    +dialect(): Dialect
    +dialect(attr)
    +engine(): Any
    +name(): Any
    +driver(): Any
    +echo(): Any
    +echo(attr)
  }

  class AsyncTransaction {
    +sync_transaction
    +connection: AsyncConnection
    +nested: bool
    +sync_connection
    +sync_transaction: target
    +nested
    +async_connection
    +obj
    --
    -__init__(connection, nested)
    -{class} _regenerate_proxy_for_target(target): AsyncTransaction
    -_proxied(): Transaction
    +is_valid(): bool
    +is_active(): bool
  }

  class AsyncMethodRequired {
  }

  class AsyncContextNotStarted {
  }

  class AsyncContextAlreadyStarted {
  }

  class ReversibleProxy {
    -_proxy_objects
    +target_ref
    +proxy_ref
    +proxy_ref
    +proxy
    --
    -_assign_proxied(target): _PT
    -_assign_proxied(target)
    -_assign_proxied(target)
    -{class} _target_gced(ref, proxy_ref)
    -{class} _regenerate_proxy_for_target(target): Self
    -{class} _retrieve_proxy_for_target(target, regenerate): Self
    -{class} _retrieve_proxy_for_target(target, regenerate)
    -{class} _retrieve_proxy_for_target(target, regenerate)
  }

  class StartableContext {
    -__await__()
    -_raise_for_not_started(): NoReturn
  }

  class GeneratorStartableContext {
    +gen
    +start_value
    +value
    --
    -__init__(func, args, kwds)
  }

  class ProxyComparable {
    -_proxied(): _PT
    -__hash__(): int
    -__eq__(other): bool
    -__ne__(other): bool
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.testing" {
  class User {
  }

  class Order {
  }

  class Dingaling {
  }

  class EmailUser {
  }

  class Address {
  }

  class Child1 {
  }

  class Child2 {
  }

  class Parent {
  }

  class Screen {
    -__init__(obj, parent)
  }

  class Mixin {
    +email_address
  }

  class AddressWMixin {
  }

  class Foo {
    -__init__(moredata, stuff)
    -__eq__(other)
  }

  class Bar {
    -__init__(x, y)
    -__eq__(other)
    -__str__()
  }

  class OldSchool {
    -__init__(x, y)
    -__eq__(other)
  }

  class OldSchoolWithoutCompare {
    -__init__(x, y)
  }

  class BarWithoutCompare {
    -__init__(x, y)
    -__str__()
  }

  class NotComparable {
    -__init__(data)
    -__hash__()
    -__eq__(other)
    -__ne__(other)
  }

  class BrokenComparable {
    -__init__(data)
    -__hash__()
    -__eq__(other)
    -__ne__(other)
  }

  class compound {
    +rule
    +copy
    +copy
    +decorated
    +all_fails
    +msg
    +return_value
    --
    -__init__()
    -__add__(other)
    +as_skips()
    +add()
    +not_()
    +enabled()
    +enabled_for_config(config)
    +matching_config_reasons(config)
    -_extend(other)
    -__call__(fn)
    +decorate()
    +fail_if()
    -_do(cfg, fn)
    -_expect_failure(config, ex, name)
    -_expect_success(config, name)
  }

  class Predicate {
    +tokens
    +db
    +op
    +spec
    +bool_
    +bool_
    --
    +{class} as_predicate(predicate, description)
    -_format_description(config, negate)
    -_as_string(config, negate)
  }

  class BooleanPredicate {
    -__init__(value, description)
    -__call__(config)
    -_as_string(config, negate)
  }

  class SpecPredicate {
    +engine
    +version
    +oper
    --
    -__init__(db, op, spec, description)
    -__call__(config)
    -_as_string(config, negate)
  }

  class LambdaPredicate {
    +spec
    --
    -__init__(lambda_, description, args, kw)
    -__call__(config)
    -_as_string(config, negate)
  }

  class NotPredicate {
    -__init__(predicate, description)
    -__call__(config)
    -_as_string(config, negate)
  }

  class OrPredicate {
    +conjunction: str
    +conjunction: str
    --
    -__init__(predicates, description)
    -__call__(config)
    -_eval_str(config, negate)
    -_negation_str(config)
    -_as_string(config, negate)
  }

  class _NullFixtureFunctions {
    -_null_decorator()
    +go()
    +skip_test_exception()
    +add_to_marker()
    +mark_base_test_class()
    +combinations()
    +param_ident()
    +fixture()
    +get_current_test_name()
    +async_test(fn)
  }

  class Variation {
    +case_names
    +typ
    --
    -__init__(case, argname, case_names)
    -__getattr__(key): bool
    +name()
    -__bool__()
    -__nonzero__()
    -__str__()
    -__repr__()
    +fail(): NoReturn
    +{class} idfn(variation)
    +{class} generate_cases(argname, cases)
  }

  class _AddToMarker {
    -__getattr__(attr): Any
  }

  class Config {
    +suffix
    +svi
    +cfg
    +any_async
    +db_url
    +db_opts
    +test_schema
    +test_schema_2
    +db
    --
    -__init__(db, db_opts, options, file_config)
    -_set_name(db)
    +{class} register(db, db_opts, options, file_config)
    +{class} set_as_current(config, namespace)
    +{class} push_engine(db, namespace)
    +{class} push(config, namespace)
    +{class} pop(namespace)
    +{class} reset(namespace)
    +{class} all_configs()
    +{class} all_dbs()
    +skip_test(msg)
  }

  class ConnectionKiller {
    +eng
    +ln
    --
    -__init__()
    +add_pool(pool)
    -_add_conn(dbapi_con, con_record, con_proxy)
    -_remove_conn(dbapi_conn)
    +add_engine(engine, scope)
    -_safe(fn)
    +rollback_all()
    +checkin_all()
    +close_all()
    +prepare_for_drop_tables(connection)
    -_drop_testing_engines(scope)
    +after_test()
    +after_test_outside_fixtures(test)
    +stop_test_class_inside_fixtures()
    +stop_test_class_outside_fixtures()
    +final_cleanup()
    +assert_all_closed()
  }

  class ReconnectFixture {
    +conn
    +curs
    --
    -__init__(dbapi)
    -__getattr__(key)
    +connect()
    -_safe(fn)
    +shutdown(stop)
    +restart()
  }

  class DBAPIProxyCursor {
    -__init__(engine, conn)
    +execute(stmt, parameters)
    +executemany(stmt, params)
    -__iter__()
    -__getattr__(key)
  }

  class DBAPIProxyConnection {
    -__init__(engine, conn, cursor_cls)
    +cursor()
    +close()
    -__getattr__(key)
  }

  class RandomSet {
    +l
    +index
    +item
    --
    -__iter__()
    +pop()
    +union(other)
    +difference(other)
    +intersection(other)
    +copy()
  }

  class adict {
    +get_all: __call__
    --
    -__getattribute__(key)
    -__call__()
  }

  class _ErrorContainer {
    +error: NoneType
  }

  class AssertsCompiledSQL {
    +dialect
    +dialect: NoneType
    +dialect
    +dialect
    +dialect
    +dialect
    +dialect
    +dialect
    +kw
    +compile_kwargs
    +stmt
    +clause: stmt
    --
    +assert_compile(clause, result, params, checkparams, for_executemany, check_literal_execute, check_post_param, dialect, checkpositional, check_prefetch, use_default_dialect, allow_dialect_select, supports_default_values, supports_default_metavalue, literal_binds, render_postcompile, schema_translate_map, render_schema_translate, default_schema_name, from_linting, check_param_order, use_literal_execute_for_simple_int)
  }

  class DontAccess {
    -__getattribute__(key)
  }

  class CheckCompilerAccess {
    -__init__(test_statement)
    -_variant_mapping()
    -_default_dialect()
    +compile(dialect)
    -_compiler(dialect)
    -_compiler_dispatch(compiler)
  }

  class ComparesTables {
    +msg: str
    --
    +assert_tables_equal(table, reflected_table, strict_types, strict_constraints)
    +assert_types_base(c1, c2)
  }

  class AssertsExecutionResults {
    +result
    --
    +assert_result(result, class_)
    +assert_list(result, class_, list_)
    +assert_row(class_, rowobj, desc)
    +assert_unordered_result(result, cls)
  }

  class immutabledict {
    -__hash__()
  }

  class ComparesIndexes {
    +idx_dict
    +idx
    +cols
    +exprs
    --
    +compare_table_index_with_expected(table, expected, dialect_name)
  }

  class AssertRule {
    +is_consumed: bool
    +errormessage: NoneType
    +consume_statement: bool
    --
    +process_statement(execute_observed)
    +no_more_statements()
  }

  class SQLMatchRule {
  }

  class CursorSQL {
    +stmt
    --
    -__init__(statement, params, consume_statement)
    +process_statement(execute_observed)
  }

  class CompiledSQL {
    +stmt
    +dialect
    +context
    +compare_dialect
    +cache_key: NoneType
    +extracted_parameters: NoneType
    +map_
    +map_: NoneType
    +compiled
    +compiled
    +parameters
    +context
    +params
    +equivalent
    +all_params
    +all_received
    +param
    +equivalent: bool
    +equivalent: bool
    +params
    +params
    +params
    --
    -__init__(statement, params, dialect, enable_returning)
    -_compare_sql(execute_observed, received_statement)
    -_compile_dialect(execute_observed)
    -_received_statement(execute_observed)
    +process_statement(execute_observed)
    -_all_params(context)
    -_failure_message(execute_observed, expected_params)
  }

  class RegexSQL {
    -__init__(regex, params, dialect, enable_returning)
    -_failure_message(execute_observed, expected_params)
    -_compare_sql(execute_observed, received_statement)
  }

  class DialectSQL {
    +stmt
    +paramstyle
    +stmt
    +stmt
    +stmt
    +repl: NoneType
    +repl: str
    +repl: str
    +counter
    +num_identifier
    +stmt
    +stmt
    +stmt
    --
    -_compile_dialect(execute_observed)
    -_compare_no_space(real_stmt, received_stmt)
    -_received_statement(execute_observed)
    -_dialect_adjusted_statement(dialect)
    +repl()
    -_compare_sql(execute_observed, received_statement)
    -_failure_message(execute_observed, expected_params)
  }

  class CountStatements {
    -__init__(count)
    +process_statement(execute_observed)
    +no_more_statements()
  }

  class AllOf {
    -__init__()
    +process_statement(execute_observed)
  }

  class EachOf {
    +rule
    --
    -__init__()
    +process_statement(execute_observed)
    +no_more_statements()
  }

  class Conditional {
    -__init__(condition, rules, else_rules)
  }

  class Or {
    +process_statement(execute_observed)
  }

  class SQLExecuteObserved {
    -__init__(context, clauseelement, multiparams, params)
    -__repr__()
  }

  class SQLCursorExecuteObserved {
  }

  class SQLAsserter {
    +rule
    +observed
    +statement
    --
    -__init__()
    -_close()
    +assert_()
  }

  class register {
    +fn
    +url
    +url: cfg
    +url
    +backend
    --
    -__init__(decorator)
    +{class} init(fn)
    +{class} init_decorator(decorator)
    +for_db()
    +decorate()
    -__call__(cfg)
  }

  class Requirements {
  }

  class SuiteRequirements {
    +supported
    +e
    --
    +create_table()
    +drop_table()
    +table_ddl_if_exists()
    +index_ddl_if_exists()
    +uuid_data_type()
    +foreign_keys()
    +foreign_keys_reflect_as_index()
    +unique_index_reflect_as_unique_constraints()
    +unique_constraints_reflect_as_index()
    +table_value_constructor()
    +standard_cursor_sql()
    +on_update_cascade()
    +non_updating_cascade()
    +deferrable_fks()
    +on_update_or_deferrable_fks()
    +queue_pool()
    +go()
    +self_referential_foreign_keys()
    +foreign_key_ddl()
    +named_constraints()
    +implicitly_named_constraints()
    +unusual_column_name_characters()
    +subqueries()
    +offset()
    +bound_limit_offset()
    +sql_expression_limit_offset()
    +parens_in_union_contained_select_w_limit_offset()
    +parens_in_union_contained_select_wo_limit_offset()
    +boolean_col_expressions()
    +nullable_booleans()
    +nullsordering()
    +standalone_binds()
    +standalone_null_binds_whereclause()
    +intersect()
    +except_()
    +window_functions()
    +ctes()
    +ctes_with_update_delete()
    +ctes_on_dml()
    +autoincrement_insert()
    +fetch_rows_post_commit()
    +group_by_complex_expression()
    +sane_rowcount()
    +sane_multi_rowcount()
    +sane_rowcount_w_returning()
    +empty_inserts()
    +empty_inserts_executemany()
    +insert_from_select()
    +delete_returning()
    +insert_returning()
    +update_returning()
    +insert_executemany_returning()
    +insertmanyvalues()
    +tuple_in()
    +tuple_in_w_empty()
    +duplicate_names_in_cursor_description()
    +denormalized_names()
    +multivalues_inserts()
    +implements_get_lastrowid()
    +arraysize()
    +emulated_lastrowid()
    +emulated_lastrowid_even_with_sequences()
    +dbapi_lastrowid()
    +views()
    +schemas()
    +cross_schema_fk_reflection()
    +foreign_key_constraint_name_reflection()
    +implicit_default_schema()
    +default_schema_name_switch()
    +server_side_cursors()
    +sequences()
    +no_sequences()
    +sequences_optional()
    +supports_lastrowid()
    +no_lastrowid_support()
    +reflects_pk_names()
    +table_reflection()
    +reflect_tables_no_columns()
    +comment_reflection()
    +comment_reflection_full_unicode()
    +constraint_comment_reflection()
    +view_column_reflection()
    +view_reflection()
    +schema_reflection()
    +schema_create_delete()
    +primary_key_constraint_reflection()
    +foreign_key_constraint_reflection()
    +foreign_key_constraint_option_reflection_ondelete()
    +fk_constraint_option_reflection_ondelete_restrict()
    +fk_constraint_option_reflection_ondelete_noaction()
    +foreign_key_constraint_option_reflection_onupdate()
    +fk_constraint_option_reflection_onupdate_restrict()
    +temp_table_reflection()
    +temp_table_reflect_indexes()
    +temp_table_names()
    +has_temp_table()
    +temporary_tables()
    +temporary_views()
    +index_reflection()
    +index_reflects_included_columns()
    +indexes_with_ascdesc()
    +reflect_indexes_with_ascdesc()
    +reflect_indexes_with_ascdesc_as_expression()
    +indexes_with_expressions()
    +reflect_indexes_with_expressions()
    +unique_constraint_reflection()
    +check_constraint_reflection()
    +duplicate_key_raises_integrity_error()
    +unbounded_varchar()
    +unicode_data_no_special_types()
    +unicode_data()
    +unicode_ddl()
    +symbol_names_w_double_quote()
    +datetime_interval()
    +datetime_literals()
    +datetime()
    +datetime_timezone()
    +time_timezone()
    +date_implicit_bound()
    +time_implicit_bound()
    +datetime_implicit_bound()
    +datetime_microseconds()
    +timestamp_microseconds()
    +timestamp_microseconds_implicit_bound()
    +datetime_historic()
    +date()
    +date_coerces_from_datetime()
    +date_historic()
    +time()
    +time_microseconds()
    +binary_comparisons()
    +binary_literals()
    +autocommit()
    +isolation_level()
    +get_isolation_levels(config)
    +get_isolation_level_values()
    +go()
    +dialect_level_isolation_level_param()
    +go()
    +json_type()
    +json_array_indexes()
    +json_index_supplementary_unicode_element()
    +legacy_unconditional_json_extract()
    +precision_numerics_general()
    +precision_numerics_enotation_small()
    +precision_numerics_enotation_large()
    +precision_numerics_many_significant_digits()
    +cast_precision_numerics_many_significant_digits()
    +implicit_decimal_binds()
    +numeric_received_as_decimal_untyped()
    +nested_aggregates()
    +recursive_fk_cascade()
    +precision_numerics_retains_significant_digits()
    +infinity_floats()
    +float_or_double_precision_behaves_generically()
    +precision_generic_float_type()
    +literal_float_coercion()
    +floats_to_four_decimals()
    +fetch_null_from_numeric()
    +float_is_numeric()
    +text_type()
    +empty_strings_varchar()
    +empty_strings_text()
    +expressions_against_unbounded_text()
    +selectone()
    +savepoints()
    +two_phase_transactions()
    +update_from()
    +delete_from()
    +update_where_target_in_subquery()
    +mod_operator_as_percent_sign()
    +percent_schema_names()
    +order_by_col_from_union()
    +order_by_label_with_expression()
    +order_by_collation()
    +check()
    +get_order_by_collation(config)
    +unicode_connections()
    +graceful_disconnects()
    +independent_connections()
    +independent_readonly_connections()
    +skip_mysql_on_windows()
    +ad_hoc_engines()
    +no_windows()
    -_running_on_windows()
    +timing_intensive()
    +memory_intensive()
    +threading_with_mock()
    +sqlalchemy2_stubs()
    +check()
    +no_sqlalchemy2_stubs()
    +check()
    +python38()
    +python39()
    +python310()
    +python311()
    +cpython()
    +is64bit()
    +patch_library()
    +check_lib()
    +predictable_gc()
    +no_coverage()
    -_has_mysql_on_windows(config)
    -_has_mysql_fully_case_sensitive(config)
    +sqlite()
    +cextensions()
    -_has_sqlite()
    +async_dialect()
    +asyncio()
    +greenlet()
    +go()
    +computed_columns()
    +computed_columns_stored()
    +computed_columns_virtual()
    +computed_columns_default_persisted()
    +computed_columns_reflect_persisted()
    +supports_distinct_on()
    +supports_is_distinct_from()
    +identity_columns()
    +identity_columns_standard()
    +regexp_match()
    +regexp_replace()
    +fetch_first()
    +fetch_percent()
    +fetch_ties()
    +fetch_no_order_by()
    +fetch_offset_with_options()
    +fetch_expression()
    +autoincrement_without_sequence()
    +generic_classes()
    +json_deserializer_binary()
    +reflect_table_options()
    +materialized_views()
    +materialized_views_reflect_pk()
  }

  class BasicEntity {
    -__init__()
    -__repr__()
  }

  class ComparableMixin {
    +self_key
    +self_key: NoneType
    +a: self
    +b: other
    +a: other
    +b: self
    +a: self
    +b: other
    +value
    +battr
    --
    -__ne__(other)
    -__eq__(other)
  }

  class ComparableEntity {
    -__hash__()
  }

  class ProfileStatsFile {
    +dbapi_key
    +py_version
    +platform_tokens
    +test_key: _current_test
    +test_key: _current_test
    +per_fn
    +per_platform
    +counts
    +counts
    +current_count: int
    +current_count
    +has_count
    +result: NoneType
    +result
    +test_key: _current_test
    +per_fn
    +per_platform
    +test_key: _current_test
    +per_fn
    +per_platform
    +counts
    +current_count
    +profile_f
    +line
    +per_fn
    +per_platform
    +c
    +profile_f
    +per_fn
    +per_platform
    +c
    --
    -__init__(filename, sort, dump)
    +platform_key()
    +has_stats()
    +result(callcount)
    +reset_count()
    +replace(callcount)
    -_header()
    -_read()
    -_write()
  }

  class eq_type_affinity {
    -__init__(target)
    -__eq__(other)
    -__ne__(other)
  }

  class eq_compile_type {
    -__init__(target)
    -__eq__(other)
    -__ne__(other)
  }

  class eq_clause_element {
    -__init__(target)
    -__eq__(other)
    -__ne__(other)
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.testing.plugin" {
  class FixtureFunctions {
    +skip_test_exception()
    +combinations()
    +param_ident()
    +fixture()
    +get_current_test_name()
    +mark_base_test_class(): Any
    +add_to_marker()
  }

  class CallableAction {
    -__init__(option_strings, dest, default, required, help)
    -__call__(parser, namespace, values, option_string)
  }

  class XDistHooks {
    +pytest_configure_node(node)
    +pytest_testnodedown(node, error)
  }

  class PytestFixtureFunctions {
    +arg_sets
    +argnames
    +result
    +gathered_exclusions
    +id_
    +tobuild_pytest_params
    +has_exclusions: bool
    +fns
    +arg
    +parameters
    +has_exclusions: bool
    +arg
    +has_exclusions: bool
    +pytest_params
    +param
    +existing_exl
    +current_exclusion_name
    +exlu
    +fn
    +fn
    +ident
    +fn
    +arg
    +fn: NoneType
    +fixture
    +fn
    +fn
    --
    +skip_test_exception()
    +add_to_marker()
    +mark_base_test_class()
    +combinations()
    -_filter_exclusions()
    +decorate()
    +check_exclusions()
    +param_ident()
    +fixture()
    +wrap()
    +get_current_test_name()
    +async_test(fn)
    +decorate()
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.testing.fixtures" {
  class ORMTest {
    +fixture_session()
  }

  class MappedTest {
    +run_setup_classes: str
    +run_setup_mappers: str
    +classes: Any
    +cls
    +decl
    +cls_registry
    --
    -_setup_tables_test_class()
    -_setup_tables_test_instance()
    -{class} _teardown_once_class()
    -{class} _setup_once_classes()
    -{class} _setup_once_mappers()
    -_setup_each_mappers()
    -_setup_each_classes()
    -{class} _generate_registry()
    -{class} _with_register_classes(fn)
  }

  class _Base {
    -__init_subclass__()
  }

  class Basic {
  }

  class Comparable {
  }

  class DeclarativeMappedTest {
    +run_setup_classes: str
    +run_setup_mappers: str
    +cls_registry
    --
    -{class} _setup_once_tables()
    -{class} _with_register_classes(fn)
  }

  class _DeclBase {
    +metadata
    +type_annotation_map
    --
    -__init_subclass__()
  }

  class RemoveORMEventsGlobally {
    -_remove_listeners()
  }

  class MypyTest {
    +mypy_path: str
    +use_cachedir: cachedir
    +args
    +filename
    +test_program
    +expected_messages
    +path: dirname
    +caller_path
    +path
    +files
    +expected_messages
    +expected_re
    +py_ver_re
    +current_assert_messages
    +m
    +m
    +is_mypy
    +is_re
    +is_type
    +expected_msg
    +expected_msg
    +expected_msg
    +expected_msg
    +expected_msg
    +is_mypy: bool
    +is_re: bool
    +expected_msg
    +expected_msg
    +expected_msg
    +not_located
    +filename
    +output
    +raw_lines
    +e
    +ol
    +msg
    +prefix
    +missing
    +extra
    --
    +per_func_cachedir()
    +cachedir()
    -_cachedir()
    +mypy_runner(cachedir)
    +run(use_plugin, use_cachedir)
    +mypy_typecheck_file(mypy_runner)
    +run(use_plugin)
    +{static} file_combinations()
    -_collect_messages(path)
    -_check_output(path, expected_messages, stdout, stderr, exitcode)
  }

  class TablesTest {
    +run_setup_bind: str
    +run_define_tables: str
    +run_create_tables: str
    +run_inserts: str
    +run_deletes: str
    +run_dispose_bind: NoneType
    +bind: NoneType
    +tables: NoneType
    +other: NoneType
    +sequences: NoneType
    +cls
    +savepoints
    +savepoints
    +table
    --
    -_setup_tables_test_class()
    -_setup_tables_test_instance()
    +tables_test_metadata()
    -{class} _init_class()
    -{class} _setup_once_inserts()
    -{class} _setup_once_tables()
    -_setup_each_tables()
    -_setup_each_inserts()
    -_teardown_each_tables()
    -{class} _teardown_once_metadata_bind()
    +{class} setup_bind()
    +{class} dispose_bind(bind)
    +{class} define_tables(metadata)
    +{class} fixtures()
    +{class} insert_data(connection)
    +sql_count_(count, fn)
    +sql_eq_(callable_, statements)
    -{class} _load_fixtures()
  }

  class NoCache {
    -_disable_cache()
  }

  class RemovesEvents {
    -_event_fns()
    +event_listen(target, name, fn)
    -_remove_events()
  }

  class ComputedReflectionFixtureTest {
    +run_inserts: NoneType
    +run_deletes: NoneType
    +regexp
    +t
    +t2
    --
    +normalize(text)
    +{class} define_tables(metadata)
  }

  class CacheKeyFixture {
    +a_key
    +b_key
    +case_a
    +case_b
    +a_key
    +b_key
    +assert_a_params
    +assert_b_params
    +case_a
    +case_b
    --
    -_compare_equal(a, b, compare_values)
    -_run_cache_key_fixture(fixture, compare_values)
    -_run_cache_key_equal_fixture(fixture, compare_values)
  }

  class RandomCursor {
    +rows
    +rows
    --
    -__init__(cursor)
    +fetchall()
  }

  class TestBase {
    +eng
    +eng
    +conn
    +trans
    +to_close
    +to_consume
    +reg
    --
    +assert_(val, msg)
    +nocache()
    +connection_no_trans()
    +connection()
    +close_result_when_finished()
    +go(consume)
    +registry(metadata)
    +decl_base(metadata)
  }

  class Base {
    +metadata: _md
    +type_annotation_map
  }

  class FutureEngineMixin {
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.testing.suite" {
  class SequenceTest {
    +run_create_tables: str
    +r
    +r
    +r
    +row
    +seq_no_returning
    +connection
    +seq
    +connection
    +r
    --
    +{class} define_tables(metadata)
    +test_insert_roundtrip(connection)
    +test_insert_lastrowid(connection)
    +test_nextval_direct(connection)
    +test_optional_seq(connection)
    -_assert_round_trip(table, conn)
    +test_insert_roundtrip_no_implicit_returning(connection)
    +test_insert_roundtrip_translate(connection, implicit_returning)
    +test_nextval_direct_schema_translate(connection)
  }

  class SequenceCompilerTest {
    +table
    +stmt
    +seq_nextval
    --
    +test_literal_binds_inline_compile(connection)
  }

  class HasSequenceTest {
    +run_deletes: NoneType
    +insp
    +ss
    +exp
    +res
    --
    +{class} define_tables(metadata)
    +test_has_sequence(connection)
    +test_has_sequence_cache(connection, metadata)
    +test_has_sequence_other_object(connection)
    +test_has_sequence_schema(connection)
    +test_has_sequence_neg(connection)
    +test_has_sequence_schemas_neg(connection)
    +test_has_sequence_default_not_in_remote(connection)
    +test_has_sequence_remote_not_in_default(connection)
    +test_get_sequence_names(connection)
    +test_get_sequence_names_no_sequence_schema(connection)
    +test_get_sequence_names_sequences_schema(connection)
  }

  class HasSequenceTestEmpty {
    +test_get_sequence_names_no_sequence(connection)
  }

  class RowFetchTest {
    +row
    +row
    +row
    +row
    +result
    +row
    +datetable
    +s
    +s2
    +row
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_via_attr(connection)
    +test_via_string(connection)
    +test_via_int(connection)
    +test_via_col_object(connection)
    +test_row_with_dupe_names(connection)
    +test_row_w_scalar_select(connection)
  }

  class PercentSchemaNamesTest {
    +percent_table
    +percent_table
    +percent_table
    +result
    +percent_table
    +lightweight_percent_table
    +row
    --
    +{class} define_tables(metadata)
    +test_single_roundtrip(connection)
    +test_executemany_roundtrip(connection)
    +test_executemany_returning_roundtrip(connection)
    -_assert_table(conn)
  }

  class ServerSideCursorsTest {
    +sscursor
    +sscursor
    +engine
    +result
    +result
    +engine
    +result
    +engine
    +s
    +result
    +engine
    +s1
    +result
    +s2
    +result
    +md
    +engine
    +test_table
    +md
    +engine
    +test_table
    +result
    --
    -_is_server_side(cursor)
    -_fixture(server_side_cursors)
    +test_ss_cursor_status(engine_ss_arg, statement, cursor_ss_status)
    +test_conn_option()
    +test_stmt_enabled_conn_option_disabled()
    +test_aliases_and_ss()
    +test_roundtrip_fetchall(metadata)
    +test_roundtrip_fetchmany(metadata)
  }

  class LastrowidTest {
    +run_deletes: str
    +row
    +r
    +pk
    +r
    +lastrowid
    +pk
    --
    +{class} define_tables(metadata)
    -_assert_round_trip(table, conn)
    +test_autoincrement_on_insert(connection)
    +test_last_inserted_id(connection)
    +test_native_lastrowid_autoinc(connection)
  }

  class InsertBehaviorTest {
    +run_deletes: str
    +table
    +stmt
    +stmt
    +data
    +data
    +r
    +r
    +r
    +r
    +r
    +r
    +r
    +src_table
    +dest_table
    +result
    +result
    +src_table
    +dest_table
    +result
    +result
    +table
    +table
    --
    +{class} define_tables(metadata)
    +test_no_results_for_non_returning_insert(connection, style, executemany)
    +test_autoclose_on_insert(connection)
    +test_autoclose_on_insert_implicit_returning(connection)
    +test_empty_insert(connection)
    +test_empty_insert_multiple(connection)
    +test_insert_from_select_autoinc(connection)
    +test_insert_from_select_autoinc_no_rows(connection)
    +test_insert_from_select(connection)
    +test_insert_from_select_with_defaults(connection)
  }

  class ReturningTest {
    +run_create_tables: str
    +row
    +table
    +r
    +pk
    +fetched_pk
    +table
    +r
    +pk
    +fetched_pk
    +r
    +pk
    +r
    +rall
    +pks
    +t
    +result
    +i_range
    +i_range
    +t
    +result
    +i_range
    +i_range
    --
    -_assert_round_trip(table, conn)
    +{class} define_tables(metadata)
    +test_explicit_returning_pk_autocommit(connection)
    +test_explicit_returning_pk_no_autocommit(connection)
    +test_autoincrement_on_insert_implicit_returning(connection)
    +test_last_inserted_id_implicit_returning(connection)
    +test_insertmanyvalues_returning(connection)
    +test_insert_w_floats(connection, metadata, sort_by_parameter_order, type_, value, do_rounding, multiple_rows)
    +test_imv_returning_datatypes(connection, metadata, sort_by_parameter_order, type_, value, multiple_rows)
  }

  class CollateTest {
    +collation
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    -_assert_result(select, result)
    +test_collate_order_by()
  }

  class OrderByLabelTest {
    +table
    +lx
    +table
    +lx
    +table
    +lx
    +ly
    +table
    +lx
    +table
    +lx
    +table
    +expr
    +stmt
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    -_assert_result(select, result)
    +test_plain()
    +test_composed_int()
    +test_composed_multiple()
    +test_plain_desc()
    +test_composed_int_desc()
    +test_group_by_composed()
  }

  class ValuesExpressionTest {
    +value_expr
    --
    +test_tuples(connection)
  }

  class FetchLimitOffsetTest {
    +query_res
    +table
    +stmt
    +table
    +stmt
    +u
    +table
    +table
    +table
    +connection
    +assert_data
    +expected
    +table
    +table
    +table
    +table
    +stmt
    +sql
    +sql
    +table
    +stmt
    +sql
    +sql
    +table
    +table
    +table
    +table
    +table
    +table
    +table
    +table
    +table
    +table
    +table
    +table
    +fa
    +table
    +table
    +table
    +table
    +table
    +fa
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    -_assert_result(connection, select, result, params, set_)
    -_assert_result_str(select, result, params)
    +test_simple_limit(connection)
    +test_limit_render_multiple_times(connection)
    +test_simple_fetch(connection)
    +test_simple_offset(connection)
    +test_simple_limit_offset(connection, cases)
    +test_simple_fetch_offset(connection)
    +test_fetch_offset_no_order(connection)
    +test_simple_offset_zero(connection)
    +test_limit_offset_nobinds()
    +test_fetch_offset_nobinds()
    +test_bound_limit(connection)
    +test_bound_offset(connection)
    +test_bound_limit_offset(connection)
    +test_bound_fetch_offset(connection)
    +test_expr_offset(connection)
    +test_expr_limit(connection)
    +test_expr_limit_offset(connection)
    +test_expr_fetch_offset(connection)
    +test_simple_limit_expr_offset(connection)
    +test_expr_limit_simple_offset(connection)
    +test_simple_fetch_ties(connection)
    +test_fetch_offset_ties(connection)
    +test_fetch_offset_ties_exact_number(connection)
    +test_simple_fetch_percent(connection)
    +test_fetch_offset_percent(connection)
    +test_simple_fetch_percent_ties(connection)
    +test_fetch_offset_percent_ties(connection)
  }

  class SameNamedSchemaTableTest {
    +subq
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_simple_join_both_tables(connection)
    +test_simple_join_whereclause_only(connection)
    +test_subquery(connection)
  }

  class JoinTest {
    +stmt
    +stmt
    +stmt
    +stmt
    +stmt
    --
    -_assert_result(select, result, params)
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_inner_join_fk()
    +test_inner_join_true()
    +test_inner_join_false()
    +test_outer_join_false()
    +test_outer_join_fk()
  }

  class CompoundSelectTest {
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    -_assert_result(select, result, params)
    +test_plain_union()
    +test_select_from_plain_union()
    +test_limit_offset_selectable_in_unions()
    +test_order_by_selectable_in_unions()
    +test_distinct_selectable_in_unions()
    +test_limit_offset_in_unions_from_alias()
    +test_limit_offset_aliased_selectable_in_unions()
  }

  class PostCompileParamsTest {
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_compile()
    +test_compile_literal_binds()
    +test_execute()
    +test_execute_expanding_plus_literal_execute()
    +test_execute_tuple_expanding_plus_literal_execute()
    +test_execute_tuple_expanding_plus_literal_heterogeneous_execute()
  }

  class ExpandingBoundInTest {
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +stmt
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +table
    +stmt
    +stmt
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    -_assert_result(select, result, params)
    +test_multiple_empty_sets_bindparam()
    +test_multiple_empty_sets_direct()
    +test_empty_heterogeneous_tuples_bindparam()
    +test_empty_heterogeneous_tuples_direct()
    +go(expected)
    +test_empty_homogeneous_tuples_bindparam()
    +test_empty_homogeneous_tuples_direct()
    +go(expected)
    +test_bound_in_scalar_bindparam()
    +test_bound_in_scalar_direct()
    +test_nonempty_in_plus_empty_notin()
    +test_empty_in_plus_notempty_notin()
    +test_typed_str_in()
    +test_untyped_str_in()
    +test_bound_in_two_tuple_bindparam()
    +test_bound_in_two_tuple_direct()
    +test_bound_in_heterogeneous_two_tuple_bindparam()
    +test_bound_in_heterogeneous_two_tuple_direct()
    +test_bound_in_heterogeneous_two_tuple_text_bindparam()
    +test_bound_in_heterogeneous_two_tuple_typed_bindparam_non_tuple()
  }

  class LikeATuple {
    -__init__()
    -__iter__()
    -__getitem__(idx)
    -__len__()
  }

  class LikeFunctionsTest {
    +run_inserts: str
    +run_deletes: NoneType
    +some_table
    +rows
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    +col
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    -_test(expr, expected)
    +test_startswith_unescaped()
    +test_startswith_autoescape()
    +test_startswith_sqlexpr()
    +test_startswith_escape()
    +test_startswith_autoescape_escape()
    +test_endswith_unescaped()
    +test_endswith_sqlexpr()
    +test_endswith_autoescape()
    +test_endswith_escape()
    +test_endswith_autoescape_escape()
    +test_contains_unescaped()
    +test_contains_autoescape()
    +test_contains_escape()
    +test_contains_autoescape_escape()
    +test_not_regexp_match()
    +test_regexp_replace()
    +test_regexp_match(text, expected)
  }

  class ComputedColumnTest {
    +res
    +res
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_select_all()
    +test_select_columns()
  }

  class IdentityColumnTest {
    +run_inserts: str
    +run_deletes: str
    +res
    +res
    +res
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_select_all(connection)
    +test_select_columns(connection)
    +test_insert_always_error(connection)
    +fn()
  }

  class IdentityAutoincrementTest {
    +res
    +res
    --
    +{class} define_tables(metadata)
    +test_autoincrement_with_identity(connection)
  }

  class ExistsTest {
    +stuff
    +stuff
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_select_exists(connection)
    +test_select_exists_false(connection)
  }

  class DistinctOnTest {
    +stm
    --
    +test_distinct_on()
  }

  class IsOrIsNotDistinctFromTest {
    +tbl
    +result
    +expected_row_count_for_is_not
    +result
    --
    +{class} define_tables(metadata)
    +test_is_or_is_not_distinct_from(col_a_value, col_b_value, expected_row_count_for_is, connection)
  }

  class DeprecatedCompoundSelectTest {
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    +table
    +s1
    +s2
    +u1
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    -_assert_result(conn, select, result, params)
    +test_plain_union(connection)
    -_dont_test_select_from_plain_union(connection)
    +test_limit_offset_selectable_in_unions(connection)
    +test_order_by_selectable_in_unions(connection)
    +test_distinct_selectable_in_unions(connection)
    +test_limit_offset_aliased_selectable_in_unions(connection)
  }

  class TableDDLTest {
    +table
    +idx
    +result
    +table
    +table
    +table
    +table
    +table
    +table
    +table
    +table
    --
    -_simple_fixture(schema)
    -_underscore_fixture()
    -_table_index_fixture(schema)
    -_simple_roundtrip(table)
    +test_create_table()
    +test_create_table_schema()
    +test_drop_table()
    +test_underscore_names()
    +test_add_table_comment(connection)
    +test_drop_table_comment(connection)
    +test_create_table_if_not_exists(connection)
    +test_create_index_if_not_exists(connection)
    +test_drop_table_if_exists(connection)
    +test_drop_index_if_exists(connection)
  }

  class FutureTableDDLTest {
  }

  class LongNameBlowoutTest {
    +convention
    +cons
    +actual_name
    +insp
    +fks
    +reflected_name
    +convention
    +a
    +cons
    +actual_name
    +insp
    +pk
    +reflected_name
    +convention
    +a
    +cons
    +actual_name
    +insp
    +ix
    +reflected_name
    +convention
    +cons
    +actual_name
    +insp
    +uq
    +reflected_name
    +convention
    +cons
    +actual_name
    +insp
    +ck
    +reflected_name
    +overlap
    --
    +fk(metadata, connection)
    +pk(metadata, connection)
    +ix(metadata, connection)
    +uq(metadata, connection)
    +ck(metadata, connection)
    +test_long_convention_name(type_, metadata, connection)
  }

  class PingTest {
    +test_do_ping()
  }

  class ArgSignatureTest {
    +stack
    +cls
    +cls: all_subclasses
    +meth
    +insp
    --
    -_all_subclasses()
    +all_subclasses(request)
    +test_all_visit_methods_accept_kw(all_subclasses)
  }

  class ExceptionTest {
    +run_deletes: str
    +trans
    +err_str
    --
    +{class} define_tables(metadata)
    +test_integrity_error()
    +test_exception_with_non_ascii()
  }

  class IsolationLevelTest {
    +levels
    +default
    +supported
    +s
    +non_default
    +existing
    +levels
    +all_levels
    +trans
    +connection: connection_no_trans
    +eng
    +levels
    +default
    +supported
    +e
    --
    -_get_non_default_isolation_level()
    +test_default_isolation_level()
    +test_non_default_isolation_level()
    +test_all_levels()
    +test_invalid_level_execution_option(connection_no_trans)
    +test_invalid_level_engine_param(testing_engine)
    +test_dialect_user_setting_is_restored(testing_engine)
  }

  class AutocommitIsolationTest {
    +run_deletes: str
    +trans
    +conn: connection_no_trans
    +c2
    +conn: connection_no_trans
    +conn: connection_no_trans
    +conn
    +e
    +e
    +levels
    +default
    --
    +{class} define_tables(metadata)
    -_test_conn_autocommits(conn, autocommit)
    +test_autocommit_on(connection_no_trans)
    +test_autocommit_off(connection_no_trans)
    +test_turn_autocommit_off_via_default_iso_level(connection_no_trans)
    +test_dialect_autocommit_is_restored(testing_engine, use_dialect_setting)
  }

  class EscapingTest {
    +m
    +t
    --
    +test_percent_sign_round_trip()
  }

  class WeCanSetDefaultSchemaWEventsTest {
    +default_schema_name
    +eng
    +default_schema_name
    +eng
    +what_it_should_be
    +eng
    +what_it_should_be
    +eng
    +trans
    +what_it_should_be
    +what_it_should_be
    --
    +test_control_case()
    +test_wont_work_wo_insert()
    +on_connect(connection_record)
    +test_schema_change_on_connect()
    +on_connect(connection_record)
    +test_schema_change_works_w_transactions()
    +on_connect()
  }

  class FutureWeCanSetDefaultSchemaWEventsTest {
  }

  class DifficultParametersTest {
    +tough_parameters
    +name: paramname
    +t
    +stmt
    +stmt
    +row
    +stmt
    +row
    +mytable
    +tbl1: multirow_fixture
    +stmt
    +res
    +tbl1: multirow_fixture
    +stmt
    +res
    --
    +test_round_trip_same_named_column(paramname, connection, metadata)
    +multirow_fixture(metadata, connection)
    +test_standalone_bindparam_escape(paramname, connection, multirow_fixture)
    +test_standalone_bindparam_escape_expanding(paramname, connection, multirow_fixture)
  }

  class ReturningGuardsTest {
    +t
    +stmt
    +result
    +result
    +result
    +t
    +stmt
    +t
    +stmt
    +t
    +stmt
    +t
    +stmt
    +t
    +stmt
    +t
    +stmt
    --
    +{class} define_tables(metadata)
    +run_stmt(connection)
    +go(executemany, id_param_name, expect_success)
    +test_insert_single(connection, run_stmt)
    +test_insert_many(connection, run_stmt)
    +test_update_single(connection, run_stmt)
    +test_update_many(connection, run_stmt)
    +test_delete_single(connection, run_stmt)
    +test_delete_many(connection, run_stmt)
  }

  class SimpleUpdateDeleteTest {
    +run_deletes: str
    +t
    +r
    +t
    +r
    +t
    +stmt
    +stmt
    +stmt
    +stmt
    +r
    +t
    +stmt
    +stmt
    +stmt
    +stmt
    +r
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_update(connection)
    +test_delete(connection)
    +test_update_returning(connection, criteria)
    +test_delete_returning(connection, criteria)
  }

  class OneConnectionTablesTest {
    +{class} setup_bind()
  }

  class HasTableTest {
    +query: str
    +query
    +kw
    +table_name
    +user_tmp
    +insp
    +nt
    +insp
    +insp
    +temp_table_name
    +insp
    +insp
    --
    +{class} define_tables(metadata)
    +{class} define_views(metadata)
    +{class} temp_table_name()
    +{class} define_temp_tables(metadata)
    +test_has_table()
    +test_has_table_cache(metadata)
    +test_has_table_schema()
    +test_has_table_nonexistent_schema()
    +test_has_table_view(connection)
    +test_has_table_temp_table(connection)
    +test_has_table_temp_view(connection)
    +test_has_table_view_schema(connection)
  }

  class HasIndexTest {
    +tt
    +tt
    +kind
    +meth
    +idx
    +tbl
    +meth
    --
    +{class} define_tables(metadata)
    -_has_index(kind, conn)
    +test_has_index(kind, connection, metadata)
    +test_has_index_schema(kind, connection)
  }

  class BizarroCharacterFKResolutionTest {
    +tt
    +m2
    +o2
    +t1
    --
    +test_fk_ref(connection, metadata, use_composite, tablename, columnname)
  }

  class QuotedNameArgumentTest {
    +run_create_tables: str
    +names
    +names
    +query
    +insp
    +res
    +res
    +insp
    +insp
    +insp
    +insp
    +insp
    +insp
    +insp
    +insp
    --
    +{class} define_tables(metadata)
    +quote_fixtures()
    +test_get_table_options(name)
    +test_get_view_definition(name)
    +test_get_columns(name)
    +test_get_pk_constraint(name)
    +test_get_foreign_keys(name)
    +test_get_indexes(name)
    +test_get_unique_constraints(name)
    +test_get_table_comment(name)
    +test_get_check_constraints(name)
  }

  class ComponentReflectionTest {
    +run_inserts: NoneType
    +run_deletes: NoneType
    +schema_prefix
    +schema_prefix: str
    +parent_id_args
    +parent_id_args
    +users
    +noncol_idx_test_nopk
    +noncol_idx_test_pk
    +kw
    +table_name
    +user_tmp
    +materialized
    +materialized
    +fullname: table_name
    +fullname
    +view_name
    +prefix
    +query
    +index_name: str
    +index_name
    +idx
    +res
    +scope_filter
    +scope_filter
    +scope_filter
    +removed
    +res
    +materialized
    +views
    +tables
    +res
    +res
    +empty
    +materialized
    +views
    +tables
    +res
    +res
    +res
    +kw
    +materialized
    +views
    +tables
    +res
    +res
    +empty
    +materialized
    +materialized
    +views
    +tables
    +res
    +res
    --
    +{class} define_tables(metadata)
    +{class} define_reflected_tables(metadata, schema)
    +{class} temp_table_name()
    +{class} define_temp_tables(metadata)
    +{class} define_views(metadata, schema)
    -_resolve_kind(kind, tables, views, materialized)
    -_resolve_views(views, materialized)
    -_resolve_names(schema, scope, filter_names, values)
    +exp_options(schema, scope, kind, filter_names)
    +exp_comments(schema, scope, kind, filter_names)
    +exp_columns(schema, scope, kind, filter_names)
    +col(auto, default, comment, nullable)
    +pk()
    -_required_column_keys()
    +exp_pks(schema, scope, kind, filter_names)
    +pk()
    -_required_pk_keys()
    +exp_fks(schema, scope, kind, filter_names)
  }

  class tt {
    +res
    --
    -__eq__(other)
  }

  class TableNoColumnsTest {
    +t2
    +insp
    +multi
    +m
    +t2
    +insp
    +multi
    --
    +table_no_columns(connection, metadata)
    +view_no_columns(connection, metadata)
    +test_reflect_table_no_columns(connection, table_no_columns)
    +test_get_columns_table_no_columns(connection, table_no_columns)
    +test_reflect_incl_table_no_columns(connection, table_no_columns)
    +test_reflect_view_no_columns(connection, view_no_columns)
    +test_get_columns_view_no_columns(connection, view_no_columns)
  }

  class ComponentReflectionTestExtra {
    +schema
    +schema: NoneType
    +insp
    +reflected
    +reflected
    +no_cst: str
    +t
    +long_str
    +insp
    +expected
    --
    +test_get_check_constraints(metadata, connection, use_schema)
    +normalize()
    +test_reflect_expression_based_indexes(metadata, connection)
    +completeIndex()
  }

  class lower_index_str {
    +ol
    --
    -__eq__(other)
  }

  class coalesce_index_str {
    -__eq__(other)
  }

  class NormalizedNameTest {
    +m2
    +t2_ref
    +t1_ref
    +m3
    +tablenames
    --
    +{class} define_tables(metadata)
    +test_reflect_lowercase_forced_tables()
    +test_get_table_names()
  }

  class ComputedReflectionTest {
    +insp
    +cols
    +col_data
    +insp
    +cols
    +data
    +compData
    +compData
    +insp
    +cols
    +data
    +insp
    +cols
    +data
    --
    +test_computed_col_default_not_set()
    +test_get_column_returns_computed()
    +check_column(data, column, sqltext, persisted)
    +test_get_column_returns_persisted()
    +test_get_column_returns_persisted_with_schema()
  }

  class IdentityReflectionTest {
    +run_inserts: NoneType
    +run_deletes: NoneType
    +common_keys
    +insp
    +cols
    +insp
    +cols
    --
    +{class} define_tables(metadata)
    +check(value, exp, approx)
    +test_reflect_identity()
    +test_reflect_identity_schema()
  }

  class CompositeKeyReflectionTest {
    +tb1
    +insp
    +primary_key
    +insp
    +foreign_keys
    +fkey1
    --
    +{class} define_tables(metadata)
    +test_pk_column_order(connection)
    +test_fk_column_order(connection)
  }

  class RowCountTest {
    +data
    +employees_table
    +employees_table
    +s
    +rows
    +employees_table
    +department
    +r
    +r
    +r
    +s
    +r
    +employees_table
    +department
    +r
    +employees_table
    +department
    +r
    +employees_table
    +employees_table
    +department
    +stmt
    +stmt
    +r
    +result
    +result
    +employees_table
    +department
    +r
    +employees_table
    +stmt
    +r
    +employees_table
    +stmt
    +r
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_basic(connection)
    +test_non_rowcount_scenarios_no_raise(connection, statement, close_first)
    +test_update_rowcount1(connection)
    +test_update_rowcount2(connection)
    +test_update_delete_rowcount_return_defaults(connection, implicit_returning, dml)
    +test_raw_sql_rowcount(connection)
    +test_text_rowcount(connection)
    +test_delete_rowcount(connection)
    +test_multi_update_rowcount(connection)
    +test_multi_delete_rowcount(connection)
  }

  class CTETest {
    +run_inserts: str
    +run_deletes: str
    +some_table
    +cte
    +result
    +some_table
    +cte
    +cte_alias
    +st1
    +cte
    +result
    +some_table
    +some_other_table
    +cte
    +some_table
    +some_other_table
    +cte
    +some_table
    +some_other_table
    +cte
    +some_table
    +some_other_table
    +cte
    --
    +{class} define_tables(metadata)
    +{class} insert_data(connection)
    +test_select_nonrecursive_round_trip(connection)
    +test_select_recursive_round_trip(connection)
    +test_insert_from_select_round_trip(connection)
    +test_update_from_round_trip(connection)
    +test_delete_from_round_trip(connection)
    +test_delete_scalar_subq_round_trip(connection)
  }

  class _LiteralRoundTripFixture {
    +supports_whereclause: bool
    +t
    +ins
    +ins
    +stmt
    +stmt
    +stmt
    +rows
    +value
    +value
    +stmt
    +rows
    --
    +literal_round_trip(metadata, connection)
    +run(input_, output, filter_, compare, support_whereclause)
  }

  class _UnicodeFixture {
    +data: str
    +unicode_table
    +row
    +unicode_table
    +rows
    +unicode_table
    +row
    +unicode_table
    +row
    --
    +supports_whereclause()
    +{class} define_tables(metadata)
    +test_round_trip(connection)
    +test_round_trip_executemany(connection)
    -_test_null_strings(connection)
    -_test_empty_strings(connection)
    +test_literal(literal_round_trip)
    +test_literal_non_ascii(literal_round_trip)
  }

  class UnicodeVarcharTest {
    +datatype
    --
    +test_empty_strings_varchar(connection)
    +test_null_strings_varchar(connection)
  }

  class UnicodeTextTest {
    +datatype
    --
    +test_empty_strings_text(connection)
    +test_null_strings_text(connection)
  }

  class ArrayTest {
    +array_table
    +row
    --
    +{class} define_tables(metadata)
    +test_array_roundtrip(connection)
    +test_literal_simple(literal_round_trip)
    +test_literal_complex(literal_round_trip)
  }

  class BinaryTest {
    +binary_table
    +row
    +binary_table
    +row
    --
    +{class} define_tables(metadata)
    +test_binary_roundtrip(connection, data)
    +test_pickle_roundtrip(connection)
  }

  class TextTest {
    +text_table
    +row
    +text_table
    +row
    +text_table
    +row
    +data: str
    +data: str
    +data: str
    --
    +supports_whereclause()
    +{class} define_tables(metadata)
    +test_text_roundtrip(connection)
    +test_text_empty_strings(connection)
    +test_text_null_strings(connection)
    +test_literal(literal_round_trip)
    +test_literal_non_ascii(literal_round_trip)
    +test_literal_quoting(literal_round_trip)
    +test_literal_backslashes(literal_round_trip)
    +test_literal_percentsigns(literal_round_trip)
  }

  class StringTest {
    +metadata
    +foo
    +t
    +data: str
    +data: str
    --
    +test_nolength_string()
    +test_literal(literal_round_trip)
    +test_literal_non_ascii(literal_round_trip)
    +test_dont_truncate_rightside(metadata, connection, expr, expected)
    +test_literal_quoting(literal_round_trip)
    +test_literal_backslashes(literal_round_trip)
    +test_concatenate_binary(connection)
    +test_concatenate_clauselist(connection)
  }

  class IntervalTest {
    +datatype: Interval
    +data
    +row
    +now
    +row
    +row
    --
    +test_literal(literal_round_trip)
    +test_select_direct_literal_interval(connection)
    +test_arithmetic_operation_literal_interval(connection)
    +arithmetic_table_fixture(metadata, connection)
  }

  class Decorated {
    +impl
    +cache_ok: bool
  }

  class PrecisionIntervalTest {
    +datatype
    +data
  }

  class _DateFixture {
    +compare: NoneType
    --
    +{class} define_tables(metadata)
  }

  class DateTimeTest {
    +datatype: DateTime
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class DateTimeTZTest {
    +datatype
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class DateTimeMicrosecondsTest {
    +datatype: DateTime
    +data
  }

  class TimestampMicrosecondsTest {
    +datatype: TIMESTAMP
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class TimeTest {
    +datatype: Time
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class TimeTZTest {
    +datatype
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class TimeMicrosecondsTest {
    +datatype: Time
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class DateTest {
    +datatype: Date
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class DateTimeCoercedToDateTimeTest {
    +datatype: Date
    +data
    +compare
    +result
    --
    +test_select_direct(connection)
  }

  class DateTimeHistoricTest {
    +datatype: DateTime
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class DateHistoricTest {
    +datatype: Date
    +data
    +result
    --
    +test_select_direct(connection)
  }

  class IntegerTest {
    +int_table
    +row
    --
    +test_literal(literal_round_trip)
    -_huge_ints()
    +test_huge_int_auto_accommodation(connection, intvalue)
    +test_huge_int(integer_round_trip, intvalue)
    +integer_round_trip(metadata, connection)
    +run(data)
  }

  class CastTypeDecoratorTest {
    +string_as_int()
  }

  class StringAsInt {
    +impl
    +cache_ok: bool
    --
    +column_expression(col)
    +bind_expression(col)
  }

  class TrueDivTest {
    +test_truediv_integer(connection, left, right, expected)
    +test_floordiv_integer(connection, left, right, expected)
    +test_truediv_numeric(connection, left, right, expected)
    +test_truediv_float(connection, left, right, expected)
    +test_floordiv_numeric(connection, left, right, expected)
    +test_truediv_integer_bound(connection)
    +test_floordiv_integer_bound(connection)
  }

  class NumericTest {
    +t
    +result
    +output
    +result
    +output
    +test_value
    +add_value
    +test_value: float
    +add_value: float
    +assert_we_are_a_number
    +expr: float
    +val
    +expr
    +val
    +expr
    +val
    +numbers
    +numbers
    +numbers
    +numbers
    +numbers
    +target_type
    +numeric_type
    --
    +do_numeric_test(metadata, connection)
    +run(input_, output, filter_, check_scale)
    +test_render_literal_numeric(literal_round_trip)
    +test_render_literal_numeric_asfloat(literal_round_trip)
    +test_render_literal_float(literal_round_trip)
    +test_float_custom_scale(do_numeric_test)
    +test_numeric_as_decimal(do_numeric_test)
    +test_numeric_as_float(do_numeric_test)
    +test_infinity_floats(do_numeric_test)
    +test_numeric_null_as_decimal(do_numeric_test)
    +test_numeric_null_as_float(do_numeric_test)
    +test_float_as_decimal(do_numeric_test)
    +test_float_as_float(do_numeric_test)
    +test_float_coerce_round_trip(connection)
    +test_decimal_coerce_round_trip(connection)
    +test_decimal_coerce_round_trip_w_cast(connection)
    +test_precision_decimal(do_numeric_test)
    +test_enotation_decimal(do_numeric_test)
    +test_enotation_decimal_large(do_numeric_test)
    +test_many_significant_digits(do_numeric_test)
    +test_numeric_no_decimal(do_numeric_test)
    +test_float_is_not_numeric(connection, cls_)
  }

  class BooleanTest {
    +boolean_table
    +row
    +boolean_table
    +row
    +boolean_table
    --
    +{class} define_tables(metadata)
    +test_render_literal_bool(literal_round_trip)
    +test_round_trip(connection)
    +test_null(connection)
    +test_whereclause()
  }

  class JSONTest {
    +datatype: JSON
    +data
    +data
    +data
    +data
    +data_table
    +row
    +json_elements
    +json_elements
    +elements
    +fn
    +data_table
    --
    +{class} define_tables(metadata)
    +test_round_trip_data1(connection)
    +test_round_trip_pretty_large_data(connection, unicode_, length)
    -_test_round_trip(data_element, connection)
    -_index_fixtures()
    +decorate()
    -_json_value_insert(connection, datatype, value, data_element)
  }

  class DecimalEncoder {
    +default(o)
  }

  class Data {
  }

  class JSONLegacyStringCastIndexTest {
    +datatype: JSON
    +data1
    +data2
    +data3
    +data4
    +data5
    +data6
    +stmt
    +literal_sql
    +name
    +col
    +name
    +col
    +col
    +col
    +name
    +col
    --
    +{class} define_tables(metadata)
    -_criteria_fixture()
    -_test_index_criteria(crit, expected, test_literal)
    +test_string_cast_crit_spaces_in_key()
    +test_string_cast_crit_simple_int()
    +test_string_cast_crit_mixed_path()
    +test_string_cast_crit_string_path()
    +test_string_cast_crit_against_string_basic()
  }

  class UuidTest {
    +datatype: Uuid
    +data
    +uuid_table
    +row
    +data
    +uuid_table
    +row
    +data
    +data
    +data
    +data
    +data
    +str_data
    +uuid_table
    +result
    +row
    --
    +{class} define_tables(metadata)
    +test_uuid_round_trip(connection)
    +test_uuid_text_round_trip(connection)
    +test_literal_uuid(literal_round_trip)
    +test_literal_text(literal_round_trip)
    +test_literal_nonnative_uuid(literal_round_trip)
    +test_literal_nonnative_text(literal_round_trip)
    +test_uuid_returning(connection)
  }

  class NativeUUIDTest {
    +datatype: UUID
  }

  class UnicodeSchemaTest {
    +t1
    +t2
    +t3
    +t3
    +row
    +row
    +row
    +meta
    +tt1
    +tt2
    +tt3
    +meta
    +t
    --
    +{class} define_tables(metadata)
    +test_insert(connection)
    +test_col_targeting(connection)
    +test_reflect(connection)
    +test_repr()
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.dialects.postgresql" {
  class NAME {
    +impl
    +cache_ok: bool
  }

  class PG_NODE_TREE {
    +impl
    +cache_ok: bool
  }

  class INT2VECTOR {
    +impl
    +cache_ok: bool
  }

  class OIDVECTOR {
    +impl
    +cache_ok: bool
  }

  class _SpaceVector {
    +result_processor(dialect, coltype)
    +process()
  }

  class _PsycopgNumeric {
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
  }

  class _PsycopgFloat {
  }

  class _PsycopgHStore {
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
  }

  class _PsycopgARRAY {
    +render_bind_cast: bool
  }

  class _PsycopgINT2VECTOR {
  }

  class _PsycopgOIDVECTOR {
  }

  class _PGExecutionContext_common_psycopg {
    +ident
    --
    +create_server_side_cursor()
  }

  class _PGDialect_common_psycopg {
    +supports_statement_cache: bool
    +supports_server_side_cursors: bool
    +default_paramstyle: str
    +colspecs
    +opts
    +opts
    +comma_ports
    +cursor: NoneType
    +before_autocommit
    +cursor
    --
    -__init__(client_encoding, use_native_hstore)
    +create_connect_args(url)
    +get_isolation_level_values(dbapi_connection)
    +set_deferrable(connection, value)
    +get_deferrable(connection)
    -_do_autocommit(connection, value)
    +do_ping(dbapi_connection)
  }

  class AsyncpgARRAY {
    +render_bind_cast: bool
  }

  class AsyncpgString {
    +render_bind_cast: bool
  }

  class AsyncpgREGCONFIG {
    +render_bind_cast: bool
  }

  class AsyncpgTime {
    +render_bind_cast: bool
  }

  class AsyncpgBit {
    +render_bind_cast: bool
  }

  class AsyncpgByteA {
    +render_bind_cast: bool
  }

  class AsyncpgDate {
    +render_bind_cast: bool
  }

  class AsyncpgDateTime {
    +render_bind_cast: bool
  }

  class AsyncpgBoolean {
    +render_bind_cast: bool
  }

  class AsyncPgInterval {
    +render_bind_cast: bool
    --
    +{class} adapt_emulated_to_native(interval)
  }

  class AsyncPgEnum {
    +render_bind_cast: bool
  }

  class AsyncpgInteger {
    +render_bind_cast: bool
  }

  class AsyncpgBigInteger {
    +render_bind_cast: bool
  }

  class AsyncpgJSON {
    +render_bind_cast: bool
    --
    +result_processor(dialect, coltype)
  }

  class AsyncpgJSONB {
    +render_bind_cast: bool
    --
    +result_processor(dialect, coltype)
  }

  class AsyncpgJSONIndexType {
  }

  class AsyncpgJSONIntIndexType {
    +render_bind_cast: bool
  }

  class AsyncpgJSONStrIndexType {
    +render_bind_cast: bool
  }

  class AsyncpgJSONPathType {
    +tokens
    --
    +bind_processor(dialect)
    +process()
  }

  class AsyncpgNumeric {
    +render_bind_cast: bool
    --
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
  }

  class AsyncpgFloat {
    +render_bind_cast: bool
  }

  class AsyncpgREGCLASS {
    +render_bind_cast: bool
  }

  class AsyncpgOID {
    +render_bind_cast: bool
  }

  class AsyncpgCHAR {
    +render_bind_cast: bool
  }

  class _AsyncpgRange {
    +asyncpg_Range
    +value
    +empty
    +value
    --
    +bind_processor(dialect)
    +to_range()
    +result_processor(dialect, coltype)
    +to_range()
  }

  class _AsyncpgMultiRange {
    +asyncpg_Range
    +NoneType
    +value
    +empty
    +rvalue
    +value
    --
    +bind_processor(dialect)
    +to_range()
    +to_range()
    +result_processor(dialect, coltype)
    +to_range_array()
    +to_range()
  }

  class PGExecutionContext_asyncpg {
    +handle_dbapi_exception(e)
    +pre_exec()
    +create_server_side_cursor()
  }

  class PGCompiler_asyncpg {
  }

  class PGIdentifierPreparer_asyncpg {
  }

  class AsyncAdapt_asyncpg_cursor {
    +server_side: bool
    +adapt_connection
    +parameters
    +status
    +reg
    +adapt_connection
    +size
    +retval
    +retval
    --
    -__init__(adapt_connection)
    +close()
    -_handle_exception(error)
    +execute(operation, parameters)
    +executemany(operation, seq_of_parameters)
    +setinputsizes()
    -__iter__()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_asyncpg_ss_cursor {
    +server_side: bool
    +new_rows
    +buf
    +lb
    +result
    +ret
    +rows
    +batch
    --
    -__init__(adapt_connection)
    +close()
    -_buffer_rows()
    -__aiter__()
    +fetchone()
    +fetchmany(size)
    +fetchall()
    +executemany(operation, seq_of_parameters)
  }

  class AsyncAdapt_asyncpg_connection {
    +await_
    +cache
    +prepared_stmt
    +attributes
    +prepared_stmt
    +attributes
    +exception_mapping
    +translated_error
    +tr
    --
    -__init__(dbapi, connection, prepared_statement_cache_size, prepared_statement_name_func)
    -_handle_exception(error)
    +autocommit()
    +autocommit(value)
    +ping()
    +set_isolation_level(level)
    +cursor(server_side)
    +rollback()
    +commit()
    +close()
    +terminate()
    -{static} _default_name_func()
  }

  class AsyncAdaptFallback_asyncpg_connection {
    +await_
  }

  class AsyncAdapt_asyncpg_dbapi {
    +async_fallback
    +creator_fn
    +prepared_statement_cache_size
    +prepared_statement_name_func
    --
    -__init__(asyncpg)
    +connect()
  }

  class Error {
  }

  class Warning {
  }

  class InterfaceError {
  }

  class DatabaseError {
  }

  class InternalError {
  }

  class OperationalError {
  }

  class ProgrammingError {
  }

  class IntegrityError {
  }

  class DataError {
  }

  class NotSupportedError {
  }

  class InternalServerError {
  }

  class InvalidCachedStatementError {
    -__init__(message)
  }

  class PGDialect_asyncpg {
    +driver: str
    +supports_statement_cache: bool
    +supports_server_side_cursors: bool
    +render_bind_cast: bool
    +has_terminate: bool
    +default_paramstyle: str
    +supports_sane_multi_rowcount: bool
    +execution_ctx_cls: PGExecutionContext_asyncpg
    +statement_compiler: PGCompiler_asyncpg
    +preparer: PGIdentifierPreparer_asyncpg
    +colspecs
    +is_async: bool
    +opts
    +async_fallback
    +asyncpg_connection
    +deserializer
    +asyncpg_connection
    +deserializer
    +deserializer
    +asyncpg_connection
    +super_connect
    --
    -_invalidate_schema_cache()
    -_dbapi_version()
    +{class} import_dbapi()
    -_isolation_lookup()
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
    +set_readonly(connection, value)
    +get_readonly(connection)
    +set_deferrable(connection, value)
    +get_deferrable(connection)
    +do_terminate(dbapi_connection)
    +create_connect_args(url)
    +do_ping(dbapi_connection)
    +{class} get_pool_class(url)
    +is_disconnect(e, connection, cursor)
    -_json_decoder()
    -_jsonb_encoder()
    -_jsonb_decoder()
    +on_connect()
    +connect()
    +get_driver_connection(connection)
  }

  class PGDialect_psycopg2cffi {
    +driver: str
    +supports_unicode_statements: bool
    +supports_statement_cache: bool
    +FEATURE_VERSION_MAP
    +root
    +root
    --
    +{class} import_dbapi()
    -_psycopg2_extensions()
    -_psycopg2_extras()
  }

  class _PGString {
    +render_bind_cast: bool
  }

  class _PGREGCONFIG {
    +render_bind_cast: bool
  }

  class _PGJSON {
    +render_bind_cast: bool
    --
    +result_processor(dialect, coltype)
  }

  class _PGJSONB {
    +render_bind_cast: bool
    --
    +result_processor(dialect, coltype)
  }

  class _PGJSONIntIndexType {
    +render_bind_cast: bool
  }

  class _PGJSONStrIndexType {
    +render_bind_cast: bool
  }

  class _PGJSONPathType {
  }

  class _PGInterval {
    +render_bind_cast: bool
    --
    +get_dbapi_type(dbapi)
    +{class} adapt_emulated_to_native(interval)
  }

  class _PGTimeStamp {
    +render_bind_cast: bool
  }

  class _PGDate {
    +render_bind_cast: bool
  }

  class _PGTime {
    +render_bind_cast: bool
  }

  class _PGInteger {
    +render_bind_cast: bool
  }

  class _PGSmallInteger {
    +render_bind_cast: bool
  }

  class _PGNullType {
  }

  class _PGBigInteger {
    +render_bind_cast: bool
  }

  class _PGBoolean {
    +render_bind_cast: bool
  }

  class _PsycopgRange {
    +psycopg_Range
    +value
    +value
    --
    +bind_processor(dialect)
    +to_range()
    +result_processor(dialect, coltype)
    +to_range()
  }

  class _PsycopgMultiRange {
    +psycopg_Range
    +psycopg_Multirange
    +NoneType
    +value
    --
    +bind_processor(dialect)
    +to_range()
    +result_processor(dialect, coltype)
    +to_range()
  }

  class PGExecutionContext_psycopg {
  }

  class PGCompiler_psycopg {
  }

  class PGIdentifierPreparer_psycopg {
  }

  class PGDialect_psycopg {
    +driver: str
    +supports_statement_cache: bool
    +supports_server_side_cursors: bool
    +default_paramstyle: str
    +supports_sane_multi_rowcount: bool
    +execution_ctx_cls: PGExecutionContext_psycopg
    +statement_compiler: PGCompiler_psycopg
    +preparer: PGIdentifierPreparer_psycopg
    +psycopg_version
    +colspecs
    +m
    +adapters_map
    +info
    +status_before
    +value
    +fns
    +dbapi_conn
    +before_autocommit
    --
    -__init__()
    +create_connect_args(url)
    -_type_info_fetch(connection, name)
    +initialize(connection)
    +{class} import_dbapi()
    +{class} get_async_dialect_cls(url)
    -_isolation_lookup()
    -_psycopg_Json()
    -_psycopg_Jsonb()
    -_psycopg_TransactionStatus()
    -_psycopg_Range()
    -_psycopg_Multirange()
    -_do_isolation_level(connection, autocommit, isolation_level)
    +get_isolation_level(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
    +set_readonly(connection, value)
    +get_readonly(connection)
    +on_connect()
    +notices()
    +on_connect()
    +on_connect()
    +is_disconnect(e, connection, cursor)
    -_do_prepared_twophase(connection, command, recover)
    +do_rollback_twophase(connection, xid, is_prepared, recover)
    +do_commit_twophase(connection, xid, is_prepared, recover)
    -_dialect_specific_select_one()
  }

  class AsyncAdapt_psycopg_cursor {
    +result
    +res
    +rows
    +size
    +retval
    +retval
    --
    -__init__(cursor, await_)
    -__getattr__(name)
    +arraysize()
    +arraysize(value)
    +close()
    +execute(query, params)
    +executemany(query, params_seq)
    -__iter__()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_psycopg_ss_cursor {
    +iterator
    --
    +execute(query, params)
    +close()
    +fetchone()
    +fetchmany(size)
    +fetchall()
    -__iter__()
  }

  class AsyncAdapt_psycopg_connection {
    +await_
    +cursor
    +cursor
    --
    -__init__(connection)
    -__getattr__(name)
    +execute(query, params)
    +cursor()
    +commit()
    +rollback()
    +close()
    +autocommit()
    +autocommit(value)
    +set_autocommit(value)
    +set_isolation_level(value)
    +set_read_only(value)
    +set_deferrable(value)
  }

  class AsyncAdaptFallback_psycopg_connection {
    +await_
  }

  class PsycopgAdaptDBAPI {
    +async_fallback
    +creator_fn
    --
    -__init__(psycopg)
    +connect()
  }

  class PGDialectAsync_psycopg {
    +is_async: bool
    +supports_statement_cache: bool
    +async_fallback
    +adapted
    --
    +{class} import_dbapi()
    +{class} get_pool_class(url)
    -_type_info_fetch(connection, name)
    -_do_isolation_level(connection, autocommit, isolation_level)
    -_do_autocommit(connection, value)
    +set_readonly(connection, value)
    +set_deferrable(connection, value)
    +get_driver_connection(connection)
  }

  class PGUuid {
    +render_bind_cast: bool
    +render_literal_cast: bool
    --
    -__init__(as_uuid)
    -__init__(as_uuid)
    -__init__(as_uuid)
  }

  class BYTEA {
  }

  class INET {
  }

  class CIDR {
  }

  class MACADDR {
  }

  class MACADDR8 {
  }

  class MONEY {
  }

  class OID {
  }

  class REGCONFIG {
  }

  class TSQUERY {
  }

  class REGCLASS {
  }

  class TIMESTAMP {
    -__init__(timezone, precision)
  }

  class TIME {
    -__init__(timezone, precision)
  }

  class INTERVAL {
    +native: bool
    --
    -__init__(precision, fields)
    +{class} adapt_emulated_to_native(interval): INTERVAL
    -_type_affinity()
    +as_generic(allow_nulltype): sqltypes.Interval
    +python_type()
    +literal_processor(dialect)
    +process(): str
  }

  class BIT {
    -__init__(length, varying)
  }

  class TSVECTOR {
  }

  class CITEXT {
    +coerce_compared_value(op, value)
  }

  class Range {
    +lower
    +upper
    +bounds: _BoundsType
    +empty: bool
    +bounds: _BoundsType
    +empty: bool
    +value1_is_lower_bound
    +value2_is_lower_bound
    +value1_inc
    +value2_inc
    +step
    +value1_inc: bool
    +value1_inc: bool
    +value2_inc: bool
    +value2_inc: bool
    +slower
    +slower_b
    +olower
    +olower_b
    +supper
    +supper_b
    +oupper
    +oupper_b
    +slower
    +slower_b
    +olower
    +olower_b
    +supper
    +supper_b
    +oupper
    +oupper_b
    +slower
    +slower_b
    +supper
    +supper_b
    +olower
    +olower_b
    +oupper
    +oupper_b
    +supper
    +supper_b
    +olower
    +olower_b
    +slower
    +slower_b
    +oupper
    +oupper_b
    +slower
    +slower_b
    +olower
    +olower_b
    +supper
    +supper_b
    +oupper
    +oupper_b
    +res
    +step
    +step
    +slower
    +slower_b
    +supper
    +supper_b
    +olower
    +olower_b
    +oupper
    +oupper_b
    +slower
    +slower_b
    +supper
    +supper_b
    +olower
    +olower_b
    +oupper
    +oupper_b
    +rlower: slower
    +rlower_b: slower_b
    +rlower: olower
    +rlower_b: olower_b
    +rupper: supper
    +rupper_b: supper_b
    +rupper: oupper
    +rupper_b: oupper_b
    +slower
    +slower_b
    +supper
    +supper_b
    +olower
    +olower_b
    +oupper
    +oupper_b
    +sl_vs_ol
    +su_vs_ou
    +sl_vs_ou
    +su_vs_ol
    +rupper_b
    +rlower_b
    +slower
    +slower_b
    +supper
    +supper_b
    +olower
    +olower_b
    +oupper
    +oupper_b
    +rlower: olower
    +rlower_b: olower_b
    +rlower: slower
    +rlower_b: slower_b
    +rupper: oupper
    +rupper_b: oupper_b
    +rupper: supper
    +rupper_b: supper_b
    +l
    +r
    --
    -__init__(lower, upper)
    -__bool__(): bool
    +isempty(): bool
    +is_empty(): bool
    +lower_inc(): bool
    +lower_inf(): bool
    +upper_inc(): bool
    +upper_inf(): bool
    -__sa_type_engine__()
    -_contains_value(value): bool
    -_get_discrete_step(): Any
    -_compare_edges(value1, bound1, value2, bound2, only_values): int
    -__eq__(other): bool
    +contained_by(other): bool
    +contains(value): bool
    +overlaps(other): bool
    +strictly_left_of(other): bool
    +strictly_right_of(other): bool
    +not_extend_left_of(other): bool
    +not_extend_right_of(other): bool
    -_upper_edge_adjacent_to_lower(value1, bound1, value2, bound2): bool
    +adjacent_to(other): bool
    +union(other)
    -__add__(other)
    +difference(other)
    -__sub__(other)
    +intersection(other)
    -__mul__(other)
    -__str__(): str
    -_stringify(): str
  }

  class AbstractRange {
    +render_bind_cast: bool
    +visit_name
    +spec
    --
    +adapt(cls): _TE
    +adapt(cls)
    +adapt(cls)
    -_resolve_for_literal(value): Any
  }

  class comparator_factory {
    +contains(other)
    +contained_by(other)
    +overlaps(other)
    +strictly_left_of(other)
    +strictly_right_of(other)
    +not_extend_right_of(other)
    +not_extend_left_of(other)
    +adjacent_to(other)
    +union(other)
    +difference(other)
    +intersection(other)
  }

  class AbstractRangeImpl {
  }

  class AbstractMultiRange {
  }

  class AbstractMultiRangeImpl {
  }

  class INT4RANGE {
  }

  class INT8RANGE {
  }

  class NUMRANGE {
  }

  class DATERANGE {
  }

  class TSRANGE {
  }

  class TSTZRANGE {
  }

  class INT4MULTIRANGE {
  }

  class INT8MULTIRANGE {
  }

  class NUMMULTIRANGE {
  }

  class DATEMULTIRANGE {
  }

  class TSMULTIRANGE {
  }

  class TSTZMULTIRANGE {
  }

  class _Psycopg2Range {
    +psycopg2_Range
    +value
    +value
    --
    +bind_processor(dialect)
    +to_range()
    +result_processor(dialect, coltype)
    +to_range()
  }

  class _Psycopg2NumericRange {
  }

  class _Psycopg2DateRange {
  }

  class _Psycopg2DateTimeRange {
  }

  class _Psycopg2DateTimeTZRange {
  }

  class PGExecutionContext_psycopg2 {
    +post_exec()
    -_log_notices(cursor)
  }

  class PGIdentifierPreparer_psycopg2 {
  }

  class ExecutemanyMode {
    +EXECUTEMANY_VALUES: int
    +EXECUTEMANY_VALUES_PLUS_BATCH: int
  }

  class PGDialect_psycopg2 {
    +driver: str
    +supports_statement_cache: bool
    +supports_server_side_cursors: bool
    +default_paramstyle: str
    +supports_sane_multi_rowcount: bool
    +execution_ctx_cls: PGExecutionContext_psycopg2
    +preparer: PGIdentifierPreparer_psycopg2
    +psycopg2_version
    +use_insertmanyvalues_wo_returning: bool
    +returns_native_bytes: bool
    +colspecs
    +m
    +extensions
    +extras
    +fns
    +hstore_oids
    +kw
    +kwargs
    +kwargs
    +dbapi_conn
    +dbapi_conn
    +extras
    +oids
    +str_e
    +idx
    --
    -__init__(executemany_mode, executemany_batch_page_size)
    +initialize(connection)
    +{class} import_dbapi()
    -_psycopg2_extensions()
    -_psycopg2_extras()
    -_isolation_lookup()
    +set_isolation_level(dbapi_connection, level)
    +set_readonly(connection, value)
    +get_readonly(connection)
    +set_deferrable(connection, value)
    +get_deferrable(connection)
    +on_connect()
    +on_connect()
    +on_connect()
    +on_connect()
    +on_connect()
    +on_connect()
    +do_executemany(cursor, statement, parameters, context)
    +do_begin_twophase(connection, xid)
    +do_prepare_twophase(connection, xid)
    -_do_twophase(dbapi_conn, operation, xid, recover)
    +do_rollback_twophase(connection, xid, is_prepared, recover)
    +do_commit_twophase(connection, xid, is_prepared, recover)
    -_hstore_oids(dbapi_connection)
    +is_disconnect(e, connection, cursor)
  }

  class _PGNumeric {
    +render_bind_cast: bool
    --
    +result_processor(dialect, coltype)
  }

  class _PGFloat {
    +render_bind_cast: bool
  }

  class _PGNumericNoBind {
    +bind_processor(dialect)
  }

  class _PGJSONIndexType {
    +get_dbapi_type(dbapi)
  }

  class _PGEnum {
    +get_dbapi_type(dbapi)
  }

  class _PGARRAY {
    +render_bind_cast: bool
  }

  class _PGOIDVECTOR {
  }

  class _Pg8000Range {
    +pg8000_Range
    +value
    +value
    --
    +bind_processor(dialect)
    +to_range()
    +result_processor(dialect, coltype)
    +to_range()
  }

  class _Pg8000MultiRange {
    +pg8000_Range
    +mr
    +mr
    --
    +bind_processor(dialect)
    +to_multirange()
    +result_processor(dialect, coltype)
    +to_multirange()
  }

  class PGExecutionContext_pg8000 {
    +ident
    --
    +create_server_side_cursor()
    +pre_exec()
  }

  class ServerSideCursor {
    +server_side: bool
    +op
    --
    -__init__(cursor, ident)
    +connection()
    +rowcount()
    +description()
    +execute(operation, args, stream)
    +executemany(operation, param_sets)
    +fetchone()
    +fetchmany(num)
    +fetchall()
    +close()
    +setinputsizes()
    +setoutputsize(size, column)
  }

  class PGCompiler_pg8000 {
    +visit_mod_binary(binary, operator)
  }

  class PGIdentifierPreparer_pg8000 {
    -__init__()
  }

  class PGDialect_pg8000 {
    +driver: str
    +supports_statement_cache: bool
    +supports_unicode_statements: bool
    +supports_unicode_binds: bool
    +default_paramstyle: str
    +supports_sane_multi_rowcount: bool
    +execution_ctx_cls: PGExecutionContext_pg8000
    +statement_compiler: PGCompiler_pg8000
    +preparer: PGIdentifierPreparer_pg8000
    +supports_server_side_cursors: bool
    +render_bind_cast: bool
    +description_encoding: NoneType
    +colspecs
    +opts
    +level
    +cursor
    +cursor
    +cursor
    +val
    +cursor
    +cursor
    +val
    +cursor
    +fns
    --
    -__init__(client_encoding)
    -_dbapi_version()
    +{class} import_dbapi()
    +create_connect_args(url)
    +is_disconnect(e, connection, cursor)
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
    +set_readonly(connection, value)
    +get_readonly(connection)
    +set_deferrable(connection, value)
    +get_deferrable(connection)
    -_set_client_encoding(dbapi_connection, client_encoding)
    +do_begin_twophase(connection, xid)
    +do_prepare_twophase(connection, xid)
    +do_rollback_twophase(connection, xid, is_prepared, recover)
    +do_commit_twophase(connection, xid, is_prepared, recover)
    +do_recover_twophase(connection)
    +on_connect()
    +on_connect()
    +on_connect()
    +on_connect()
    +on_connect()
    +on_connect()
    -_dialect_specific_select_one()
  }

  class array {
    +stringify_dialect: str
    +inherit_cache: bool
    +type_arg
    +main_type
    --
    -__init__(clauses)
    -_select_iterable()
    -_bind_param(operator, obj, _assume_scalar, type_)
    +self_group(against)
  }

  class ARRAY {
  }

  class Comparator {
    +key
    --
    +has_key(other)
    +has_all(other)
    +has_any(other)
    +contains(other)
    +contained_by(other)
    -_setup_getitem(index)
    +defined(key)
    +delete(key)
    +slice(array)
    +keys()
    +vals()
    +array()
    +matrix()
  }

  class Insert {
    +stringify_dialect: str
    +inherit_cache: bool
    --
    +excluded()
    +on_conflict_do_update(constraint, index_elements, index_where, set_, where): Self
    +on_conflict_do_nothing(constraint, index_elements, index_where): Self
  }

  class OnConflictClause {
    +stringify_dialect: str
    +constraint_target
    +inferred_target_elements: _OnConflictIndexElementsT
    +inferred_target_whereclause: _OnConflictIndexWhereT
    +constraint
    +index_elements
    +index_where
    +index_elements
    +index_where
    +index_elements
    +index_where
    --
    -__init__(constraint, index_elements, index_where)
  }

  class OnConflictDoNothing {
  }

  class OnConflictDoUpdate {
    +set_
    --
    -__init__(constraint, index_elements, index_where, set_, where)
  }

  class JSONPathType {
    +value
    +value: str
    +value
    --
    -_processor(dialect, super_proc)
    +process()
    +bind_processor(dialect)
    +literal_processor(dialect)
  }

  class JSONPATH {
  }

  class JSON {
    +astext_type
    --
    -__init__(none_as_null, astext_type)
  }

  class JSONB {
  }

  class NamedType {
    +DDLGenerator
    +DDLDropper
    +create_type: bool
    +ddl_runner
    +type_name
    +existing
    +existing
    +present
    --
    +create(bind, checkfirst)
    +drop(bind, checkfirst)
    -_check_for_name_in_memos(checkfirst, kw)
    -_on_table_create(target, bind, checkfirst)
    -_on_table_drop(target, bind, checkfirst)
    -_on_metadata_create(target, bind, checkfirst)
    -_on_metadata_drop(target, bind, checkfirst)
  }

  class NamedTypeGenerator {
    +effective_schema
    --
    -__init__(dialect, connection, checkfirst)
    -_can_create_type(type_)
  }

  class NamedTypeDropper {
    +effective_schema
    --
    -__init__(dialect, connection, checkfirst)
    -_can_drop_type(type_)
  }

  class EnumGenerator {
    +visit_enum(enum)
  }

  class EnumDropper {
    +visit_enum(enum)
  }

  class ENUM {
    +native_enum: bool
    +DDLGenerator: EnumGenerator
    +DDLDropper: EnumDropper
    +native_enum
    +super_coerced_type
    --
    -__init__()
    +coerce_compared_value(op, value)
    -{class} __test_init__()
    +{class} adapt_emulated_to_native(impl)
    +create(bind, checkfirst)
    +drop(bind, checkfirst)
    +get_dbapi_type(dbapi)
  }

  class DomainGenerator {
    +visit_DOMAIN(domain)
  }

  class DomainDropper {
    +visit_DOMAIN(domain)
  }

  class DOMAIN {
    +DDLGenerator: DomainGenerator
    +DDLDropper: DomainDropper
    +check
    --
    -__init__(name, data_type)
    -{class} __test_init__()
  }

  class CreateEnumType {
  }

  class DropEnumType {
  }

  class CreateDomainType {
  }

  class DropDomainType {
  }

  class PGCompiler {
    +dbapi_type
    +regconfig
    +escape
    +escape
    +flags
    +string
    +pattern_replace
    +flags
    +value
    +value
    +text: str
    +tmp: str
    +tmp: str
    +tmp: str
    +tmp: str
    +tables
    +s
    +start
    +length
    +target_text
    +target_text
    +target_text: str
    +target_text
    +clause: on_conflict
    +target_text
    +action_set_ops
    +set_parameters
    +insert_statement
    +cols
    +col_key
    +value
    +value
    +value
    +value
    +value_text
    +key_text
    +key_text
    +value_text
    +action_text
    +text: str
    --
    +visit_to_tsvector_func(element)
    +visit_to_tsquery_func(element)
    +visit_plainto_tsquery_func(element)
    +visit_phraseto_tsquery_func(element)
    +visit_websearch_to_tsquery_func(element)
    +visit_ts_headline_func(element)
    -_assert_pg_ts_ext(element)
    +render_bind_cast(type_, dbapi_type, sqltext)
    +visit_array(element)
    +visit_slice(element)
    +visit_bitwise_xor_op_binary(binary, operator)
    +visit_json_getitem_op_binary(binary, operator, _cast_applied)
    +visit_json_path_getitem_op_binary(binary, operator, _cast_applied)
    +visit_getitem_binary(binary, operator)
    +visit_aggregate_order_by(element)
    +visit_match_op_binary(binary, operator)
    +visit_ilike_case_insensitive_operand(element)
    +visit_ilike_op_binary(binary, operator)
    +visit_not_ilike_op_binary(binary, operator)
    -_regexp_match(base_op, binary, operator, kw)
    +visit_regexp_match_op_binary(binary, operator)
    +visit_not_regexp_match_op_binary(binary, operator)
    +visit_regexp_replace_op_binary(binary, operator)
    +visit_empty_set_expr(element_types)
    +render_literal_value(value, type_)
    +visit_aggregate_strings_func(fn)
    +visit_sequence(seq)
    +limit_clause(select)
    +format_from_hint_text(sqltext, table, hint, iscrud)
    +get_select_precolumns(select)
    +for_update_clause(select)
    +visit_substring_func(func)
    -_on_conflict_target(clause)
    +visit_on_conflict_do_nothing(on_conflict)
    +visit_on_conflict_do_update(on_conflict)
    +update_from_clause(update_stmt, from_table, extra_froms, from_hints)
    +delete_extra_from_clause(delete_stmt, from_table, extra_froms, from_hints)
    +fetch_clause(select)
  }

  class PGDDLCompiler {
    +colspec
    +impl_type
    +impl_type
    +has_identity
    +default
    +not_valid
    +typ
    +text
    +text
    +type_
    +type_
    +domain: DOMAIN
    +options
    +default
    +name
    +check
    +domain
    +preparer
    +index
    +text: str
    +concurrently
    +using
    +ops
    +includeclause
    +inclusions
    +nulls_not_distinct
    +withclause
    +tablespace_name
    +whereclause
    +whereclause
    +where_compiled
    +nulls_not_distinct
    +nulls_not_distinct_param: str
    +nulls_not_distinct_param: str
    +nulls_not_distinct_param: str
    +index
    +text: str
    +concurrently
    +text: str
    +elements
    +exclude_element
    +table_opts
    +pg_opts
    +inherits
    +inherits
    +on_commit_options
    +tablespace_name
    +prefix: NoneType
    +prefix
    +constraint
    --
    +get_column_specification(column)
    -_define_constraint_validity(constraint)
    +visit_check_constraint(constraint)
    +visit_foreign_key_constraint(constraint)
    +visit_create_enum_type(create)
    +visit_drop_enum_type(drop)
    +visit_create_domain_type(create)
    +visit_drop_domain_type(drop)
    +visit_create_index(create)
    +define_unique_constraint_distinct(constraint)
    +visit_drop_index(drop)
    +visit_exclude_constraint(constraint)
    +post_create_table(table)
    +visit_computed_column(generated)
    +visit_create_sequence(create)
    -_can_comment_on_constraint(ddl_instance)
    +visit_set_constraint_comment(create)
    +visit_drop_constraint_comment(drop)
  }

  class PGTypeCompiler {
    +identifier_preparer
    +identifier_preparer
    +text: str
    +compiled: str
    +compiled
    +inner
    --
    +visit_TSVECTOR(type_)
    +visit_TSQUERY(type_)
    +visit_INET(type_)
    +visit_CIDR(type_)
    +visit_CITEXT(type_)
    +visit_MACADDR(type_)
    +visit_MACADDR8(type_)
    +visit_MONEY(type_)
    +visit_OID(type_)
    +visit_REGCONFIG(type_)
    +visit_REGCLASS(type_)
    +visit_FLOAT(type_)
    +visit_double(type_)
    +visit_BIGINT(type_)
    +visit_HSTORE(type_)
    +visit_JSON(type_)
    +visit_JSONB(type_)
    +visit_INT4MULTIRANGE(type_)
    +visit_INT8MULTIRANGE(type_)
    +visit_NUMMULTIRANGE(type_)
    +visit_DATEMULTIRANGE(type_)
    +visit_TSMULTIRANGE(type_)
    +visit_TSTZMULTIRANGE(type_)
    +visit_INT4RANGE(type_)
    +visit_INT8RANGE(type_)
    +visit_NUMRANGE(type_)
    +visit_DATERANGE(type_)
    +visit_TSRANGE(type_)
    +visit_TSTZRANGE(type_)
    +visit_json_int_index(type_)
    +visit_json_str_index(type_)
    +visit_datetime(type_)
    +visit_enum(type_)
    +visit_ENUM(type_, identifier_preparer)
    +visit_DOMAIN(type_, identifier_preparer)
    +visit_TIMESTAMP(type_)
    +visit_TIME(type_)
    +visit_INTERVAL(type_)
    +visit_BIT(type_)
    +visit_uuid(type_)
    +visit_UUID(type_)
    +visit_large_binary(type_)
    +visit_BYTEA(type_)
    +visit_ARRAY(type_)
    +visit_json_path(type_)
    +visit_JSONPATH(type_)
  }

  class PGIdentifierPreparer {
    +reserved_words: RESERVED_WORDS
    +value
    +name
    +effective_schema
    +name
    --
    -_unquote_identifier(value)
    +format_type(type_, use_schema)
  }

  class ReflectedNamedType {
    +name: str
    +schema: str
    +visible: bool
  }

  class ReflectedDomainConstraint {
    +name: str
    +check: str
  }

  class ReflectedDomain {
    +type: str
    +nullable: bool
    +default
    +constraints
  }

  class ReflectedEnum {
    +labels
  }

  class PGInspector {
    +dialect: PGDialect
    --
    +get_table_oid(table_name, schema): int
    +get_domains(schema)
    +get_enums(schema)
    +get_foreign_table_names(schema)
    +has_type(type_name, schema): bool
  }

  class PGExecutionContext {
    +seq_name
    +tab
    +col
    +tab
    +col
    +name
    +seq_name: name
    +effective_schema
    +effective_schema: NoneType
    +exc
    +exc
    --
    +fire_sequence(seq, type_)
    +get_insert_default(column)
  }

  class PGReadOnlyConnectionCharacteristic {
    +transactional: bool
    --
    +reset_characteristic(dialect, dbapi_conn)
    +set_characteristic(dialect, dbapi_conn, value)
    +get_characteristic(dialect, dbapi_conn)
  }

  class PGDeferrableConnectionCharacteristic {
    +transactional: bool
    --
    +reset_characteristic(dialect, dbapi_conn)
    +set_characteristic(dialect, dbapi_conn, value)
    +get_characteristic(dialect, dbapi_conn)
  }

  class PGDialect {
    +name: str
    +supports_statement_cache: bool
    +supports_alter: bool
    +max_identifier_length: int
    +supports_sane_rowcount: bool
    +bind_typing
    +supports_native_enum: bool
    +supports_native_boolean: bool
    +supports_native_uuid: bool
    +supports_smallserial: bool
    +supports_sequences: bool
    +sequences_optional: bool
    +preexecute_autoincrement_sequences: bool
    +postfetch_lastrowid: bool
    +use_insertmanyvalues: bool
    +returns_native_bytes: bool
    +insertmanyvalues_implicit_sentinel
    +supports_comments: bool
    +supports_constraint_comments: bool
    +supports_default_values: bool
    +supports_default_metavalue: bool
    +supports_empty_insert: bool
    +supports_multivalues_insert: bool
    +supports_identity_columns: bool
    +default_paramstyle: str
    +ischema_names: ischema_names
    +colspecs: colspecs
    +statement_compiler: PGCompiler
    +ddl_compiler: PGDDLCompiler
    +type_compiler_cls: PGTypeCompiler
    +preparer: PGIdentifierPreparer
    +execution_ctx_cls: PGExecutionContext
    +inspector: PGInspector
    +update_returning: bool
    +delete_returning: bool
    +insert_returning: bool
    +update_returning_multifrom: bool
    +delete_returning_multifrom: bool
    +connection_characteristics
    +connection_characteristics
    +construct_arguments
    +reflection_options
    +cursor
    +cursor
    +val
    +hosts
    +ports_str
    +integrated_multihost: bool
    +integrated_multihost: bool
    +hosts
    +host_port_match
    +integrated_multihost: bool
    +hosts
    +ports_str
    +ports_str
    +ports_str
    +ports
    +ports
    +ports
    +query
    +pg_class_table
    +query
    +query
    +query
    +query
    +query
    +pg_class_table
    +query
    +query
    +query
    +query
    +query
    +query
    +query
    +v
    +m
    +query
    +query
    +table_oid
    +query
    +query
    +query
    +query
    +query
    +res
    +relkinds
    +data
    +generated
    +identity
    +identity
    +default
    +relkinds
    +query
    +query
    +query
    +query
    +rows
    +domains
    +enums
    +columns
    +array_type_pattern
    +attype_pattern
    +charlen_pattern
    +args_pattern
    +args_split_pattern
    +columns
    +table_cols
    +format_type
    +default
    +name
    +generated
    +identity
    +no_format_type: bool
    +attype: str
    +format_type: str
    +is_array: bool
    +no_format_type: bool
    +attype
    +enum_or_domain_key
    +nullable
    +charlen
    +charlen
    +args
    +args
    +args
    +kwargs
    +args
    +args
    +args
    +args
    +args
    +args
    +args
    +args
    +field_match
    +attype: str
    +args
    +args
    +coltype
    +enum
    +coltype: ENUM
    +args
    +domain
    +attype
    +enum_or_domain_key
    +nullable
    +default
    +coltype: NoneType
    +coltype
    +coltype
    +coltype
    +coltype
    +computed
    +default: NoneType
    +computed: NoneType
    +autoincrement: bool
    +match
    +autoincrement: bool
    +default
    +column_info
    +relkinds
    +oid_q
    +oid_q
    +oid_q
    +oid_q
    +result
    +con_sq
    +attr_sq
    +constraint_query
    +constraint_query
    +constraint_query
    +constraint_query
    +table_oids
    +batches
    +is_unique
    +batch
    +result
    +result_by_oid
    +for_oid
    +data
    +result
    +default
    +data
    +pg_class_ref
    +pg_namespace_ref
    +relkinds
    +query
    +query
    +query
    +qtoken: str
    +preparer
    +query
    +result
    +FK_REGEX
    +fkeys
    +default
    +table_fks
    +m
    +deferrable
    +constrained_columns
    +referred_schema: conschema
    +referred_schema: schema
    +referred_schema
    +referred_schema: schema
    +referred_table
    +referred_columns
    +options
    +fkey_d
    +data
    +pg_class_index
    +idx_sq
    +attr_sq
    +cols_sq
    +indnkeyatts
    +indnkeyatts
    +nulls_not_distinct
    +nulls_not_distinct
    +table_oids
    +indexes
    +default
    +batches
    +batch
    +result
    +result_by_oid
    +index_name
    +table_indexes
    +all_elements
    +all_elements_is_expr
    +indnkeyatts
    +inc_cols
    +idx_elements
    +idx_elements_is_expr
    +idx_elements: all_elements
    +idx_elements_is_expr: all_elements_is_expr
    +inc_cols
    +index
    +sorting
    +col_sorting
    +dialect_options
    +amname
    +data
    +result
    +uniques
    +default
    +uc_dict
    +data
    +relkinds
    +query
    +query
    +query
    +query
    +result
    +default
    +data
    +relkinds
    +query
    +query
    +query
    +query
    +result
    +check_constraints
    +default
    +m
    +sqltext: str
    +sqltext
    +entry
    +query
    +query
    +lbl_agg_sq
    +query
    +result
    +enums
    +con_sq
    +query
    +result
    +domains
    +attype
    +constraints
    +sorted_constraints
    +check
    +domain_rec
    +std_string
    --
    -__init__(native_inet_types, json_serializer, json_deserializer)
    +initialize(connection)
    +get_isolation_level_values(dbapi_conn)
    +set_isolation_level(dbapi_connection, level)
    +get_isolation_level(dbapi_connection)
    +set_readonly(connection, value)
    +get_readonly(connection)
    +set_deferrable(connection, value)
    +get_deferrable(connection)
    -_split_multihost_from_url(url)
    +do_begin_twophase(connection, xid)
    +do_prepare_twophase(connection, xid)
    +do_rollback_twophase(connection, xid, is_prepared, recover)
    +do_commit_twophase(connection, xid, is_prepared, recover)
    +do_recover_twophase(connection)
    -_get_default_schema_name(connection)
    +has_schema(connection, schema)
    -_pg_class_filter_scope_schema(query, schema, scope, pg_class_table)
    -_pg_class_relkind_condition(relkinds, pg_class_table)
    -_has_table_query(schema)
    +has_table(connection, table_name, schema)
    +has_sequence(connection, sequence_name, schema)
    +has_type(connection, type_name, schema)
    -_get_server_version_info(connection)
    +get_table_oid(connection, table_name, schema)
    +get_schema_names(connection)
    -_get_relnames_for_relkinds(connection, schema, relkinds, scope)
    +get_table_names(connection, schema)
    +get_temp_table_names(connection)
    -_get_foreign_table_names(connection, schema)
    +get_view_names(connection, schema)
    +get_materialized_view_names(connection, schema)
    +get_temp_view_names(connection, schema)
    +get_sequence_names(connection, schema)
    +get_view_definition(connection, view_name, schema)
    -_value_or_raise(data, table, schema)
    -_prepare_filter_names(filter_names)
    -_kind_to_relkinds(kind)
    +get_columns(connection, table_name, schema)
    -_columns_query(schema, has_filter_names, scope, kind)
    +get_multi_columns(connection, schema, filter_names, scope, kind)
    -_get_columns_info(rows, domains, enums, schema)
    -_handle_array_type()
    -_table_oids_query(schema, has_filter_names, scope, kind)
    -_get_table_oids(connection, schema, filter_names, scope, kind)
    -_constraint_query(is_unique)
    -_reflect_constraint(connection, contype, schema, filter_names, scope, kind)
    +get_pk_constraint(connection, table_name, schema)
    +get_multi_pk_constraint(connection, schema, filter_names, scope, kind)
    +get_foreign_keys(connection, table_name, schema, postgresql_ignore_search_path)
    -_foreing_key_query(schema, has_filter_names, scope, kind)
    -_fk_regex_pattern()
    +get_multi_foreign_keys(connection, schema, filter_names, scope, kind, postgresql_ignore_search_path)
    +get_indexes(connection, table_name, schema)
    -_index_query()
    +get_multi_indexes(connection, schema, filter_names, scope, kind)
    +get_unique_constraints(connection, table_name, schema)
    +get_multi_unique_constraints(connection, schema, filter_names, scope, kind)
    +get_table_comment(connection, table_name, schema)
    -_comment_query(schema, has_filter_names, scope, kind)
    +get_multi_table_comment(connection, schema, filter_names, scope, kind)
    +get_check_constraints(connection, table_name, schema)
    -_check_constraint_query(schema, has_filter_names, scope, kind)
    +get_multi_check_constraints(connection, schema, filter_names, scope, kind)
    -_pg_type_filter_schema(query, schema)
    -_enum_query(schema)
    -_load_enums(connection, schema)
    -_domain_query(schema)
    -_load_domains(connection, schema)
    -_set_backslash_escapes(connection)
  }

  class aggregate_order_by {
    +stringify_dialect: str
    -_traverse_internals: _TraverseInternalsType
    --
    -__init__(target)
    +self_group(against)
    +get_children()
    -_copy_internals(clone)
    -_from_objects()
  }

  class ExcludeConstraint {
    +where: NoneType
    +inherit_cache: bool
    +create_drop_stringify_dialect: str
    +columns
    +render_exprs
    +name
    +where
    +elements
    +c
    --
    -__init__()
    -_set_parent(table)
    -_copy(target_table)
  }

  class _regconfig_fn {
    +inherit_cache: bool
    +args
    +initial_arg
    +initial_arg
    +initial_arg
    +addtl_args
    --
    -__init__()
  }

  class to_tsvector {
    +inherit_cache: bool
    +type
  }

  class to_tsquery {
    +inherit_cache: bool
    +type
  }

  class plainto_tsquery {
    +inherit_cache: bool
    +type
  }

  class phraseto_tsquery {
    +inherit_cache: bool
    +type
  }

  class websearch_to_tsquery {
    +inherit_cache: bool
    +type
  }

  class ts_headline {
    +inherit_cache: bool
    +type: TEXT
    +args
    +has_regconfig: bool
    +has_regconfig: bool
    +has_regconfig: bool
    +initial_arg
    +initial_arg
    +initial_arg
    +addtl_args
    --
    -__init__()
  }

  class HSTORE {
    +hashable: bool
    +text_type
    --
    -__init__(text_type)
  }

  class hstore {
    +type: HSTORE
    +name: str
    +inherit_cache: bool
  }

  class _HStoreDefinedFunction {
    +type
    +name: str
    +inherit_cache: bool
  }

  class _HStoreDeleteFunction {
    +type: HSTORE
    +name: str
    +inherit_cache: bool
  }

  class _HStoreSliceFunction {
    +type: HSTORE
    +name: str
    +inherit_cache: bool
  }

  class _HStoreKeysFunction {
    +type
    +name: str
    +inherit_cache: bool
  }

  class _HStoreValsFunction {
    +type
    +name: str
    +inherit_cache: bool
  }

  class _HStoreArrayFunction {
    +type
    +name: str
    +inherit_cache: bool
  }

  class _HStoreMatrixFunction {
    +type
    +name: str
    +inherit_cache: bool
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.dialects.oracle" {
  class RAW {
  }

  class NCLOB {
  }

  class VARCHAR2 {
  }

  class NUMBER {
    +asdecimal
    +ret
    --
    -__init__(precision, scale, asdecimal)
    +adapt(impltype)
    -_type_affinity()
  }

  class FLOAT {
    -__init__(binary_precision, asdecimal, decimal_return_scale)
  }

  class BINARY_DOUBLE {
  }

  class BINARY_FLOAT {
  }

  class BFILE {
  }

  class LONG {
  }

  class _OracleDateLiteralRender {
    +value
    +value
    +value
    +value
    --
    -_literal_processor_datetime(dialect)
    +process()
    -_literal_processor_date(dialect)
    +process()
  }

  class DATE {
    +literal_processor(dialect)
    -_compare_type_affinity(other)
  }

  class _OracleDate {
    +literal_processor(dialect)
  }

  class INTERVAL {
    -__init__(day_precision, second_precision)
    -{class} _adapt_from_generic_interval(interval)
    +{class} adapt_emulated_to_native(interval)
    -_type_affinity()
    +as_generic(allow_nulltype)
    +python_type()
    +literal_processor(dialect)
    +process(): str
  }

  class TIMESTAMP {
    -__init__(timezone, local_timezone)
  }

  class ROWID {
  }

  class _OracleBoolean {
    +get_dbapi_type(dbapi)
  }

  class OracleDialect_oracledb {
    +supports_statement_cache: bool
    +driver: str
    +kw
    +version
    +m
    +version
    --
    -__init__(auto_convert_lobs, coerce_to_decimal, arraysize, encoding_errors, thick_mode)
    +{class} import_dbapi()
    +{class} is_thin_mode(connection)
    -_load_version(dbapi_module)
  }

  class _OracleInteger {
    +cx_Oracle
    --
    +get_dbapi_type(dbapi)
    -_cx_oracle_var(dialect, cursor, arraysize)
    -_cx_oracle_outputtypehandler(dialect)
    +handler(name, default_type, size, precision, scale)
  }

  class _OracleNumeric {
    +is_number: bool
    +processor
    +cx_Oracle
    +outconverter: NoneType
    +type_: default_type
    +outconverter
    +type_
    +type_
    +type_: default_type
    +outconverter
    +type_
    +type_
    --
    +bind_processor(dialect)
    +process()
    +result_processor(dialect, coltype)
    -_cx_oracle_outputtypehandler(dialect)
    +handler(name, default_type, size, precision, scale)
  }

  class _OracleUUID {
    +get_dbapi_type(dbapi)
  }

  class _OracleBinaryFloat {
    +get_dbapi_type(dbapi)
  }

  class _OracleBINARY_FLOAT {
  }

  class _OracleBINARY_DOUBLE {
  }

  class _OracleNUMBER {
    +is_number: bool
  }

  class _CXOracleDate {
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
    +process()
  }

  class _CXOracleTIMESTAMP {
    +literal_processor(dialect)
  }

  class _LOBDataType {
  }

  class _OracleChar {
    +get_dbapi_type(dbapi)
  }

  class _OracleNChar {
    +get_dbapi_type(dbapi)
  }

  class _OracleUnicodeStringNCHAR {
    +get_dbapi_type(dbapi)
  }

  class _OracleUnicodeStringCHAR {
    +get_dbapi_type(dbapi)
  }

  class _OracleUnicodeTextNCLOB {
    +get_dbapi_type(dbapi)
  }

  class _OracleUnicodeTextCLOB {
    +get_dbapi_type(dbapi)
  }

  class _OracleText {
    +get_dbapi_type(dbapi)
  }

  class _OracleLong {
    +get_dbapi_type(dbapi)
  }

  class _OracleString {
  }

  class _OracleEnum {
    +enum_proc
    +raw_str
    --
    +bind_processor(dialect)
    +process()
  }

  class _OracleBinary {
    +get_dbapi_type(dbapi)
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
  }

  class _OracleInterval {
    +get_dbapi_type(dbapi)
  }

  class _OracleRaw {
  }

  class _OracleRowid {
    +get_dbapi_type(dbapi)
  }

  class OracleCompiler_cx_oracle {
    +bindname_escape_characters
    +quote
    +quoted_name
    +name: quoted_name
    +escaped_from
    +new_name
    +new_name
    +name: new_name
    +new_name
    +name: new_name
    --
    +bindparam_string(name)
  }

  class OracleExecutionContext_cx_oracle {
    +out_parameters: NoneType
    +out_parameters
    +len_params
    +quoted_bind_names
    +name
    +type_impl
    +dbtype
    +cx_Oracle
    +dbtype
    +dbtype
    +output_handlers
    +handler
    +denormalized_name
    +default_handler
    +initial_buffer
    +fetch_strategy
    +c
    +compiled
    +numcols
    --
    -_generate_out_parameter_vars()
    -_generate_cursor_outputtype_handler()
    +output_type_handler(name, default_type, size, precision, scale)
    -_get_cx_oracle_type_handler(impl)
    +pre_exec()
    +post_exec()
    +create_cursor()
    +fetchall_for_returning(cursor)
    +get_out_parameter_values(out_param_names)
  }

  class OracleDialect_cx_oracle {
    +supports_statement_cache: bool
    +execution_ctx_cls: OracleExecutionContext_cx_oracle
    +statement_compiler: OracleCompiler_cx_oracle
    +supports_sane_rowcount: bool
    +supports_sane_multi_rowcount: bool
    +insert_executemany_returning: bool
    +insert_executemany_returning_sort_by_parameter_order: bool
    +update_executemany_returning: bool
    +delete_executemany_returning: bool
    +bind_typing
    +driver: str
    +colspecs
    +execute_sequence_format: list
    +dbapi_module
    +version
    +m
    +version
    +outval
    +trans_id
    +row
    +result
    +dbapi_connection
    +value
    +decimal_char
    +dialect: self
    +cx_Oracle
    +number_handler
    +float_handler
    +output_type_handler
    +opts
    +database
    +service_name
    +port
    +port
    +port: int
    +makedsn_kwargs
    +makedsn_kwargs
    +dsn
    +dsn
    +int_val
    +value
    +id_
    +parameters
    +result
    +oci_prepared
    +collection
    --
    -__init__(auto_convert_lobs, coerce_to_decimal, arraysize, encoding_errors, threaded)
    -_load_version(dbapi_module)
    +{class} import_dbapi()
    +initialize(connection)
    +get_isolation_level(dbapi_connection)
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
    -_detect_decimal_char(connection)
    +output_type_handler(name, defaultType, size, precision, scale)
    -_detect_decimal(value)
    -_generate_connection_outputtype_handler()
    +output_type_handler(name, default_type, size, precision, scale)
    +on_connect()
    +on_connect()
    +create_connect_args(url)
    +convert_cx_oracle_constant()
    -_get_server_version_info(connection)
    +is_disconnect(e, connection, cursor)
    +create_xid()
    +do_executemany(cursor, statement, parameters, context)
    +do_begin_twophase(connection, xid)
    +do_prepare_twophase(connection, xid)
    +do_rollback_twophase(connection, xid, is_prepared, recover)
    +do_commit_twophase(connection, xid, is_prepared, recover)
    +do_set_input_sizes(cursor, list_of_tuples, context)
    +do_recover_twophase(connection)
  }

  class OracleTypeCompiler {
    +precision
    +binary_precision
    +estimated_binary_precision
    +precision: binary_precision
    +scale
    +n: str
    +n: str
    +visit_NVARCHAR: visit_NVARCHAR2
    +varchar: str
    +varchar: str
    --
    +visit_datetime(type_)
    +visit_float(type_)
    +visit_double(type_)
    +visit_unicode(type_)
    +visit_INTERVAL(type_)
    +visit_LONG(type_)
    +visit_TIMESTAMP(type_)
    +visit_DOUBLE_PRECISION(type_)
    +visit_BINARY_DOUBLE(type_)
    +visit_BINARY_FLOAT(type_)
    +visit_FLOAT(type_)
    +visit_NUMBER(type_)
    -_generate_numeric(type_, name, precision, scale, _requires_binary_precision)
    +visit_string(type_)
    +visit_VARCHAR2(type_)
    +visit_NVARCHAR2(type_)
    +visit_VARCHAR(type_)
    -_visit_varchar(type_, n, num)
    +visit_text(type_)
    +visit_unicode_text(type_)
    +visit_large_binary(type_)
    +visit_big_integer(type_)
    +visit_boolean(type_)
    +visit_RAW(type_)
    +visit_ROWID(type_)
  }

  class OracleCompiler {
    +compound_keywords
    +text
    +text
    +text
    +text
    +right
    +right
    +clauses
    +columns
    +binds
    +col_expr
    +col_expr: column
    +outparam
    +select: select_stmt
    +froms
    +whereclause
    +select
    +limit_clause
    +offset_clause
    +limit_clause
    +offset_clause
    +orig_select: select
    +select
    +for_update
    +for_update
    +select
    +inner_subquery
    +limitselect
    +limitselect
    +adapter
    +max_row: limit_clause
    +max_row
    +max_row: limit_clause
    +max_row
    +limitselect
    +select: limitselect
    +limitselect
    +limitselect_cols
    +limitselect
    +limit_subquery
    +origselect_cols
    +offsetselect
    +adapter
    +offsetselect
    +select: offsetselect
    +tmp: str
    +string
    +pattern
    +flags
    +string
    +pattern_replace
    +flags
    --
    -__init__()
    +visit_mod_binary(binary, operator)
    +visit_now_func(fn)
    +visit_char_length_func(fn)
    +visit_match_op_binary(binary, operator)
    +visit_true(expr)
    +visit_false(expr)
    +get_cte_preamble(recursive)
    +get_select_hint_text(byfroms)
    +function_argspec(fn)
    +visit_function(func)
    +visit_table_valued_column(element)
    +default_from()
    +visit_join(join, from_linter)
    -_get_nonansi_join_whereclause(froms)
    +visit_join()
    +visit_binary()
    +visit_outer_join_column(vc)
    +visit_sequence(seq)
    +get_render_as_alias_suffix(alias_name_text)
    +returning_clause(stmt, returning_cols)
    -_row_limit_clause(select)
    -_get_limit_or_fetch(select)
    +translate_select_structure(select_stmt)
    +limit_clause(select)
    +visit_empty_set_expr(type_)
    +for_update_clause(select)
    +visit_is_distinct_from_binary(binary, operator)
    +visit_is_not_distinct_from_binary(binary, operator)
    +visit_regexp_match_op_binary(binary, operator)
    +visit_not_regexp_match_op_binary(binary, operator)
    +visit_regexp_replace_op_binary(binary, operator)
    +visit_aggregate_strings_func(fn)
  }

  class OracleDDLCompiler {
    +text: str
    +index
    +preparer
    +text: str
    +table_opts
    +opts
    +on_commit_options
    +text
    +text
    +text
    +text
    +text
    +kind: str
    +kind
    +text
    +options
    --
    +define_constraint_cascades(constraint)
    +visit_drop_table_comment(drop)
    +visit_create_index(create)
    +post_create_table(table)
    +get_identity_options(identity_options)
    +visit_computed_column(generated)
    +visit_identity_column(identity)
  }

  class OracleIdentifierPreparer {
    +reserved_words
    +illegal_initial_characters
    +lc_value
    +name
    --
    -_bindparam_requires_quotes(value)
    +format_savepoint(savepoint)
  }

  class OracleExecutionContext {
    +fire_sequence(seq, type_)
    +pre_exec()
  }

  class OracleDialect {
    +name: str
    +supports_statement_cache: bool
    +supports_alter: bool
    +max_identifier_length: int
    +insert_returning: bool
    +update_returning: bool
    +delete_returning: bool
    +div_is_floordiv: bool
    +supports_simple_order_by_label: bool
    +cte_follows_insert: bool
    +returns_native_bytes: bool
    +supports_sequences: bool
    +sequences_optional: bool
    +postfetch_lastrowid: bool
    +default_paramstyle: str
    +colspecs: colspecs
    +ischema_names: ischema_names
    +requires_name_normalize: bool
    +supports_comments: bool
    +supports_default_values: bool
    +supports_default_metavalue: bool
    +supports_empty_insert: bool
    +supports_identity_columns: bool
    +statement_compiler: OracleCompiler
    +ddl_compiler: OracleDDLCompiler
    +type_compiler_cls: OracleTypeCompiler
    +preparer: OracleIdentifierPreparer
    +execution_ctx_cls: OracleExecutionContext
    +reflection_options
    +construct_arguments
    +compat
    +compat: NoneType
    +dblink
    +execution_options
    +query
    +tables
    +query
    +schema
    +params
    +cursor
    +schema
    +query
    +cursor
    +force
    +owner
    +query
    +query
    +result
    +query
    +query
    +object_type
    +query
    +query
    +query
    +query
    +query
    +owner
    +has_mat_views: bool
    +mat_views
    +has_mat_views: bool
    +query
    +result
    +original_kw
    +schema
    +result
    +dblinks_owners
    +key
    +tn
    +data
    +call_kw
    +call_result
    +synonym_name
    +query
    +result
    +schema
    +den_schema
    +tables
    +tables
    +query
    +query
    +query
    +mat_query
    +query
    +result
    +schema
    +query
    +query
    +query
    +result
    +schema
    +query
    +result
    +schema
    +query
    +result
    +schema
    +query
    +result
    +table
    +fn
    +data
    +query
    +query
    +query
    +query
    +query
    +query
    +owner
    +has_mat_views: bool
    +mat_views
    +has_mat_views: bool
    +mat_views
    +options
    +default
    +query
    +result
    +data
    +data
    +data
    +each_batch: int
    +batches
    +batch
    +result
    +all_cols
    +all_comments
    +all_ids
    +add_cols
    +join_identity_cols: bool
    +add_cols
    +join_identity_cols: bool
    +query
    +query
    +query
    +owner
    +query
    +all_objects
    +all_objects
    +columns
    +result
    +remove_size
    +table_name
    +orig_colname
    +colname
    +coltype
    +precision
    +scale
    +coltype
    +coltype
    +coltype
    +coltype
    +coltype
    +char_length
    +coltype
    +coltype
    +coltype
    +coltype
    +coltype
    +coltype
    +default
    +computed
    +default: NoneType
    +computed: NoneType
    +identity_options
    +identity
    +default: NoneType
    +identity: NoneType
    +cdict
    +parts
    +identity
    +value
    +data
    +queries
    +tbl_view
    +tbl_view
    +tbl_view
    +mat_view
    +query
    +union
    +query
    +name_col
    +temp
    +query
    +query
    +owner
    +query
    +result
    +default
    +ignore_mat_view: str
    +data
    +owner
    +query
    +pks
    +result
    +all_objects
    +uniqueness
    +enabled
    +is_bitmap
    +indexes
    +index_name
    +table_name
    +table_indexes
    +index_dict
    +do
    +index_dict
    +expr
    +cs
    +cn
    +default
    +data
    +local
    +remote
    +owner
    +query
    +values
    +all_objects
    +primary_keys
    +default
    +table_name
    +constraint_name
    +column_name
    +table_pk
    +data
    +all_objects
    +resolve_synonyms
    +owner
    +all_remote_owners
    +fkeys
    +table_name
    +constraint_name
    +table_fkey
    +local_column
    +remote_table
    +remote_column
    +remote_owner_orig
    +remote_owner
    +dblink
    +fkey
    +delete_rule
    +fkey
    +query
    +result
    +remote_owners_lut
    +synonym_owner
    +table_name
    +empty
    +key
    +sn
    +ro
    +default
    +data
    +all_objects
    +unique_cons
    +index_names
    +table_name
    +constraint_name_orig
    +constraint_name
    +column_name
    +table_uc
    +uc
    +uc
    +default
    +synonyms
    +row_dict
    +dblink
    +schema
    +view_name
    +name
    +owner
    +query
    +rp
    +data
    +all_objects
    +not_null
    +check_constraints
    +table_name
    +constraint_name
    +search_condition
    +table_checks
    +default
    +query
    +links
    --
    -__init__(use_ansi, optimize_limits, use_binds_for_limits, use_nchar_for_unicode, exclude_tablespaces, enable_offset_fetch)
    +initialize(connection)
    -_get_effective_compat_server_version_info(connection)
    -_is_oracle_8()
    -_supports_table_compression()
    -_supports_table_compress_for()
    -_supports_char_length()
    -_supports_update_returning_computed_cols()
    -_supports_except_all()
    +do_release_savepoint(connection, name)
    -_check_max_identifier_length(connection)
    +get_isolation_level_values(dbapi_connection)
    +get_default_isolation_level(dbapi_conn)
    -_execute_reflection(connection, query, dblink, returns_long, params)
    +visit_bindparam()
    -_has_table_query()
    +has_table(connection, table_name, schema, dblink)
    +has_sequence(connection, sequence_name, schema, dblink)
    -_get_default_schema_name(connection)
    +denormalize_schema_name(name)
    -_get_synonyms(connection, schema, filter_names, dblink)
    -_all_objects_query(owner, scope, kind, has_filter_names, has_mat_views)
    -_get_all_objects(connection, schema, scope, kind, filter_names, dblink)
    -_handle_synonyms_decorator()
    +wrapper()
    -_handle_synonyms(fn, connection)
    +get_schema_names(connection, dblink)
    +get_table_names(connection, schema, dblink)
    +get_temp_table_names(connection, dblink)
    +get_materialized_view_names(connection, schema, dblink, _normalize)
    +get_view_names(connection, schema, dblink)
    +get_sequence_names(connection, schema, dblink)
    -_value_or_raise(data, table, schema)
    -_prepare_filter_names(filter_names)
    +get_table_options(connection, table_name, schema)
    -_table_options_query(owner, scope, kind, has_filter_names, has_mat_views)
    +get_multi_table_options(connection)
    +get_columns(connection, table_name, schema)
    -_run_batches(connection, query, dblink, returns_long, mappings, all_objects)
    -_column_query(owner)
    +get_multi_columns(connection)
    +maybe_int()
    -_parse_identity_options(identity_options, default_on_null)
    +get_table_comment(connection, table_name, schema)
    -_comment_query(owner, scope, kind, has_filter_names)
    +get_multi_table_comment(connection)
    +get_indexes(connection, table_name, schema)
    -_index_query(owner)
    -_get_indexes_rows(connection, schema, dblink, all_objects)
    +get_multi_indexes(connection)
    +get_pk_constraint(connection, table_name, schema)
    -_constraint_query(owner)
    -_get_all_constraint_rows(connection, schema, dblink, all_objects)
    +get_multi_pk_constraint(connection)
    +get_foreign_keys(connection, table_name, schema)
    +get_multi_foreign_keys(connection)
    +get_unique_constraints(connection, table_name, schema)
    +get_multi_unique_constraints(connection)
    +get_view_definition(connection, view_name, schema, dblink)
    +get_check_constraints(connection, table_name, schema, include_all)
    +get_multi_check_constraints(connection)
    -_list_dblinks(connection, dblink)
  }

  class _OuterJoinColumn {
    -__init__(column)
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.dialects.sqlite" {
  class AsyncAdapt_aiosqlite_cursor {
    +server_side: bool
    +size
    +retval
    +retval
    --
    -__init__(adapt_connection)
    +close()
    +execute(operation, parameters)
    +executemany(operation, seq_of_parameters)
    +setinputsizes()
    -__iter__()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_aiosqlite_ss_cursor {
    +server_side: bool
    +size
    --
    -__init__()
    +close()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_aiosqlite_connection {
    +await_
    +function
    +future
    --
    -__init__(dbapi, connection)
    +isolation_level()
    +isolation_level(value)
    +set_iso(value)
    +create_function()
    +cursor(server_side)
    +execute()
    +rollback()
    +commit()
    +close()
    -_handle_exception(error)
  }

  class AsyncAdaptFallback_aiosqlite_connection {
    +await_
  }

  class AsyncAdapt_aiosqlite_dbapi {
    +async_fallback
    +creator_fn
    +connection
    +connection
    --
    -__init__(aiosqlite, sqlite)
    -_init_dbapi_attributes()
    +connect()
  }

  class SQLiteExecutionContext_aiosqlite {
    +create_server_side_cursor()
  }

  class SQLiteDialect_aiosqlite {
    +driver: str
    +supports_statement_cache: bool
    +is_async: bool
    +supports_server_side_cursors: bool
    +execution_ctx_cls: SQLiteExecutionContext_aiosqlite
    --
    +{class} import_dbapi()
    +{class} get_pool_class(url)
    +is_disconnect(e, connection, cursor)
    +get_driver_connection(connection)
  }

  class SQLiteDialect_pysqlcipher {
    +driver: str
    +supports_statement_cache: bool
    +pragmas
    +super_on_connect
    +passphrase
    +url_query
    +cursor
    +value
    +plain_url
    +plain_url
    --
    +{class} import_dbapi()
    +{class} get_pool_class(url)
    +on_connect_url(url)
    +on_connect()
    +create_connect_args(url)
  }

  class Insert {
    +stringify_dialect: str
    +inherit_cache: bool
    --
    +excluded()
    +on_conflict_do_update(index_elements, index_where, set_, where): Self
    +on_conflict_do_nothing(index_elements, index_where): Self
  }

  class OnConflictClause {
    +stringify_dialect: str
    +constraint_target
    +inferred_target_elements: _OnConflictIndexElementsT
    +inferred_target_whereclause: _OnConflictIndexWhereT
    --
    -__init__(index_elements, index_where)
  }

  class OnConflictDoNothing {
  }

  class OnConflictDoUpdate {
    +set_
    --
    -__init__(index_elements, index_where, set_, where)
  }

  class JSON {
  }

  class _FormatTypeMixin {
    +super_proc
    +value
    +value
    +super_proc
    +value
    +value
    --
    -_format_value(value)
    +bind_processor(dialect)
    +process()
    +literal_processor(dialect)
    +process()
  }

  class JSONIndexType {
    +value
    +value
    --
    -_format_value(value)
  }

  class JSONPathType {
    -_format_value(value)
  }

  class _SQliteJson {
    +default_processor
    --
    +result_processor(dialect, coltype)
    +process()
  }

  class _DateTimeMixin {
    +spec
    +bp
    --
    -__init__(storage_format, regexp)
    +format_is_text_affinity()
    +adapt(cls)
    +literal_processor(dialect)
    +process()
  }

  class DATETIME {
    +truncate_microseconds
    +datetime_datetime
    +datetime_date
    +format_
    --
    -__init__()
    +bind_processor(dialect)
    +process()
    +result_processor(dialect, coltype)
  }

  class DATE {
    +datetime_date
    +format_
    --
    +bind_processor(dialect)
    +process()
    +result_processor(dialect, coltype)
  }

  class TIME {
    +truncate_microseconds
    +datetime_time
    +format_
    --
    -__init__()
    +bind_processor(dialect)
    +process()
    +result_processor(dialect, coltype)
  }

  class SQLiteCompiler {
    +extract_map
    +text: str
    +expr: str
    +expr: str
    +expr: str
    +expr: str
    +target_text
    +target_text
    +target_text: str
    +target_text
    +clause: on_conflict
    +target_text
    +action_set_ops
    +set_parameters
    +insert_statement
    +cols
    +col_key
    +value
    +value
    +value
    +value
    +value_text
    +key_text
    +key_text
    +value_text
    +action_text
    --
    +visit_truediv_binary(binary, operator)
    +visit_now_func(fn)
    +visit_localtimestamp_func(func)
    +visit_true(expr)
    +visit_false(expr)
    +visit_char_length_func(fn)
    +visit_aggregate_strings_func(fn)
    +visit_cast(cast)
    +visit_extract(extract)
    +returning_clause(stmt, returning_cols)
    +limit_clause(select)
    +for_update_clause(select)
    +update_from_clause(update_stmt, from_table, extra_froms, from_hints)
    +visit_is_distinct_from_binary(binary, operator)
    +visit_is_not_distinct_from_binary(binary, operator)
    +visit_json_getitem_op_binary(binary, operator)
    +visit_json_path_getitem_op_binary(binary, operator)
    +visit_empty_set_op_expr(type_, expand_op)
    +visit_empty_set_expr(element_types)
    +visit_regexp_match_op_binary(binary, operator)
    +visit_not_regexp_match_op_binary(binary, operator)
    -_on_conflict_target(clause)
    +visit_on_conflict_do_nothing(on_conflict)
    +visit_on_conflict_do_update(on_conflict)
  }

  class SQLiteDDLCompiler {
    +coltype
    +colspec
    +default
    +default
    +on_conflict_clause
    +on_conflict_clause
    +c
    +text
    +on_conflict_clause
    +on_conflict_clause
    +text
    +on_conflict_clause
    +col1
    +on_conflict_clause
    +text
    +on_conflict_clause
    +text
    +local_table
    +remote_table
    +index
    +preparer
    +text: str
    +whereclause
    +where_compiled
    --
    +get_column_specification(column)
    +visit_primary_key_constraint(constraint)
    +visit_unique_constraint(constraint)
    +visit_check_constraint(constraint)
    +visit_column_check_constraint(constraint)
    +visit_foreign_key_constraint(constraint)
    +define_constraint_remote_table(constraint, table, preparer)
    +visit_create_index(create, include_schema, include_table_schema)
    +post_create_table(table)
  }

  class SQLiteTypeCompiler {
    +visit_large_binary(type_)
    +visit_DATETIME(type_)
    +visit_DATE(type_)
    +visit_TIME(type_)
    +visit_JSON(type_)
  }

  class SQLiteIdentifierPreparer {
    +reserved_words
  }

  class SQLiteExecutionContext {
    -_preserve_raw_colnames()
    -_translate_colname(colname)
  }

  class SQLiteDialect {
    +name: str
    +supports_alter: bool
    +supports_default_values: bool
    +supports_default_metavalue: bool
    +supports_sane_rowcount_returning: bool
    +supports_empty_insert: bool
    +supports_cast: bool
    +supports_multivalues_insert: bool
    +use_insertmanyvalues: bool
    +tuple_in_values: bool
    +supports_statement_cache: bool
    +insert_null_pk_still_autoincrements: bool
    +insert_returning: bool
    +update_returning: bool
    +update_returning_multifrom: bool
    +delete_returning: bool
    +update_returning_multifrom: bool
    +supports_default_metavalue: bool
    +default_metavalue_token: str
    +default_paramstyle: str
    +execution_ctx_cls: SQLiteExecutionContext
    +statement_compiler: SQLiteCompiler
    +ddl_compiler: SQLiteDDLCompiler
    +type_compiler_cls: SQLiteTypeCompiler
    +preparer: SQLiteIdentifierPreparer
    +ischema_names: ischema_names
    +colspecs: colspecs
    +construct_arguments
    +json_serializer: _json_serializer
    +json_deserializer: _json_deserializer
    +isolation_level
    +cursor
    +cursor
    +res
    +value
    +value: int
    +s: str
    +dl
    +qschema
    +name
    +name: table_name
    +main
    +filter_table: str
    +filter_table: str
    +query
    +query
    +names
    +query
    +names
    +query
    +names
    +info
    +query
    +names
    +qschema
    +master
    +s
    +rs
    +s: str
    +rs
    +s: str
    +rs
    +result
    +pragma: str
    +pragma: str
    +info
    +columns
    +tablesql: NoneType
    +name
    +type_
    +nullable
    +default
    +primary_key
    +hidden
    +generated
    +persisted
    +tablesql
    +type_
    +type_
    +coltype
    +default
    +colspec
    +sqltext: str
    +pattern: str
    +match
    +sqltext
    +match
    +coltype
    +args
    +coltype: str
    +args: str
    +coltype
    +coltype
    +coltype
    +coltype
    +coltype
    +coltype
    +args
    +coltype
    +coltype
    +coltype
    +constraint_name: NoneType
    +table_data
    +PK_PATTERN: str
    +result
    +constraint_name
    +cols
    +cols
    +pkeys
    +pragma_fks
    +fks
    +referred_pk
    +referred_columns
    +referred_columns
    +referred_columns
    +rtbl
    +fk
    +fk
    +keys_by_signature
    +table_data
    +FK_PATTERN: str
    +constrained_columns
    +referred_columns: constrained_columns
    +referred_columns
    +referred_name
    +options
    +ondelete
    +onupdate
    +fkeys
    +sig
    +key
    +auto_index_by_sig
    +sig
    +table_data
    +unique_constraints
    +UNIQUE_PATTERN: str
    +INLINE_UNIQUE_PATTERN: str
    +cols
    +sig
    +parsed_constraint
    +table_data
    +CHECK_PATTERN: str
    +cks
    +name
    +name
    +pragma_indexes
    +indexes
    +partial_pred_re
    +schema_expr
    +schema_expr: str
    +include_auto_indexes
    +s
    +rs
    +index_sql
    +predicate_match
    +predicate
    +pragma_index
    +schema_expr
    +schema_expr: str
    +s
    +rs
    +s
    +rs
    +value
    +quote
    +statements
    +statements
    +qtable
    +statement
    +cursor
    +result
    +result
    --
    -__init__(native_datetime, json_serializer, json_deserializer, _json_serializer, _json_deserializer)
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
    +get_isolation_level(dbapi_connection)
    +get_schema_names(connection)
    -_format_schema(schema, table_name)
    -_sqlite_main_query(table, type_, schema, sqlite_include_internal)
    +get_table_names(connection, schema, sqlite_include_internal)
    +get_temp_table_names(connection, sqlite_include_internal)
    +get_temp_view_names(connection, sqlite_include_internal)
    +has_table(connection, table_name, schema)
    -_get_default_schema_name(connection)
    +get_view_names(connection, schema, sqlite_include_internal)
    +get_view_definition(connection, view_name, schema)
    +get_columns(connection, table_name, schema)
    -_get_column_info(name, type_, nullable, default, primary_key, generated, persisted, tablesql)
    -_resolve_type_affinity(type_)
    +get_pk_constraint(connection, table_name, schema)
    +get_foreign_keys(connection, table_name, schema)
    +fk_sig(referred_table, referred_columns)
    +parse_fks()
    -_find_cols_in_sig(sig)
    +get_unique_constraints(connection, table_name, schema)
    +parse_uqs()
    +get_check_constraints(connection, table_name, schema)
    +get_indexes(connection, table_name, schema)
    -_is_sys_table(table_name)
    -_get_table_sql(connection, table_name, schema)
    -_get_table_pragma(connection, pragma, table_name, schema)
  }

  class _SQLite_pysqliteTimeStamp {
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
  }

  class _SQLite_pysqliteDate {
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
  }

  class SQLiteDialect_pysqlite {
    +default_paramstyle: str
    +supports_statement_cache: bool
    +returns_native_bytes: bool
    +colspecs
    +description_encoding: NoneType
    +driver: str
    +create_func_kw
    +create_func_kw
    +fns
    +pysqlite_args
    +opts
    +pysqlite_opts
    +uri_opts
    +filename
    +filename
    +filename
    --
    +{class} import_dbapi()
    -{class} _is_url_file_db(url)
    +{class} get_pool_class(url)
    -_get_server_version_info(connection)
    +set_isolation_level(dbapi_connection, level)
    +on_connect()
    +regexp(b)
    +set_regexp()
    +floor_func()
    +connect()
    +create_connect_args(url)
    +is_disconnect(e, connection, cursor)
  }

  class _SQLiteDialect_pysqlite_numeric {
    +supports_statement_cache: bool
    +default_paramstyle: str
    +driver: str
    +first_bind
    +nis
    +m
    --
    -__init__()
    +create_connect_args(url)
    -_fix_sqlite_issue_99953()
    -_test_sql()
    -_test_sql()
    -_numeric_param_as_dict()
  }

  class SQLiteFix99953Cursor {
    +parameters
    +parameters
    --
    +execute(sql, parameters)
    +executemany(sql, parameters)
  }

  class SQLiteFix99953Connection {
    +factory: SQLiteFix99953Cursor
    +parameters
    +parameters
    --
    +cursor(factory)
    +execute(sql, parameters)
    +executemany(sql, parameters)
  }

  class _SQLiteDialect_pysqlite_dollar {
    +supports_statement_cache: bool
    +default_paramstyle: str
    +driver: str
    --
    -__init__()
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.dialects.mysql" {
  class ENUM {
    +native_enum: bool
    --
    -__init__()
    +{class} adapt_emulated_to_native(impl)
    -_object_value_for_elem(elem)
    -__repr__()
  }

  class SET {
    +length
    +value
    +super_convert
    +value
    +super_convert
    +int_value: int
    +value
    --
    -__init__()
    +column_expression(colexpr)
    +result_processor(dialect, coltype)
    +process()
    +process()
    +bind_processor(dialect)
    +process()
    +process()
    +adapt(impltype)
    -__repr__()
  }

  class MySQLCompiler_mysqlconnector {
    +visit_mod_binary(binary, operator)
  }

  class MySQLIdentifierPreparer_mysqlconnector {
    +value
    --
    -_double_percents()
    -_double_percents(value)
    -_escape_identifier(value)
  }

  class _myconnpyBIT {
    +result_processor(dialect, coltype)
  }

  class MySQLDialect_mysqlconnector {
    +driver: str
    +supports_statement_cache: bool
    +supports_sane_rowcount: bool
    +supports_sane_multi_rowcount: bool
    +supports_native_decimal: bool
    +default_paramstyle: str
    +statement_compiler: MySQLCompiler_mysqlconnector
    +preparer: MySQLIdentifierPreparer_mysqlconnector
    +colspecs
    +opts
    +client_flags
    +m
    +errnos
    +exceptions
    --
    +{class} import_dbapi()
    +do_ping(dbapi_connection)
    +create_connect_args(url)
    -_mysqlconnector_version_info()
    -_detect_charset(connection)
    -_extract_error_code(exception)
    +is_disconnect(e, connection, cursor)
    -_compat_fetchall(rp, charset)
    -_compat_fetchone(rp, charset)
    -_set_isolation_level(connection, level)
  }

  class AsyncAdapt_asyncmy_cursor {
    +server_side: bool
    +cursor
    +result
    +result
    +size
    +retval
    +retval
    --
    -__init__(adapt_connection)
    +description()
    +rowcount()
    +arraysize()
    +arraysize(value)
    +lastrowid()
    +close()
    +execute(operation, parameters)
    +executemany(operation, seq_of_parameters)
    +setinputsizes()
    -__iter__()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_asyncmy_ss_cursor {
    +server_side: bool
    +cursor
    --
    -__init__(adapt_connection)
    +close()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_asyncmy_connection {
    +await_
    --
    -__init__(dbapi, connection)
    +ping(reconnect)
    +character_set_name()
    +autocommit(value)
    +cursor(server_side)
    +rollback()
    +commit()
    +close()
  }

  class AsyncAdaptFallback_asyncmy_connection {
    +await_
  }

  class AsyncAdapt_asyncmy_dbapi {
    +STRING
    +NUMBER
    +BINARY
    +DATETIME
    +TIMESTAMP
    +Binary
    +async_fallback
    +creator_fn
    --
    -__init__(asyncmy)
    -_init_dbapi_attributes()
    +connect()
  }

  class MySQLDialect_asyncmy {
    +driver: str
    +supports_statement_cache: bool
    +supports_server_side_cursors: bool
    +is_async: bool
    +async_fallback
    +str_e
    --
    +{class} import_dbapi()
    +{class} get_pool_class(url)
    +create_connect_args(url)
    +is_disconnect(e, connection, cursor)
    -_found_rows_client_flag()
    +get_driver_connection(connection)
  }

  class AsyncAdapt_aiomysql_cursor {
    +server_side: bool
    +cursor
    +result
    +size
    +retval
    +retval
    --
    -__init__(adapt_connection)
    +description()
    +rowcount()
    +arraysize()
    +arraysize(value)
    +lastrowid()
    +close()
    +execute(operation, parameters)
    +executemany(operation, seq_of_parameters)
    +setinputsizes()
    -__iter__()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_aiomysql_ss_cursor {
    +server_side: bool
    +cursor
    --
    -__init__(adapt_connection)
    +close()
    +fetchone()
    +fetchmany(size)
    +fetchall()
  }

  class AsyncAdapt_aiomysql_connection {
    +await_
    --
    -__init__(dbapi, connection)
    +ping(reconnect)
    +character_set_name()
    +autocommit(value)
    +cursor(server_side)
    +rollback()
    +commit()
    +close()
  }

  class AsyncAdaptFallback_aiomysql_connection {
    +await_
  }

  class AsyncAdapt_aiomysql_dbapi {
    +async_fallback
    +creator_fn
    --
    -__init__(aiomysql, pymysql)
    -_init_dbapi_attributes()
    +connect()
    -_init_cursors_subclasses()
  }

  class Cursor {
  }

  class SSCursor {
  }

  class MySQLDialect_aiomysql {
    +driver: str
    +supports_statement_cache: bool
    +supports_server_side_cursors: bool
    +is_async: bool
    +async_fallback
    +str_e
    --
    +{class} import_dbapi()
    +{class} get_pool_class(url)
    +create_connect_args(url)
    +is_disconnect(e, connection, cursor)
    -_found_rows_client_flag()
    +get_driver_connection(connection)
  }

  class ReflectedState {
    -__init__()
  }

  class MySQLTableDefinitionParser {
    +state
    +m
    +spec
    +m2
    +m
    +spec
    +m
    +spec
    +m
    +m
    +options
    +rest_of_line: line
    +m
    +value
    +rest_of_line
    +options
    +new_line
    +new_line
    +m
    +directive
    +directive
    +is_subpartition
    +new_line
    +new_line
    +new_line
    +new_line
    +defs
    +directive
    +value
    +value
    +part_def
    +subpart_def
    +spec: NoneType
    +m
    +spec
    +m
    +spec
    +col_type
    +col_type
    +type_args
    +type_args
    +type_args
    +type_kw
    +type_args
    +type_instance
    +col_kw
    +default
    +default: NoneType
    +comment
    +comment
    +sqltext
    +computed
    +persisted
    +col_d
    +buffer
    +line
    +quotes
    +kw
    +regex
    +regex
    +regex
    +regex
    +regex
    +regex
    --
    -__init__(dialect, preparer)
    +parse(show_create, charset)
    -_check_view(sql): bool
    -_parse_constraints(line)
    -_parse_table_name(line, state)
    -_parse_table_options(line, state)
    -_parse_partition_options(line, state)
    -_parse_column(line, state)
    -_describe_to_create(table_name, columns)
    -_parse_keyexprs(identifiers)
    -_prep_regexes()
    -_add_option_string(directive)
    -_add_option_word(directive)
    -_add_partition_option_word(directive)
    -_add_option_regex(directive, regex)
  }

  class _MariaDBUUID {
    +value
    +value
    +value
    +value
    --
    +result_processor(dialect, coltype)
    +process()
    +process()
  }

  class MySQLExecutionContext_mariadbconnector {
    +create_server_side_cursor()
    +create_default_cursor()
    +post_exec()
    +rowcount()
    +get_lastrowid()
  }

  class MySQLCompiler_mariadbconnector {
  }

  class MySQLDialect_mariadbconnector {
    +driver: str
    +supports_statement_cache: bool
    +supports_unicode_statements: bool
    +encoding: str
    +convert_unicode: bool
    +supports_sane_rowcount: bool
    +supports_sane_multi_rowcount: bool
    +supports_native_decimal: bool
    +default_paramstyle: str
    +execution_ctx_cls: MySQLExecutionContext_mariadbconnector
    +statement_compiler: MySQLCompiler_mariadbconnector
    +supports_server_side_cursors: bool
    +colspecs
    +str_e
    +opts
    +int_params
    +bool_params
    +client_flag
    +CLIENT_FLAGS
    +rc
    +rc
    --
    -_dbapi_version()
    -__init__()
    +{class} import_dbapi()
    +is_disconnect(e, connection, cursor)
    +create_connect_args(url)
    -_extract_error_code(exception)
    -_detect_charset(connection)
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(connection, level)
    +do_begin_twophase(connection, xid)
    +do_prepare_twophase(connection, xid)
    +do_rollback_twophase(connection, xid, is_prepared, recover)
    +do_commit_twophase(connection, xid, is_prepared, recover)
  }

  class _NumericType {
    -__init__(unsigned, zerofill)
    -__repr__()
  }

  class _FloatType {
    -__init__(precision, scale, asdecimal)
    -__repr__()
  }

  class _IntegerType {
    -__init__(display_width)
    -__repr__()
  }

  class _StringType {
    -__init__(charset, collation, ascii, binary, unicode, national)
    -__repr__()
  }

  class _MatchType {
    -__init__()
  }

  class NUMERIC {
    -__init__(precision, scale, asdecimal)
  }

  class DECIMAL {
    -__init__(precision, scale, asdecimal)
  }

  class DOUBLE {
    -__init__(precision, scale, asdecimal)
  }

  class REAL {
    -__init__(precision, scale, asdecimal)
  }

  class FLOAT {
    -__init__(precision, scale, asdecimal)
    +bind_processor(dialect)
  }

  class INTEGER {
    -__init__(display_width)
  }

  class BIGINT {
    -__init__(display_width)
  }

  class MEDIUMINT {
    -__init__(display_width)
  }

  class TINYINT {
    -__init__(display_width)
  }

  class SMALLINT {
    -__init__(display_width)
  }

  class BIT {
    +v: int
    +i
    +v
    --
    -__init__(length)
    +result_processor(dialect, coltype)
    +process()
  }

  class TIME {
    +time
    +microseconds
    +seconds
    +minutes
    --
    -__init__(timezone, fsp)
    +result_processor(dialect, coltype)
    +process()
  }

  class TIMESTAMP {
    -__init__(timezone, fsp)
  }

  class DATETIME {
    -__init__(timezone, fsp)
  }

  class YEAR {
    -__init__(display_width)
  }

  class TEXT {
    -__init__(length)
  }

  class TINYTEXT {
    -__init__()
  }

  class MEDIUMTEXT {
    -__init__()
  }

  class LONGTEXT {
    -__init__()
  }

  class VARCHAR {
    -__init__(length)
  }

  class CHAR {
    +type_
    --
    -__init__(length)
    -{class} _adapt_string_for_cast(type_)
  }

  class NVARCHAR {
    -__init__(length)
  }

  class NCHAR {
    -__init__(length)
  }

  class TINYBLOB {
  }

  class MEDIUMBLOB {
  }

  class LONGBLOB {
  }

  class MariaDBDialect {
    +is_mariadb: bool
    +supports_statement_cache: bool
    +name: str
    +preparer: MariaDBIdentifierPreparer
  }

  class MySQLExecutionContext_mysqldb {
    +rowcount()
  }

  class MySQLCompiler_mysqldb {
  }

  class MySQLDialect_mysqldb {
    +driver: str
    +supports_statement_cache: bool
    +supports_unicode_statements: bool
    +supports_sane_rowcount: bool
    +supports_sane_multi_rowcount: bool
    +supports_native_decimal: bool
    +default_paramstyle: str
    +execution_ctx_cls: MySQLExecutionContext_mysqldb
    +statement_compiler: MySQLCompiler_mysqldb
    +preparer: MySQLIdentifierPreparer
    +m
    +cursors
    +super_
    +charset_name
    +cursor
    +rowcount
    +collation
    +has_utf8mb4_bin
    +additional_tests
    +additional_tests
    +opts
    +ssl
    +keys
    +client_flag
    +client_flag_found_rows
    +CLIENT_FLAGS
    +cset_name
    --
    -__init__()
    -_parse_dbapi_version(version)
    +supports_server_side_cursors()
    +{class} import_dbapi()
    +on_connect()
    +on_connect()
    +do_ping(dbapi_connection)
    +do_executemany(cursor, statement, parameters, context)
    -_check_unicode_returns(connection)
    +create_connect_args(url, _translate_args)
    -_found_rows_client_flag()
    -_extract_error_code(exception)
    -_detect_charset(connection)
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
  }

  class MySQLDialect_pymysql {
    +driver: str
    +supports_statement_cache: bool
    +description_encoding: NoneType
    +cursors
    +Connection
    +insp
    +reconnect_arg
    +str_e
    +exception
    --
    +supports_server_side_cursors()
    +{class} import_dbapi()
    -_send_false_to_ping()
    +do_ping(dbapi_connection)
    +create_connect_args(url, _translate_args)
    +is_disconnect(e, connection, cursor)
    -_extract_error_code(exception)
  }

  class Insert {
    +stringify_dialect: str
    +inherit_cache: bool
    +values
    +values: kw
    --
    +inserted()
    +inserted_alias(): NamedFromClause
    +on_duplicate_key_update(): Self
  }

  class OnDuplicateClause {
    -_parameter_ordering
    +stringify_dialect: str
    +update
    +update
    --
    -__init__(inserted_alias, update)
  }

  class match {
    +inherit_cache: bool
    +against
    +against
    +left
    +flags
    --
    -__init__()
    +in_boolean_mode(): Self
    +in_natural_language_mode(): Self
    +with_query_expansion(): Self
  }

  class JSON {
  }

  class _FormatTypeMixin {
    +super_proc
    +value
    +value
    +super_proc
    +value
    +value
    --
    -_format_value(value)
    +bind_processor(dialect)
    +process()
    +literal_processor(dialect)
    +process()
  }

  class JSONIndexType {
    +value
    +value
    --
    -_format_value(value)
  }

  class JSONPathType {
    -_format_value(value)
  }

  class _pyodbcTIME {
    +result_processor(dialect, coltype)
    +process()
  }

  class MySQLExecutionContext_pyodbc {
    +cursor
    +lastrowid
    --
    +get_lastrowid()
  }

  class MySQLDialect_pyodbc {
    +supports_statement_cache: bool
    +colspecs
    +supports_unicode_statements: bool
    +execution_ctx_cls: MySQLExecutionContext_pyodbc
    +pyodbc_driver_name: str
    +value
    +m
    +c
    +super_
    +pyodbc_SQL_CHAR: int
    +pyodbc_SQL_WCHAR
    --
    -_detect_charset(connection)
    -_get_server_version_info(connection)
    -_extract_error_code(exception)
    +on_connect()
    +on_connect()
  }

  class MySQLExecutionContext {
    +post_exec()
    +create_server_side_cursor()
    +fire_sequence(seq, type_)
  }

  class MySQLCompiler {
    +render_table_with_column_in_update_from: bool
    +extract_map
    +stmt
    +clause
    +case_expression
    +type_expression
    +type_expression
    +type_expression
    +type_expression: str
    +type_expression
    +type_expression
    +statement
    +parameter_ordering
    +ordered_keys
    +cols
    +cols
    +clauses
    +requires_mysql8_alias
    +val
    +val
    +value_text
    +obj
    +column_literal_clause
    +column_literal_clause
    +val
    +value_text
    +name_text
    +non_matching
    +modifiers
    +boolean_mode
    +natural_language
    +query_expansion
    +flag_combination
    +flags
    +flags
    +match_clause
    +match_clause
    +against_clause
    +flag_expressions
    +against_clause
    +against_clause
    +type_
    +adapted
    +type_
    +value
    +value
    +join_type: str
    +join_type: str
    +join_type: str
    +tmp: str
    +tmp: str
    +tables
    +limit
    +ashint: bool
    +ashint: bool
    +flags
    +text
    +flags
    --
    +default_from()
    +visit_random_func(fn)
    +visit_rollup_func(fn)
    +visit_aggregate_strings_func(fn)
    +visit_sequence(seq)
    +visit_sysdate_func(fn)
    -_render_json_extract_from_binary(binary, operator)
    +visit_json_getitem_op_binary(binary, operator)
    +visit_json_path_getitem_op_binary(binary, operator)
    +visit_on_duplicate_key_update(on_duplicate)
    +replace()
    +visit_concat_op_expression_clauselist(clauselist, operator)
    +visit_concat_op_binary(binary, operator)
    +visit_mysql_match(element)
    +visit_match_op_binary(binary, operator)
    +get_from_hint_text(table, text)
    +visit_typeclause(typeclause, type_)
    +visit_cast(cast)
    +render_literal_value(value, type_)
    +visit_true(element)
    +visit_false(element)
    +get_select_precolumns(select)
    +visit_join(join, asfrom, from_linter)
    +for_update_clause(select)
    +limit_clause(select)
    +update_limit_clause(update_stmt)
    +update_tables_clause(update_stmt, from_table, extra_froms)
    +update_from_clause(update_stmt, from_table, extra_froms, from_hints)
    +delete_table_clause(delete_stmt, from_table, extra_froms)
    +delete_extra_from_clause(delete_stmt, from_table, extra_froms, from_hints)
    +visit_empty_set_expr(element_types)
    +visit_is_distinct_from_binary(binary, operator)
    +visit_is_not_distinct_from_binary(binary, operator)
    -_mariadb_regexp_flags(flags, pattern)
    -_regexp_match(op_string, binary, operator)
    +visit_regexp_match_op_binary(binary, operator)
    +visit_not_regexp_match_op_binary(binary, operator)
    +visit_regexp_replace_op_binary(binary, operator)
  }

  class MySQLDDLCompiler {
    +colspec
    +is_timestamp
    +comment
    +literal
    +default
    +table_opts
    +opts
    +partition_options
    +nonpart_options
    +part_options
    +arg
    +arg
    +opt
    +joiner: str
    +joiner: str
    +arg
    +arg
    +opt
    +joiner: str
    +index
    +preparer
    +table
    +columns
    +name
    +text: str
    +index_prefix
    +length
    +columns
    +columns
    +columns
    +parser
    +using
    +text
    +using
    +index
    +text: str
    +constraint
    +qual: str
    +const
    +qual: str
    +const: str
    +qual: str
    +const
    +qual: str
    +qual: str
    +const
    +qual: str
    +const
    --
    +get_column_specification(column)
    +post_create_table(table)
    +visit_create_index(create)
    +visit_primary_key_constraint(constraint)
    +visit_drop_index(drop)
    +visit_drop_constraint(drop)
    +define_constraint_match(constraint)
    +visit_set_table_comment(create)
    +visit_drop_table_comment(create)
    +visit_set_column_comment(create)
  }

  class MySQLTypeCompiler {
    +charset
    +charset: str
    +charset: str
    +charset: NoneType
    +collation
    +collation: str
    +collation: NoneType
    +quoted_enums
    --
    -_extend_numeric(type_, spec)
    -_extend_string(type_, defaults, spec)
    +attr()
    -_mysql_type(type_)
    +visit_NUMERIC(type_)
    +visit_DECIMAL(type_)
    +visit_DOUBLE(type_)
    +visit_REAL(type_)
    +visit_FLOAT(type_)
    +visit_INTEGER(type_)
    +visit_BIGINT(type_)
    +visit_MEDIUMINT(type_)
    +visit_TINYINT(type_)
    +visit_SMALLINT(type_)
    +visit_BIT(type_)
    +visit_DATETIME(type_)
    +visit_DATE(type_)
    +visit_TIME(type_)
    +visit_TIMESTAMP(type_)
    +visit_YEAR(type_)
    +visit_TEXT(type_)
    +visit_TINYTEXT(type_)
    +visit_MEDIUMTEXT(type_)
    +visit_LONGTEXT(type_)
    +visit_VARCHAR(type_)
    +visit_CHAR(type_)
    +visit_NVARCHAR(type_)
    +visit_NCHAR(type_)
    +visit_UUID(type_)
    +visit_VARBINARY(type_)
    +visit_JSON(type_)
    +visit_large_binary(type_)
    +visit_enum(type_)
    +visit_BLOB(type_)
    +visit_TINYBLOB(type_)
    +visit_MEDIUMBLOB(type_)
    +visit_LONGBLOB(type_)
    -_visit_enumerated_values(name, type_, enumerated_values)
    +visit_ENUM(type_)
    +visit_SET(type_)
    +visit_BOOLEAN(type_)
  }

  class MySQLIdentifierPreparer {
    +reserved_words: RESERVED_WORDS_MYSQL
    +quote: str
    +quote: str
    --
    -__init__(dialect, server_ansiquotes)
    -_quote_free_identifiers()
  }

  class MariaDBIdentifierPreparer {
    +reserved_words: RESERVED_WORDS_MARIADB
  }

  class MySQLDialect {
    +name: str
    +supports_statement_cache: bool
    +supports_alter: bool
    +supports_native_boolean: bool
    +max_identifier_length: int
    +max_index_name_length: int
    +max_constraint_name_length: int
    +div_is_floordiv: bool
    +supports_native_enum: bool
    +returns_native_bytes: bool
    +supports_sequences: bool
    +sequences_optional: bool
    +supports_for_update_of: bool
    +supports_default_values: bool
    +supports_default_metavalue: bool
    +use_insertmanyvalues: bool
    +insertmanyvalues_implicit_sentinel
    +supports_sane_rowcount: bool
    +supports_sane_multi_rowcount: bool
    +supports_multivalues_insert: bool
    +insert_null_pk_still_autoincrements: bool
    +supports_comments: bool
    +inline_comments: bool
    +default_paramstyle: str
    +colspecs: colspecs
    +cte_follows_insert: bool
    +statement_compiler: MySQLCompiler
    +ddl_compiler: MySQLDDLCompiler
    +type_compiler_cls: MySQLTypeCompiler
    +ischema_names: ischema_names
    +preparer: MySQLIdentifierPreparer
    +is_mariadb: bool
    +construct_arguments
    +cursor
    +cursor
    +row
    +val
    +val
    +dbapi
    +dialect
    +conn
    +cursor
    +val
    +dbapi_con
    +cursor
    +val
    +val
    +version
    +is_mariadb: bool
    +r
    +tokens
    +parsed_token
    +is_mariadb: bool
    +digit
    +server_version_info
    +resultset
    +row
    +row
    +schema
    +full_name
    +schema
    +cursor
    +schema
    +cursor
    +mdb_version
    +rp
    +current_schema: schema
    +current_schema
    +charset
    +rp
    +schema
    +charset
    +rp
    +parsed_state
    +parsed_state
    +parsed_state
    +cols
    +parsed_state
    +default_schema: NoneType
    +fkeys
    +ref_name
    +ref_schema
    +default_schema
    +ref_schema: schema
    +loc_names
    +ref_names
    +con_kw
    +fkey_d
    +default_schema_name
    +col_tuples
    +correct_for_wrong_fk_case
    +d
    +rec
    +parsed_state
    +cks
    +parsed_state
    +comment
    +parsed_state
    +indexes
    +dialect_options
    +unique: bool
    +flavor
    +unique: bool
    +index_d
    +mysql_length
    +parsed_state
    +ucs
    +charset
    +full_name
    +sql
    +preparer
    +charset
    +parser
    +full_name
    +sql
    +columns
    +sql
    +charset
    +sql
    +fetch_col: int
    +sql
    +fetch_col: int
    +show_var
    +row
    +setting
    +cs: int
    +cs: int
    +cs: int
    +cs
    +collations
    +charset
    +rs
    +setting
    +mode
    +mode: str
    +mode_no
    +mode
    +full_name
    +st
    +rp: NoneType
    +rp
    +row
    +full_name
    +st
    +rp
    +code
    +rows
    --
    -__init__(json_serializer, json_deserializer, is_mariadb)
    +get_isolation_level_values(dbapi_conn)
    +set_isolation_level(dbapi_connection, level)
    +get_isolation_level(dbapi_connection)
    -{class} _is_mariadb_from_url(url)
    -_get_server_version_info(connection)
    -_parse_server_version(val)
    -_set_mariadb(is_mariadb, server_version_info)
    +do_begin_twophase(connection, xid)
    +do_prepare_twophase(connection, xid)
    +do_rollback_twophase(connection, xid, is_prepared, recover)
    +do_commit_twophase(connection, xid, is_prepared, recover)
    +do_recover_twophase(connection)
    +is_disconnect(e, connection, cursor)
    -_compat_fetchall(rp, charset)
    -_compat_fetchone(rp, charset)
    -_compat_first(rp, charset)
    -_extract_error_code(exception)
    -_get_default_schema_name(connection)
    +has_table(connection, table_name, schema)
    +has_sequence(connection, sequence_name, schema)
    -_sequences_not_supported()
    +get_sequence_names(connection, schema)
    +initialize(connection)
    -_warn_for_known_db_issues()
    -_support_float_cast()
    -_is_mariadb()
    -_is_mysql()
    -_is_mariadb_102()
    +get_schema_names(connection)
    +get_table_names(connection, schema)
    +get_view_names(connection, schema)
    +get_table_options(connection, table_name, schema)
    +get_columns(connection, table_name, schema)
    +get_pk_constraint(connection, table_name, schema)
    +get_foreign_keys(connection, table_name, schema)
    -_correct_for_mysql_bugs_88718_96365(fkeys, connection)
    +lower()
    +lower()
    +get_check_constraints(connection, table_name, schema)
    +get_table_comment(connection, table_name, schema)
    +get_indexes(connection, table_name, schema)
    +get_unique_constraints(connection, table_name, schema)
    +get_view_definition(connection, view_name, schema)
    -_parsed_state_or_create(connection, table_name, schema)
    -_tabledef_parser()
    -_setup_parser(connection, table_name, schema)
    -_fetch_setting(connection, setting_name)
    -_detect_charset(connection)
    -_detect_casing(connection)
    -_detect_collations(connection)
    -_detect_sql_mode(connection)
    -_detect_ansiquotes(connection)
    -_show_create_table(connection, table, charset, full_name)
    -_describe_table(connection, table, charset, full_name)
  }

  class _DecodingRow {
    +item
    +item
    +item
    +item
    --
    -__init__(rowproxy, charset)
    -__getitem__(index)
    -__getattr__(attr)
  }

  class _cymysqlBIT {
    +v: int
    +v
    --
    +result_processor(dialect, coltype)
    +process()
  }

  class MySQLDialect_cymysql {
    +driver: str
    +supports_statement_cache: bool
    +description_encoding: NoneType
    +supports_sane_rowcount: bool
    +supports_sane_multi_rowcount: bool
    +supports_unicode_statements: bool
    +colspecs
    --
    +{class} import_dbapi()
    -_detect_charset(connection)
    -_extract_error_code(exception)
    +is_disconnect(e, connection, cursor)
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.dialects.mssql" {
  class _MSNumeric_pymssql {
    +result_processor(dialect, type_)
  }

  class MSIdentifierPreparer_pymssql {
    -__init__(dialect)
  }

  class MSDialect_pymssql {
    +supports_statement_cache: bool
    +supports_native_decimal: bool
    +supports_native_uuid: bool
    +driver: str
    +preparer: MSIdentifierPreparer_pymssql
    +colspecs
    +module
    +client_ver
    +vers
    +m
    +opts
    +port
    --
    +{class} import_dbapi()
    -_get_server_version_info(connection)
    +create_connect_args(url)
    +is_disconnect(e, connection, cursor)
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
  }

  class MSExecutionContext_aioodbc {
    +create_server_side_cursor()
  }

  class MSDialectAsync_aioodbc {
    +driver: str
    +supports_statement_cache: bool
    +execution_ctx_cls: MSExecutionContext_aioodbc
  }

  class CoerceUnicode {
    +impl: Unicode
    +cache_ok: bool
    --
    +bind_expression(bindvalue)
  }

  class _cast_on_2005 {
    -__init__(bindvalue)
  }

  class NumericSqlVariant {
    +impl: Unicode
    +cache_ok: bool
    --
    +column_expression(colexpr)
  }

  class NVarcharSqlVariant {
    +impl: Unicode
    +cache_ok: bool
    --
    +column_expression(colexpr)
  }

  class JSON {
  }

  class _FormatTypeMixin {
    +super_proc
    +value
    +value
    +super_proc
    +value
    +value
    --
    -_format_value(value)
    +bind_processor(dialect)
    +process()
    +literal_processor(dialect)
    +process()
  }

  class JSONIndexType {
    +value
    +value
    --
    -_format_value(value)
  }

  class JSONPathType {
    -_format_value(value)
  }

  class _ms_numeric_pyodbc {
    +super_process
    +adjusted
    +result
    +result
    +result
    --
    +bind_processor(dialect)
    +process()
    -_small_dec_to_string(value)
    -_large_dec_to_string(value)
  }

  class _MSNumeric_pyodbc {
  }

  class _MSFloat_pyodbc {
  }

  class _ms_binary_pyodbc {
    +DBAPIBinary
    --
    +bind_processor(dialect)
    +process()
  }

  class _ODBCDateTimeBindProcessor {
    +has_tz: bool
    +dto_string
    +dto_string
    --
    +bind_processor(dialect)
    +process()
  }

  class _ODBCDateTime {
  }

  class _ODBCDATETIMEOFFSET {
    +has_tz: bool
  }

  class _VARBINARY_pyodbc {
  }

  class _BINARY_pyodbc {
  }

  class _String_pyodbc {
    +get_dbapi_type(dbapi)
  }

  class _Unicode_pyodbc {
    +get_dbapi_type(dbapi)
  }

  class _UnicodeText_pyodbc {
    +get_dbapi_type(dbapi)
  }

  class _JSON_pyodbc {
    +get_dbapi_type(dbapi)
  }

  class _JSONIndexType_pyodbc {
    +get_dbapi_type(dbapi)
  }

  class _JSONPathType_pyodbc {
    +get_dbapi_type(dbapi)
  }

  class MSExecutionContext_pyodbc {
    +rows
    +row
    --
    +pre_exec()
    +post_exec()
  }

  class MSDialect_pyodbc {
    +supports_statement_cache: bool
    +supports_sane_rowcount_returning: bool
    +execution_ctx_cls: MSExecutionContext_pyodbc
    +colspecs
    +raw
    +version
    +r
    +super_
    +tup
    +odbc_SQL_SS_TIMESTAMPOFFSET
    +code
    --
    -__init__(fast_executemany, use_setinputsizes)
    -_get_server_version_info(connection)
    +on_connect()
    +on_connect()
    -_setup_timestampoffset_type(connection)
    -_handle_datetimeoffset()
    +do_executemany(cursor, statement, parameters, context)
    +is_disconnect(e, connection, cursor)
  }

  class REAL {
    -__init__()
  }

  class DOUBLE_PRECISION {
    -__init__()
  }

  class TINYINT {
  }

  class _MSDate {
    +m
    --
    +bind_processor(dialect)
    +process()
    +result_processor(dialect, coltype)
    +process()
  }

  class TIME {
    +value
    +value
    +m
    --
    -__init__(precision)
    +bind_processor(dialect)
    +process()
    +result_processor(dialect, coltype)
    +process()
  }

  class _BASETIMEIMPL {
  }

  class _DateTimeBase {
    +bind_processor(dialect)
    +process()
  }

  class _MSDateTime {
  }

  class SMALLDATETIME {
  }

  class DATETIME2 {
    -__init__(precision)
  }

  class DATETIMEOFFSET {
    -__init__(precision)
  }

  class _UnicodeLiteral {
    +value
    +value
    --
    +literal_processor(dialect)
    +process()
  }

  class _MSUnicode {
  }

  class _MSUnicodeText {
  }

  class TIMESTAMP {
    +length: NoneType
    +super_
    +value
    +value
    --
    -__init__(convert_int)
    +result_processor(dialect, coltype)
    +process()
  }

  class ROWVERSION {
  }

  class NTEXT {
  }

  class VARBINARY {
    -__init__(length, filestream)
  }

  class IMAGE {
  }

  class XML {
  }

  class BIT {
  }

  class MONEY {
  }

  class SMALLMONEY {
  }

  class MSUUid {
    +value
    +value
    +character_based_uuid
    --
    +bind_processor(dialect)
    +process()
    +process()
    +literal_processor(dialect)
    +process()
    +process()
    +process()
    -_sentinel_value_resolver(dialect)
    +process()
    +process()
  }

  class UNIQUEIDENTIFIER {
    -__init__(as_uuid)
    -__init__(as_uuid)
    -__init__(as_uuid)
  }

  class SQL_VARIANT {
  }

  class MSTypeCompiler {
    +collation
    +collation: NoneType
    +length
    +spec
    +precision
    +precision
    +precision
    +precision
    +text
    --
    -_extend(spec, type_, length)
    +visit_double(type_)
    +visit_FLOAT(type_)
    +visit_TINYINT(type_)
    +visit_TIME(type_)
    +visit_TIMESTAMP(type_)
    +visit_ROWVERSION(type_)
    +visit_datetime(type_)
    +visit_DATETIMEOFFSET(type_)
    +visit_DATETIME2(type_)
    +visit_SMALLDATETIME(type_)
    +visit_unicode(type_)
    +visit_text(type_)
    +visit_unicode_text(type_)
    +visit_NTEXT(type_)
    +visit_TEXT(type_)
    +visit_VARCHAR(type_)
    +visit_CHAR(type_)
    +visit_NCHAR(type_)
    +visit_NVARCHAR(type_)
    +visit_date(type_)
    +visit__BASETIMEIMPL(type_)
    +visit_time(type_)
    +visit_large_binary(type_)
    +visit_IMAGE(type_)
    +visit_XML(type_)
    +visit_VARBINARY(type_)
    +visit_boolean(type_)
    +visit_BIT(type_)
    +visit_JSON(type_)
    +visit_MONEY(type_)
    +visit_SMALLMONEY(type_)
    +visit_uuid(type_)
    +visit_UNIQUEIDENTIFIER(type_)
    +visit_SQL_VARIANT(type_)
  }

  class MSExecutionContext {
    +dialect: MSDialect
    +rst
    +statement
    +tbl
    +id_column
    +insert_has_identity: bool
    +compile_state
    +insert_has_identity: bool
    +conn
    +row
    --
    -_opt_encode(statement)
    +pre_exec()
    +post_exec()
    +get_lastrowid()
    +rowcount()
    +handle_dbapi_exception(e)
    +fire_sequence(seq, type_)
    +get_insert_default(column)
  }

  class MSSQLCompiler {
    +returning_precedes_values: bool
    +extract_map
    +super_
    +expr
    +delimeter
    +s
    +select: select_stmt
    +limit_clause
    +offset_clause
    +select
    +select
    +mssql_rn
    +limitselect
    +limitselect
    +limitselect
    +limitselect
    +alias
    +t
    +converted
    +field
    +target
    +target
    +adapter
    +columns
    +order_by
    +ashint: bool
    +ashint: bool
    +case_expression
    +type_expression
    +type_expression
    +type_expression: str
    +type_expression
    +type_expression
    --
    -__init__()
    -_with_legacy_schema_aliasing()
    +decorate()
    +visit_now_func(fn)
    +visit_current_date_func(fn)
    +visit_length_func(fn)
    +visit_char_length_func(fn)
    +visit_aggregate_strings_func(fn)
    +visit_concat_op_expression_clauselist(clauselist, operator)
    +visit_concat_op_binary(binary, operator)
    +visit_true(expr)
    +visit_false(expr)
    +visit_match_op_binary(binary, operator)
    +get_select_precolumns(select)
    +get_from_hint_text(table, text)
    +get_crud_hint_text(table, text)
    -_get_limit_or_fetch(select)
    -_use_top(select)
    +limit_clause(cs)
    -_check_can_use_fetch_limit(select)
    -_row_limit_clause(select)
    +visit_try_cast(element)
    +translate_select_structure(select_stmt)
    +visit_table(table, mssql_aliased, iscrud)
    +visit_alias(alias)
    +visit_column(column, add_to_result_map)
    -_schema_aliased_table(table)
    +visit_extract(extract)
    +visit_savepoint(savepoint_stmt)
    +visit_rollback_to_savepoint(savepoint_stmt)
    +visit_binary(binary)
    +returning_clause(stmt, returning_cols)
    +get_cte_preamble(recursive)
    +label_select_column(select, column, asfrom)
    +for_update_clause(select)
    +order_by_clause(select)
    +update_from_clause(update_stmt, from_table, extra_froms, from_hints)
    +delete_table_clause(delete_stmt, from_table, extra_froms)
    +delete_extra_from_clause(delete_stmt, from_table, extra_froms, from_hints)
    +visit_empty_set_expr(type_)
    +visit_is_distinct_from_binary(binary, operator)
    +visit_is_not_distinct_from_binary(binary, operator)
    -_render_json_extract_from_binary(binary, operator)
    +visit_json_getitem_op_binary(binary, operator)
    +visit_json_path_getitem_op_binary(binary, operator)
    +visit_sequence(seq)
  }

  class MSSQLStrictCompiler {
    +ansi_bind_rules: bool
    --
    +visit_in_op_binary(binary, operator)
    +visit_not_in_op_binary(binary, operator)
    +render_literal_value(value, type_)
  }

  class MSDDLCompiler {
    +colspec
    +d_opt
    +start
    +increment
    +default
    +index
    +preparer
    +text: str
    +clustered
    +columnstore
    +inclusions
    +whereclause
    +whereclause
    +where_compiled
    +text: str
    +clustered
    +text: str
    +formatted_name
    +clustered
    +text
    +schema
    +schema_name
    +schema
    +schema_name
    +schema
    +schema_name
    +schema
    +schema_name
    +prefix: NoneType
    +data_type
    +prefix
    +text: str
    +start
    +increment
    --
    +get_column_specification(column)
    +visit_create_index(create, include_schema)
    +visit_drop_index(drop)
    +visit_primary_key_constraint(constraint)
    +visit_unique_constraint(constraint)
    +visit_computed_column(generated)
    +visit_set_table_comment(create)
    +visit_drop_table_comment(drop)
    +visit_set_column_comment(create)
    +visit_drop_column_comment(drop)
    +visit_create_sequence(create)
    +visit_identity_column(identity)
  }

  class MSIdentifierPreparer {
    +reserved_words: RESERVED_WORDS
    +result
    +result
    +result: str
    --
    -__init__(dialect)
    -_escape_identifier(value)
    -_unescape_identifier(value)
    +quote_schema(schema, force)
  }

  class MSDialect {
    +name: str
    +supports_statement_cache: bool
    +supports_default_values: bool
    +supports_empty_insert: bool
    +favor_returning_over_lastrowid: bool
    +returns_native_bytes: bool
    +supports_comments: bool
    +supports_default_metavalue: bool
    +execution_ctx_cls: MSExecutionContext
    +use_scope_identity: bool
    +max_identifier_length: int
    +schema_name: str
    +insert_returning: bool
    +update_returning: bool
    +delete_returning: bool
    +update_returning_multifrom: bool
    +delete_returning_multifrom: bool
    +colspecs
    +engine_config_types
    +ischema_names: ischema_names
    +supports_sequences: bool
    +sequences_optional: bool
    +default_sequence_base: int
    +supports_native_boolean: bool
    +non_native_boolean_check_constraint: bool
    +supports_unicode_binds: bool
    +postfetch_lastrowid: bool
    +supports_multivalues_insert: bool
    +use_insertmanyvalues: bool
    +use_insertmanyvalues_wo_returning: bool
    +insertmanyvalues_implicit_sentinel
    +insertmanyvalues_max_parameters: int
    +legacy_schema_aliasing: bool
    +server_version_info
    +statement_compiler: MSSQLCompiler
    +ddl_compiler: MSDDLCompiler
    +type_compiler_cls: MSTypeCompiler
    +preparer: MSIdentifierPreparer
    +construct_arguments
    +uds: supports_comments
    +cursor
    +cursor
    +view_name: str
    +row
    +view_name
    +row
    +query
    +default_schema_name
    +sequences
    +s
    +s
    +c
    +sequences
    +s
    +s
    +c
    +s
    +schema_names
    +tables
    +s
    +table_names
    +tables
    +s
    +view_names
    +tables
    +s
    +s
    +c
    +filter_definition
    +rp
    +indexes
    +current
    +do
    +index_type
    +rp
    +index_def
    +is_colstore
    +is_clustered
    +view_def
    +schema_name
    +COMMENT_SQL: str
    +comment
    +is_temp_table
    +columns
    +columns
    +computed_cols
    +identity_cols
    +whereclause
    +full_name
    +whereclause
    +full_name
    +computed_definition
    +computed_definition
    +object_id
    +s
    +c
    +cols
    +name
    +type_
    +nullable
    +charlen
    +numericprec
    +numericscale
    +default
    +collation
    +definition
    +is_persisted
    +is_identity
    +identity_start
    +identity_increment
    +comment
    +coltype
    +kwargs
    +charlen: NoneType
    +coltype
    +coltype
    +cdict
    +start
    +increment
    +start
    +increment
    +start: identity_start
    +increment: identity_increment
    +pkeys
    +TC
    +C
    +s
    +c
    +constraint_name: NoneType
    +is_clustered: NoneType
    +constraint_name
    +is_clustered
    +s
    +fkeys
    +fkeys
    +rec
    +rschema
    --
    -__init__(query_timeout, use_scope_identity, schema_name, deprecate_large_types, supports_comments, json_serializer, json_deserializer, legacy_schema_aliasing, ignore_no_transaction_on_rollback)
    +do_savepoint(connection, name)
    +do_release_savepoint(connection, name)
    +do_rollback(dbapi_connection)
    +get_isolation_level_values(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
    +get_isolation_level(dbapi_connection)
    +initialize(connection)
    -_setup_version_attributes()
    -_setup_supports_nvarchar_max(connection)
    -_setup_supports_comments(connection)
    -_get_default_schema_name(connection)
    +has_table(connection, tablename, dbname, owner, schema)
    +has_sequence(connection, sequencename, dbname, owner, schema)
    +get_sequence_names(connection, dbname, owner, schema)
    +get_schema_names(connection)
    +get_table_names(connection, dbname, owner, schema)
    +get_view_names(connection, dbname, owner, schema)
    -_internal_has_table(connection, tablename, owner)
    -_default_or_error(connection, tablename, owner, method)
    +get_indexes(connection, tablename, dbname, owner, schema)
    +get_view_definition(connection, viewname, dbname, owner, schema)
    +get_table_comment(connection, table_name, schema)
    -_temp_table_name_like_pattern(tablename)
    -_get_internal_temp_table_name(connection, tablename)
    +get_columns(connection, tablename, dbname, owner, schema)
    +get_pk_constraint(connection, tablename, dbname, owner, schema)
    +get_foreign_keys(connection, tablename, dbname, owner, schema)
    +fkey_rec()
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.orm" {
  class ORMStatementRole {
  }

  class ORMColumnsClauseRole {
  }

  class ORMEntityColumnsClauseRole {
  }

  class ORMFromClauseRole {
  }

  class ORMColumnDescription {
    +name: str
    +type
    +aliased: bool
    +expr
    +entity
  }

  class _IntrospectsAnnotations {
    +found_in_pep593_annotated(): Any
    +declarative_scan(decl_scan, registry, cls, originating_module, key, mapped_container, annotation, extracted_mapped_annotation, is_dataclass_field)
    -_raise_for_required(key, cls): NoReturn
  }

  class _AttributeOptions {
    +dataclasses_init
    +dataclasses_repr
    +dataclasses_default
    +dataclasses_default_factory
    +dataclasses_compare
    +dataclasses_kw_only
    +kw
    +default
    +dc_field
    --
    -_as_dataclass_field(key): Any
    -{class} _get_arguments_for_make_dataclass(key, annotation, mapped_container, elem)
  }

  class _DCAttributeOptions {
    -_attribute_options: _AttributeOptions
    -_has_dataclass_arguments: bool
  }

  class _MapsColumns {
    +mapper_property_to_assign()
    +columns_to_assign()
  }

  class MapperProperty {
    -_cache_key_traversal: _TraverseInternalsType
    +cascade: NoneType
    +is_property: bool
    +comparator
    +key: str
    +parent
    -_links_to_entity: bool
    +doc
    +info: _InfoType
    +default_attrs: _DEFAULT_READONLY_ATTRIBUTE_OPTIONS
    +default_attrs: _DEFAULT_ATTRIBUTE_OPTIONS
    --
    -_memoized_attr_info(): _InfoType
    +setup(context, query_entity, path, adapter)
    +create_row_processor(context, query_entity, path, mapper, result, adapter, populators)
    +cascade_iterator(type_, state, dict_, visited_states, halt_on)
    +set_parent(parent, init)
    +instrument_class(mapper)
    -__init__(attribute_options, _assume_readonly_dc_attributes)
    +init()
    +class_attribute()
    +do_init()
    +post_instrument_class(mapper)
    +merge(session, source_state, source_dict, dest_state, dest_dict, load, _recursive, _resolve_conflict_map)
    -__repr__(): str
  }

  class PropComparator {
    -_parententity
    -_adapt_to_entity
    +prop
    +any_op
    +has_op
    +of_type_op
    --
    -__init__(prop, parentmapper, adapt_to_entity)
    +property()
    -__clause_element__(): roles.ColumnsClauseRole
    -_bulk_update_tuples(value)
    +adapt_to_entity(adapt_to_entity)
    -_parentmapper()
    -_criterion_exists(criterion)
    +adapter()
    +info(): _InfoType
    -{static} _any_op(b): Any
    -{static} _has_op(other): Any
    -{static} _of_type_op(class_): Any
    +operate(op)
    +reverse_operate(op, other)
    +of_type(class_)
    +and_()
    +any(criterion)
    +has(criterion)
  }

  class StrategizedProperty {
    +inherit_cache: bool
    +strategy_wildcard_key
    +strategy_key: _StrategyKey
    -_strategies
    +load
    +search_path
    +load
    +cls
    +strategy
    +loader
    +strat
    +strat
    +loader
    +strat
    +strat
    -_all_strategies
    +key
    +strategies
    +intended_property_type: property_type
    +actual_strategy
    +intended_property_type: NoneType
    +actual_strategy: NoneType
    --
    -_memoized_attr__wildcard_token()
    -_memoized_attr__default_path_loader_key()
    -_get_context_loader(context, path)
    -_get_strategy(key): LoaderStrategy
    +setup(context, query_entity, path, adapter)
    +create_row_processor(context, query_entity, path, mapper, result, adapter, populators)
    +do_init()
    +post_instrument_class(mapper)
    +{class} strategy_for()
    +decorate(): _TLS
    -{class} _strategy_lookup(requesting_property)
  }

  class ORMOption {
    +propagate_to_loaders: bool
    --
    -_adapt_cached_option_to_uncached_option(context, uncached_opt): ORMOption
  }

  class CompileStateOption {
    +process_compile_state(compile_state)
    +process_compile_state_replaced_entities(compile_state, mapper_entities)
  }

  class LoaderOption {
    +process_compile_state_replaced_entities(compile_state, mapper_entities)
  }

  class CriteriaOption {
    +get_global_criteria(attributes)
  }

  class UserDefinedOption {
    +propagate_to_loaders: bool
    --
    -__init__(payload)
  }

  class MapperOption {
    +propagate_to_loaders: bool
    --
    +process_query(query)
    +process_query_conditionally(query)
  }

  class LoaderStrategy {
    -_strategy_keys
    --
    -__init__(parent, strategy_key)
    +init_class_attribute(mapper)
    +setup_query(compile_state, query_entity, path, loadopt, adapter)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
    -__str__(): str
  }

  class MappedClassProtocol {
    -__name__: str
    -__mapper__
    -__table__: FromClause
    --
    -__call__(): _O
  }

  class _DeclMappedClassProtocol {
    +metadata: MetaData
    -__tablename__: str
    -__mapper_args__: _MapperKwArgs
    -__table_args__
    -_sa_apply_dc_transforms
    --
    -__declare_first__()
    -__declare_last__()
  }

  class _DataclassArguments {
    +init
    +repr
    +eq
    +order
    +unsafe_hash
    +match_args
    +kw_only
    +dataclass_callable
  }

  class _MapperConfig {
    +cls
    +classname: str
    +properties
    +declared_attr_reg
    +manager
    +defer_map
    +manager
    +manager
    --
    +{class} setup_mapping(registry, cls_, dict_, table, mapper_kw)
    -__init__(registry, cls_, mapper_kw)
    +set_cls_attribute(attrname, value): _T
    +map(mapper_kw)
    -_early_mapping(mapper_kw)
  }

  class _ImperativeMapperConfig {
    +mapper_cls: Mapper
    +cls
    +inherits
    +inherits_search
    +c
    +inherits
    +inherits
    --
    -__init__(registry, cls_, table, mapper_kw)
    +map(mapper_kw)
    -_setup_inheritance(mapper_kw)
  }

  class _CollectedAnnotation {
    +raw_annotation: _AnnotationScanType
    +mapped_container
    +extracted_mapped_annotation
    +is_dataclass: bool
    +attr_value: Any
    +originating_module: str
    +originating_class
  }

  class _ClassScanMapperConfig {
    +is_deferred: bool
    +registry: _RegistryType
    +clsdict_view: _ClassDict
    +collected_annotations
    +collected_attributes
    +local_table
    +persist_selectable
    +declared_columns
    +column_ordering
    +column_copies
    +tablename
    +mapper_args
    +table_args
    +mapper_args_fn
    +inherits
    +single: bool
    +is_dataclass_prior_to_mapping: bool
    +allow_unmapped_annotations: bool
    +dataclass_setup_arguments
    +allow_dataclass_fields: bool
    +dca
    +cld
    +sdk
    +sa_dataclass_metadata_key
    +sa_dataclass_metadata_key: NoneType
    +all_datacls_fields
    +local_datacls_fields
    +absent
    +obj
    +ret
    +ret
    +all_field
    +ret
    +cls_annotations
    +cls_vars
    +names
    +sa_dataclass_metadata_key
    +sa_dataclass_metadata_key: NoneType
    +dataclass_fields
    +fixed_sa_dataclass_metadata_key: sa_dataclass_metadata_key
    +field
    +cls
    +cls_as_Decl
    +clsdict_view
    +collected_attributes
    +column_copies
    +mapper_args_fn: NoneType
    +table_args: NoneType
    +inherited_table_args: NoneType
    +tablename: NoneType
    +fixed_table
    +attribute_is_overridden
    +bases
    +class_mapped
    +local_attributes_for_class
    +locally_collected_columns
    +locally_collected_columns
    +check_decl
    +mapper_args_fn: _mapper_args_fn
    +check_decl
    +tablename
    +check_decl
    +table_args
    +inherited_table_args: bool
    +ret
    +ret
    +ret
    +ret
    +ret
    +obj
    +collected_annotation
    +is_mapped
    +generated_obj
    +table_args: NoneType
    +dataclass_setup_arguments
    +warn_for_non_dc_attrs
    +manager
    +field_list
    +annotations
    +defaults
    +cls_annotations
    +new_anno
    +extracted
    +dataclass_callable
    +dataclass_callable
    +restored
    +restored
    +restored: NoneType
    +allowed
    +disallowed_args
    +msg
    +is_dataclass
    +allow_unmapped
    +is_dataclass_field
    +expect_mapped
    +is_dataclass_field: bool
    +is_dataclass_field: bool
    +extracted
    +elem
    +attr_value
    +ca
    +cls
    +dict_
    +locally_collected_attributes
    +column_copies
    +collected_annotation
    +obj
    +obj
    +collected_annotation
    +obj
    +copy_
    +cls
    +collected_attributes
    +our_stuff
    +late_mapped
    +allow_unmapped_annotations
    +expect_annotations_wo_mapped
    +look_for_dataclass_things
    +value
    +value
    +value
    +argnames
    +argnames
    +args
    +our_stuff
    +declared_columns
    +column_ordering
    +name_to_prop_key
    +mp_to_assign
    +cls
    +cls_as_Decl
    +tablename
    +table_args
    +clsdict_view
    +declared_columns
    +column_ordering
    +manager
    +table_cls
    +table_cls: Table
    +args
    +table_kw
    +table_kw: table_args
    +args: table_args
    +autoload_with
    +autoload
    +sorted_columns
    +table
    +table
    +meta
    +cls
    +inherits
    +inherits_search
    +c
    +inherits
    +inherits
    +clsdict_view
    +table
    +cls
    +table_args
    +declared_columns
    +inherited_mapper_or_config
    +inherited_table
    +inherited_persist_selectable
    +properties
    +mapper_args
    +mapper_args
    +properties
    +v
    +inherits_arg
    +inherits_arg
    +inherited_mapper
    +inherited_table
    +exclude_properties
    +p
    +result_mapper_args
    +mapper_cls
    +mapper_cls: Mapper
    --
    -__init__(registry, cls_, dict_, table, mapper_kw)
    -_setup_declared_events()
    +after_configured()
    +before_configured()
    -_cls_attr_override_checker(cls)
    +attribute_is_overridden(obj): bool
    +attribute_is_overridden(obj): bool
    -_cls_attr_resolver(cls)
    +local_attributes_for_class()
    +local_attributes_for_class()
    -_scan_attributes()
    -_mapper_args_fn()
    -_setup_dataclasses_transforms()
    -_allow_dataclass_field(originating_class): bool
    -{class} _update_annotations_for_non_mapped_class(klass)
    -{class} _apply_dataclasses_to_any_class(dataclass_setup_arguments, klass, use_annotations)
    -{class} _assert_dc_arguments(arguments)
    -_collect_annotation(name, raw_annotation, originating_class, expect_mapped, attr_value)
    -_warn_for_decl_attributes(cls, key, c)
    -_produce_column_copies(attributes_for_class, attribute_is_overridden, fixed_table, originating_class)
    -_extract_mappable_attributes()
    -_extract_declared_columns()
    -_setup_table(table)
    -_metadata_for_cls(manager): MetaData
    -_setup_inheriting_mapper(mapper_kw)
    -_setup_inheriting_columns(mapper_kw)
    -_prepare_mapper_arguments(mapper_kw)
    +map(mapper_kw)
  }

  class _DeferredMapperConfig {
    -_cls
    +is_deferred: bool
    -_configs
    +classes_for_base
    +all_m_by_cls
    +tuples
    --
    -_early_mapping(mapper_kw)
    +cls()
    +cls(class_)
    -{class} _remove_config_cls(ref)
    +{class} has_cls(class_): bool
    +{class} raise_unmapped_for_cls(class_): NoReturn
    +{class} config_for_cls(class_): _DeferredMapperConfig
    +{class} classes_for_base(base_cls, sort)
    +map(mapper_kw)
  }

  class _ExpiredAttributeLoaderProto {
    -__call__(state, toload, passive)
  }

  class _ManagerFactory {
    -__call__(class_)
  }

  class ClassManager {
    +dispatch
    +MANAGER_ATTR
    +STATE_ATTR
    +expired_attribute_loader: _ExpiredAttributeLoaderProto
    +init_method
    +original_init
    +factory
    +declarative_scan
    +registry: _RegistryType
    +registry: NoneType
    +class_
    -_bases
    +mgr
    +found
    +inherits
    +val
    +manager
    +mgr
    +manager
    +original
    +user_data
    +impl
    +adapter
    +instance
    +state
    +state
    +state
    --
    +deferred_scalar_loader()
    +deferred_scalar_loader(obj)
    -__init__(class_)
    -_update_state(finalize, mapper, registry, declarative_scan, expired_attribute_loader, init_method)
    -_finalize()
    -__hash__(): int
    -__eq__(other): bool
    +is_mapped(): bool
    -_all_key_set()
    -_collection_impl_keys()
    -_scalar_loader_impls()
    -_loader_impls()
    +mapper()
    -_all_sqla_attributes(exclude)
    -_get_class_attr_mro(key, default)
    -_attr_has_impl(key): bool
    -_subclass_manager(cls)
    -_instrument_init()
    -_state_constructor()
    +manage()
    +manager_getter()
    +state_getter()
    +dict_getter()
    +instrument_attribute(key, inst, propagated)
    +subclass_managers(recursive)
    +post_configure_attribute(key)
    +uninstrument_attribute(key, propagated)
    +unregister()
    +install_descriptor(key, inst)
    +uninstall_descriptor(key)
    +install_member(key, implementation)
    +uninstall_member(key)
    +instrument_collection_class(key, collection_class): _CollectionFactoryType
    +initialize_collection(key, state, factory)
    +is_instrumented(key, search): bool
    +get_impl(key): AttributeImpl
    +attributes()
    +new_instance(state): _O
    +setup_instance(instance, state)
    +teardown_instance(instance)
    -_serialize(state, state_dict): _SerializeManager
    -_new_state_if_none(instance)
    +has_state(instance): bool
    +has_parent(state, key, optimistic): bool
    -__bool__(): bool
    -__repr__(): str
  }

  class _SerializeManager {
    +manager
    +manager
    --
    -__init__(state, d)
    -__call__(state, inst, state_dict)
  }

  class InstrumentationFactory {
    +dispatch
    +factory: ClassManager
    +manager
    +manager
    --
    +create_manager_for_cls(class_)
    -_locate_extended_factory(class_)
    -_check_conflicts(class_, factory)
    +unregister(class_)
  }

  class PostLoad {
    +path
    +states
    +pl
    +pl
    +pl
    --
    -__init__()
    +add_state(state, overwrite)
    +invoke(context, path)
    +{class} for_context(context, path, only_load_props)
    +{class} path_exists(context, path, key)
    +{class} callable_for_path(context, path, limit_to_mapper, token, loader_callable)
  }

  class _OrmKnownExecutionOptions {
    +populate_existing: bool
    +autoflush: bool
    +synchronize_session: SynchronizeSessionArgument
    +dml_strategy: DMLStrategyArgument
    +is_delete_using: bool
    +is_update_from: bool
    +render_nulls: bool
  }

  class _ORMAdapterProto {
    -__call__(obj, key): _CE
  }

  class _LoaderCallable {
    -__call__(state, passive): Any
  }

  class PathRegistry {
    +is_token: bool
    +is_root: bool
    +has_entity: bool
    +is_property: bool
    +is_entity: bool
    +is_unnatural: bool
    +path: _PathRepresentation
    +natural_path: _PathRepresentation
    +parent
    +root: RootRegistry
    -_cache_key_traversal: _CacheKeyTraversalType
    +key
    +odd_path
    +even_path
    +mp
    +p
    +p
    +path
    +p
    --
    -__eq__(other): bool
    -__ne__(other): bool
    -_path_for_compare()
    +odd_element(index)
    +set(attributes, key, value)
    +setdefault(attributes, key, value)
    +get(attributes, key, value): Any
    -__len__(): int
    -__hash__(): int
    -__getitem__(entity): TokenRegistry
    -__getitem__(entity): _PathElementType
    -__getitem__(entity): _PathRepresentation
    -__getitem__(entity): AbstractEntityRegistry
    -__getitem__(entity): PropRegistry
    -__getitem__(entity)
    +length(): int
    +pairs()
    +contains_mapper(mapper): bool
    +contains(attributes, key): bool
    -__reduce__(): Any
    -{class} _serialize_path(path): _SerializedPath
    -{class} _deserialize_path(path): _PathRepresentation
    -_deserialize_mapper_token(): Any
    -_deserialize_key_token(key): Any
    +serialize(): _SerializedPath
    +{class} deserialize(path): PathRegistry
    +{class} per_mapper(mapper): CachingEntityRegistry
    +{class} per_mapper(mapper): SlotsEntityRegistry
    +{class} per_mapper(mapper): AbstractEntityRegistry
    +{class} coerce(raw): PathRegistry
    -_red(next_): PathRegistry
    -__add__(other): PathRegistry
    -_red(next_): PathRegistry
    -__str__(): str
    -__repr__(): str
  }

  class CreatesToken {
    +is_aliased_class: bool
    +is_root: bool
    --
    +token(token): TokenRegistry
  }

  class RootRegistry {
    +inherit_cache: bool
    +path
    +natural_path
    +has_entity: bool
    +is_aliased_class: bool
    +is_root: bool
    +is_unnatural: bool
    --
    -_getitem(entity)
    -_truncate_recursive(): RootRegistry
  }

  class PathToken {
    -_intern
    +result
    --
    -_gen_cache_key(anon_map, bindparams)
    -_path_for_compare()
    +{class} intern(strvalue): PathToken
  }

  class TokenRegistry {
    +inherit_cache: bool
    +token: _StrPathToken
    +parent: CreatesToken
    +token
    +has_entity: bool
    +is_token: bool
    +parent
    +parent
    --
    -__init__(parent, token)
    +generate_for_superclasses()
    -_generate_natural_for_superclasses()
    -_getitem(entity): Any
  }

  class PropRegistry {
    +inherit_cache: bool
    +is_property: bool
    +prop
    +mapper
    +entity
    +insp
    +natural_parent: AbstractEntityRegistry
    +parent
    +natural_parent
    +subclass_entity
    +parent
    +natural_parent
    +natural_parent: parent
    +natural_parent
    +earliest: NoneType
    +earliest: i
    --
    -__init__(parent, prop)
    -_truncate_recursive(): PropRegistry
    +entity_path(): AbstractEntityRegistry
    -_getitem(entity)
  }

  class AbstractEntityRegistry {
    +has_entity: bool
    +is_entity: bool
    +parent
    +key
    +entity
    +is_aliased_class: bool
    --
    -__init__(parent, entity)
    -_truncate_recursive(): AbstractEntityRegistry
    +root_entity()
    +entity_path(): PathRegistry
    +mapper()
    -__bool__(): bool
    -_getitem(entity)
  }

  class SlotsEntityRegistry {
    +inherit_cache: bool
  }

  class _ERDict {
    +item
    --
    -__init__(registry)
    -__missing__(key): PropRegistry
  }

  class CachingEntityRegistry {
    +inherit_cache: bool
    --
    -__init__(parent, entity)
    +pop(key, default): Any
    -_getitem(entity): Any
  }

  class Query {
    -_where_criteria
    -_having_criteria
    -_order_by_clauses
    -_group_by_clauses
    -_limit_clause
    -_offset_clause
    -_distinct: bool
    -_distinct_on
    -_for_update_arg
    -_correlate
    -_auto_correlate: bool
    -_from_obj
    -_setup_joins
    -_label_style: SelectLabelStyle
    -_compile_options
    -_with_options
    +load_options
    -_params
    -_statement
    +session: Session
    +dispatch
    +ent
    +fa
    +load_options
    +compile_options
    +stmt
    +stmt
    +stmt
    +q
    +new_query
    +self: new_query
    +compile_options
    +stmt
    +stmt
    +stmt
    +q
    +q
    +stmt
    +stmt
    +apply_labels: with_labels
    +self
    +mapper
    +relationships
    +entity_zero
    +entity_zero
    +mapper
    +property: prop
    +entity
    +fromclause
    +q
    +q
    +opts
    +crit
    +from_entity
    +clauses
    +criterion
    +criterion
    +having_criteria
    +list_of_queries
    +join_target
    +onclause_element
    +onclause_element: NoneType
    +statement
    +ret
    +result
    +params
    +statement
    +result
    +result
    +result
    +statement
    +bind
    +bind: NoneType
    +compile_state
    +context
    +result
    +result
    +result
    +inner
    +ezero
    +inner
    +col
    +bulk_del
    +new_query
    +self
    +delete_
    +result
    +update_args
    +bulk_ud
    +new_query
    +self
    +upd
    +ppo
    +upd
    +upd
    +upd
    +result
    +stmt
    +compile_state_cls
    +compile_state
    +context
    --
    -_propagate_attrs(): _PropagateAttrsType
    -__init__(entities, session)
    -_set_propagate_attrs(values): Self
    -_set_entities(entities)
    +tuples()
    -_entity_from_pre_ent_zero()
    -_only_full_mapper_zero(methname)
    -_set_select_from(obj, set_base_alias)
    -_set_lazyload_from(state): Self
    -_get_condition()
    -_get_existing_condition()
    -_no_criterion_assertion(meth, order_by, distinct)
    -_no_criterion_condition(meth, order_by, distinct)
    -_no_clauseelement_condition(meth)
    -_no_statement_condition(meth)
    -_no_limit_offset(meth)
    -_has_row_limiting_clause(): bool
    -_get_options(populate_existing, version_check, only_load_props, refresh_state, identity_token): Self
    -_clone(): Self
    -_get_select_statement_only()
    +statement()
    -_final_statement(legacy_query_style)
    -_statement_20(for_statement, use_legacy_query_style)
    +subquery(name, with_labels, reduce_columns): Subquery
    +cte(name, recursive, nesting): CTE
    +label(name)
    +as_scalar()
    +as_scalar()
    +as_scalar()
    +as_scalar()
    +scalar_subquery()
    +scalar_subquery()
    +scalar_subquery()
    +scalar_subquery()
    +selectable()
    -__clause_element__()
    +only_return_tuples(value)
    +only_return_tuples(value)
    +only_return_tuples(value)
    +is_single_entity(): bool
    +enable_eagerloads(value): Self
    -_with_compile_options(): Self
    +with_labels(): Self
    +get_label_style(): SelectLabelStyle
    +set_label_style(style): Self
    +enable_assertions(value): Self
    +whereclause()
    -_with_current_path(path): Self
    +yield_per(count): Self
    +get(ident)
    -_get_impl(primary_key_identity, db_load_fn, identity_token)
    +lazy_loaded_from()
    -_current_path(): PathRegistry
    +correlate(): Self
    +autoflush(setting): Self
    +populate_existing(): Self
    -_with_invoke_all_eagers(value): Self
    +with_parent(instance, property, from_entity): Self
    +add_entity(entity, alias)
    +with_session(session): Self
    -_legacy_from_self(): Self
    -_set_enable_single_crit(val): Self
    -_from_selectable(fromclause, set_entity_from): Self
    +values()
    -_values_no_warn()
    +value(column): Any
    +with_entities(_entity)
    +with_entities(_colexpr)
    +with_entities(__ent0, __ent1)
    +with_entities(__ent0, __ent1, __ent2)
    +with_entities(__ent0, __ent1, __ent2, __ent3)
    +with_entities(__ent0, __ent1, __ent2, __ent3, __ent4)
    +with_entities(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5)
    +with_entities(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6)
    +with_entities(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6, __ent7)
    +with_entities()
    +with_entities()
    +add_columns()
    +add_column(column)
    +options(): Self
    +with_transformation(fn)
    +get_execution_options(): _ImmutableExecuteOptions
    +execution_options(): Self
    +execution_options(): Self
    +execution_options(): Self
    +with_for_update(): Self
    +params(__params): Self
    +where(): Self
    +filter(): Self
    -_last_joined_entity()
    -_filter_by_zero(): Any
    +filter_by(): Self
    +order_by(__first): Self
    +group_by(__first): Self
    +having(): Self
    -_set_op(expr_fn): Self
    +union(): Self
    +union_all(): Self
    +intersect(): Self
    +intersect_all(): Self
    +except_(): Self
    +except_all(): Self
    +join(target, onclause): Self
    +outerjoin(target, onclause): Self
    +reset_joinpoint(): Self
    +select_from(): Self
    -__getitem__(item): Any
    +slice(start, stop): Self
    +limit(limit): Self
    +offset(offset): Self
    +distinct(): Self
    +all()
    +from_statement(statement): Self
    +first()
    +one_or_none()
    +one(): _T
    +scalar(): Any
    -__iter__()
    -_iter()
    -__str__(): str
    -_get_bind_args(statement, fn): Any
    +column_descriptions()
    +instances(result_proxy, context): Any
    +merge_result(iterator, load)
    +exists(): Exists
    +count(): int
    +delete(synchronize_session): int
    +update(values, synchronize_session, update_args): int
    -_compile_state(for_statement): ORMCompileState
    -_compile_context(for_statement): QueryContext
  }

  class AliasOption {
    +inherit_cache: bool
    --
    -__init__(alias)
    +process_compile_state(compile_state)
  }

  class BulkUD {
    -__init__(query)
    -_validate_query_state()
    +session(): Session
  }

  class BulkUpdate {
    -__init__(query, values, update_kwargs)
  }

  class BulkDelete {
  }

  class RowReturningQuery {
    +tuples()
  }

  class QueryableAttribute {
    +is_attribute: bool
    +dispatch
    +class_
    +key: str
    +parententity
    +impl: AttributeImpl
    +comparator
    -_of_type
    -_extra_criteria
    -_doc
    +manager
    +parent
    +expression
    +annotations: _AnnotationDict
    +entity_namespace
    +annotations
    +annotations
    +ce
    +anno
    +exprs
    --
    -__init__(class_, key, parententity, comparator, impl, of_type, extra_criteria)
    -__reduce__(): Any
    -_impl_uses_objects(): bool
    +get_history(instance, passive): History
    +info(): _InfoType
    -_memoized_attr_expression()
    -_memoized_attr__propagate_attrs(): _PropagateAttrsType
    -_entity_namespace()
    -_annotations(): _AnnotationDict
    -__clause_element__()
    -_from_objects()
    -_bulk_update_tuples(value)
    +adapt_to_entity(adapt_to_entity): Self
    +of_type(entity)
    +and_()
    -_clone()
    +label(name)
    +operate(op)
    +reverse_operate(op, other)
    +hasparent(state, optimistic): bool
    -__getattr__(key): Any
    -__str__(): str
    -_memoized_attr_property()
  }

  class InstrumentedAttribute {
    +inherit_cache: bool
    +dict_
    +state
    --
    -__doc__()
    -__doc__(value)
    -__doc__()
    -__set__(instance, value)
    -__delete__(instance)
    -__get__(instance, owner)
    -__get__(instance, owner): _T
    -__get__(instance, owner)
  }

  class AdHocHasEntityNamespace {
    -_traverse_internals
    -_entity_namespace
    +is_mapper
    +is_aliased_class
    --
    +entity_namespace()
  }

  class Proxy {
    +retval
    +comparator
    --
    -__init__(class_, key, descriptor, comparator, adapt_to_entity, doc, original_property)
    -_parententity()
    +parent()
    -_impl_uses_objects()
    -_entity_namespace()
    +property()
    +comparator()
    +adapt_to_entity(adapt_to_entity)
    -_clone()
    -__get__(instance, owner)
    -__str__(): str
    -__getattr__(attribute)
  }

  class AttributeEventToken {
    -__init__(attribute_impl, op)
    -__eq__(other)
    +key()
    +hasparent(state)
  }

  class AttributeImpl {
    +collection: bool
    +default_accepts_scalar_loader: bool
    +uses_objects: bool
    +supports_population: bool
    +dynamic: bool
    -_replace_token: AttributeEventToken
    -_remove_token: AttributeEventToken
    -_append_token: AttributeEventToken
    +active_history
    +msg: str
    +msg: str
    +id_
    +last_parent
    +value: NoneType
    +ret
    +value: ret
    +key
    +value
    +callable_
    +value
    --
    -__init__(class_, key, callable_, dispatch, trackparent, compare_function, active_history, parent_token, load_on_unexpire, send_modified_events, accepts_scalar_loader)
    -__str__(): str
    -_get_active_history()
    -_set_active_history(value)
    +hasparent(state, optimistic): bool
    +sethasparent(state, parent_state, value)
    +get_history(state, dict_, passive): History
    +get_all_pending(state, dict_, passive): _AllPendingType
    -_default_value(state, dict_): Any
    +get(state, dict_, passive): Any
    -_fire_loader_callables(state, key, passive): Any
    +append(state, dict_, value, initiator, passive)
    +remove(state, dict_, value, initiator, passive)
    +pop(state, dict_, value, initiator, passive)
    +set(state, dict_, value, initiator, passive, check_old, pop)
    +delete(state, dict_)
    +get_committed_value(state, dict_, passive): Any
    +set_committed_value(state, dict_, value)
  }

  class ScalarAttributeImpl {
    +default_accepts_scalar_loader: bool
    +uses_objects: bool
    +supports_population: bool
    +collection: bool
    +dynamic: bool
    +old
    +old
    +existing
    +current
    +old
    +old
    +value
    +value
    --
    -__init__()
    +delete(state, dict_)
    +get_history(state, dict_, passive): History
    +set(state, dict_, value, initiator, passive, check_old, pop)
    +fire_replace_event(state, dict_, value, previous, initiator): _T
    +fire_remove_event(state, dict_, value, initiator)
  }

  class ScalarObjectAttributeImpl {
    +default_accepts_scalar_loader: bool
    +uses_objects: bool
    +supports_population: bool
    +collection: bool
    +old
    +old
    +existing
    +current
    +current
    +original
    +loader_passive
    +original
    +current
    +current
    +ret: _AllPendingType
    +ret
    +ret
    +original
    +old
    +old
    +value
    +value
    --
    +delete(state, dict_)
    +get_history(state, dict_, passive): History
    +get_all_pending(state, dict_, passive): _AllPendingType
    +set(state, dict_, value, initiator, passive, check_old, pop)
    +fire_remove_event(state, dict_, value, initiator)
    +fire_replace_event(state, dict_, value, previous, initiator): _T
  }

  class HasCollectionAdapter {
    +collection: bool
    --
    -_dispose_previous_collection(state, collection, adapter, fire_event)
    +get_collection(state, dict_, user_data, passive): CollectionAdapter
    +get_collection(state, dict_, user_data, passive): CollectionAdapter
    +get_collection(state, dict_, user_data, passive)
    +get_collection(state, dict_, user_data, passive)
    +set(state, dict_, value, initiator, passive, check_old, pop, _adapt)
  }

  class CollectionAttributeImpl {
    +uses_objects: bool
    +collection: bool
    +default_accepts_scalar_loader: bool
    +supports_population: bool
    +dynamic: bool
    -_bulk_replace_token: AttributeEventToken
    +copy_function
    +current
    +pending
    +current
    +current
    +original
    +current_states
    +original_states
    +current_set
    +original_set
    +value
    +value
    +collection
    +collection
    +value
    +collection
    +iterable: value
    +orig_iterable: value
    +new_keys: NoneType
    +iterable
    +setting_type
    +receiving_type
    +given
    +wanted
    +iterable
    +new_keys
    +iterable
    +iterable
    +new_keys
    +new_values
    +evt
    +old
    +old
    +old_collection
    +adapter
    +pending
    +added
    +removed
    +fetch_user_data
    +user_data
    --
    -__init__(class_, key, callable_, dispatch, typecallable, trackparent, copy_function, compare_function)
    +link(collection, collection_adapter)
    +unlink(collection, collection_adapter)
    -__copy(item)
    +get_history(state, dict_, passive): History
    +get_all_pending(state, dict_, passive): _AllPendingType
    +fire_append_event(state, dict_, value, initiator, key): _T
    +fire_append_wo_mutation_event(state, dict_, value, initiator, key): _T
    +fire_pre_remove_event(state, dict_, initiator, key)
    +fire_remove_event(state, dict_, value, initiator, key)
    +delete(state, dict_)
    -_default_value(state, dict_): _AdaptedCollectionProtocol
    -_initialize_collection(state)
    +append(state, dict_, value, initiator, passive)
    +remove(state, dict_, value, initiator, passive)
    +pop(state, dict_, value, initiator, passive)
    +set(state, dict_, value, initiator, passive, check_old, pop, _adapt)
    -_dispose_previous_collection(state, collection, adapter, fire_event)
    -_invalidate_collection(collection)
    +set_committed_value(state, dict_, value): _AdaptedCollectionProtocol
    +get_collection(state, dict_, user_data, passive): CollectionAdapter
    +get_collection(state, dict_, user_data, passive): CollectionAdapter
    +get_collection(state, dict_, user_data, passive)
    +get_collection(state, dict_, user_data, passive)
  }

  class History {
    +added
    +unchanged
    +deleted
    +original
    +deleted
    +deleted
    +current: NoneType
    +deleted
    +deleted
    +original
    +deleted
    +current: NoneType
    +deleted
    +original
    +current
    +current_states
    +original_states
    +current_set
    +original_set
    --
    -__bool__(): bool
    +empty(): bool
    +sum()
    +non_deleted()
    +non_added()
    +has_changes(): bool
    -_merge(added, deleted): History
    +as_state(): History
    +{class} from_scalar_attribute(attribute, state, current): History
    +{class} from_object_attribute(attribute, state, current, original): History
    +{class} from_collection(attribute, state, current): History
  }

  class UninstrumentedColumnLoader {
    +c
    --
    -__init__(parent, strategy_key)
    +setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class ColumnLoader {
    +c
    +c
    +fetch
    +fetch
    +coltype
    +active_history
    +col
    +getter
    --
    -__init__(parent, strategy_key)
    +setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, check_for_adapt)
    +init_class_attribute(mapper)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class ExpressionColumnLoader {
    +null
    +columns: NoneType
    +columns
    +columns
    +c
    +fetch
    +fetch
    +columns
    +col
    +getter
    --
    -__init__(parent, strategy_key)
    +setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
    +init_class_attribute(mapper)
  }

  class DeferredColumnLoader {
    +set_deferred_for_local_state
    +set_deferred_for_local_state
    +localparent
    +toload
    +toload
    +group
    +session
    --
    -__init__(parent, strategy_key)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
    +init_class_attribute(mapper)
    +setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, only_load_props)
    -_load_for_state(state, passive)
    -_invoke_raise_load(state, passive, lazy)
  }

  class LoadDeferredColumns {
    +key
    +localparent
    +prop
    +strategy_key
    +strategy_key
    +strategy
    --
    -__init__(key, raiseload)
    -__call__(state, passive)
  }

  class AbstractRelationshipLoader {
    -__init__(parent, strategy_key)
    -_immediateload_create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class DoNothingLoader {
  }

  class NoLoader {
    +init_class_attribute(mapper)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
    +invoke_no_load(dict_, row)
  }

  class LazyLoader {
    -_lazywhere
    -_bind_to_col
    -_rev_lazywhere
    -_rev_bind_to_col
    +parent_property
    +join_condition
    +active_history: bool
    +active_history: bool
    +active_history: bool
    +active_history: bool
    +lazywhere
    +params
    +criterion
    +mapper
    +o
    +dict_
    +params
    +value
    +value
    +pending
    +primary_key_identity: NoneType
    +use_get
    +session
    +primary_key_identity
    +instance
    +instance_mapper
    +get_attr
    +get_attr
    +dict_
    +strategy_options
    +clauseelement
    +stmt
    +load_options
    +stmt
    +pending
    +use_get
    +effective_path
    +effective_path
    +opts
    +use_get: bool
    +effective_path
    +effective_path
    +execution_options
    +execution_options
    +result
    +result
    +l
    +key
    +set_lazy_callable
    --
    -__init__(parent, strategy_key)
    +init_class_attribute(mapper)
    -_memoized_attr__simple_lazy_clause()
    +visit_bindparam()
    +visit_bindparam()
    -_generate_lazy_clause(state, passive)
    -_invoke_raise_load(state, passive, lazy)
    -_load_for_state(state, passive, loadopt, extra_criteria, extra_options, alternate_effective_path, execution_options)
    -_get_ident_for_use_get(session, state, passive)
    -_emit_lazyload(session, state, primary_key_identity, passive, loadopt, extra_criteria, extra_options, alternate_effective_path, execution_options)
    -_lazyload_reverse()
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
    +reset_for_lazy_callable(dict_, row)
  }

  class LoadLazyAttribute {
    +key
    +instance_mapper
    +prop
    +strategy
    --
    -__init__(key, initiating_strategy, loadopt, extra_criteria)
    -__getstate__()
    -__call__(state, passive)
  }

  class PostLoader {
    +effective_path
    +top_level_context
    +execution_options
    +recursion_depth
    +unlimited_recursion
    +recursion_depth: NoneType
    +unlimited_recursion: bool
    +recursion_depth
    +execution_options
    +path_w_prop
    +effective_path_w_prop
    --
    -_setup_for_recursion(context, path, loadopt, join_depth)
  }

  class ImmediateLoader {
    +flags
    +flags
    +new_opt
    +alternate_effective_path
    +extra_options
    +new_opt: NoneType
    +alternate_effective_path: path
    +extra_options
    +key
    +lazyloader
    +dict_
    +value
    --
    -__init__(parent, strategy_key)
    +init_class_attribute(mapper)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
    -_load_for_path(context, path, states, load_only, loadopt, flags, recursion_depth, execution_options)
  }

  class SubqueryLoader {
    +given_subq_path: subq_path
    +subq_path
    +subq_mapper
    +new_subq_path
    +additional
    +new_subq_path: given_subq_path
    +leftmost_cols
    +leftmost_attr
    +q
    +q2
    +q: q2
    +target_cols
    +distinct_target_key
    +to_add
    +embed_q
    +left_alias
    +to_join
    +pairs
    +prev_mapper
    +to_append
    +to_append: mapper
    +parent_alias: left_alias
    +info
    +parent_alias
    +parent_alias
    +local_cols
    +local_attr
    +ltj
    +to_join
    +to_join
    +middle
    +inner
    +item
    +attr
    +attr
    +attr
    +to_join
    +q
    +new_options
    +q
    +q
    +q
    --
    -__init__(parent, strategy_key)
    +init_class_attribute(mapper)
    -_get_leftmost(orig_query_entity_index, subq_path, current_compile_state, is_root)
    -_generate_from_original_query(orig_compile_state, orig_query, leftmost_mapper, leftmost_attr, leftmost_relationship, orig_entity)
    -_prep_for_joins(left_alias, subq_path)
    -_apply_joins(q, to_join, left_alias, parent_alias, effective_entity)
    -_setup_options(context, q, subq_path, rewritten_path, orig_query, effective_entity, loadopt)
    -_setup_outermost_orderby(q)
    -_setup_outermost_orderby()
  }

  class _SubqCollections {
    +q
    +q
    +q
    +rows
    --
    -__init__(context, subq)
    +get(key, default)
    -_load()
    +loader(state, dict_, row)
  }

  class JoinedLoader {
    +path
    +with_polymorphic: NoneType
    +user_defined_adapter
    +with_poly_entity
    +with_polymorphic
    +with_polymorphic: NoneType
    +path
    +has_nones
    +path
    +adapter
    +alias
    +alias
    +adapter
    +with_poly_entity
    +adapter
    +adapter
    +adapter
    +user_defined_adapter
    +user_defined_adapter: adapter
    +add_to_collection
    +with_poly_entity
    +to_adapt: with_poly_entity
    +insp
    +alt_selectable
    +alt_selectable: NoneType
    +to_adapt
    +to_adapt_insp
    +clauses
    +innerjoin
    +chained_from_outerjoin: bool
    +add_to_collection
    +localparent
    +localparent: parentmapper
    +should_nest_selectable
    +query_entity_key: NoneType
    +indexes
    +clause
    +towrap
    +efm
    +onclause
    +onclause
    +onclause
    +attach_on_outside
    +extra_join_criteria: extra_criteria
    +additional_entity_criteria
    +eagerjoin
    +eagerjoin
    +col
    +target_join
    +right_splice: bool
    +target_join
    +right_splice: bool
    +eagerjoin
    +eagerjoin
    +eagerjoin
    +compile_state
    +user_defined_adapter
    +decorator: user_defined_adapter
    +decorator
    +decorator
    +decorator
    +our_path
    +eager_adapter
    +key
    +collection
    +result_list
    +inst
    +result_list
    +collection
    +result_list
    +inst
    +existing
    --
    -__init__(parent, strategy_key)
    +init_class_attribute(mapper)
    +setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection, parentmapper, chained_from_outerjoin)
    -_init_user_defined_eager_proc(loadopt, compile_state, target_attributes)
    -_setup_query_on_user_defined_adapter(context, entity, path, adapter, user_defined_adapter)
    -_generate_row_adapter(compile_state, entity, path, loadopt, adapter, column_collection, parentmapper, chained_from_outerjoin)
    -_create_eager_join(compile_state, query_entity, path, adapter, parentmapper, clauses, innerjoin, chained_from_outerjoin, extra_criteria)
    -_splice_nested_inner_join(path, join_obj, clauses, onclause, extra_criteria, splicing)
    -_create_eager_adapter(context, result, adapter, path, loadopt)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
    -_create_collection_loader(context, key, _instance, populators)
    +load_collection_from_joined_new_row(dict_, row)
    +load_collection_from_joined_existing_row(dict_, row)
    +load_collection_from_joined_exec(dict_, row)
    -_create_scalar_loader(context, key, _instance, populators)
    +load_scalar_from_joined_new_row(dict_, row)
    +load_scalar_from_joined_existing_row(dict_, row)
    +load_scalar_from_joined_exec(dict_, row)
  }

  class SelectInLoader {
    +query_info
    +is_m2o
    +lazyloader
    +pk_to_fk
    +pk_cols
    +fk_cols
    +in_expr
    +zero_idx: bool
    +in_expr
    +zero_idx: bool
    +pk_cols
    +in_expr
    +zero_idx: bool
    +in_expr
    +zero_idx: bool
    +lazyloader
    +lookup_cols
    +pa_insp
    +pk_cols
    +in_expr
    +zero_idx: bool
    +in_expr
    +zero_idx: bool
    +selectin_path: effective_path
    +path_w_prop
    +with_poly_entity
    +effective_entity
    +effective_entity
    +query_info
    +our_states
    +none_states
    +mapper
    +state_dict
    +related_ident
    +query_info
    +our_states
    +pk_cols
    +in_expr
    +pk_cols
    +in_expr
    +bundle_ent
    +bundle_sql
    +entity_sql
    +q
    +q
    +q
    +q
    +orig_query
    +effective_path
    +new_options
    +cached_options
    +uncached_options
    +new_options
    +effective_path
    +q
    +q
    +q
    +eager_order_by
    +eager_order_by
    +q
    +q
    +uselist
    +our_keys
    +chunk
    +our_keys
    +data
    +related_obj
    +uselist
    +chunk
    +our_states
    +primary_keys
    +data
    +collection
    --
    -__init__(parent, strategy_key)
    -_init_for_omit_join()
    -_init_for_omit_join_m2o()
    -_init_for_join()
    +init_class_attribute(mapper)
    +create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
    -_load_for_path(context, path, states, load_only, effective_entity, loadopt, recursion_depth, execution_options)
    -_setup_outermost_orderby()
    -_load_via_child(our_states, none_states, query_info, q, context, execution_options)
    -_load_via_parent(our_states, query_info, q, context, execution_options)
  }

  class _AbstractLoad {
    +propagate_to_loaders: bool
    +coerced_alias
    +coerced_alias: alias
    +ot
    +coerced_alias
    +coerced_alias: NoneType
    +cloned
    +cloned
    +wildcard_strategy
    +cloned
    +loader
    +loader
    +strategy
    +expression
    +self
    +strategy_key
    +strategy_key: NoneType
    +strategy_key
    +strategy_key
    +strategy_key
    +strategy_key
    +i
    --
    +contains_eager(attr, alias, _is_chain): Self
    +load_only(): Self
    +joinedload(attr, innerjoin): Self
    +subqueryload(attr): Self
    +selectinload(attr, recursion_depth): Self
    +lazyload(attr): Self
    +immediateload(attr, recursion_depth): Self
    +noload(attr): Self
    +raiseload(attr, sql_only): Self
    +defaultload(attr): Self
    +defer(key, raiseload): Self
    +undefer(key): Self
    +undefer_group(name): Self
    +with_expression(key, expression): Self
    +selectin_polymorphic(classes): Self
    -_coerce_strat(strategy): _StrategyKey
    -_coerce_strat(strategy)
    -_coerce_strat(strategy)
    -_set_relationship_strategy(attr, strategy, propagate_to_loaders, opts, _reconcile_to_other): Self
    -_set_column_strategy(attrs, strategy, opts, extra_criteria): Self
    -_set_generic_strategy(attrs, strategy, _reconcile_to_other): Self
    -_set_class_strategy(strategy, opts): Self
    -_apply_to_parent(parent)
    +options(): Self
    -_clone_for_bind_strategy(attrs, strategy, wildcard_key, opts, attr_group, propagate_to_loaders, reconcile_to_other, extra_criteria): Self
    +process_compile_state_replaced_entities(compile_state, mapper_entities)
    +process_compile_state(compile_state)
    -_process(compile_state, mapper_entities, raiseerr)
    -{class} _chop_path(to_chop, path, debug)
  }

  class Load {
    +path: PathRegistry
    +context
    +additional_source_entities
    +insp
    +load
    +cloned
    +orig_query
    +orig_cache_key
    +replacement_cache_key
    +found_crit: bool
    +found_crit: bool
    +orig_cache_key
    +replacement_cache_key
    +new_context
    +cloned
    +path
    +ezero: NoneType
    +ezero
    +reconciled_lead_entity
    +cloned
    +attrname
    +parent_entity
    +attrname
    +parent_entity
    +load_element
    +load_element
    +load_element
    +r1
    +d
    --
    -__init__(entity)
    -__str__(): str
    -{class} _construct_for_existing_path(path): Load
    -_adapt_cached_option_to_uncached_option(context, uncached_opt): ORMOption
    -_prepend_path(path): Load
    -_adjust_for_extra_criteria(context): Load
    +process(): _LoadElement
    -_reconcile_query_entities_with_us(mapper_entities, raiseerr)
    -_process(compile_state, mapper_entities, raiseerr)
    -_apply_to_parent(parent)
    +options(): Self
    -_clone_for_bind_strategy(attrs, strategy, wildcard_key, opts, attr_group, propagate_to_loaders, reconcile_to_other, extra_criteria): Self
    -__getstate__()
    -__setstate__(state)
  }

  class _WildcardLoad {
    +cache_key_traversal: _CacheKeyTraversalType
    +strategy
    +local_opts: _OptsType
    +path
    +propagate_to_loaders: bool
    +attr
    +attr
    +attr
    +attr
    +effective_path
    +loader
    +is_refresh
    +entities
    +current_path
    +start_path: _PathRepresentation
    +new_path
    +token
    +entity
    +path_element: entity
    +loader
    +raiseerr: bool
    +d
    --
    -__init__()
    -_clone_for_bind_strategy(attrs, strategy, wildcard_key, opts, attr_group, propagate_to_loaders, reconcile_to_other, extra_criteria)
    +options(): Self
    -_apply_to_parent(parent)
    -_process(compile_state, mapper_entities, raiseerr)
    -_find_entity_basestring(entities, token, raiseerr)
    -__getstate__()
    -__setstate__(state)
  }

  class _LoadElement {
    -_extra_criteria
    -_reconcile_to_other
    +strategy
    +path: PathRegistry
    +propagate_to_loaders: bool
    +local_opts
    +is_token_strategy: bool
    +is_class_strategy: bool
    +cls
    +s
    +new
    +d
    +path
    +found_entities: bool
    +ezero
    +found_entities: bool
    +chopped_start_path
    +tokens_removed_from_start_path
    +loader_lead_path_element
    +effective_path
    +keys
    +opt
    +path
    +cloned
    +cloned
    +existing
    +replacement
    --
    -__hash__(): int
    -__eq__(other)
    +is_opts_only(): bool
    -_clone(): _LoadElement
    -_update_opts(): _LoadElement
    -__getstate__()
    -__setstate__(state)
    -_raise_for_no_match(parent_loader, mapper_entities)
    -_adjust_effective_path_for_current_path(effective_path, current_path)
    -_init_path(path, attr, wildcard_key, attr_group, raiseerr, extra_criteria)
    -_prepare_for_compile_state(parent_loader, compile_state, mapper_entities, reconciled_lead_entity, raiseerr)
    +process_compile_state(parent_loader, compile_state, mapper_entities, reconciled_lead_entity, raiseerr)
    +{class} create(path, attr, strategy, wildcard_key, local_opts, propagate_to_loaders, raiseerr, attr_group, reconcile_to_other, extra_criteria): _LoadElement
    -__init__()
    -_recurse(): _LoadElement
    -_prepend_path_from(parent): _LoadElement
    -_prepend_path(path): _LoadElement
    -{static} _reconcile(existing): _LoadElement
  }

  class _AttributeStrategyLoad {
    -_of_type
    -_path_with_polymorphic_path
    +is_class_strategy: bool
    +is_token_strategy: bool
    +prop: attr
    +path
    +path
    +ac
    +ext_info
    +path
    +path
    +path
    +orig_query
    +current_query
    +k1
    +k2
    +pwpi
    +pwpi
    +start_path
    +new_path
    +start_path: new_path
    +key
    +existing_aliased_insp
    +this_aliased_insp: pwpi
    +new_aliased_insp
    +current_path
    +is_refresh
    +effective_path
    +effective_path
    +effective_path
    +d
    --
    -_init_path(path, attr, wildcard_key, attr_group, raiseerr, extra_criteria)
    -_generate_extra_criteria(context)
    -_set_of_type_info(context, current_path)
    -_prepare_for_compile_state(parent_loader, compile_state, mapper_entities, reconciled_lead_entity, raiseerr)
    -__getstate__()
    -__setstate__(state)
  }

  class _TokenStrategyLoad {
    +inherit_cache: bool
    +is_class_strategy: bool
    +is_token_strategy: bool
    +default_token
    +attr
    +path
    +current_path
    +is_refresh
    +effective_path
    +effective_path
    +new_effective_path
    +effective_path: new_effective_path
    --
    -_init_path(path, attr, wildcard_key, attr_group, raiseerr, extra_criteria)
    -_prepare_for_compile_state(parent_loader, compile_state, mapper_entities, reconciled_lead_entity, raiseerr)
  }

  class _ClassStrategyLoad {
    +inherit_cache: bool
    +is_class_strategy: bool
    +is_token_strategy: bool
    +current_path
    +is_refresh
    +effective_path
    +new_effective_path
    +effective_path: new_effective_path
    --
    -_init_path(path, attr, wildcard_key, attr_group, raiseerr, extra_criteria)
    -_prepare_for_compile_state(parent_loader, compile_state, mapper_entities, reconciled_lead_entity, raiseerr)
  }

  class ColumnProperty {
    +strategy_wildcard_key
    +inherit_cache: bool
    +columns
    -_is_polymorphic_discriminator: bool
    -_mapped_by_synonym
    +comparator_factory
    +columns
    +doc
    +column
    +state
    +strategies
    +state
    +strategies
    +value
    +impl
    --
    -__init__(column)
    +declarative_scan(decl_scan, registry, cls, originating_module, key, mapped_container, annotation, extracted_mapped_annotation, is_dataclass_field)
    +mapper_property_to_assign()
    +columns_to_assign()
    -_memoized_attr__renders_in_subqueries(): bool
    -_memoized_attr__deferred_column_loader()
    -_memoized_attr__raise_column_loader()
    -__clause_element__(): roles.ColumnsClauseRole
    +expression(): roles.ColumnsClauseRole
    +instrument_class(mapper)
    +do_init()
    +copy()
    +merge(session, source_state, source_dict, dest_state, dest_dict, load, _recursive, _resolve_conflict_map)
  }

  class Comparator {
    +prop
    -_of_type
    +entity
    +mapper
    +adapt_from
    +of_type_entity
    +of_type_entity: NoneType
    +exprs
    +where_criteria
    +info
    +to_selectable
    +single_crit
    +where_criteria
    +where_criteria: single_crit
    +is_aliased_class: bool
    +to_selectable: NoneType
    +source_selectable
    +source_selectable: NoneType
    +crit
    +where_criteria: crit
    +where_criteria
    +j
    +j
    +where_criteria
    +where_criteria
    +crit
    +ex
    +ex
    +clause
    +state
    +dict_
    +criterion
    --
    -__init__(prop, parentmapper, adapt_to_entity, of_type, extra_criteria)
    +adapt_to_entity(adapt_to_entity)
    -_memoized_attr_entity()
    -_memoized_attr_mapper()
    -_source_selectable(): FromClause
    -__clause_element__()
    +of_type(class_)
    +and_()
    +in_(other): NoReturn
    -__eq__(other)
    -_criterion_exists(criterion): Exists
    +any(criterion)
    +has(criterion)
    +contains(other)
    -__negated_contains_or_equals(other)
    +state_bindparam(state, remote_col)
    +adapt(): _CE
    -__ne__(other)
    -_memoized_attr_property()
  }

  class MappedSQLExpression {
    +inherit_cache: bool
  }

  class MappedColumn {
    +deferred
    +deferred_raiseload: bool
    +deferred_group
    +column
    +foreign_keys
    -_attribute_options: _AttributeOptions
    +attr_opts
    +insert_default
    +new
    +effective_deferred
    +effective_deferred
    +col
    +column
    +supercls_mapper
    +colname
    +column
    +sqltype
    +decl_base
    +sqltype
    +argument
    +argument
    +nullable
    +our_type
    +use_args_from: NoneType
    +our_type_is_pep593: bool
    +pep_593_components
    +raw_pep_593_type
    +raw_pep_593_type
    +nullable: bool
    +use_args_from: elem
    +our_type_is_pep593: bool
    +raw_pep_593_type: NoneType
    +sqltype
    +arg
    +new_sqltype: NoneType
    +checks
    +checks
    +new_sqltype
    --
    -__init__()
    -_copy(): Self
    +name(): str
    +mapper_property_to_assign()
    +columns_to_assign()
    -__clause_element__()
    +operate(op)
    +reverse_operate(op, other)
    +found_in_pep593_annotated(): Any
    +declarative_scan(decl_scan, registry, cls, originating_module, key, mapped_container, annotation, extracted_mapped_annotation, is_dataclass_field)
    +declarative_scan_for_composite(registry, cls, originating_module, key, param_name, param_annotation)
    -_init_column_for_annotation(cls, registry, argument, originating_module)
  }

  class _DeStringifyAnnotation {
    -__call__(cls, annotation, originating_module)
  }

  class _DeStringifyUnionElements {
    -__call__(cls, annotation, originating_module)
  }

  class _EvalNameOnly {
    -__call__(name, module_name): Any
  }

  class CascadeOptions {
    +save_update: bool
    +delete: bool
    +refresh_expire: bool
    +merge: bool
    +expunge: bool
    +delete_orphan: bool
    +values
    +self
    +values
    --
    -__new__(value_list): CascadeOptions
    -__repr__()
    +{class} from_string(arg)
  }

  class _TraceAdaptRole {
    +ALIASED_INSP
    +JOINEDLOAD_USER_DEFINED_ALIAS
    +JOINEDLOAD_PATH_WITH_POLYMORPHIC
    +JOINEDLOAD_MEMOIZED_ADAPTER
    +MAPPER_POLYMORPHIC_ADAPTER
    +WITH_POLYMORPHIC_ADAPTER
    +WITH_POLYMORPHIC_ADAPTER_RIGHT_JOIN
    +DEPRECATED_JOIN_ADAPT_RIGHT_SIDE
    +ADAPT_FROM_STATEMENT
    +COMPOUND_EAGER_STATEMENT
    +LEGACY_SELECT_FROM_ALIAS
  }

  class ORMStatementAdapter {
    -__init__(role, selectable)
  }

  class ORMAdapter {
    +is_aliased_class: bool
    +aliased_insp
    +selectable
    +entity
    --
    -__init__(role, entity)
    -_include_fn(elem)
  }

  class AliasedClass {
    -__name__: str
    +insp
    +mapper
    +nest_adapters: bool
    +alias
    +alias
    +nest_adapters: bool
    +obj
    +ent
    +target
    +attr
    +attr
    +attr
    +attr
    +attr
    +attr
    --
    -__init__(mapped_class_or_ac, alias, name, flat, adapt_on_names, with_polymorphic_mappers, with_polymorphic_discriminator, base_alias, use_mapper_path, represents_outer_join)
    -{class} _reconstitute_from_aliased_insp(aliased_insp)
    -__getattr__(key): Any
    -_get_from_serialized(key, mapped_class, aliased_insp): Any
    -__repr__(): str
    -__str__(): str
  }

  class AliasedInsp {
    +mapper
    +selectable: FromClause
    -_adapter: ORMAdapter
    +with_polymorphic_mappers
    -_with_polymorphic_entities
    -_weak_entity
    -_target
    +mapped_class_or_ac
    +mapper
    +ent
    +primary_mapper
    +selectable
    +ent
    +ent
    +is_aliased_class: bool
    +primary_mapper
    +our_classes
    +new_classes
    +classes
    +selectable
    +d
    +self_poly
    +cols_plus_keys
    +cols_plus_keys
    +cols_plus_keys
    +value
    +with_poly
    +with_poly: str
    --
    -__init__(entity, inspected, selectable, name, with_polymorphic_mappers, polymorphic_on, _base_alias, _use_mapper_path, adapt_on_names, represents_outer_join, nest_adapters)
    -{class} _alias_factory(element, alias, name, flat, adapt_on_names)
    -{class} _with_polymorphic_factory(base, classes, selectable, flat, polymorphic_on, aliased, innerjoin, adapt_on_names, _use_mapper_path)
    +entity()
    -_memoized_method___clause_element__(): FromClause
    +entity_namespace()
    +class_()
    -_path_registry(): AbstractEntityRegistry
    -__getstate__()
    -__setstate__(state)
    -_merge_with(other)
    -_adapt_element(expr, key): _ORMCOLEXPR
    -_orm_adapt_element(obj, key): _CE
    -_entity_for_mapper(mapper)
    -_memoized_attr__get_clause()
    -_memoized_attr__memoized_values()
    -_memoized_attr__all_column_expressions()
    -_memo(key, callable_)
    -__repr__()
    -__str__()
  }

  class _WrapUserEntity {
    +decl_api
    +subject
    --
    -__init__(subject)
    -__getattribute__(name)
  }

  class LoaderCriteriaOption {
    +root_entity
    +entity
    +where_criteria
    +deferred_where_criteria: bool
    +include_aliases: bool
    +propagate_to_loaders: bool
    -_where_crit_orig: Any
    +entity
    +wrap_entity
    +wrap_entity
    +stack
    +subclass
    +ent
    +crit
    +crit
    +load_criteria
    --
    -__init__(entity_or_base, where_criteria, loader_only, include_aliases, propagate_to_loaders, track_closure_variables)
    -{class} _unreduce(entity, where_criteria, include_aliases, propagate_to_loaders)
    -__reduce__()
    -_all_mappers()
    -_should_include(compile_state): bool
    -_resolve_where_criteria(ext_info)
    +process_compile_state_replaced_entities(compile_state, mapper_entities)
    +process_compile_state(compile_state)
    +get_global_criteria(attributes)
  }

  class Bundle {
    +single_entity: bool
    +is_clause_element: bool
    +is_mapper: bool
    +is_aliased_class: bool
    +is_bundle: bool
    -_propagate_attrs: _PropagateAttrsType
    +proxy_set
    +exprs
    +coerced_exprs
    +mp
    +ie
    +columns
    +c
    +cloned
    +annotations
    +plugin_subject
    +cloned
    +keyed_tuple
    --
    -__init__(name)
    -_gen_cache_key(anon_map, bindparams)
    +mapper()
    +entity()
    +entity_namespace()
    -_clone()
    -__clause_element__()
    +clauses()
    +label(name)
    +create_row_processor(query, procs, labels)
    +proc(): Any
  }

  class _ORMJoin {
    +inherit_cache: bool
    +left_info
    +right_info
    +adapt_to
    +on_selectable
    +prop
    +prop: onclause
    +on_selectable
    +prop: NoneType
    +on_selectable: NoneType
    +left_selectable
    +adapt_from
    +adapt_from: on_selectable
    +adapt_from: left_selectable
    +right
    +onclause: pj
    +left
    +onclause: sj
    +onclause: pj
    +parententity
    +parententity: left_info
    +parententity: NoneType
    +augment_onclause
    +right_info
    +single_crit
    +single_crit
    +leftmost: other
    +leftmost
    +left
    --
    -__init__(left, right, onclause, isouter, full, _left_memo, _right_memo, _extra_criteria)
    -_splice_into_center(other)
    +join(right, onclause, isouter, full): _ORMJoin
    +outerjoin(right, onclause, full): _ORMJoin
  }

  class _CleanupError {
  }

  class InstrumentationEvents {
    +listen_cls
    +key
    +target
    --
    -{class} _accept_with(target, identifier)
    -{class} _listen(event_key, propagate)
    +listen()
    +remove()
    -{class} _clear()
    +class_instrument(cls)
    +class_uninstrument(cls)
    +attribute_instrument(cls, key, inst)
  }

  class _InstrumentationEventsHold {
    +dispatch
    --
    -__init__(class_)
  }

  class InstanceEvents {
    +orm
    +manager
    +target: Any
    +target: state
    +runid
    +event_key
    --
    -{class} _new_classmanager_instance(class_, classmanager)
    -{class} _accept_with(target, identifier)
    -{class} _listen(event_key, raw, propagate, restore_load_context)
    +wrap()
    -{class} _clear()
    +first_init(manager, cls)
    +init(target, args, kwargs)
    +init_failure(target, args, kwargs)
    -_sa_event_merge_wo_load(target, context)
    +load(target, context)
    +refresh(target, context, attrs)
    +refresh_flush(target, flush_context, attrs)
    +expire(target, attrs)
    +pickle(target, state_dict)
    +unpickle(target, state_dict)
  }

  class _EventsHold {
    +all_holds
    --
    -__init__(class_)
    -{class} _clear()
  }

  class HoldEvents {
    -_dispatch_target
    +target
    +collection
    +collection
    +stack
    +subclass
    +subject
    --
    -{class} _listen(event_key, raw, propagate, retval)
  }

  class _InstanceEventsHold {
    +all_holds
    --
    +resolve(class_)
  }

  class HoldInstanceEvents {
  }

  class MapperEvents {
    +orm
    +mapper
    +meth
    +target_index
    +target_index: NoneType
    +arg
    +event_key
    --
    -{class} _new_mapper_instance(class_, mapper)
    -{class} _accept_with(target, identifier)
    -{class} _listen(event_key, raw, retval, propagate)
    +wrap(): Any
    -{class} _clear()
    +instrument_class(mapper, class_)
    +after_mapper_constructed(mapper, class_)
    +before_mapper_configured(mapper, class_)
    +mapper_configured(mapper, class_)
    +before_configured()
    +after_configured()
    +before_insert(mapper, connection, target)
    +after_insert(mapper, connection, target)
    +before_update(mapper, connection, target)
    +after_update(mapper, connection, target)
    +before_delete(mapper, connection, target)
    +after_delete(mapper, connection, target)
  }

  class _MapperEventsHold {
    +all_holds
    --
    +resolve(class_)
  }

  class HoldMapperEvents {
  }

  class SessionEvents {
    +target
    +is_instance_event
    +fn
    +target
    +target: state
    +runid
    +event_key
    --
    -_lifecycle_event()
    -{class} _accept_with(target, identifier)
    -{class} _listen(event_key)
    +wrap(state)
    +do_orm_execute(orm_execute_state)
    +after_transaction_create(session, transaction)
    +after_transaction_end(session, transaction)
    +before_commit(session)
    +after_commit(session)
    +after_rollback(session)
    +after_soft_rollback(session, previous_transaction)
    +before_flush(session, flush_context, instances)
    +after_flush(session, flush_context)
    +after_flush_postexec(session, flush_context)
    +after_begin(session, transaction, connection)
    +before_attach(session, instance)
    +after_attach(session, instance)
    +after_bulk_update(update_context)
    +after_bulk_delete(delete_context)
    +transient_to_pending(session, instance)
    +pending_to_transient(session, instance)
    +persistent_to_transient(session, instance)
    +pending_to_persistent(session, instance)
    +detached_to_persistent(session, instance)
    +loaded_as_persistent(session, instance)
    +persistent_to_deleted(session, instance)
    +deleted_to_persistent(session, instance)
    +deleted_to_detached(session, instance)
    +persistent_to_detached(session, instance)
  }

  class AttributeEvents {
    +dispatch
    +target
    +value
    +value: NoneType
    +event_key
    +manager
    --
    -{static} _set_dispatch(dispatch_cls)
    -{class} _accept_with(target, identifier)
    -{class} _listen(event_key, active_history, raw, retval, propagate, include_key)
    +wrap(): Any
    +append(target, value, initiator)
    +append_wo_mutation(target, value, initiator)
    +bulk_replace(target, values, initiator)
    +remove(target, value, initiator)
    +set(target, value, oldvalue, initiator)
    +init_scalar(target, value, dict_)
    +init_collection(target, collection, collection_adapter)
    +dispose_collection(target, collection, collection_adapter)
    +modified(target, initiator)
  }

  class QueryEvents {
    +fn
    +query
    +event_key
    +event_key
    --
    +before_compile(query)
    +before_compile_update(query, update_context)
    +before_compile_delete(query, delete_context)
    -{class} _listen(event_key, retval, bake_ok)
    +wrap(): Any
    +wrap(): Any
  }

  class Mapper {
    +dispatch
    -_configure_failed: Any
    +is_mapper: bool
    +represents_outer_join: bool
    +registry: _RegistryType
    +class_
    -_identity_class
    -_delete_orphans
    -_dependency_processors
    -_memoized_values
    -_inheriting_mappers
    -_all_tables
    -_polymorphic_attr_key
    -_pks_by_table
    -_cols_by_table
    -_props
    -_init_properties
    -_columntoproperty: _ColumnMapping
    -_set_polymorphic_identity
    -_validate_polymorphic_identity
    +tables
    +validators
    +always_refresh: bool
    +allow_partial_pks: bool
    +version_id_col
    +with_polymorphic
    +version_id_generator
    +local_table: FromClause
    +persist_selectable: FromClause
    +inherits
    +inherit_condition
    +configured: bool
    +concrete: bool
    +primary_key
    +class_manager
    +single: bool
    +non_primary: bool
    +polymorphic_on
    +polymorphic_map
    +polymorphic_identity
    +base_mapper
    +columns
    +c
    +np
    +fks
    +subcl
    +manager
    +manager
    +method
    +method
    +validation_opts
    +prop
    +expr
    +all_cols
    +pk_cols
    +coerced_pk_arg
    +coerced_pk_arg: NoneType
    +primary_key
    +primary_key
    +primary_key
    +explicit_col_props_by_column
    +explicit_col_props_by_key
    +possible_col_prop
    +possible_col_prop: prop_arg
    +incoming_prop
    +new_prop
    +column_key
    +column_key
    +setter: bool
    +polymorphic_key
    +setter: bool
    +prop
    +prop
    +col
    +setter: bool
    +instrument: bool
    +col
    +instrument: bool
    +key
    +col
    +key
    +prop
    +polymorphic_key
    +dict_
    +polymorphic_identity
    +identities
    +stack
    +item
    +descriptor_props
    +implementing_attribute
    +descriptor_props
    +prop
    +prop: prop_arg
    +col
    +path
    +col
    +col
    +col
    +syn
    +oldprop
    +columns
    +mapped_column
    +mc
    +mc
    +mc
    +existing_column
    +incoming_column: single_column
    +equated_pair_key
    +incoming_column
    +equated_pair_key
    +msg
    +new_prop
    +descriptor_props
    +prop
    +l
    +prop
    +orphan_possible: bool
    +orphan_possible: bool
    +has_parent
    +mappers
    +mapper_set
    +m
    +mappers
    +mappers
    +tables
    +mappers
    +from_obj
    +from_obj
    +from_obj
    +vid_col
    +with_polymorphic_mappers: _with_polymorphic_mappers
    +result
    +col_to_property
    +annotations
    +selectable
    +spec
    +selectable
    +selectable: NoneType
    +mappers
    +poly_properties
    +adapter
    +poly_properties
    +poly_properties
    +mappers
    +descriptor_props
    +pk_keys
    +descriptor_props
    +params
    +result: _EquivalentColumnMap
    +attr
    +s
    +m
    +m
    +m
    +m
    +descendants
    +stack
    +item
    +pk_cols
    +pk_cols
    +rk
    +pk_cols
    +pk_cols
    +mapping
    +mapping
    +state
    +dict_
    +manager
    +state
    +identity_key
    +key_fns
    +collection
    +cols
    +prop
    +prop
    +prop
    +state
    +dict_
    +prop
    +props
    +col_attribute_names
    +tables
    +leftcol
    +rightcol
    +leftval
    +rightval
    +allconds
    +start: bool
    +start: bool
    +cond
    +cols
    +prev: self
    +prev: m
    +cache
    +mapper: super_mapper
    +retval
    +retval: bool
    +mapper: polymorphic_from
    +enabled_via_opt
    +enabled_via_opt_mappers
    +mapper
    +strategy_options
    +polymorphic_prop
    +keep_props
    +keep_props
    +disable_opt
    +enable_opt
    +classes_to_include
    +m
    +m
    +enable_opt
    +disable_opt
    +primary_key
    +in_expr
    +in_expr
    +in_expr
    +q
    +in_expr
    +primary_key
    +q
    +q
    +q
    +visited_states
    +visitables
    +visitables
    +prop
    +queue
    +table_to_mapper
    +extra_dependencies
    +super_
    +parent
    +dep
    +cols
    +cols
    +sorted_
    +ret
    +value
    +result
    +cols
    --
    -__init__(class_, local_table, properties, primary_key, non_primary, inherits, inherit_condition, inherit_foreign_keys, always_refresh, version_id_col, version_id_generator, polymorphic_on, _polymorphic_map, polymorphic_identity, concrete, with_polymorphic, polymorphic_abstract, polymorphic_load, allow_partial_pks, batch, column_prefix, include_properties, exclude_properties, passive_updates, passive_deletes, confirm_deleted_rows, eager_defaults, legacy_is_orphan, _compiled_cache_size)
    -_prefer_eager_defaults(dialect, table)
    -_gen_cache_key(anon_map, bindparams)
    +mapper()
    +entity()
    +mapped_table()
    -_path_registry(): CachingEntityRegistry
    -_configure_inheritance()
    -_set_with_polymorphic(with_polymorphic)
    -_add_with_polymorphic_subclass(mapper)
    -_set_concrete_base(mapper)
    -_set_polymorphic_on(polymorphic_on)
    -_configure_class_instrumentation()
    -_set_dispose_flags()
    -_str_arg_to_mapped_col(argname, key)
    -_configure_pks()
    -_configure_properties()
    -_configure_polymorphic_setter(init)
    -_set_polymorphic_identity()
    -_validate_polymorphic_identity(state, dict_)
    -_version_id_prop()
    -_acceptable_polymorphic_identities()
    -_prop_set()
    -_adapt_inherited_property(key, prop, init)
    -_configure_property(key, prop_arg)
    -_make_prop_from_column(key, column)
    -_reconcile_prop_with_incoming_columns(key, existing_prop, warn_only, incoming_prop, single_column)
    -_property_from_column(key, column)
    -_check_configure()
    -_post_configure_properties()
    +add_properties(dict_of_properties)
    +add_property(key, prop)
    -_expire_memoizations()
    -_log_desc(): str
    -_log(msg)
    -_log_debug(msg)
    -__repr__(): str
    -__str__(): str
    -_is_orphan(state): bool
    +has_property(key): bool
    +get_property(key, _configure_mappers)
    +get_property_by_column(column)
    +iterate_properties()
    -_mappers_from_spec(spec, selectable)
    -_selectable_from_mappers(mappers, innerjoin): FromClause
    -_version_id_has_server_side_value(): bool
    -_single_table_criterion()
    -_has_aliased_polymorphic_fromclause()
    -_should_select_with_poly_adapter()
    -_with_polymorphic_mappers()
    -_post_inspect()
    -_with_polymorphic_selectable(): FromClause
    -_insert_cols_evaluating_none()
    -_insert_cols_as_none()
    -_propkey_to_col()
    -_pk_keys_by_table()
    -_pk_attr_keys_by_table()
    -_server_default_cols()
    -_server_onupdate_default_cols()
    -_server_default_col_keys()
    -_server_onupdate_default_col_keys()
    -_server_default_plus_onupdate_propkeys()
    -__clause_element__()
    +select_identity_token()
    +selectable(): FromClause
    -_with_polymorphic_args(spec, selectable, innerjoin)
    -_polymorphic_properties()
    -_all_column_expressions()
    -_columns_plus_keys(polymorphic_mappers)
    -_polymorphic_adapter()
    -_iterate_polymorphic_properties(mappers)
    +attrs()
    +all_orm_descriptors()
    -_pk_synonyms()
    +synonyms()
    +entity_namespace()
    +column_attrs()
    +relationships()
    +composites()
    -_filter_properties(type_)
    -_get_clause()
    -_equivalent_columns(): _EquivalentColumnMap
    +visit_binary()
    -_is_userland_descriptor(assigned_name, obj): bool
    -_dataclass_fields()
    -_should_exclude(name, assigned_name, local, column)
    +common_parent(other): bool
    +is_sibling(other): bool
    -_canload(state, allow_subtypes): bool
    +isa(other): bool
    +iterate_to_root()
    +self_and_descendants()
    +polymorphic_iterator()
    +primary_mapper()
    +primary_base_mapper()
    -_result_has_identity_key(result, adapter)
    +identity_key_from_row(row, identity_token, adapter)
    +identity_key_from_primary_key(primary_key, identity_token)
    +identity_key_from_instance(instance)
    -_identity_key_from_state(state, passive)
    +primary_key_from_instance(instance)
    -_persistent_sortkey_fn()
    +key()
    +key()
    -_identity_key_props()
    -_all_pk_cols()
    -_should_undefer_in_wildcard()
    -_primary_key_propkeys()
    -_get_state_attr_by_column(state, dict_, column, passive): Any
    -_set_committed_state_attr_by_column(state, dict_, column, value)
    -_set_state_attr_by_column(state, dict_, column, value)
    -_get_committed_attr_by_column(obj, column)
    -_get_committed_state_attr_by_column(state, dict_, column, passive)
    -_optimized_get_statement(state, attribute_names)
    +visit_binary()
    -_iterate_to_target_viawpoly(mapper)
    -_would_selectinload_combinations_cache()
    -_would_selectin_load_only_from_given_mapper(super_mapper)
    -_should_selectin_load(enabled_via_opt, polymorphic_from)
    -_subclass_load_via_in(entity, polymorphic_from)
    -_subclass_load_via_in_mapper()
    +cascade_iterator(type_, state, halt_on)
    -_compiled_cache()
    -_multiple_persistence_tables()
    -_sorted_tables()
    +skip()
    -_memo(key, callable_): _T
    -_table_to_equated()
    +set_union(y)
  }

  class _OptGetColumnsNotAvailable {
  }

  class _ColumnMapping {
    +prop
    --
    -__init__(mapper)
    -__missing__(column)
  }

  class _PlainColumnGetter {
    +state
    +m
    +key
    +obj
    --
    -__init__(cols)
    -__reduce__()
    -_cols(mapper)
    -__call__(value)
  }

  class _SerializableColumnGetterV2 {
    +colkeys
    +cols
    +metadata
    --
    -__init__(colkeys)
    -__reduce__()
    -{class} _reduce_from_cols(cols)
    -_table_key()
    -_cols(mapper)
  }

  class _AttrGetter {
    +obj
    +state
    +mp
    +dict_
    +obj
    --
    -__init__(attr_name)
    -__call__(mapped_object): Any
    -__reduce__()
  }

  class KeyFuncDict {
    +mp
    +mapper
    +attributes
    +relationship: str
    +relationship
    +relationship
    +key
    +key: NoneType
    +key
    +key: NoneType
    --
    -__init__(keyfunc)
    -{class} _unreduce(keyfunc, values, adapter)
    -__reduce__()
    -_raise_for_unpopulated(value, initiator)
    +set(value, _sa_initiator)
    +remove(value, _sa_initiator)
  }

  class _MKeyfuncMapped {
    -__init__()
  }

  class QueryPropertyDescriptor {
    -__get__(instance, owner)
  }

  class scoped_session {
    -_support_async: bool
    +session_factory
    +registry
    +sess
    +sess
    --
    -__init__(session_factory, scopefunc)
    -_proxied(): _S
    -__call__(): _S
    +configure()
    +remove()
    +query_property(query_cls): QueryPropertyDescriptor
  }

  class query {
    -__get__(instance, owner)
  }

  class ClsRegistryToken {
  }

  class _MultipleClassMarker {
    +contents
    +on_remove
    +ref
    +cls
    +modules
    --
    -__init__(classes, on_remove)
    +remove_item(cls)
    -__iter__()
    +attempt_get(path, key)
    -_remove_item(ref)
    +add_item(item)
  }

  class _ModuleMarker {
    +parent
    +contents
    +mod_ns: _ModNS
    +path
    +marker
    +marker
    +existing
    +existing
    +existing
    --
    -__init__(name, parent)
    -__contains__(name): bool
    -__getitem__(name): ClsRegistryToken
    -_remove_item(name)
    +resolve_attr(key)
    +get_module(name): _ModuleMarker
    +add_class(name, cls)
    +remove_class(name, cls)
  }

  class _ModNS {
    -__parent: _ModuleMarker
    +value
    --
    -__init__(parent)
    -__getattr__(key)
  }

  class _GetColumns {
    +cls
    +mp
    +desc
    +prop
    +key
    --
    -__init__(cls)
    -__getattr__(key): Any
  }

  class _GetTable {
    +key: str
    +metadata: MetaData
    --
    -__init__(key, metadata)
    -__getattr__(key): Table
  }

  class _class_resolver {
    +cls
    +prop
    +fallback
    +arg: str
    +favor_tables: bool
    -_resolvers
    +cls
    +manager
    +decl_base
    +decl_class_registry
    +metadata
    +registry
    +value
    +generic_match
    +clsarg
    +name
    +d
    +rval: NoneType
    +rval
    +rval
    +x
    --
    -__init__(cls, prop, fallback, arg, favor_tables)
    -_access_cls(key): Any
    -_raise_for_name(name, err): NoReturn
    -_resolve_name()
    -__call__(): Any
  }

  class _ConnectionCallableProto {
    -__call__(mapper, instance): Connection
  }

  class _SessionClassMethods {
    +{class} close_all()
    +{class} identity_key(class_, ident)
    +{class} object_session(instance)
  }

  class SessionTransactionState {
    +ACTIVE: int
    +PREPARED: int
    +COMMITTED: int
    +DEACTIVE: int
    +CLOSED: int
    +PROVISIONING_CONNECTION: int
  }

  class ORMExecuteState {
    +session: Session
    +statement: Executable
    +parameters
    +execution_options: _ExecuteOptions
    +local_execution_options: _ExecuteOptions
    +bind_arguments: _BindArguments
    -_compile_state_cls
    -_starting_event_idx: int
    -_events_todo
    -_update_execution_options
    +statement
    -_params
    +exec_many_parameters
    +mp
    +result
    +seen
    +ent
    +insp
    +opts
    +opts
    +opts
    +opts
    +path
    +lo
    +uo
    --
    -__init__(session, statement, parameters, execution_options, bind_arguments, compile_state_cls, events_todo)
    -_remaining_events()
    +invoke_statement(statement, params, execution_options, bind_arguments)
    +bind_mapper()
    +all_mappers()
    +is_orm_statement(): bool
    +is_executemany(): bool
    +is_select(): bool
    +is_insert(): bool
    +is_update(): bool
    +is_delete(): bool
    -_is_crud(): bool
    +update_execution_options()
    -_orm_compile_options()
    +lazy_loaded_from()
    +loader_strategy_path()
    +is_column_load(): bool
    +is_relationship_load(): bool
    +load_options()
    +update_delete_options()
    -_non_compile_orm_options()
    +user_defined_options()
  }

  class SessionTransactionOrigin {
    +AUTOBEGIN: int
    +BEGIN: int
    +BEGIN_NESTED: int
    +SUBTRANSACTION: int
  }

  class SessionTransaction {
    -_rollback_exception
    -_connections
    +session: Session
    -_parent
    -_state: SessionTransactionState
    -_new
    -_deleted
    -_dirty
    -_key_switches
    +origin: SessionTransactionOrigin
    +nested: bool
    +nested
    +bind
    +current: self
    +result
    +current
    +parent
    +is_begin
    +to_expunge
    +parent
    +local_connect: bool
    +should_commit: bool
    +conn
    +conn: bind
    +conn
    +local_connect: bool
    +conn
    +transaction: Transaction
    +transaction
    +transaction
    +join_transaction_mode
    +join_transaction_mode: str
    +join_transaction_mode: str
    +transaction
    +transaction
    +should_commit: bool
    +transaction
    +transaction
    +bind_is_connection
    +stx
    +stx
    +boundary: self
    +rollback_err: NoneType
    +rollback_err
    +boundary: transaction
    +sess
    +sess
    --
    -__init__(session, origin, parent)
    -_raise_for_prerequisite_state(operation_name, state): NoReturn
    +parent()
    +is_active(): bool
    -_is_transaction_boundary(): bool
    +connection(bindkey, execution_options): Connection
    -_begin(nested): SessionTransaction
    -_iterate_self_and_parents(upto)
    -_take_snapshot()
    -_restore_snapshot(dirty_only)
    -_remove_snapshot()
    -_connection_for_bind(bind, execution_options): Connection
    +prepare()
    -_prepare_impl()
    +commit(_to_root)
    +rollback(_capture_exception, _to_root)
    +close(invalidate)
    -_get_subject(): Session
    -_transaction_is_active(): bool
    -_transaction_is_closed(): bool
    -_rollback_can_be_called(): bool
  }

  class _SessionCloseState {
    +ACTIVE: int
    +CLOSED: int
    +CLOSE_IS_RESET: int
  }

  class Session {
    +dispatch
    +identity_map: IdentityMap
    -_new
    -_deleted
    +bind
    -__binds
    -_flushing: bool
    -_warn_on_events: bool
    -_transaction
    -_nested_transaction
    +hash_key: int
    +autoflush: bool
    +expire_on_commit: bool
    +enable_baked_queries: bool
    +twophase: bool
    +join_transaction_mode: JoinTransactionMode
    -_query_cls
    -_close_state: _SessionCloseState
    -_trans_context_manager
    +connection_callable
    +trans
    +trans
    +trans
    +trans
    +trans
    +trans
    +trans
    +trans
    +trans
    +trans
    +bind
    +bind
    +bind
    +trans
    +trans
    +statement
    +bind_arguments
    +bind_arguments
    +compile_state_cls
    +compile_state_cls: NoneType
    +execution_options
    +events_todo
    +events_todo
    +events_todo
    +orm_exec_state
    +fn_result
    +statement
    +execution_options
    +bind
    +conn
    +params
    +result
    +result
    +all_states
    +insp
    +inspected_mapper
    +inspected_mapper: NoneType
    +clause
    +plugin_subject
    +context
    +key
    +return_value
    +autoflush
    +state
    +with_for_update
    +stmt
    +state
    +cascaded
    +state
    +cascaded
    +pending_to_persistent
    +mapper
    +obj
    +instance_key
    +trans
    +orig_key
    +orig_key
    +old
    +persistent_to_deleted
    +obj
    +state
    +mapper
    +state
    +to_attach
    +cascade_states
    +cascade_states: NoneType
    +instance
    +getter
    +primary_key_identity
    +mapper
    +is_dict
    +primary_key_identity
    +pk_synonyms
    +correct_keys
    +primary_key_identity
    +primary_key_identity
    +instance
    +load_options
    +statement
    +statement
    -_recursive
    -_resolve_conflict_map
    +autoflush
    +mapper
    +new_instance: bool
    +key
    +merged
    +key
    +key_is_persistent
    +key_is_persistent: bool
    +merged
    +merged: NoneType
    +merged: NoneType
    +merged
    +merged
    +merged_state
    +new_instance: bool
    +merged
    +merged
    +merged_state
    +merged_dict
    +new_instance: bool
    +merged_state
    +merged_dict
    +existing_version
    +merged_version
    +obj
    +to_attach
    +obj
    +to_attach
    +state
    +to_attach
    +state
    +dirty
    +flush_context
    +dirty
    +deleted
    +new
    +dirty
    +objset
    +state
    +objset: NoneType
    +processed
    +proc
    +proc
    +is_orphan
    +is_persistent_orphan
    +proc
    +proc
    +transaction
    +len_
    +obj_states
    +obj_states
    +obj_states
    +mapper
    +transaction
    +state
    +dict_
    --
    -__init__(bind)
    -__enter__(): _S
    -__exit__(type_, value, traceback)
    -_maker_context_manager()
    +in_transaction(): bool
    +in_nested_transaction(): bool
    +get_transaction()
    +get_nested_transaction()
    +info(): _InfoType
    -_autobegin_t(begin): SessionTransaction
    +begin(nested): SessionTransaction
    +begin_nested(): SessionTransaction
    +rollback()
    +commit()
    +prepare()
    +connection(bind_arguments, execution_options): Connection
    -_connection_for_bind(engine, execution_options): Connection
    -_execute_internal(statement, params): Any
    -_execute_internal(statement, params)
    -_execute_internal(statement, params): Any
    +execute(statement, params)
    +execute(statement, params)
    +execute(statement, params)
    +execute(statement, params)
    +scalar(statement, params)
    +scalar(statement, params): Any
    +scalar(statement, params): Any
    +scalars(statement, params)
    +scalars(statement, params)
    +scalars(statement, params)
    +close()
    +reset()
    +invalidate()
    -_close_impl(invalidate, is_reset)
    +expunge_all()
    -_add_bind(key, bind)
    +bind_mapper(mapper, bind)
    +bind_table(table, bind)
    +get_bind(mapper)
    +query(_entity)
    +query(_colexpr)
    +query(__ent0, __ent1)
    +query(__ent0, __ent1, __ent2)
    +query(__ent0, __ent1, __ent2, __ent3)
    +query(__ent0, __ent1, __ent2, __ent3, __ent4)
    +query(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5)
    +query(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6)
    +query(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6, __ent7)
    +query()
    +query()
    -_identity_lookup(mapper, primary_key_identity, identity_token, passive, lazy_loaded_from, execution_options, bind_arguments)
    +no_autoflush()
    -_autoflush()
    +refresh(instance, attribute_names, with_for_update)
    +expire_all()
    +expire(instance, attribute_names)
    -_expire_state(state, attribute_names)
    -_conditional_expire(state, autoflush)
    +expunge(instance)
    -_expunge_states(states, to_transient)
    -_register_persistent(states)
    -_register_altered(states)
    -_remove_newly_deleted(states)
    +add(instance, _warn)
    +add_all(instances)
    -_save_or_update_state(state)
    +delete(instance)
    -_delete_impl(state, obj, head)
    +get(entity, ident)
    +get_one(entity, ident): _O
    -_get_impl(entity, primary_key_identity, db_load_fn)
    +merge(instance): _O
    -_merge(state, state_dict): _O
    -_validate_persistent(state)
    -_save_impl(state)
    -_update_impl(state, revert_deletion)
    -_save_or_update_impl(state)
    +enable_relationship_loading(obj)
    -_before_attach(state, obj): bool
    -_after_attach(state, obj)
    -__contains__(instance): bool
    -__iter__()
    -_contains_state(state): bool
    +flush(objects)
    -_flush_warning(method)
    -_is_clean(): bool
    -_flush(objects)
    +bulk_save_objects(objects, return_defaults, update_changed_only, preserve_order)
    +grouping_key()
    +bulk_insert_mappings(mapper, mappings, return_defaults, render_nulls)
    +bulk_update_mappings(mapper, mappings)
    -_bulk_save_mappings(mapper, mappings, isupdate, isstates, return_defaults, update_changed_only, render_nulls)
    +is_modified(instance, include_collections): bool
    +is_active(): bool
    -_dirty_states()
    +dirty(): IdentitySet
    +deleted(): IdentitySet
    +new(): IdentitySet
  }

  class sessionmaker {
    +class_
    +session
    +d
    --
    -__init__(bind)
    -__init__(bind)
    -__init__(bind)
    +begin()
    -__call__(): _S
    +configure()
    -__repr__(): str
  }

  class WriteOnlyHistory {
    +unchanged_items: util.OrderedIdentitySet
    +added_items: util.OrderedIdentitySet
    +deleted_items: util.OrderedIdentitySet
    -_reconcile_collection: bool
    +added
    +deleted
    +unchanged
    --
    -__init__(attr, state, passive, apply_to)
    +added_plus_unchanged()
    +all_items()
    +as_history(): attributes.History
    +indexed(index)
    +add_added(value)
    +add_removed(value)
  }

  class WriteOnlyAttributeImpl {
    +uses_objects: bool
    +default_accepts_scalar_loader: bool
    +supports_population: bool
    -_supports_dynamic_iteration: bool
    +collection: bool
    +dynamic: bool
    +order_by: _RelationshipOrderByArg
    +collection_history_cls
    +query_class
    +data
    +data
    +history
    +data
    +collection_history
    +value
    +collection_history
    +iterable: value
    +new_values
    +old_collection
    +collection_history
    +old_collection
    +old_collection
    +constants
    +additions
    +removals
    +c
    +c
    +c
    +c
    +c
    --
    -__init__(class_, key, dispatch, target_mapper, order_by)
    +get(state, dict_, passive)
    +get_collection(state, dict_, user_data, passive): CollectionAdapter
    +get_collection(state, dict_, user_data, passive): CollectionAdapter
    +get_collection(state, dict_, user_data, passive)
    +get_collection(state, dict_, user_data, passive)
    -_append_token(): attributes.AttributeEventToken
    -_remove_token(): attributes.AttributeEventToken
    +fire_append_event(state, dict_, value, initiator, collection_history)
    +fire_remove_event(state, dict_, value, initiator, collection_history)
    -_modified_event(state, dict_)
    +set(state, dict_, value, initiator, passive, check_old, pop, _adapt)
    +delete(): NoReturn
    +set_committed_value(state, dict_, value): NoReturn
    +get_history(state, dict_, passive): attributes.History
    +get_all_pending(state, dict_, passive)
    -_get_collection_history(state, passive)
    +append(state, dict_, value, initiator, passive)
    +remove(state, dict_, value, initiator, passive)
    +pop(state, dict_, value, initiator, passive)
  }

  class WriteOnlyLoader {
    +impl_class: WriteOnlyAttributeImpl
    --
    +init_class_attribute(mapper)
  }

  class DynamicCollectionAdapter {
    +data
    --
    -__init__(data)
    -__iter__()
    -_reset_empty()
    -__len__(): int
    -__bool__(): bool
  }

  class AbstractCollectionWriter {
    +instance: _T
    -_from_obj
    +instance
    +mapper
    +prop
    --
    -__init__(attr, state)
    -_add_all_impl(iterator)
    -_remove_impl(item)
  }

  class WriteOnlyCollection {
    +stmt
    +stmt
    +stmt
    +state
    +mapper
    +prop
    +dict_
    +fn
    --
    -__iter__(): NoReturn
    +select()
    +insert(): Insert
    +update(): Update
    +delete(): Delete
    +add_all(iterator)
    +add(item)
    +remove(item)
  }

  class DynamicCollectionHistory {
    +coll
    --
    -__init__(attr, state, passive, apply_to)
  }

  class DynamicAttributeImpl {
    +collection_history_cls
    +query_class
    --
    -__init__(class_, key, dispatch, target_mapper, order_by, query_class)
  }

  class DynaLoader {
    +impl_class: DynamicAttributeImpl
  }

  class AppenderMixin {
    +query_class
    -_order_by_clauses
    +sess
    +sess
    +state
    +sess
    +sess
    +instance
    +sess
    +query
    +query
    --
    -__init__(attr, state)
    +session()
    +session(session)
    -_iter()
    -__iter__()
    -__getitem__(index)
    +count(): int
    -_generate(sess)
    +add_all(iterator)
    +add(item)
    +extend(iterator)
    +append(item)
    +remove(item)
  }

  class AppenderQuery {
  }

  class QueryContext {
    +runid: int
    +post_load_paths
    +compile_state: ORMCompileState
  }

  class default_load_options {
  }

  class AbstractORMCompileState {
    +is_dml_returning: bool
    +ga
    +ga
    +stack_0
    +toplevel_stmt
    +result
    --
    -_init_global_attributes(statement, compiler)
    +{class} create_for_statement(statement, compiler): AbstractORMCompileState
    +{class} orm_pre_session_exec(session, statement, params, execution_options, bind_arguments, is_pre_event)
    +{class} orm_execute_statement(session, statement, params, execution_options, bind_arguments, conn): Result
    +{class} orm_setup_cursor_result(session, statement, params, execution_options, bind_arguments, result)
  }

  class AutoflushOnlyORMCompileState {
    +{class} orm_pre_session_exec(session, statement, params, execution_options, bind_arguments, is_pre_event)
    +{class} orm_setup_cursor_result(session, statement, params, execution_options, bind_arguments, result)
  }

  class ORMCompileState {
  }

  class default_compile_options {
  }

  class DMLReturningColFilter {
    +c2
    +mapper
    +prop
    --
    -__init__(target_mapper, immediate_dml_mapper)
    -__call__(col, as_filter)
    +adapt_check_present(col)
  }

  class ORMFromStatementCompileState {
    +statement_container: FromStatement
    +requested_statement
    +dml_table
    +multi_row_eager_loaders: bool
    +eager_adding_joins: bool
    +compound_eager_adapter: NoneType
    +extra_criteria_entities: _EMPTY_DICT
    +eager_joins: _EMPTY_DICT
    +self
    +statement
    +target_mapper
    +adapter
    --
    +{class} create_for_statement(statement_container, compiler): ORMFromStatementCompileState
    -_adapt_col_list(cols, current_adapter)
    -_get_current_adapter()
    +setup_dml_returning_compile_state(dml_mapper)
  }

  class FromStatement {
    +element
    -_adapt_on_names: bool
    +compile_state
    +toplevel
    +meth
    --
    -__init__(entities, element, _adapt_on_names)
    -_compiler_dispatch(compiler)
    +column_descriptions()
    -_ensure_disambiguated_names()
    +get_children()
    -_all_selected_columns()
    -_return_defaults()
    -_returning()
    -_inline()
  }

  class CompoundSelectCompileState {
  }

  class ORMSelectCompileState {
    +multi_row_eager_loaders: bool
    +eager_adding_joins: bool
    +compound_eager_adapter: NoneType
    +correlate: NoneType
    +correlate_except: NoneType
    +self
    +toplevel
    +toplevel: bool
    +select_statement: statement
    +query
    +current_adapter
    +adapter
    +strategy
    +ezero
    +self
    +setup_joins
    +ens
    +from_statement
    +stmt
    +query
    +adapter
    +info: from_obj
    +info
    +equivs
    +equivs
    +unwrapped_order_by
    +order_by_col_expr
    +order_by_col_expr
    +unwrapped_order_by: NoneType
    +inner
    +inner
    +equivs
    +statement
    +from_clause: inner
    +from_clause
    +statement
    +statement
    +search
    +alias
    +search: element
    +search
    +alias
    +adapters
    +is_orm_adapt
    +e
    +isouter
    +full
    +right
    +onclause
    +onclause: right
    +right: NoneType
    +right
    +of_type: NoneType
    +of_type
    +right: of_type
    +right
    +right
    +left
    +prop
    +onclause: prop
    +prop: NoneType
    +left: from_
    +prop: NoneType
    +left: NoneType
    +extra_criteria
    +extra_criteria
    +left_clause
    +left_clause
    +left_clause: left
    +r_info
    +replace_from_obj_index: NoneType
    +use_entity_index: NoneType
    +indexes
    +replace_from_obj_index
    +left
    +potential
    +entity
    +ent_info
    +all_clauses
    +indexes
    +replace_from_obj_index: NoneType
    +use_entity_index: NoneType
    +l_info
    +indexes
    +replace_from_obj_index
    +use_entity_index: idx
    +l_info
    +r_info
    +overlap: bool
    +right_mapper
    +overlap: bool
    +need_adapter: bool
    +right_mapper
    +current_adapter
    +right
    +right_selectable
    +need_adapter: bool
    +right
    +aliased_entity
    +right
    +need_adapter: bool
    +adapter
    +current_adapter
    +onclause
    +kwargs
    +ext_info
    +search
    +single_crit
    +additional_entity_criteria
    +additional_entity_criteria
    +current_adapter
    +crit
    +crit
    +crit
    --
    +{class} create_for_statement(statement, compiler): ORMSelectCompileState
    -_dump_option_struct()
    -_setup_for_generate()
    -{class} _create_entities_collection(query, legacy)
    +{class} determine_last_joined_entity(statement)
    +{class} all_selected_columns(statement)
    +{class} get_columns_clause_froms(statement)
    +{class} from_statement(statement, from_statement)
    -_set_select_from_alias()
    -_get_select_from_alias_from_obj(from_obj)
    -_mapper_zero()
    -_entity_zero()
    -_only_full_mapper_zero(methname)
    -_only_entity_zero(rationale)
    -_all_equivs()
    -_compound_eager_statement()
    -_simple_statement()
    -_select_statement(raw_columns, from_obj, where_criteria, having_criteria, label_style, order_by, for_update, hints, statement_hints, correlate, correlate_except, limit_clause, offset_clause, fetch_clause, fetch_clause_options, distinct, distinct_on, prefixes, suffixes, group_by, independent_ctes, independent_ctes_opts)
    -_adapt_polymorphic_element(element)
    -_adapt_col_list(cols, current_adapter)
    -_get_current_adapter()
    -_adapt_clause(as_filter)
    +replace()
    -_join(args, entities_collection)
    -_join_left_to_right(entities_collection, left, right, onclause, prop, outerjoin, full)
    -_join_determine_implicit_left_side(entities_collection, left, right, onclause)
    -_join_place_explicit_left_side(entities_collection, left)
    -_join_check_and_adapt_right_side(left, right, onclause, prop)
    -_select_args()
    -_should_nest_selectable()
    -_get_extra_criteria(ext_info)
    -_adjust_for_extra_criteria()
  }

  class _QueryEntity {
    +supports_single_entity: bool
    +use_id_for_hash: bool
    -_label_name
    +type
    +expr
    +entity_zero
    +entity
    --
    +setup_compile_state(compile_state)
    +setup_dml_returning_compile_state(compile_state, adapter)
    +row_processor(context, result)
    +{class} to_compile_state(compile_state, entities, entities_collection, is_current_entities)
  }

  class _MapperEntity {
    +expr: _InternalEntityType
    +mapper
    +entity_zero: _InternalEntityType
    +is_aliased_class: bool
    +path: PathRegistry
    -_label_name: str
    +entity
    +ext_info: entity
    +entity
    +mapper
    +supports_single_entity: bool
    +use_id_for_hash: bool
    +adapter: NoneType
    +adapter
    +adapter
    +ret
    +ret: adapter
    +ret
    +compile_state
    +adapter
    +adapter
    +adapter
    +only_load_props
    +refresh_state
    +only_load_props: NoneType
    +refresh_state: NoneType
    +adapter
    +single_table_crit
    +ext_info
    --
    -__init__(compile_state, entity, entities_collection, is_current_entities)
    +type()
    +entity_zero_or_selectable()
    +corresponds_to(entity)
    -_get_entity_clauses(compile_state)
    +row_processor(context, result)
    +setup_dml_returning_compile_state(compile_state, adapter)
    +setup_compile_state(compile_state)
  }

  class _BundleEntity {
    -_entities
    +bundle: Bundle
    +type
    -_label_name: str
    +supports_single_entity: bool
    +expr: Bundle
    +expr
    +bundle
    +bundle: expr
    +ezero
    +ezero
    +ezero
    +proc
    --
    -__init__(compile_state, expr, entities_collection, is_current_entities, setup_entities, parent_bundle)
    +mapper()
    +entity_zero()
    +corresponds_to(entity)
    +entity_zero_or_selectable()
    +setup_compile_state(compile_state)
    +row_processor(context, result)
  }

  class _ColumnEntity {
    +annotations
    +compile_state
    +column
    +column
    +column
    +column
    +column
    +getter
    +ret
    +extra_entities
    --
    -{class} _for_columns(compile_state, columns, entities_collection, raw_column_index, is_current_entities, parent_bundle)
    +type()
    -_non_hashable_value()
    -_null_column_type()
    +row_processor(context, result)
  }

  class _RawColumnEntity {
    +entity_zero: NoneType
    +mapper: NoneType
    +supports_single_entity: bool
    +current_adapter
    +column
    +column
    +column
    --
    -__init__(compile_state, column, entities_collection, raw_column_index, is_current_entities, parent_bundle)
    +corresponds_to(entity)
    +setup_dml_returning_compile_state(compile_state, adapter)
    +setup_compile_state(compile_state)
  }

  class _ORMColumnEntity {
    +supports_single_entity: bool
    +annotations
    +orm_key
    +proxy_owner
    +ezero: _entity
    +mapper
    +column
    +current_adapter
    +column
    +column
    +ezero
    +single_table_crit
    +column
    --
    -__init__(compile_state, column, entities_collection, parententity, raw_column_index, is_current_entities, parent_bundle)
    +corresponds_to(entity)
    +setup_dml_returning_compile_state(compile_state, adapter)
    +setup_compile_state(compile_state)
  }

  class _IdentityTokenEntity {
    +translate_raw_column: bool
    --
    +setup_compile_state(compile_state)
    +row_processor(context, result)
    +getter()
  }

  class StaleDataError {
  }

  class FlushError {
  }

  class UnmappedError {
  }

  class ObjectDereferencedError {
  }

  class DetachedInstanceError {
    +code: str
  }

  class UnmappedInstanceError {
    +base
    +name
    +msg
    +msg
    --
    -__init__(obj, msg)
    -__reduce__(): Any
  }

  class UnmappedClassError {
    +msg
    --
    -__init__(cls, msg)
    -__reduce__(): Any
  }

  class ObjectDeletedError {
    +base
    +msg
    --
    -__init__(state, msg)
    -__reduce__(): Any
  }

  class UnmappedColumnError {
  }

  class LoaderStrategyException {
    -__init__(applied_to_property_type, requesting_property, applies_to, actual_strategy_type, strategy_key)
  }

  class _CollectionConverterProtocol {
    -__call__(collection): _COL
  }

  class _AdaptedCollectionProtocol {
    -_sa_adapter: CollectionAdapter
    -_sa_appender
    -_sa_remover
    -_sa_iterator
    -_sa_converter: _CollectionConverterProtocol
  }

  class collection {
    +{static} appender()
    +{static} remover()
    +{static} iterator()
    +{static} internally_instrumented()
    +{static} converter()
    +{static} adds()
    +decorator()
    +{static} replaces()
    +decorator()
    +{static} removes()
    +decorator()
    +{static} removes_return()
    +decorator()
  }

  class CollectionAdapter {
    +attr: CollectionAttributeImpl
    -_key: str
    -_data
    +owner_state
    -_converter: _CollectionConverterProtocol
    +invalidated: bool
    +empty: bool
    +appender
    +remover
    +remover
    --
    -__init__(attr, owner_state, data)
    -_warn_invalidated()
    +data(): _AdaptedCollectionProtocol
    -_referenced_by_owner(): bool
    +bulk_appender()
    +append_with_event(item, initiator)
    -_set_empty(user_data)
    -_reset_empty()
    -_refuse_empty(): NoReturn
    +append_without_event(item)
    +append_multiple_without_event(items)
    +bulk_remover()
    +remove_with_event(item, initiator)
    +remove_without_event(item)
    +clear_with_event(initiator)
    +clear_without_event()
    -__iter__()
    -__len__()
    -__bool__()
    -_fire_append_wo_mutation_event_bulk(items, initiator, key)
    +fire_append_wo_mutation_event(item, initiator, key)
    +fire_append_event(item, initiator, key)
    -_fire_remove_event_bulk(items, initiator, key)
    +fire_remove_event(item, initiator, key)
    +fire_pre_remove_event(initiator, key)
    -__getstate__()
    -__setstate__(d)
  }

  class InstrumentedList {
  }

  class InstrumentedSet {
  }

  class InstrumentedDict {
  }

  class DependencyProcessor {
    +after_save
    +before_delete
    +parent_saves
    +child_saves
    +parent_deletes
    +child_deletes
    +child_base_mapper
    +child_saves
    +child_deletes
    +before_delete
    +after_save
    +child_actions
    +child_in_cycles: bool
    +child_in_cycles: bool
    +parent_saves
    +parent_deletes: NoneType
    +before_delete: NoneType
    +parent_in_cycles: bool
    +parent_deletes
    +parent_saves: NoneType
    +after_save: NoneType
    +parent_in_cycles: bool
    +sum_
    +before_delete
    +parent_deletes
    +after_save
    +parent_saves
    +child_actions
    +child_action
    +child_action
    +child_action
    +passive
    +passive
    +passive
    +history
    +process_key
    --
    -__init__(prop)
    +{class} from_relationship(prop)
    +hasparent(state)
    +per_property_preprocessors(uow)
    +per_property_flush_actions(uow)
    +per_state_flush_actions(uow, states, isdelete)
    +presort_deletes(uowcommit, states)
    +presort_saves(uowcommit, states)
    +process_deletes(uowcommit, states)
    +process_saves(uowcommit, states)
    +prop_has_changes(uowcommit, states, isdelete)
    -_verify_canload(state)
    -_synchronize(state, child, associationrow, clearkeys, uowcommit)
    -_get_reversed_processed_set(uow)
    -_post_update(state, uowcommit, related, is_m2o_delete)
    -_pks_changed(uowcommit, state)
    -__repr__()
  }

  class OneToManyDP {
    +child_post_updates
    +child_pre_updates
    +child_post_updates
    +child_pre_updates
    +should_null_fks
    +history
    +children_added
    +should_null_fks
    +pks_changed
    +passive
    +passive
    +history
    +children_added
    +history
    +should_null_fks
    +history
    +source: state
    +dest: child
    --
    +per_property_dependencies(uow, parent_saves, child_saves, parent_deletes, child_deletes, after_save, before_delete)
    +per_state_dependencies(uow, save_parent, delete_parent, child_action, after_save, before_delete, isdelete, childisdelete)
    +presort_deletes(uowcommit, states)
    +presort_saves(uowcommit, states)
    +process_deletes(uowcommit, states)
    +process_saves(uowcommit, states)
    -_synchronize(state, child, associationrow, clearkeys, uowcommit, pks_changed)
    -_pks_changed(uowcommit, state)
  }

  class ManyToOneDP {
    +parent_post_updates
    +parent_pre_updates
    +parent_post_updates
    +parent_pre_updates
    +history
    +todelete
    +todelete
    +t
    +history
    +t
    +history
    +history
    --
    -__init__(prop)
    +per_property_dependencies(uow, parent_saves, child_saves, parent_deletes, child_deletes, after_save, before_delete)
    +per_state_dependencies(uow, save_parent, delete_parent, child_action, after_save, before_delete, isdelete, childisdelete)
    +presort_deletes(uowcommit, states)
    +presort_saves(uowcommit, states)
    +process_deletes(uowcommit, states)
    +process_saves(uowcommit, states)
    -_synchronize(state, child, associationrow, clearkeys, uowcommit, operation)
  }

  class DetectKeySwitch {
    +parent_saves
    +after_save
    +d
    +allstates
    +switchers
    +dict_
    +related
    +related_obj
    +related_obj: related
    +related_state
    --
    +per_property_preprocessors(uow)
    +per_property_flush_actions(uow)
    +per_state_flush_actions(uow, states, isdelete)
    +presort_deletes(uowcommit, states)
    +presort_saves(uow, states)
    +prop_has_changes(uow, states, isdelete)
    +process_deletes(uowcommit, states)
    +process_saves(uowcommit, states)
    -_key_switchers(uow, states)
    -_process_key_switches(deplist, uowcommit)
    -_pks_changed(uowcommit, state)
  }

  class ManyToManyDP {
    +history
    +history
    +secondary_delete
    +secondary_insert
    +secondary_update
    +processed
    +tmp
    +history
    +associationrow
    +secondary_delete
    +secondary_insert
    +secondary_update
    +processed
    +tmp
    +need_cascade_pks
    +passive
    +passive
    +history
    +associationrow
    +associationrow
    +associationrow
    +connection
    +associationrow
    +statement
    +result
    +associationrow
    +statement
    +result
    +statement
    --
    +per_property_dependencies(uow, parent_saves, child_saves, parent_deletes, child_deletes, after_save, before_delete)
    +per_state_dependencies(uow, save_parent, delete_parent, child_action, after_save, before_delete, isdelete, childisdelete)
    +presort_deletes(uowcommit, states)
    +presort_saves(uowcommit, states)
    +process_deletes(uowcommit, states)
    +process_saves(uowcommit, states)
    -_run_crud(uowcommit, secondary_insert, secondary_update, secondary_delete)
    -_synchronize(state, child, associationrow, clearkeys, uowcommit, operation)
    -_pks_changed(uowcommit, state)
  }

  class DescriptorProperty {
    +doc
    +uses_objects: bool
    +descriptor
    +prop: self
    --
    +get_history(state, dict_, passive): History
    +instrument_class(mapper)
  }

  class _ProxyImpl {
    +accepts_scalar_loader: bool
    +load_on_unexpire: bool
    +collection: bool
    --
    +uses_objects(): bool
    -__init__(key)
    +get_history(state, dict_, passive): History
  }

  class CompositeProperty {
    +composite_class
    +attrs
    -_generated_composite_accessor
    +comparator_factory
    +accessor
    +dict_
    +state
    +values
    +dict_
    +state
    +attr
    +previous
    +previous
    +value
    +state
    +dict_
    +attr
    +previous
    +previous
    +attr
    +MappedColumn
    +argument: extracted_mapped_annotation
    +argument
    +str_arg
    +argument
    +insp
    +getter
    +MappedColumn
    +decl_base
    +insp
    +attr
    +props
    +MappedColumn
    +prop
    +prop
    +prop
    +prop
    +prop: NoneType
    +MappedColumn
    +ColumnProperty
    +cprop: prop
    +dict_
    +proxy_attr
    +get_values
    +attrs
    +added
    +deleted
    +has_history: bool
    +key
    +hist
    +has_history: bool
    +non_deleted
    --
    -__init__(_class_or_attr)
    +instrument_class(mapper)
    -_composite_values_from_instance(value)
    +do_init()
    -_create_descriptor()
    +fget(): Any
    +fset(value)
    +fdel()
    +declarative_scan(decl_scan, registry, cls, originating_module, key, mapped_container, annotation, extracted_mapped_annotation, is_dataclass_field)
    -_init_accessor()
    -_setup_for_dataclass(registry, cls, originating_module, key)
    -_comparable_elements()
    +props()
    +columns()
    +mapper_property_to_assign()
    +columns_to_assign()
    -_setup_arguments_on_columns()
    -_setup_event_handlers()
    +load_handler(context)
    +refresh_handler(context, to_load)
    -_load_refresh_handler(context, to_load, is_refresh)
    +expire_handler(keys)
    +insert_update_handler(connection, state)
    -_attribute_keys()
    -_populate_composite_bulk_save_mappings_fn()
    +get_values()
    +populate()
    +get_history(state, dict_, passive): History
    -_comparator_factory(mapper)
  }

  class CompositeBundle {
    -__init__(property_, expr)
    +create_row_processor(query, procs, labels)
    +proc(): Any
  }

  class Composite {
    +inherit_cache: bool
  }

  class ConcreteInheritedProperty {
    +comparator_callable: NoneType
    +p
    +comparator_callable
    --
    -_comparator_factory(mapper)
    -__init__()
    +warn(): NoReturn
  }

  class NoninheritedConcreteProp {
    -__set__(obj, value): NoReturn
    -__delete__(obj): NoReturn
    -__get__(obj, owner): Any
  }

  class SynonymProperty {
    +comparator_factory
    +attr
    +prop
    +comp
    +comp
    +attr
    +properties
    +p
    --
    -__init__(name, map_column, descriptor, comparator_factory, attribute_options, info, doc)
    +uses_objects(): bool
    -_proxied_object()
    -_comparator_factory(mapper)
    +get_history(state, dict_, passive): History
    +set_parent(parent, init)
  }

  class Synonym {
    +inherit_cache: bool
  }

  class _DynamicAttributesType {
    -__setattr__(key, value)
    -__delattr__(key)
  }

  class DeclarativeAttributeIntercept {
  }

  class DCTransformDeclarative {
  }

  class DeclarativeMeta {
    +metadata: MetaData
    +registry: RegistryType
    +dict_
    +reg
    +reg
    --
    -__init__(classname, bases, dict_)
  }

  class _declared_attr_common {
    +fn
    +cls: owner
    +manager
    +declarative_scan
    +reg
    +obj
    --
    -__init__(fn, cascading, quiet)
    -_collect_return_annotation()
    -__get__(instance, owner): Any
  }

  class _declared_directive {
    -__init__(fn, cascading)
    -__get__(instance, owner): _T
    -__set__(instance, value)
    -__delete__(instance)
    -__call__(fn)
  }

  class declared_attr {
    -__init__(fn, cascading)
    -__set__(instance, value)
    -__delete__(instance)
    -__get__(instance, owner)
    -__get__(instance, owner): _T
    -__get__(instance, owner)
    -_stateful()
    +directive()
    +cascading()
  }

  class _stateful_declared_attr {
    +kw
    +new_kw
    --
    -__init__()
    -_stateful()
    -__call__(fn)
  }

  class MappedAsDataclass {
    +apply_dc_transforms: _DataclassArguments
    +current_transforms: _DataclassArguments
    +current
    +current_transforms
    +current_transforms: apply_dc_transforms
    +new_anno
    --
    -__init_subclass__(init, repr, eq, order, unsafe_hash, match_args, kw_only, dataclass_callable)
  }

  class DeclarativeBase {
    -_sa_registry
    +registry
    +metadata
    -__name__
    -__mapper__
    -__table__
    -__tablename__: Any
    -__mapper_args__: Any
    -__table_args__: Any
    --
    -_sa_inspect_type()
    -_sa_inspect_instance()
    -__init__()
    -__init_subclass__()
  }

  class DeclarativeBaseNoMeta {
    -_sa_registry
    +registry
    +metadata
    -__mapper__
    -__table__
    -__tablename__: Any
    -__mapper_args__: Any
    -__table_args__: Any
    --
    -_sa_inspect_type()
    -_sa_inspect_instance()
    -__init__()
    -__init_subclass__()
  }

  class registry {
    -_class_registry: clsregistry._ClsRegistryType
    -_managers
    -_non_primary_mappers
    +metadata: MetaData
    +constructor
    +type_annotation_map: _MutableTypeAnnotationMapType
    -_dependents
    -_dependencies
    -_new_mappers: bool
    +lcl_metadata
    +class_registry
    +search
    +python_type_type
    +python_type_type
    +search
    +python_type_type
    +search
    +python_type_type
    +search
    +python_type_type
    +flattened: NoneType
    +search
    +sql_type
    +sql_type
    +sql_type_inst
    +resolved_sql_type
    +todo: registries
    +done
    +reg
    +todo: registries
    +done
    +reg
    +mapper
    +class_
    +metadata
    +bases
    +class_dict
    --
    -__init__()
    +update_type_annotation_map(type_annotation_map)
    -_resolve_type(python_type)
    +mappers()
    -_set_depends_on(registry)
    -_flag_new_mapper(mapper)
    -{class} _recurse_with_dependents(registries)
    -{class} _recurse_with_dependencies(registries)
    -_mappers_to_configure()
    -_add_non_primary_mapper(np_mapper)
    -_dispose_cls(cls)
    -_add_manager(manager)
    +configure(cascade)
    +dispose(cascade)
    -_dispose_manager_and_mapper(manager)
    +generate_base(mapper, cls, name, metaclass): Any
    -__class_getitem__(key)
    +mapped_as_dataclass(__cls)
    +mapped_as_dataclass(__cls)
    +mapped_as_dataclass(__cls)
    +decorate()
    +mapped(cls)
    +as_declarative_base()
    +decorate()
    +map_declaratively(cls)
    +map_imperatively(class_, local_table)
  }

  class ORMDMLState {
    +is_dml_returning: bool
    +from_statement_ctx
    +core_get_crud_kv_pairs
    +k
    +desc
    +k_anno
    +attr
    +plugin_subject
    +plugin_subject
    +ext_info
    +mapper
    +proxy_key
    +fs
    +fs
    +fs
    +fsc
    +dml_level_statement
    +cols_to_return
    +dml_level_statement
    +dml_level_statement
    +execution_context
    +compile_state
    +load_options
    +querycontext
    --
    -{class} _get_orm_crud_kv_pairs(mapper, statement, kv_iterator, needs_to_be_cacheable)
    -{class} _get_multi_crud_kv_pairs(statement, kv_iterator)
    -{class} _get_crud_kv_pairs(statement, kv_iterator, needs_to_be_cacheable)
    +{class} get_entity_description(statement)
    +{class} get_returning_column_descriptions(statement)
    -_ent_for_col()
    -_attr_for_col(ent)
    -_setup_orm_returning(compiler, orm_level_statement, dml_level_statement, dml_mapper)
    -{class} _return_orm_returning(session, statement, params, execution_options, bind_arguments, result)
  }

  class BulkUDCompileState {
  }

  class default_update_options {
    -_dml_strategy: DMLStrategyArgument
    -_synchronize_session: SynchronizeSessionArgument
    -_can_use_returning: bool
    -_is_delete_using: bool
    -_is_update_from: bool
    -_autoflush: bool
    -_subject_mapper
  }

  class BulkORMInsert {
  }

  class default_insert_options {
    -_dml_strategy: DMLStrategyArgument
    -_render_nulls: bool
    -_return_defaults: bool
    -_subject_mapper
    -_autoflush: bool
    -_populate_existing: bool
  }

  class BulkORMUpdate {
    +self
    +dml_strategy
    +toplevel
    +orm_level_statement: statement
    +toplevel
    +ext_info
    +mapper
    +new_stmt
    +new_crit
    +new_stmt
    +use_supplemental_cols: bool
    +synchronize_session: NoneType
    +synchronize_session
    +can_use_returning
    +can_use_returning
    +use_supplemental_cols: bool
    +new_stmt
    +new_stmt
    +statement
    +an
    +statement
    +update_options
    +result
    +enable_check_rowcount
    +mapper
    +result
    +normal_answer
    +mapper
    +pk_keys
    +identity_map
    +identity_key
    +state
    +evaluated_keys
    +dict_
    +to_evaluate
    +to_expire
    +matched_objects
    +target_mapper
    +returned_defaults_rows
    +pk_rows
    +matched_rows
    +matched_rows
    +objs
    +mapper
    +target_cls
    +evaluator_compiler
    +resolved_values
    +resolved_keys_as_propnames
    +value_evaluators
    +evaluated_keys
    +attrib
    +states
    +to_evaluate
    +to_expire
    --
    +{class} create_for_statement(statement, compiler)
    -_setup_for_orm_update(statement, compiler)
    -_setup_for_bulk_update(statement, compiler)
    +{class} orm_execute_statement(session, statement, params, execution_options, bind_arguments, conn): _result.Result
    +{class} can_use_returning(dialect, mapper): bool
    -{class} _do_post_synchronize_bulk_evaluate(session, params, result, update_options)
    -{class} _do_post_synchronize_evaluate(session, statement, result, update_options)
    -{class} _do_post_synchronize_fetch(session, statement, result, update_options)
    -{class} _apply_update_set_values_to_objects(session, update_options, statement, matched_objects)
  }

  class BulkORMDelete {
    +self
    +dml_strategy
    +toplevel
    +orm_level_statement: statement
    +ext_info
    +mapper
    +new_stmt
    +new_crit
    +new_stmt
    +use_supplemental_cols: bool
    +synchronize_session: NoneType
    +synchronize_session
    +can_use_returning
    +can_use_returning
    +use_supplemental_cols: bool
    +new_stmt
    +new_stmt
    +update_options
    +normal_answer
    +matched_objects
    +to_delete
    +target_mapper
    +returned_defaults_rows
    +pk_rows
    +matched_rows
    +matched_rows
    +primary_key
    +identity_token
    +identity_key
    --
    +{class} create_for_statement(statement, compiler)
    +{class} orm_execute_statement(session, statement, params, execution_options, bind_arguments, conn): _result.Result
    +{class} can_use_returning(dialect, mapper): bool
    -{class} _do_post_synchronize_evaluate(session, statement, result, update_options)
    -{class} _do_post_synchronize_fetch(session, statement, result, update_options)
  }

  class IdentityMap {
    -_wr
    -_dict
    -_modified
    --
    -__init__()
    -_kill()
    +all_states()
    +contains_state(state): bool
    -__contains__(key): bool
    +safe_discard(state)
    -__getitem__(key): _O
    +get(key, default)
    +fast_get_state(key)
    +keys()
    +values()
    +replace(state)
    +add(state): bool
    -_fast_discard(state)
    -_add_unpresent(state, key)
    -_manage_incoming_state(state)
    -_manage_removed_state(state)
    -_dirty_states()
    +check_modified(): bool
    +has_key(key): bool
    -__len__(): int
  }

  class WeakInstanceDict {
    -_dict
    +state
    +o
    +state
    +o
    +existing
    +existing_non_none
    +existing: NoneType
    +existing: NoneType
    +key
    +existing_state
    +o
    +state
    +o
    +values
    +result
    +value
    +key
    +values
    +result
    +value
    +key
    +st
    +key
    +st
    --
    -__getitem__(key): _O
    -__contains__(key): bool
    +contains_state(state): bool
    +replace(state)
    +add(state): bool
    -_add_unpresent(state, key)
    +fast_get_state(key)
    +get(key, default)
    +items()
    +values()
    -__iter__()
    +all_states()
    -_fast_discard(state)
    +discard(state)
    +safe_discard(state)
  }

  class _StateChangeState {
  }

  class _StateChangeStates {
    +ANY: int
    +NO_CHANGE: int
    +CHANGE_IN_PROGRESS: int
  }

  class _StateChange {
    -_next_state: _StateChangeState
    -_state: _StateChangeState
    -_current_fn
    +has_prerequisite_states
    +prerequisite_state_collection
    +expect_state_change
    +current_state
    +next_state
    +existing_fn
    +expect_state
    +ret_value
    --
    -_raise_for_prerequisite_state(operation_name, state): NoReturn
    +{class} declare_states(prerequisite_states, moves_to)
    -_go(self): Any
    -_expect_state(expected)
  }

  class UnevaluatableError {
  }

  class _NoObject {
    +operate()
    +reverse_operate()
  }

  class _ExpiredObject {
    +operate()
    +reverse_operate()
  }

  class _EvaluatorCompiler {
    +clause
    +meth
    +parentmapper
    +key
    +impl
    +state
    +dict_
    +value
    +evaluators
    +dispatch
    +meth
    +eval_left
    +eval_right
    +dispatch
    +meth
    +has_null: bool
    +value
    +has_null
    +value
    +values
    +value
    +left_val
    +right_val
    +left_val
    +right_val
    +left_val
    +right_val
    +visit_add_binary_op: _straight_evaluate_numeric_only
    +visit_mul_binary_op: _straight_evaluate_numeric_only
    +visit_sub_binary_op: _straight_evaluate_numeric_only
    +visit_mod_binary_op: _straight_evaluate_numeric_only
    +visit_truediv_binary_op: _straight_evaluate_numeric_only
    +visit_lt_binary_op: _straight_evaluate
    +visit_le_binary_op: _straight_evaluate
    +visit_ne_binary_op: _straight_evaluate
    +visit_gt_binary_op: _straight_evaluate
    +visit_ge_binary_op: _straight_evaluate
    +visit_eq_binary_op: _straight_evaluate
    +eval_inner
    +value
    +val
    +val
    --
    -__init__(target_cls)
    +process(clause)
    +visit_grouping(clause)
    +visit_null(clause)
    +visit_false(clause)
    +visit_true(clause)
    +visit_column(clause)
    +get_corresponding_attr()
    +visit_tuple(clause)
    +visit_expression_clauselist(clause)
    +visit_clauselist(clause)
    +visit_binary(clause)
    +visit_or_clauselist_op(operator, evaluators, clause)
    +evaluate()
    +visit_and_clauselist_op(operator, evaluators, clause)
    +evaluate()
    +visit_comma_op_clauselist_op(operator, evaluators, clause)
    +evaluate()
    +visit_custom_op_binary_op(operator, eval_left, eval_right, clause)
    +visit_is_binary_op(operator, eval_left, eval_right, clause)
    +evaluate()
    +visit_is_not_binary_op(operator, eval_left, eval_right, clause)
    +evaluate()
    -_straight_evaluate(operator, eval_left, eval_right, clause)
    +evaluate()
    -_straight_evaluate_numeric_only(operator, eval_left, eval_right, clause)
    +visit_in_op_binary_op(operator, eval_left, eval_right, clause)
    +visit_not_in_op_binary_op(operator, eval_left, eval_right, clause)
    +visit_concat_op_binary_op(operator, eval_left, eval_right, clause)
    +visit_startswith_op_binary_op(operator, eval_left, eval_right, clause)
    +visit_endswith_op_binary_op(operator, eval_left, eval_right, clause)
    +visit_unary(clause)
    +evaluate()
    +visit_bindparam(clause)
  }

  class UOWTransaction {
    +session: Session
    +transaction: SessionTransaction
    +attributes
    +deps
    +mappers
    +ret
    +isdelete
    +hashkey
    +impl
    +history
    +state_history
    +state_history: history
    +impl
    +history
    +state_history
    +state_history: history
    +key
    +mapper
    +mapper
    +saves
    +deletes
    +dep
    +mapper_for_dep
    +checktup
    +ret: bool
    +ret: bool
    +cycles
    +convert
    +postsort_actions
    +postsort_actions
    +set_
    +n
    +states
    +isdel
    +other
    --
    -__init__(session)
    +has_work()
    +was_already_deleted(state)
    +is_deleted(state)
    +memo(key, callable_)
    +remove_state_actions(state)
    +get_attribute_history(state, key, passive)
    +has_dep(processor)
    +register_preprocessor(processor, fromparent)
    +register_object(state, isdelete, listonly, cancel_delete, operation, prop): bool
    +register_post_update(state, post_update_cols)
    -_per_mapper_flush_actions(mapper)
    -_mapper_for_dep()
    +filter_states_for_dep(dep, states)
    +states_for_mapper_hierarchy(mapper, isdelete, listonly)
    -_generate_actions()
    +execute()
    +finalize_flush_changes()
  }

  class IterateMappersMixin {
    -_mappers(uow)
  }

  class Preprocess {
    +delete_states
    +save_states
    --
    -__init__(dependency_processor, fromparent)
    +execute(uow)
  }

  class PostSortRec {
    +key
    +ret
    --
    -__new__(uow)
    +execute_aggregate(uow, recs)
  }

  class ProcessAll {
    +states
    --
    -__init__(uow, dependency_processor, isdelete, fromparent)
    +execute(uow)
    +per_state_flush_actions(uow)
    -__repr__()
    -_elements(uow)
  }

  class PostUpdateAll {
    +persistence
    +states
    --
    -__init__(uow, mapper, isdelete)
    +execute(uow)
  }

  class SaveUpdateAll {
    +states
    +base_mapper
    +delete_all
    +action
    +states_for_prop
    --
    -__init__(uow, mapper)
    +execute(uow)
    +per_state_flush_actions(uow)
    -__repr__()
  }

  class DeleteAll {
    +states
    +base_mapper
    +save_all
    +action
    +states_for_prop
    --
    -__init__(uow, mapper)
    +execute(uow)
    +per_state_flush_actions(uow)
    -__repr__()
  }

  class ProcessState {
    +cls_
    +dependency_processor
    +isdelete
    +our_recs
    +states
    --
    -__init__(uow, dependency_processor, isdelete, state)
    +execute_aggregate(uow, recs)
    -__repr__()
  }

  class SaveUpdateState {
    +persistence
    +cls_
    +mapper
    +our_recs
    --
    -__init__(uow, state)
    +execute_aggregate(uow, recs)
    -__repr__()
  }

  class DeleteState {
    +persistence
    +cls_
    +mapper
    +our_recs
    +states
    --
    -__init__(uow, state)
    +execute_aggregate(uow, recs)
    -__repr__()
  }

  class LoaderCallableStatus {
    +PASSIVE_NO_RESULT: int
    +PASSIVE_CLASS_MISMATCH: int
    +ATTR_WAS_SET: int
    +ATTR_EMPTY: int
    +NO_VALUE: int
    +NEVER_SET: NO_VALUE
  }

  class PassiveFlag {
    +NO_CHANGE: int
    +CALLABLES_OK: int
    +SQL_OK: int
    +RELATED_OBJECT_OK: int
    +INIT_OK: int
    +NON_PERSISTENT_OK: int
    +LOAD_AGAINST_COMMITTED: int
    +NO_AUTOFLUSH: int
    +NO_RAISE: int
    +DEFERRED_HISTORY_LOAD: int
    +INCLUDE_PENDING_MUTATIONS: int
    +PASSIVE_OFF
    +PASSIVE_RETURN_NO_VALUE
    +PASSIVE_NO_INITIALIZE
    +PASSIVE_NO_FETCH
    +PASSIVE_NO_FETCH_RELATED
    +PASSIVE_ONLY_PERSISTENT
    +PASSIVE_MERGE
  }

  class EventConstants {
    +EXT_CONTINUE: int
    +EXT_STOP: int
    +EXT_SKIP: int
    +NO_KEY: int
  }

  class RelationshipDirection {
    +ONETOMANY: int
    +MANYTOONE: int
    +MANYTOMANY: int
  }

  class InspectionAttrExtensionType {
  }

  class NotExtension {
    +NOT_EXTENSION: str
  }

  class InspectionAttr {
    +is_selectable: bool
    +is_aliased_class: bool
    +is_instance: bool
    +is_mapper: bool
    +is_bundle: bool
    +is_property: bool
    +is_attribute: bool
    +is_clause_element: bool
    +extension_type: InspectionAttrExtensionType
  }

  class InspectionAttrInfo {
    +info(): _InfoType
  }

  class SQLORMOperations {
    +of_type(class_)
    +and_()
    +any(criterion)
    +has(criterion)
  }

  class ORMDescriptor {
    -__get__(instance, owner)
    -__get__(instance, owner)
    -__get__(instance, owner): _T_co
    -__get__(instance, owner)
  }

  class _MappedAnnotationBase {
  }

  class SQLORMExpression {
  }

  class Mapped {
    -__get__(instance, owner)
    -__get__(instance, owner): _T_co
    -__get__(instance, owner)
    -{class} _empty_constructor(arg1)
    -__set__(instance, value)
    -__delete__(instance)
  }

  class _MappedAttribute {
  }

  class _DeclarativeMapped {
    +operate(op): Any
    +reverse_operate(op, other): Any
  }

  class DynamicMapped {
    -__get__(instance, owner)
    -__get__(instance, owner)
    -__get__(instance, owner)
    -__set__(instance, value)
  }

  class WriteOnlyMapped {
    -__get__(instance, owner)
    -__get__(instance, owner)
    -__get__(instance, owner)
    -__set__(instance, value)
  }

  class _RelationshipArg {
    +name: str
    +argument: _T1
    +resolved
    +attr_value
    --
    -_is_populated(): bool
    -_resolve_against_registry(clsregistry_resolver)
  }

  class _RelationshipArgs {
    +secondary
    +primaryjoin
    +secondaryjoin
    +order_by
    +foreign_keys
    +remote_side
  }

  class RelationshipProperty {
    +strategy_wildcard_key
    +inherit_cache: bool
    -_overlaps
    -_lazy_strategy: LazyLoader
    -_dependency_processor
    +primaryjoin
    +secondaryjoin
    +secondary
    -_join_condition: JoinCondition
    +order_by: _RelationshipOrderByArg
    -_user_defined_foreign_keys
    -_calculated_foreign_keys
    +remote_side
    +local_columns
    +synchronize_pairs: _ColumnPairs
    +secondary_synchronize_pairs
    +local_remote_pairs
    +direction: RelationshipDirection
    -_init_args: _RelationshipArgs
    --
    -__init__(argument, secondary)
    -_warn_for_persistence_only_flags()
    +instrument_class(mapper)
  }

  class JoinCondition {
    +primaryjoin_initial
    +primaryjoin
    +secondaryjoin
    +secondary
    +prop
    +synchronize_pairs: _ColumnPairs
    +secondary_synchronize_pairs: _ColumnPairs
    +direction: RelationshipDirection
    +parent_persist_selectable: FromClause
    +child_persist_selectable: FromClause
    +parent_local_selectable: FromClause
    +child_local_selectable: FromClause
    -_local_remote_pairs
    +log
    +consider_as_foreign_keys
    +v
    +v
    +secondarycols
    +secondarycols
    +col
    +pt
    +mt
    +result: bool
    +result: bool
    +fixed_secondary
    +equated
    +remote_side
    +remote_side
    +check_entities
    +right
    +right
    +left
    +local_side
    +local_side
    +not_target
    +can_sync: bool
    +foreign_cols
    +has_foreign
    +can_sync
    +can_sync
    +err
    +err
    +parentcols
    +targetcols
    +onetomany_fk
    +manytoone_fk
    +onetomany_local
    +manytoone_local
    +self_equated
    +onetomany_local
    +manytoone_local
    +sync_pairs: _MutableColumnPairs
    +lrp
    +secondary_sync_pairs: _MutableColumnPairs
    -_track_overlapping_sync_targets
    +other_props
    +prop_to_from
    +s
    +annotation_set
    +dest_selectable
    +secondaryjoin
    +primaryjoin
    +parentmapper_for_element
    +extra_criteria
    +secondaryjoin
    +primaryjoin
    +secondary
    +primary_aliasizer
    +secondary_aliasizer
    +primary_aliasizer
    +secondaryjoin
    +primary_aliasizer
    +secondary_aliasizer: NoneType
    +primaryjoin
    +target_adapter
    +target_adapter: NoneType
    +binds
    +equated_columns
    +has_secondary
    +lookup
    +lazywhere
    +lazywhere
    +secondaryjoin
    +secondaryjoin
    +lazywhere
    +bind_to_col
    --
    -__init__(parent_persist_selectable, child_persist_selectable, parent_local_selectable, child_local_selectable)
    -_log_joins()
    -_sanitize_joins()
    -_determine_joins()
    +primaryjoin_minus_local()
    +secondaryjoin_minus_local()
    +primaryjoin_reverse_remote()
    +replace()
    -_has_annotation(clause, annotation): bool
    -_has_foreign_annotations(): bool
    -_has_remote_annotations(): bool
    -_annotate_fks()
    -_annotate_from_fk_list()
    +check_fk()
    -_annotate_present_fks()
    +is_foreign(b)
    +visit_binary()
    -_refers_to_parent_table(): bool
    +visit_binary()
    -_tables_overlap(): bool
    -_annotate_remote()
    -_annotate_remote_secondary()
    +repl()
    -_annotate_selfref(fn, remote_side_given)
    +visit_binary()
    -_annotate_remote_from_args()
    +repl()
    -_annotate_remote_with_overlap()
    +visit_binary()
    +proc_left_right(right)
    -_annotate_remote_distinct_selectables()
    +repl()
    -_warn_non_column_elements()
    -_annotate_local()
    +locals_()
    -_annotate_parentmapper()
    +parentmappers_()
    -_check_remote_side()
    -_check_foreign_cols(join_condition, primary)
    -_determine_direction()
    -_deannotate_pairs(collection): _MutableColumnPairs
    -_setup_pairs()
    +go(collection)
    +visit_binary(left, right)
    -_warn_for_conflicting_sync_targets()
    +remote_columns()
    +local_columns()
    +foreign_key_columns()
    -_gather_join_annotations(annotation)
    -_gather_columns_with_annotation(clause)
    +join_targets(source_selectable, dest_selectable, aliased, single_crit, extra_criteria)
    +mark_unrelated_columns_as_ok_to_adapt(annotations): SupportsAnnotations
    +create_lazy_clause(reverse_direction)
    +col_to_bind()
  }

  class _ColInAnnotations {
    -__init__(name)
    -__call__(c): bool
  }

  class Relationship {
    +inherit_cache: bool
  }

  class _InstanceDictProto {
    -__call__()
  }

  class _InstallLoaderCallableProto {
    -__call__(state, dict_, row)
  }

  class InstanceState {
    +manager
    +session_id
    +key
    +runid
    +load_options
    +load_path: PathRegistry
    +insert_order
    -_strong_obj
    +obj
    +committed_state
    +modified: bool
    +expired: bool
    -_deleted: bool
    -_load_pending: bool
    -_orphaned_outside_of_session: bool
    +is_instance: bool
    +identity_token: object
    -_last_known_values
    -_instance_dict: _InstanceDictProto
    +expired_attributes
    +callables
    +callables
    +lkv
    +lkv
    +sess
    +persistent_to_detached
    +deleted_to_detached
    +pending_to_transient
    +persistent_to_transient
    +deleted
    +pending
    +persistent
    +instance_dict
    +o
    +manager
    +state_dict
    +inst
    +old
    +manager_impl
    +impl
    +fixed_impl: impl
    +old
    +collection
    +pending
    +callables
    +impl
    +old
    +lkv
    +toload
    +toload
    +previous
    +previous
    +lkv
    +instance_dict
    +has_modified
    +has_modified: bool
    +inst
    +session
    +state_dict
    --
    -_instance_dict()
    -__init__(obj, manager)
    +attrs()
    +transient(): bool
    +pending(): bool
    +deleted(): bool
    +was_deleted(): bool
    +persistent(): bool
    +detached(): bool
    -_attached(): bool
    -_track_last_known_value(key)
    +session()
    +async_session()
    +object()
    +identity()
    +identity_key()
    +parents()
    -_pending_mutations()
    -_empty_collections()
    +mapper()
    +has_identity(): bool
    -{class} _detach_states(states, session, to_transient)
    -_detach(session)
    -_dispose()
    -_cleanup(ref)
    +dict(): _InstanceDict
    -_initialize_instance()
    +get_history(key, passive): History
    +get_impl(key): AttributeImpl
    -_get_pending_mutation(key): PendingCollection
    -__getstate__()
    -__setstate__(state_dict)
    -_reset(dict_, key)
    -_copy_callables(from_)
    -{class} _instance_level_callable_processor(manager, fn, key)
    -_set_callable(dict_, row)
    -_set_callable(dict_, row)
    -_expire(dict_, modified_set)
    -_expire_attributes(dict_, attribute_names, no_loader)
    -_load_expired(state, passive): LoaderCallableStatus
    +unmodified()
    +unmodified_intersection(keys)
    +unloaded()
    +unloaded_expirable()
    -_unloaded_non_object()
    -_modified_event(dict_, attr, previous, collection, is_userland)
    -_commit(dict_, keys)
    -_commit_all(dict_, instance_dict)
    -{class} _commit_all_states(iter_, instance_dict)
  }

  class AttributeState {
    +state
    +key: str
    --
    -__init__(state, key)
    +loaded_value(): Any
    +value(): Any
    +history(): History
    +load_history(): History
  }

  class PendingCollection {
    +deleted_items: util.IdentitySet
    +added_items: util.OrderedIdentitySet
    --
    -__init__()
    +merge_with_history(history): History
    +append(value)
    +remove(value)
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.engine" {
  class CacheStats {
    +CACHE_HIT: int
    +CACHE_MISS: int
    +CACHING_DISABLED: int
    +NO_CACHE_KEY: int
    +NO_DIALECT_SUPPORT: int
  }

  class ExecuteStyle {
    +EXECUTE: int
    +EXECUTEMANY: int
    +INSERTMANYVALUES: int
  }

  class DBAPIConnection {
    +autocommit: bool
    --
    +close()
    +commit()
    +cursor(): DBAPICursor
    +rollback()
  }

  class DBAPIType {
  }

  class DBAPICursor {
    +arraysize: int
    +lastrowid: int
    --
    +description(): _DBAPICursorDescription
    +rowcount(): int
    +close()
    +execute(operation, parameters): Any
    +executemany(operation, parameters): Any
    +fetchone()
    +fetchmany(size)
    +fetchall()
    +setinputsizes(sizes)
    +setoutputsize(size, column)
    +callproc(procname, parameters): Any
    +nextset()
    -__getattr__(key): Any
  }

  class _CoreKnownExecutionOptions {
    +compiled_cache
    +logging_token: str
    +isolation_level: IsolationLevel
    +no_parameters: bool
    +stream_results: bool
    +max_row_buffer: int
    +yield_per: int
    +insertmanyvalues_page_size: int
    +schema_translate_map
  }

  class ReflectedIdentity {
    +always: bool
    +on_null: bool
    +start: int
    +increment: int
    +minvalue: int
    +maxvalue: int
    +nominvalue: bool
    +nomaxvalue: bool
    +cycle: bool
    +cache
    +order: bool
  }

  class ReflectedComputed {
    +sqltext: str
    +persisted
  }

  class ReflectedColumn {
    +name: str
    +type
    +nullable: bool
    +default
    +autoincrement
    +comment
    +computed
    +identity
    +dialect_options
  }

  class ReflectedConstraint {
    +name
    +comment
  }

  class ReflectedCheckConstraint {
    +sqltext: str
    +dialect_options
  }

  class ReflectedUniqueConstraint {
    +column_names
    +duplicates_index
    +dialect_options
  }

  class ReflectedPrimaryKeyConstraint {
    +constrained_columns
    +dialect_options
  }

  class ReflectedForeignKeyConstraint {
    +constrained_columns
    +referred_schema
    +referred_table: str
    +referred_columns
    +options
  }

  class ReflectedIndex {
    +name
    +column_names
    +expressions
    +unique: bool
    +duplicates_constraint
    +include_columns
    +column_sorting
    +dialect_options
  }

  class ReflectedTableComment {
    +text
  }

  class BindTyping {
    +NONE: int
    +SETINPUTSIZES: int
    +RENDER_CASTS: int
  }

  class Dialect {
    +CACHE_HIT
    +CACHE_MISS
    +CACHING_DISABLED
    +NO_CACHE_KEY
    +NO_DIALECT_SUPPORT
    +dispatch
    +name: str
    +driver: str
    +dialect_description: str
    +dbapi
    +positional: bool
    +paramstyle: str
    +compiler_linting: Linting
    +statement_compiler
    +ddl_compiler
    +type_compiler_cls
    +type_compiler_instance: TypeCompiler
    +type_compiler: Any
    +preparer
    +identifier_preparer: IdentifierPreparer
    +server_version_info
    +default_schema_name
    +default_isolation_level
    -_on_connect_isolation_level
    +execution_ctx_cls
    +execute_sequence_format
    +supports_alter: bool
    +max_identifier_length: int
    +supports_server_side_cursors: bool
    +server_side_cursors: bool
    +supports_sane_rowcount: bool
    +supports_sane_multi_rowcount: bool
    +supports_empty_insert: bool
    +supports_default_values: bool
    +supports_default_metavalue: bool
    +default_metavalue_token: str
    +supports_multivalues_insert: bool
    +insert_executemany_returning: bool
    +insert_executemany_returning_sort_by_parameter_order: bool
    +update_executemany_returning: bool
    +delete_executemany_returning: bool
    +use_insertmanyvalues: bool
    +use_insertmanyvalues_wo_returning: bool
    +insertmanyvalues_implicit_sentinel: InsertmanyvaluesSentinelOpts
    +insertmanyvalues_page_size: int
    +insertmanyvalues_max_parameters: int
    +preexecute_autoincrement_sequences: bool
    +insert_returning: bool
    +update_returning: bool
    +update_returning_multifrom: bool
    +delete_returning: bool
    +delete_returning_multifrom: bool
    +favor_returning_over_lastrowid: bool
    +supports_identity_columns: bool
    +cte_follows_insert: bool
    +colspecs
    +supports_sequences: bool
    +sequences_optional: bool
    +default_sequence_base: int
    +supports_native_enum: bool
    +supports_native_boolean: bool
    +supports_native_decimal: bool
    +supports_native_uuid: bool
    +returns_native_bytes: bool
    +construct_arguments
    +reflection_options
    +dbapi_exception_translation_map
    +supports_comments: bool
    +inline_comments: bool
    +supports_constraint_comments: bool
    +supports_statement_cache: bool
    -_supports_statement_cache: bool
    +bind_typing
    +is_async: bool
    +has_terminate: bool
    +engine_config_types
    +label_length
    +include_set_input_sizes
    +exclude_set_input_sizes
    +supports_simple_order_by_label: bool
    +div_is_floordiv: bool
    +tuple_in_values: bool
    -_bind_typing_render_casts: bool
    -_type_memos
    --
    +loaded_dbapi(): ModuleType
    -_builtin_onconnect()
    +create_connect_args(url): ConnectArgsType
    +{class} import_dbapi(): ModuleType
    +{class} type_descriptor(typeobj)
    +initialize(connection)
    -_overrides_default(method_name): bool
    +get_columns(connection, table_name, schema)
    +get_multi_columns(connection, schema, filter_names)
    +get_pk_constraint(connection, table_name, schema): ReflectedPrimaryKeyConstraint
    +get_multi_pk_constraint(connection, schema, filter_names)
    +get_foreign_keys(connection, table_name, schema)
    +get_multi_foreign_keys(connection, schema, filter_names)
    +get_table_names(connection, schema)
    +get_temp_table_names(connection, schema)
    +get_view_names(connection, schema)
    +get_materialized_view_names(connection, schema)
    +get_sequence_names(connection, schema)
    +get_temp_view_names(connection, schema)
    +get_schema_names(connection)
    +get_view_definition(connection, view_name, schema): str
    +get_indexes(connection, table_name, schema)
    +get_multi_indexes(connection, schema, filter_names)
    +get_unique_constraints(connection, table_name, schema)
    +get_multi_unique_constraints(connection, schema, filter_names)
    +get_check_constraints(connection, table_name, schema)
    +get_multi_check_constraints(connection, schema, filter_names)
    +get_table_options(connection, table_name, schema)
    +get_multi_table_options(connection, schema, filter_names)
    +get_table_comment(connection, table_name, schema): ReflectedTableComment
    +get_multi_table_comment(connection, schema, filter_names)
    +normalize_name(name): str
    +denormalize_name(name): str
    +has_table(connection, table_name, schema): bool
    +has_index(connection, table_name, index_name, schema): bool
    +has_sequence(connection, sequence_name, schema): bool
    +has_schema(connection, schema_name): bool
    -_get_server_version_info(connection): Any
    -_get_default_schema_name(connection): str
    +do_begin(dbapi_connection)
    +do_rollback(dbapi_connection)
    +do_commit(dbapi_connection)
    +do_terminate(dbapi_connection)
    +do_close(dbapi_connection)
    -_do_ping_w_event(dbapi_connection): bool
    +do_ping(dbapi_connection): bool
    +do_set_input_sizes(cursor, list_of_tuples, context): Any
    +create_xid(): Any
    +do_savepoint(connection, name)
    +do_rollback_to_savepoint(connection, name)
    +do_release_savepoint(connection, name)
    +do_begin_twophase(connection, xid)
    +do_prepare_twophase(connection, xid)
    +do_rollback_twophase(connection, xid, is_prepared, recover)
    +do_commit_twophase(connection, xid, is_prepared, recover)
    +do_recover_twophase(connection)
    -_deliver_insertmanyvalues_batches(cursor, statement, parameters, generic_setinputsizes, context)
    +do_executemany(cursor, statement, parameters, context)
    +do_execute(cursor, statement, parameters, context)
    +do_execute_no_params(cursor, statement, context)
    +is_disconnect(e, connection, cursor): bool
    +connect(): DBAPIConnection
    +on_connect_url(url)
    +on_connect()
    +reset_isolation_level(dbapi_connection)
    +set_isolation_level(dbapi_connection, level)
    +get_isolation_level(dbapi_connection): IsolationLevel
    +get_default_isolation_level(dbapi_conn): IsolationLevel
    +get_isolation_level_values(dbapi_conn)
    -_assert_and_set_isolation_level(dbapi_conn, level)
    +{class} get_dialect_cls(url)
    +{class} get_async_dialect_cls(url)
    +{class} load_provisioning()
    +{class} engine_created(engine)
    +get_driver_connection(connection): Any
    +set_engine_execution_options(engine, opts)
    +set_connection_execution_options(connection, opts)
    +get_dialect_pool_class(url)
  }

  class CreateEnginePlugin {
    -__init__(url, kwargs)
    +update_url(url): URL
    +handle_dialect_kwargs(dialect_cls, dialect_args)
    +handle_pool_kwargs(pool_cls, pool_args)
    +engine_created(engine)
  }

  class ExecutionContext {
    +engine: Engine
    +connection: Connection
    +root_connection: Connection
    +dialect: Dialect
    +cursor: DBAPICursor
    +compiled
    +statement: str
    +invoked_statement
    +parameters: _AnyMultiExecuteParams
    +no_parameters: bool
    +isinsert: bool
    +isupdate: bool
    +execute_style: ExecuteStyle
    +executemany: bool
    +prefetch_cols
    +postfetch_cols
    --
    -{class} _init_ddl(dialect, connection, dbapi_connection, execution_options, compiled_ddl): ExecutionContext
    -{class} _init_compiled(dialect, connection, dbapi_connection, execution_options, compiled, parameters, invoked_statement, extracted_parameters, cache_hit): ExecutionContext
    -{class} _init_statement(dialect, connection, dbapi_connection, execution_options, statement, parameters): ExecutionContext
    -{class} _init_default(dialect, connection, dbapi_connection, execution_options): ExecutionContext
    -_exec_default(column, default, type_): Any
    -_prepare_set_input_sizes()
    -_get_cache_stats(): str
    -_setup_result_proxy()
    +fire_sequence(seq, type_): int
    +create_cursor(): DBAPICursor
    +pre_exec()
    +get_out_parameter_values(out_param_names)
    +post_exec()
    +handle_dbapi_exception(e)
    +lastrow_has_defaults(): bool
    +get_rowcount()
    +fetchall_for_returning(cursor)
  }

  class ConnectionEventsTarget {
    +dispatch
  }

  class ExceptionContext {
    +dialect: Dialect
    +connection
    +engine
    +cursor
    +statement
    +parameters
    +original_exception: BaseException
    +sqlalchemy_exception
    +chained_exception
    +execution_context
    +is_disconnect: bool
    +invalidate_pool_on_disconnect: bool
    +is_pre_ping: bool
  }

  class AdaptedConnection {
    -_connection: Any
    --
    +driver_connection(): Any
    +run_async(fn): _T
    -__repr__(): str
  }

  class BaseRow {
    -_parent: ResultMetaData
    -_key_to_index
    -_data: _RawRowType
    +parent
    --
    -__init__(parent, processors, key_to_index, data)
    -__reduce__()
    -__getstate__()
    -__setstate__(state)
    -_values_impl()
    -__iter__()
    -__len__(): int
    -__hash__(): int
    -__getitem__(key): Any
    -_get_by_key_impl_mapping(key): Any
    -__getattr__(name): Any
    -_to_tuple_instance()
  }

  class ConnectionCharacteristic {
    +transactional
    --
    +reset_characteristic(dialect, dbapi_conn)
    +set_characteristic(dialect, dbapi_conn, value)
    +get_characteristic(dialect, dbapi_conn): Any
  }

  class IsolationLevelCharacteristic {
    +transactional
    --
    +reset_characteristic(dialect, dbapi_conn)
    +set_characteristic(dialect, dbapi_conn, value)
    +get_characteristic(dialect, dbapi_conn): Any
  }

  class MockEngineStrategy {
    +MockConnection: MockConnection
  }

  class _TConsSubject {
    -_trans_context_manager
  }

  class TransactionalContext {
    -_trans_subject
    +trans_context
    +subject
    +trans_context
    +subject
    +out_of_band_exit
    --
    -_transaction_is_active(): bool
    -_transaction_is_closed(): bool
    -_rollback_can_be_called(): bool
    -_get_subject(): _TConsSubject
    +commit()
    +rollback()
    +close()
    -{class} _trans_ctx_check(subject)
    -__enter__(): TransactionalContext
    -__exit__(type_, value, traceback)
  }

  class ConnectionEvents {
    +default_dispatch
    +orig_fn: fn
    +fn: wrap_before_execute
    +orig_fn: fn
    +fn: wrap_before_cursor_execute
    --
    -{class} _accept_with(target, identifier)
    -{class} _listen(event_key)
    +wrap_before_execute(clauseelement, multiparams, params, execution_options)
    +wrap_before_cursor_execute(cursor, statement, parameters, context, executemany)
    +before_execute(conn, clauseelement, multiparams, params, execution_options)
    +after_execute(conn, clauseelement, multiparams, params, execution_options, result)
    +before_cursor_execute(conn, cursor, statement, parameters, context, executemany)
    +after_cursor_execute(conn, cursor, statement, parameters, context, executemany)
    +engine_connect(conn)
    +set_connection_execution_options(conn, opts)
    +set_engine_execution_options(engine, opts)
    +engine_disposed(engine)
    +begin(conn)
    +rollback(conn)
    +commit(conn)
    +savepoint(conn, name)
    +rollback_savepoint(conn, name, context)
    +release_savepoint(conn, name, context)
    +begin_twophase(conn, xid)
    +prepare_twophase(conn, xid)
    +rollback_twophase(conn, xid, is_prepared)
    +commit_twophase(conn, xid, is_prepared)
  }

  class DialectEvents {
    +target
    --
    -{class} _listen(event_key)
    -{class} _accept_with(target, identifier)
    +handle_error(exception_context)
    +do_connect(dialect, conn_rec, cargs, cparams)
    +do_executemany(cursor, statement, parameters, context)
    +do_execute_no_params(cursor, statement, context)
    +do_execute(cursor, statement, parameters, context)
    +do_setinputsizes(inputsizes, cursor, statement, parameters, context)
  }

  class ObjectKind {
    +TABLE
    +VIEW
    +MATERIALIZED_VIEW
    +ANY_VIEW
    +ANY
  }

  class ObjectScope {
    +DEFAULT
    +TEMPORARY
    +ANY
  }

  class Inspector {
    +bind
    +engine: Engine
    -_op_context_requires_connect: bool
    +dialect: Dialect
    +info_cache
    +cls
    +self
    +conn: Connection
    +conn
    +conn
    +sub_insp
    +SchemaTab
    +tuples
    +remaining_fkcs
    +fknames_for_table
    +tnames
    +schema_fkeys
    +candidate_sort
    +edge
    +candidate_sort
    +ret
    +ret
    +res
    +col_defs
    +coltype
    +table_col_defs
    +dialect
    +schema
    +table_name
    +reflection_options
    +table_key
    +tbl_opts
    +found_table: bool
    +cols_by_orig_name
    +found_table: bool
    +orig_name
    +name
    +coltype
    +col_kw
    +colargs
    +default: Any
    +default_text
    +default
    +default
    +default: default_text
    +computed
    +identity
    +col
    +pk_cons
    +pk_cols
    +fkeys
    +conname
    +constrained_columns
    +referred_schema
    +referred_table
    +referred_columns
    +refspec
    +options
    +options
    +indexes
    +name
    +columns
    +expressions
    +column_sorting
    +unique
    +flavor
    +dialect_options
    +duplicates
    +idx_element: Any
    +idx_elements
    +idx_element
    +idx_element
    +idx_element
    +op
    +idx_element
    +constraints
    +conname
    +columns
    +comment
    +duplicates
    +dialect_options
    +constrained_cols
    +constrained_col
    +constraints
    +comment_dict
    +fraction
    +fraction: NoneType
    +unreflectable
    +unreflectable
    +has_result: bool
    +res
    +has_result: bool
    +res
    +res
    +info
    --
    -__init__(bind)
    -{class} _construct(init, bind): Inspector
    -_init_legacy(bind)
    -_init_engine(engine)
    -_init_connection(connection)
    +clear_cache()
    +{class} from_engine(bind): Inspector
    -_engine_insp(): Inspector
    -_connection_insp(): Inspector
    -_operation_context()
    -_inspection_context()
    +default_schema_name()
    +get_schema_names()
    +get_table_names(schema)
    +has_table(table_name, schema): bool
    +has_sequence(sequence_name, schema): bool
    +has_index(table_name, index_name, schema): bool
    +has_schema(schema_name): bool
    +get_sorted_table_and_fkc_names(schema)
    +sort_tables_on_foreign_key_dependency(consider_schemas)
    +get_temp_table_names()
    +get_temp_view_names()
    +get_table_options(table_name, schema)
    +get_multi_table_options(schema, filter_names, kind, scope)
    +get_view_names(schema)
    +get_materialized_view_names(schema)
    +get_sequence_names(schema)
    +get_view_definition(view_name, schema): str
    +get_columns(table_name, schema)
    -_instantiate_types(data)
    +get_multi_columns(schema, filter_names, kind, scope)
    +get_pk_constraint(table_name, schema): ReflectedPrimaryKeyConstraint
    +get_multi_pk_constraint(schema, filter_names, kind, scope)
    +get_foreign_keys(table_name, schema)
    +get_multi_foreign_keys(schema, filter_names, kind, scope)
    +get_indexes(table_name, schema)
    +get_multi_indexes(schema, filter_names, kind, scope)
    +get_unique_constraints(table_name, schema)
    +get_multi_unique_constraints(schema, filter_names, kind, scope)
    +get_table_comment(table_name, schema): ReflectedTableComment
    +get_multi_table_comment(schema, filter_names, kind, scope)
    +get_check_constraints(table_name, schema)
    +get_multi_check_constraints(schema, filter_names, kind, scope)
    +reflect_table(table, include_columns, exclude_columns, resolve_fks, _extend_on, _reflect_info)
    -_reflect_column(table, col_d, include_columns, exclude_columns, cols_by_orig_name)
    -_reflect_pk(_reflect_info, table_key, table, cols_by_orig_name, exclude_columns)
    -_reflect_fk(_reflect_info, table_key, table, cols_by_orig_name, include_columns, exclude_columns, resolve_fks, _extend_on, reflection_options)
    -_reflect_indexes(_reflect_info, table_key, table, cols_by_orig_name, include_columns, exclude_columns, reflection_options)
    -_reflect_unique_constraints(_reflect_info, table_key, table, cols_by_orig_name, include_columns, exclude_columns, reflection_options)
    -_reflect_check_constraints(_reflect_info, table_key, table, cols_by_orig_name, include_columns, exclude_columns, reflection_options)
    -_reflect_table_comment(_reflect_info, table_key, table, reflection_options)
    -_get_reflection_info(schema, filter_names, available, _reflect_info): _ReflectionInfo
    +run(): Any
  }

  class ReflectionDefaults {
    +{class} columns()
    +{class} pk_constraint(): ReflectedPrimaryKeyConstraint
    +{class} foreign_keys()
    +{class} indexes()
    +{class} unique_constraints()
    +{class} check_constraints()
    +{class} table_options()
    +{class} table_comment(): ReflectedTableComment
  }

  class _ReflectionInfo {
    +columns
    +pk_constraint
    +foreign_keys
    +indexes
    +unique_constraints
    +table_comment
    +check_constraints
    +table_options
    +unreflectable
    +ov
    --
    +update(other)
  }

  class URL {
    +drivername: str
    +username
    +password
    +host
    +port
    +database
    +query
    +dict_items
    +dict_items: dict_
    +dict_items
    +kw
    +existing_query
    +new_keys
    +new_query
    +new_query
    +new_query
    +s
    +keys
    +plugin_names
    +kwargs
    +loaded_plugins
    +u
    +new_u
    +u: new_u
    +name
    +name
    +cls
    +entrypoint
    +dialect_cls
    +dialect_cls
    +translated
    +attribute_names
    +name
    +name
    +name: sname
    --
    +{class} create(drivername, username, password, host, port, database, query): URL
    -{class} _assert_port(port)
    -{class} _assert_str(v, paramname): str
    -{class} _assert_none_str(v, paramname)
    -{class} _str_dict(dict_)
    -_assert_value(): str
    -_assert_value()
    -_assert_value()
    -_assert_str(): str
    +set(drivername, username, password, host, port, database, query): URL
    -_assert_replace(): URL
    +update_query_string(query_string, append): URL
    +update_query_pairs(key_value_pairs, append): URL
    +update_query_dict(query_parameters, append): URL
    +difference_update_query(names): URL
    +normalized_query()
    -__to_string__(hide_password): str
    +render_as_string(hide_password): str
    -__repr__(): str
    -__copy__(): URL
    -__deepcopy__(memo): URL
    -__hash__(): int
    -__eq__(other): bool
    -__ne__(other): bool
    +get_backend_name(): str
    +get_driver_name(): str
    -_instantiate_plugins(kwargs)
    -_get_entrypoint()
    +get_dialect(_is_async)
    +translate_connect_args(names)
  }

  class ResultMetaData {
    -_tuplefilter
    -_translated_indexes
    -_unique_filters
    -_keymap: _KeyMapType
    -_keys
    -_processors
    -_key_to_index
    +index
    +indexes
    --
    +keys(): RMKeyView
    -_has_key(key): bool
    -_for_freeze(): ResultMetaData
    -_key_fallback(key, err, raiseerr): NoReturn
    -_key_fallback(key, err, raiseerr)
    -_key_fallback(key, err, raiseerr)
    -_key_fallback(key, err, raiseerr)
    -_raise_for_ambiguous_column_name(rec): NoReturn
    -_index_for_key(key, raiseerr)
    -_indexes_for_keys(keys)
    -_metadata_for_keys(keys)
    -_reduce(keys): ResultMetaData
    -_getter(key, raiseerr)
    -_row_as_tuple_getter(keys): _TupleGetterType
    -_make_key_to_index(keymap, index)
    -_key_not_found(key, attr_error): NoReturn
    -_effective_processors()
  }

  class RMKeyView {
    -_parent: ResultMetaData
    -_keys
    --
    -__init__(parent)
    -__len__(): int
    -__repr__(): str
    -__iter__()
    -__contains__(item): bool
    -__eq__(other): bool
    -__ne__(other): bool
  }

  class SimpleResultMetaData {
    -_keys
    +recs_names
    +recs_names
    +unique_filters
    +unique_filters
    +key
    +rec
    +rec
    +key
    +rec
    +rec
    +metadata_for_keys
    +indexes
    +new_keys
    +extra
    +indexes
    +tup
    +new_metadata
    --
    -__init__(keys, extra, _processors, _tuplefilter, _translated_indexes, _unique_filters)
    -_has_key(key): bool
    -_for_freeze(): ResultMetaData
    -__getstate__()
    -__setstate__(state)
    -_contains(value, row): bool
    -_index_for_key(key, raiseerr): int
    -_indexes_for_keys(keys)
    -_metadata_for_keys(keys)
    -_reduce(keys): ResultMetaData
  }

  class _NoRow {
  }

  class ResultInternal {
    -_real_result
    -_generate_rows: bool
    -_row_logging_fn
    -_unique_filter_state
    -_post_creational_filter
    -_metadata: ResultMetaData
    -_source_supports_scalars: bool
    +real_result
    +process_row: Row
    +metadata
    +key_to_index
    +processors
    +tf
    +processors
    -_make_row_orig
    +fixed_tf: tf
    +make_row
    +make_row
    +post_creational_filter
    +obj
    +hashed
    +obj
    +row
    +row
    +make_row
    +rows
    +post_creational_filter
    +make_row
    +rows
    +made_rows
    +made_rows
    +made_rows: rows
    +interim_rows
    +interim_rows
    +interim_rows: made_rows
    +interim_rows
    +make_row
    +post_creational_filter
    +row
    +obj
    +hashed
    +obj
    +row
    +interim_row
    +interim_row
    +make_row
    +post_creational_filter
    +rows
    +made_rows
    +made_rows
    +collect
    +real_result
    +num_required
    +num
    +rows
    +num
    +num_required
    +num_required: num
    +rows
    +num_required
    +collect
    +real_result
    +num
    +rows
    +rows
    +rows
    +onerow
    +row
    +make_row: NoneType
    +make_row
    +row
    +existing_row_hash
    +next_row: Any
    +next_row: _NO_ROW
    +next_row
    +next_row
    +next_row: _NO_ROW
    +next_row: _NO_ROW
    +post_creational_filter
    +row
    +row
    +real_result
    +real_result
    +strategy
    +filters
    +filters
    +strategy
    --
    -_fetchiter_impl()
    -_fetchone_impl(hard_close)
    -_fetchmany_impl(size)
    -_fetchall_impl()
    -_soft_close(hard)
    -_row_getter()
    +process_row(processors, key_to_index, scalar_obj)
    +make_row(): _R
    +make_row(): _R
    -_iterator_getter()
    +iterrows()
    +iterrows()
    -_raw_all_rows()
    -_allrows()
    -_onerow_getter()
    +onerow()
    +onerow()
    -_manyrow_getter()
    +filterrows(rows, strategy, uniques)
    +manyrows(num)
    +manyrows(num)
    -_only_one_row(raise_for_second_row, raise_for_none, scalar): _R
    -_only_one_row(raise_for_second_row, raise_for_none, scalar)
    -_only_one_row(raise_for_second_row, raise_for_none, scalar)
    -_iter_impl()
    -_next_impl(): _R
    -_column_slices(indexes): Self
    -_unique_strategy(): _UniqueFilterStateType
  }

  class _WithKeys {
    -_metadata: ResultMetaData
    --
    +keys(): RMKeyView
  }

  class Result {
    -_row_logging_fn
    -_source_supports_scalars: bool
    -_yield_per
    -_attributes
    +getter
    +partition
    +row
    --
    -__init__(cursor_metadata)
    -__enter__(): Self
    -__exit__(type_, value, traceback)
    +close()
    -_soft_closed(): bool
    +closed(): bool
    +yield_per(num): Self
    +unique(strategy): Self
    +columns(): Self
    +scalars()
    +scalars(index)
    +scalars(index)
    +scalars(index)
    -_getter(key, raiseerr)
    -_tuple_getter(keys): _TupleGetterType
    +mappings(): MappingResult
    +t()
    +tuples()
    -_raw_row_iterator()
    -__iter__()
    -__next__()
    +partitions(size)
    +fetchall()
    +fetchone()
    +fetchmany(size)
    +all()
    +first()
    +one_or_none()
    +scalar_one(): _T
    +scalar_one(): Any
    +scalar_one(): Any
    +scalar_one_or_none()
    +scalar_one_or_none()
    +scalar_one_or_none()
    +one()
    +scalar()
    +scalar(): Any
    +scalar(): Any
    +freeze()
    +merge()
  }

  class FilterResult {
    -_post_creational_filter
    -_real_result
    --
    -__enter__(): Self
    -__exit__(type_, value, traceback)
    +yield_per(num): Self
    -_soft_close(hard)
    -_soft_closed(): bool
    +closed(): bool
    +close()
    -_attributes()
    -_fetchiter_impl()
    -_fetchone_impl(hard_close)
    -_fetchall_impl()
    -_fetchmany_impl(size)
  }

  class ScalarResult {
    -_post_creational_filter
    +getter
    +partition
    --
    -__init__(real_result, index)
    +unique(strategy): Self
    +partitions(size)
    +fetchall()
    +fetchmany(size)
    +all()
    -__iter__()
    -__next__(): _R
    +first()
    +one_or_none()
    +one(): _R
  }

  class TupleResult {
    +partitions(size)
    +fetchone()
    +fetchall()
    +fetchmany(size)
    +all()
    -__iter__()
    -__next__(): _R
    +first()
    +one_or_none()
    +one(): _R
    +scalar_one(): _T
    +scalar_one(): Any
    +scalar_one(): Any
    +scalar_one_or_none()
    +scalar_one_or_none()
    +scalar_one_or_none()
    +scalar()
    +scalar(): Any
    +scalar(): Any
  }

  class MappingResult {
    +getter
    +partition
    +row
    --
    -__init__(result)
    +unique(strategy): Self
    +columns(): Self
    +partitions(size)
    +fetchall()
    +fetchone()
    +fetchmany(size)
    +all()
    -__iter__()
    -__next__(): RowMapping
    +first()
    +one_or_none()
    +one(): RowMapping
  }

  class FrozenResult {
    +data
    +fr
    +result
    --
    -__init__(result)
    +rewrite_rows()
    +with_new_rows(tuple_data)
    -__call__()
  }

  class IteratorResult {
    +row
    --
    -__init__(cursor_metadata, iterator, raw, _source_supports_scalars)
    +closed(): bool
    -_soft_close(hard)
    -_raise_hard_closed(): NoReturn
    -_raw_row_iterator()
    -_fetchiter_impl()
    -_fetchone_impl(hard_close)
    -_fetchall_impl()
    -_fetchmany_impl(size)
  }

  class ChunkedIteratorResult {
    -__init__(cursor_metadata, chunks, source_supports_scalars, raw, dynamic_yield_per)
    +yield_per(num): Self
    -_soft_close(hard)
    -_fetchmany_impl(size)
  }

  class MergedResult {
    +closed: bool
    +rowcount
    --
    -__init__(cursor_metadata, results)
    -_soft_close(hard)
  }

  class DefaultDialect {
    +statement_compiler
    +ddl_compiler
    +type_compiler_cls
    +preparer
    +supports_alter: bool
    +supports_comments: bool
    +supports_constraint_comments: bool
    +inline_comments: bool
    +supports_statement_cache: bool
    +div_is_floordiv: bool
    +bind_typing
    +include_set_input_sizes
    +exclude_set_input_sizes
    +default_sequence_base: int
    +execute_sequence_format: tuple
    +supports_schemas: bool
    +supports_views: bool
    +supports_sequences: bool
    +sequences_optional: bool
    +preexecute_autoincrement_sequences: bool
    +supports_identity_columns: bool
    +postfetch_lastrowid: bool
    +favor_returning_over_lastrowid: bool
    +insert_null_pk_still_autoincrements: bool
    +update_returning: bool
    +delete_returning: bool
    +update_returning_multifrom: bool
    +delete_returning_multifrom: bool
    +insert_returning: bool
    +cte_follows_insert: bool
    +supports_native_enum: bool
    +supports_native_boolean: bool
    +supports_native_uuid: bool
    +returns_native_bytes: bool
    +non_native_boolean_check_constraint: bool
    +supports_simple_order_by_label: bool
    +tuple_in_values: bool
    +connection_characteristics
    +engine_config_types
    +supports_native_decimal: bool
    +name: str
    +max_identifier_length: int
    -_user_defined_max_identifier_length
    +isolation_level
    +max_index_name_length
    +max_constraint_name_length
    +supports_sane_rowcount: bool
    +supports_sane_multi_rowcount: bool
    +colspecs
    +default_paramstyle: str
    +supports_default_values: bool
    +supports_default_metavalue: bool
    +default_metavalue_token: str
    +supports_empty_insert: bool
    +supports_multivalues_insert: bool
    +use_insertmanyvalues: bool
    +use_insertmanyvalues_wo_returning: bool
    +insertmanyvalues_implicit_sentinel: InsertmanyvaluesSentinelOpts
    +insertmanyvalues_page_size: int
    +insertmanyvalues_max_parameters: int
    +supports_is_distinct_from: bool
    +supports_server_side_cursors: bool
    +server_side_cursors: bool
    +supports_for_update_of: bool
    +server_version_info: NoneType
    +default_schema_name
    +requires_name_normalize: bool
    +is_async: bool
    +has_terminate: bool
    +legacy_tt_callable
    +tt_callable
    +tt_callable
    +update_executemany_returning: bool
    +delete_executemany_returning: bool
    +ssc
    +package
    +max_ident_length
    +opts
    +supported_names
    +characteristics
    +supported_names
    +characteristics
    +characteristic_values
    +trans_objs
    +dbapi_connection
    +characteristic
    +is_disconnect
    +is_disconnect
    +cursor: NoneType
    +cursor
    +context
    +compiled
    +imv
    +is_returning
    +batch_size
    +sentinel_value_resolvers: NoneType
    +result
    +sort_by_parameter_order
    +sentinel_value_resolvers
    +sort_by_parameter_order: bool
    +result: NoneType
    +rows
    +composite_sentinel
    +rows_by_sentinel
    +rows_by_sentinel
    +ordered_rows
    +ordered_rows
    +ordered_rows
    +ordered_rows
    +raw_levels
    +normalized_levels
    +level
    +name_lower
    +name_upper
    +name_lower
    +name_upper
    +name: name_upper
    +names_fns
    +temp_names_fns
    +unreflectable
    +names: filter_names
    +names
    +name_kw
    +fns
    +filter_names
    +key
    --
    -__init__(paramstyle, isolation_level, dbapi, implicit_returning, supports_native_boolean, max_identifier_length, label_length, insertmanyvalues_page_size, use_insertmanyvalues, compiler_linting, server_side_cursors)
    +full_returning()
    +insert_executemany_returning()
    +insert_executemany_returning_sort_by_parameter_order()
    +loaded_dbapi(): ModuleType
    -_bind_typing_render_casts()
    -_ensure_has_table_connection(arg)
    -_supports_statement_cache()
    -_type_memos()
    +dialect_description()
    +supports_sane_rowcount_returning()
    +{class} get_pool_class(url)
    +get_dialect_pool_class(url)
    +{class} load_provisioning()
    -_builtin_onconnect()
    +builtin_connect(conn_rec)
    +initialize(connection)
    +on_connect()
    -_check_max_identifier_length(connection)
    +get_default_isolation_level(dbapi_conn)
    +type_descriptor(typeobj)
    +has_index(connection, table_name, index_name, schema)
    +has_schema(connection, schema_name): bool
    +validate_identifier(ident)
    +connect()
    +create_connect_args(url)
    +set_engine_execution_options(engine, opts)
    +set_connection_characteristics()
    +set_connection_execution_options(connection, opts)
    -_set_connection_characteristics(connection, characteristics)
    -_reset_characteristics(characteristics, dbapi_connection)
    +do_begin(dbapi_connection)
    +do_rollback(dbapi_connection)
    +do_commit(dbapi_connection)
    +do_terminate(dbapi_connection)
    +do_close(dbapi_connection)
    -_dialect_specific_select_one()
    -_do_ping_w_event(dbapi_connection): bool
    +do_ping(dbapi_connection): bool
    +create_xid()
    +do_savepoint(connection, name)
    +do_rollback_to_savepoint(connection, name)
    +do_release_savepoint(connection, name)
    -_deliver_insertmanyvalues_batches(cursor, statement, parameters, generic_setinputsizes, context)
    +do_executemany(cursor, statement, parameters, context)
    +do_execute(cursor, statement, parameters, context)
    +do_execute_no_params(cursor, statement, context)
    +is_disconnect(e, connection, cursor)
    -_gen_allowed_isolation_levels(dbapi_conn)
    -_assert_and_set_isolation_level(dbapi_conn, level)
    +reset_isolation_level(dbapi_conn)
    +normalize_name(name)
    +denormalize_name(name)
    +get_driver_connection(connection)
    -_overrides_default(method)
    -_default_multi_reflect(single_tbl_method, connection, kind, schema, filter_names, scope)
    +get_multi_table_options(connection)
    +get_multi_columns(connection)
    +get_multi_pk_constraint(connection)
    +get_multi_foreign_keys(connection)
    +get_multi_indexes(connection)
    +get_multi_unique_constraints(connection)
    +get_multi_check_constraints(connection)
    +get_multi_table_comment(connection)
  }

  class StrCompileDialect {
    +statement_compiler
    +ddl_compiler
    +type_compiler_cls
    +preparer
    +insert_returning: bool
    +update_returning: bool
    +delete_returning: bool
    +supports_statement_cache: bool
    +supports_identity_columns: bool
    +supports_sequences: bool
    +sequences_optional: bool
    +preexecute_autoincrement_sequences: bool
    +supports_native_boolean: bool
    +supports_multivalues_insert: bool
    +supports_simple_order_by_label: bool
  }

  class DefaultExecutionContext {
    +isinsert: bool
    +isupdate: bool
    +isdelete: bool
    +is_crud: bool
    +is_text: bool
    +isddl: bool
    +execute_style: ExecuteStyle
    +compiled
    +result_column_struct
    +returned_default_rows
    +execution_options: _ExecuteOptions
    +cursor_fetch_strategy
    +invoked_statement
    -_translate_colname
    -_expanded_parameters
    +cache_hit: NO_CACHE_KEY
    +root_connection: Connection
    -_dbapi_connection: PoolProxiedConnection
    +dialect: Dialect
    +unicode_statement: str
    +cursor: DBAPICursor
    +compiled_parameters
    +parameters: _DBAPIMultiExecuteParams
    +extracted_parameters
    -_insertmanyvalues_rows
    -_num_sentinel_cols: int
    +self
    +compiled: compiled_ddl
    +schema_translate_map
    +rst
    +self
    +ii
    +iu
    +id_
    +dml_statement
    +ier
    +iir
    +imv
    +processors
    +flattened_processors
    +expanded_state
    +flattened_processors
    +positiontup
    +positiontup
    +positiontup: NoneType
    +schema_translate_map
    +rst
    +core_positional_parameters
    +l_param
    +core_dict_parameters
    +escaped_names
    +d_param
    +d_param
    +d_param
    +self
    +self
    +now
    +ch
    +gen_time
    +conn
    +schema_translate_map
    +rst
    +stmt
    +parameters
    +parameters
    +row
    +r
    +r: NoneType
    +proc
    +use_server_side
    +use_server_side
    +exec_opt
    +result
    +yp: bool
    +sr: bool
    +yp
    +sr
    +strategy
    +strategy
    +cursor_description: _DBAPICursorDescription
    +strategy
    +result
    +compiled
    +result
    +compiled
    +out_bindparams
    +out_parameters
    +type_
    +impl_type
    +dbapi_type
    +result_processor
    +raw_value
    +compiled
    +strategy: ResultFetchStrategy
    +strategy
    +strategy
    +cursor_description: NoneType
    +cursor_description
    +strategy
    +cursor_description
    +result
    +rows
    +rows
    +getter
    +lastrowid
    +getter
    +getter
    +compiled_params
    +compiled
    +inputsizes
    +dialect
    +inputsizes
    +escaped_bind_names
    +escaped_bind_names: NoneType
    +items
    +items
    +generic_inputsizes
    +num
    +dbtypes
    +dbtype
    +dbtype
    +escaped_name
    +default_arg
    +default_arg
    +compiled
    +compiled_params
    +processors
    +parameters
    +parameters
    +current_parameters
    +parameters
    +column
    +compile_state
    +index
    +d
    +d
    +index: int
    +keys
    +compiled
    +key_getter
    +sentinel_counter: int
    +prefetch_recs
    +prefetch_recs
    +prefetch_recs
    +val
    --
    -{class} _init_ddl(dialect, connection, dbapi_connection, execution_options, compiled_ddl): ExecutionContext
    -{class} _init_compiled(dialect, connection, dbapi_connection, execution_options, compiled, parameters, invoked_statement, extracted_parameters, cache_hit): ExecutionContext
    -{class} _init_statement(dialect, connection, dbapi_connection, execution_options, statement, parameters): ExecutionContext
    -{class} _init_default(dialect, connection, dbapi_connection, execution_options): ExecutionContext
    -_get_cache_stats(): str
    +executemany()
    +identifier_preparer()
    +engine()
    +postfetch_cols()
    +prefetch_cols()
    +no_parameters()
    -_execute_scalar(stmt, type_, parameters)
    +connection()
    -_use_server_side_cursor()
    +create_cursor()
    +fetchall_for_returning(cursor)
    +create_default_cursor()
    +create_server_side_cursor()
    +pre_exec()
    +get_out_parameter_values(names)
    +post_exec()
    +get_result_processor(type_, colname, coltype)
    +get_lastrowid()
    +handle_dbapi_exception(e)
    +rowcount(): int
    +supports_sane_rowcount()
    +supports_sane_multi_rowcount()
    -_setup_result_proxy()
    -_setup_out_parameters(result)
    -_setup_dml_or_text_result()
    +inserted_primary_key_rows()
    -_setup_ins_pk_from_lastrowid()
    -_setup_ins_pk_from_empty()
    -_setup_ins_pk_from_implicit_returning(result, rows)
    +lastrow_has_defaults()
    -_prepare_set_input_sizes()
    -_exec_default(column, default, type_)
    -_exec_default_clause_element(column, default, type_)
    +get_current_parameters(isolate_multiinsert_groups)
    +get_insert_default(column)
    +get_update_default(column)
    -_process_execute_defaults()
  }

  class Row {
    +count
    +index
    --
    -__setattr__(name, value): NoReturn
    -__delattr__(name): NoReturn
    -_tuple(): _TP
    +tuple(): _TP
    -_t(): _TP
    +t(): _TP
    -_mapping(): RowMapping
    -_filter_on_values(processor)
    -_special_name_accessor(): Any
    +go(): Any
    +meth(): Any
    -__contains__(key): bool
    -_op(other, op): bool
    -__getitem__(index): Any
    -__getitem__(index)
    -__getitem__(index): Any
    -__lt__(other): bool
    -__le__(other): bool
    -__ge__(other): bool
    -__gt__(other): bool
    -__eq__(other): bool
    -__ne__(other): bool
    -__repr__(): str
    -_fields()
    -_asdict()
  }

  class ROMappingView {
    -_items
    -_mapping
    --
    -__init__(mapping, items)
    -__len__(): int
    -__repr__(): str
    -__iter__()
    -__contains__(item): bool
    -__eq__(other): bool
    -__ne__(other): bool
  }

  class ROMappingKeysValuesView {
  }

  class ROMappingItemsView {
  }

  class RowMapping {
    -__getitem__(key): Any
    -_values_impl()
    -__iter__()
    -__len__(): int
    -__contains__(key): bool
    -__repr__(): str
    +items(): ROMappingItemsView
    +keys(): RMKeyView
    +values(): ROMappingKeysValuesView
  }

  class Connection {
    +dispatch
    -_trans_context_manager
    +should_close_with_result: bool
    -_dbapi_connection
    -_execution_options: _ExecuteOptions
    -_transaction
    -_nested_transaction
    +dialect
    +token
    +fmt
    +message
    +fmt
    +message
    +schema_translate_map
    +name
    +schema_translate_map
    +pool_proxied_connection
    +pool_proxied_connection
    +dbapi_connection
    +pool_proxied_connection
    +pool_proxied_connection
    +xid
    +opt_iso
    +trans
    +trans
    +name
    +skip_reset: bool
    +skip_reset: bool
    +conn
    +distilled_parameters
    +meth
    +distilled_parameters
    +meth
    +execution_options
    +event_multiparams
    +event_params
    +event_multiparams: NoneType
    +event_params: NoneType
    +conn
    +conn
    +dialect
    +ctx
    +ret
    +execution_options
    +event_multiparams
    +event_params
    +event_multiparams: NoneType
    +event_params: NoneType
    +exec_opts
    +schema_translate_map
    +dialect
    +compiled
    +ret
    +event_multiparams: _CoreMultiExecuteParams
    +event_params: _CoreSingleExecuteParams
    +distilled_params
    +distilled_params
    +distilled_params
    +execution_options
    +has_events
    +keys
    +for_executemany
    +keys
    +for_executemany: bool
    +dialect
    +schema_translate_map
    +compiled_cache
    +ret
    +execution_options
    +dialect
    +ret
    +distilled_parameters
    +execution_options
    +dialect
    +ret
    +yp
    +execution_options
    +conn
    +conn
    +context
    +generic_setinputsizes
    +effective_parameters
    +effective_parameters
    +effective_parameters: parameters
    +stats
    +evt_handled: bool
    +effective_parameters
    +evt_handled: bool
    +evt_handled: bool
    +effective_parameters
    +evt_handled: bool
    +result
    +generic_setinputsizes
    +generic_setinputsizes: NoneType
    +effective_parameters: parameters
    +engine_events
    +do_execute_dispatch
    +do_execute_dispatch
    +stats
    +sub_stmt
    +sub_params
    +imv_stats
    +stats
    +result
    +exc_info
    +is_exit_exception
    +invalidate_pool_on_disconnect
    +ismulti: bool
    +should_wrap
    +sqlalchemy_exception
    +sqlalchemy_exception: NoneType
    +newraise: NoneType
    +ctx
    +per_fn
    +newraise: per_fn
    +newraise: _raised
    +invalidate_pool_on_disconnect
    +dbapi_conn_wrapper
    +exc_info
    +is_disconnect
    +should_wrap
    +sqlalchemy_exception
    +sqlalchemy_exception: NoneType
    +newraise: NoneType
    +ctx
    +per_fn
    +newraise: per_fn
    +newraise: _raised
    +is_disconnect
    --
    -__init__(engine, connection, _has_events, _allow_revalidate, _allow_autobegin)
    -_message_formatter(): Any
    -_log_info(message)
    -_log_debug(message)
    -_schema_translate_map()
    +schema_for_object(obj)
    -__enter__(): Connection
    -__exit__(type_, value, traceback)
    +execution_options(): Connection
    +execution_options(): Connection
    +execution_options(): Connection
    +get_execution_options(): _ExecuteOptions
    -_still_open_and_dbapi_connection_is_valid(): bool
    +closed(): bool
    +invalidated(): bool
    +connection(): PoolProxiedConnection
    +get_isolation_level(): IsolationLevel
    +default_isolation_level()
    -_invalid_transaction(): NoReturn
    -_revalidate_connection(): PoolProxiedConnection
    +info(): _InfoType
    +invalidate(exception)
    +detach()
    -_autobegin()
    +begin(): RootTransaction
    +begin_nested(): NestedTransaction
    +begin_twophase(xid): TwoPhaseTransaction
    +commit()
    +rollback()
    +recover_twophase()
    +rollback_prepared(xid, recover)
    +commit_prepared(xid, recover)
    +in_transaction(): bool
    +in_nested_transaction(): bool
    -_is_autocommit_isolation(): bool
    -_get_required_transaction(): RootTransaction
    -_get_required_nested_transaction(): NestedTransaction
    +get_transaction()
    +get_nested_transaction()
    -_begin_impl(transaction)
    -_rollback_impl()
    -_commit_impl()
    -_savepoint_impl(name): str
    -_rollback_to_savepoint_impl(name)
    -_release_savepoint_impl(name)
    -_begin_twophase_impl(transaction)
    -_prepare_twophase_impl(xid)
    -_rollback_twophase_impl(xid, is_prepared)
    -_commit_twophase_impl(xid, is_prepared)
    +close()
    +scalar(statement, parameters)
    +scalar(statement, parameters): Any
    +scalar(statement, parameters): Any
    +scalars(statement, parameters)
    +scalars(statement, parameters)
    +scalars(statement, parameters)
    +execute(statement, parameters)
    +execute(statement, parameters)
    +execute(statement, parameters)
    -_execute_function(func, distilled_parameters, execution_options)
    -_execute_default(default, distilled_parameters, execution_options): Any
    -_execute_ddl(ddl, distilled_parameters, execution_options)
    -_invoke_before_exec_event(elem, distilled_params, execution_options)
    -_execute_clauseelement(elem, distilled_parameters, execution_options)
    -_execute_compiled(compiled, distilled_parameters, execution_options)
    +exec_driver_sql(statement, parameters, execution_options)
    -_execute_context(dialect, constructor, statement, parameters, execution_options)
    -_exec_single_context(dialect, context, statement, parameters)
    -_exec_insertmany_context(dialect, context)
    -_cursor_execute(cursor, statement, parameters, context)
    -_safe_close_cursor(cursor)
    -_handle_dbapi_exception(e, statement, parameters, cursor, context, is_sub_exec): NoReturn
    -{class} _handle_dbapi_exception_noconnection(e, dialect, engine, is_disconnect, invalidate_pool_on_disconnect, is_pre_ping): NoReturn
    -_run_ddl_visitor(visitorcallable, element)
  }

  class ExceptionContextImpl {
    -__init__(exception, sqlalchemy_exception, engine, dialect, connection, cursor, statement, parameters, context, is_disconnect, invalidate_pool_on_disconnect, is_pre_ping)
  }

  class Transaction {
    -_is_root: bool
    +is_active: bool
    +connection: Connection
    --
    -__init__(connection)
    -_deactivated_from_connection(): bool
    -_do_close()
    -_do_rollback()
    -_do_commit()
    +is_valid(): bool
    +close()
    +rollback()
    +commit()
    -_get_subject(): Connection
    -_transaction_is_active(): bool
    -_transaction_is_closed(): bool
    -_rollback_can_be_called(): bool
  }

  class RootTransaction {
    -__init__(connection)
    -_deactivate_from_connection()
    -_deactivated_from_connection(): bool
    -_connection_begin_impl()
    -_connection_rollback_impl()
    -_connection_commit_impl()
    -_close_impl(try_deactivate)
    -_do_close()
    -_do_rollback()
    -_do_commit()
  }

  class NestedTransaction {
    -_savepoint: str
    --
    -__init__(connection)
    -_deactivate_from_connection(warn)
    -_deactivated_from_connection(): bool
    -_cancel()
    -_close_impl(deactivate_from_connection, warn_already_deactive)
    -_do_close()
    -_do_rollback()
    -_do_commit()
  }

  class TwoPhaseTransaction {
    +xid: Any
    --
    -__init__(connection, xid)
    +prepare()
    -_connection_begin_impl()
    -_connection_rollback_impl()
    -_connection_commit_impl()
  }

  class Engine {
    +dispatch
    -_compiled_cache
    -_execution_options: _ExecuteOptions
    -_has_events: bool
    -_connection_cls
    -_sqla_logger_namespace: str
    -_is_future: bool
    -_schema_translate_map
    -_option_cls
    +dialect: Dialect
    +pool: Pool
    +url: URL
    +hide_parameters: bool
    +echo
    --
    -__init__(pool, dialect, url, logging_name, echo, query_cache_size, execution_options, hide_parameters)
    -_lru_size_alert(cache)
    +engine(): Engine
    +clear_compiled_cache()
    +update_execution_options()
    +execution_options(): OptionEngine
    +execution_options(): OptionEngine
    +execution_options(): OptionEngine
    +get_execution_options(): _ExecuteOptions
    +name(): str
    +driver(): str
    -__repr__(): str
    +dispose(close)
    -_optional_conn_ctx_manager(connection)
    +begin()
    -_run_ddl_visitor(visitorcallable, element)
    +connect(): Connection
    +raw_connection(): PoolProxiedConnection
  }

  class OptionEngineMixin {
    +dispatch
    -_compiled_cache
    +dialect: Dialect
    +pool: Pool
    +url: URL
    +hide_parameters: bool
    +echo: log.echo_property
    --
    -__init__(proxied, execution_options)
    +update_execution_options()
    +pool(): Pool
    +pool(pool)
    -_has_events(): bool
    -_has_events(value)
  }

  class OptionEngine {
    +update_execution_options()
  }

  class CursorResultMetaData {
    -_keymap: _CursorKeyMapType
    -_processors: _ProcessorsType
    -_keymap_by_result_column_idx
    -_unpickled: bool
    -_safe_for_cache: bool
    -_translated_indexes
    +returns_rows
    +new_obj
    +keymap
    +offset
    +recs
    +indexes
    +new_keys
    +indexes
    +tup
    +new_recs
    +keymap
    +compiled_statement
    +invoked_statement
    +keymap_by_position
    +keymap_by_position
    +context
    +num_ctx_cols
    +result_columns: bool
    +cols_are_ordered: bool
    +num_ctx_cols: bool
    +ad_hoc_textual: bool
    +loose_column_name_matching: bool
    +textual_ordered: bool
    +raw
    +by_key
    +index_by_key
    +dupes
    +idx
    +raw_iterator
    +raw_iterator
    +raw_iterator
    +dialect
    +translate_colname
    +normalize_name
    +untranslated: NoneType
    +colname
    +coltype
    +colname
    +num_ctx_cols
    +seen
    +ctx_rec
    +obj
    +ridx: idx
    +mapped_type
    +mapped_type
    +obj: NoneType
    +ridx: NoneType
    +match_map
    +mapped_type
    +ctx_rec
    +mapped_type
    +obj: NoneType
    +result_columns_idx: NoneType
    +obj
    +mapped_type
    +result_columns_idx
    +d
    +key
    +key
    +rec
    +x
    +index
    +key
    +rec
    +index
    --
    -_has_key(key): bool
    -_for_freeze(): ResultMetaData
    -_make_new_metadata(): CursorResultMetaData
    -_remove_processors(): CursorResultMetaData
    -_splice_horizontally(other): CursorResultMetaData
    -_reduce(keys): ResultMetaData
    -_adapt_to_context(context): ResultMetaData
    -__init__(parent, cursor_description)
    -_merge_cursor_description(context, cursor_description, result_columns, num_ctx_cols, cols_are_ordered, textual_ordered, ad_hoc_textual, loose_column_name_matching)
    -_colnames_from_description(context, cursor_description)
    -_merge_textual_cols_by_position(context, cursor_description, result_columns)
    -_merge_cols_by_name(context, cursor_description, result_columns, loose_column_name_matching)
    -{class} _create_description_match_map(result_columns, loose_column_name_matching)
    -_merge_cols_by_none(context, cursor_description)
    -_key_fallback(key, err, raiseerr)
    -_raise_for_ambiguous_column_name(rec)
    -_index_for_key(key, raiseerr)
    -_indexes_for_keys(keys)
    -_metadata_for_keys(keys)
    -__getstate__()
    -__setstate__(state)
  }

  class ResultFetchStrategy {
    +alternate_cursor_description
    --
    +soft_close(result, dbapi_cursor)
    +hard_close(result, dbapi_cursor)
    +yield_per(result, dbapi_cursor, num)
    +fetchone(result, dbapi_cursor, hard_close): Any
    +fetchmany(result, dbapi_cursor, size): Any
    +fetchall(result, dbapi_cursor): Any
    +handle_exception(result, dbapi_cursor, err): NoReturn
  }

  class NoCursorFetchStrategy {
    +soft_close(result, dbapi_cursor)
    +hard_close(result, dbapi_cursor)
    +fetchone(result, dbapi_cursor, hard_close)
    +fetchmany(result, dbapi_cursor, size)
    +fetchall(result, dbapi_cursor)
    -_non_result(result, default, err)
  }

  class NoCursorDQLFetchStrategy {
    -_non_result(result, default, err)
  }

  class NoCursorDMLFetchStrategy {
    -_non_result(result, default, err)
  }

  class CursorFetchStrategy {
    +row
    +l
    +l
    +rows
    --
    +soft_close(result, dbapi_cursor)
    +hard_close(result, dbapi_cursor)
    +handle_exception(result, dbapi_cursor, err): NoReturn
    +yield_per(result, dbapi_cursor, num)
    +fetchone(result, dbapi_cursor, hard_close): Any
    +fetchmany(result, dbapi_cursor, size): Any
    +fetchall(result, dbapi_cursor): Any
  }

  class BufferedRowCursorFetchStrategy {
    +size
    +new_rows
    +new_rows
    +buf
    +lb
    +new
    +result
    +ret
    --
    -__init__(dbapi_cursor, execution_options, growth_factor, initial_buffer)
    +{class} create(result)
    -_buffer_rows(result, dbapi_cursor)
    +yield_per(result, dbapi_cursor, num)
    +soft_close(result, dbapi_cursor)
    +hard_close(result, dbapi_cursor)
    +fetchone(result, dbapi_cursor, hard_close)
    +fetchmany(result, dbapi_cursor, size)
    +fetchall(result, dbapi_cursor)
  }

  class FullyBufferedCursorFetchStrategy {
    +buf
    +rows
    +ret
    --
    -__init__(dbapi_cursor, alternate_description, initial_buffer)
    +yield_per(result, dbapi_cursor, num)
    +soft_close(result, dbapi_cursor)
    +hard_close(result, dbapi_cursor)
    +fetchone(result, dbapi_cursor, hard_close)
    +fetchmany(result, dbapi_cursor, size)
    +fetchall(result, dbapi_cursor)
  }

  class _NoResultMetaData {
    +returns_rows: bool
    --
    -_we_dont_return_rows(err)
    -_index_for_key(keys, raiseerr)
    -_metadata_for_keys(key)
    -_reduce(keys)
    -_keymap()
    -_key_to_index()
    -_processors()
    +keys()
  }

  class CursorResult {
    -_metadata
    -_soft_closed: bool
    +closed: bool
    +context: DefaultExecutionContext
    +dialect: Dialect
    +cursor_strategy: ResultFetchStrategy
    +connection: Connection
    +echo
    +metadata
    +sentinel_filter
    +sliced_row: _sliced_row
    +sliced_row: _make_row
    +log
    +make_row: _make_row_2
    +make_row: sliced_row
    +compiled
    +metadata
    +metadata
    +metadata
    +metadata
    +cursor
    +ikp
    +clone
    +total_rows
    +clone
    +total_rows
    +rows
    +fetchone
    +row
    +merged_result
    +setup_rowcounts
    --
    -__init__(context, cursor_strategy, cursor_description)
    -_sliced_row()
    -_log_row()
    -_make_row_2()
    -_init_metadata(context, cursor_description)
    -_soft_close(hard)
    +inserted_primary_key_rows()
    +inserted_primary_key()
    +last_updated_params()
    +last_inserted_params()
    +returned_defaults_rows()
    +splice_horizontally(other)
    +splice_vertically(other)
    -_rewind(rows)
    +returned_defaults()
    +lastrow_has_defaults()
    +postfetch_cols()
    +prefetch_cols()
    +supports_sane_rowcount()
    +supports_sane_multi_rowcount()
    +rowcount(): int
    +lastrowid()
    +returns_rows()
    +is_insert()
    -_fetchiter_impl()
    -_fetchone_impl(hard_close)
    -_fetchall_impl()
    -_fetchmany_impl(size)
    -_raw_row_iterator()
    +merge()
    +close(): Any
    +yield_per(num): Self
  }

  class MockConnection {
    +engine: Engine
    +dialect: Dialect
    +name: str
    --
    -__init__(dialect, execute)
    +connect(): MockConnection
    +schema_for_object(obj)
    +execution_options(): MockConnection
    -_run_ddl_visitor(visitorcallable, element)
    +execute(obj, parameters, execution_options): Any
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.pool" {
  class PoolEvents {
    +Engine
    +target
    --
    -{class} _accept_with(target, identifier)
    -{class} _listen(event_key)
    +connect(dbapi_connection, connection_record)
    +first_connect(dbapi_connection, connection_record)
    +checkout(dbapi_connection, connection_record, connection_proxy)
    +checkin(dbapi_connection, connection_record)
    +reset(dbapi_connection, connection_record, reset_state)
    +invalidate(dbapi_connection, connection_record, exception)
    +soft_invalidate(dbapi_connection, connection_record, exception)
    +close(dbapi_connection, connection_record)
    +detach(dbapi_connection, connection_record)
    +close_detached(dbapi_connection)
  }

  class QueuePool {
    -_queue_class
    -_pool
    +use_overflow
    +wait
    +conn
    --
    -__init__(creator, pool_size, max_overflow, timeout, use_lifo)
    -_do_return_conn(record)
    -_do_get(): ConnectionPoolEntry
    -_inc_overflow(): bool
    -_dec_overflow()
    +recreate(): QueuePool
    +dispose()
    +status(): str
    +size(): int
    +timeout(): float
    +checkedin(): int
    +overflow(): int
    +checkedout(): int
  }

  class AsyncAdaptedQueuePool {
    -_queue_class
  }

  class FallbackAsyncAdaptedQueuePool {
  }

  class NullPool {
    +status(): str
    -_do_return_conn(record)
    -_do_get(): ConnectionPoolEntry
    +recreate(): NullPool
    +dispose()
  }

  class SingletonThreadPool {
    +c
    +c
    +c
    +c
    +rec
    --
    -__init__(creator, pool_size)
    +recreate(): SingletonThreadPool
    +dispose()
    -_cleanup()
    +status(): str
    -_do_return_conn(record)
    -_do_get(): ConnectionPoolEntry
    +connect(): PoolProxiedConnection
  }

  class StaticPool {
    +conn
    +rec
    +rec
    --
    +connection(): _ConnectionRecord
    +status(): str
    +dispose()
    +recreate(): StaticPool
    -_transfer_from(other_static_pool)
    +creator(): DBAPIConnection
    -_create_connection(): ConnectionPoolEntry
    -_do_return_conn(record)
    -_do_get(): ConnectionPoolEntry
  }

  class AssertionPool {
    -_conn
    -_checkout_traceback
    +suffix
    +suffix: str
    --
    -__init__()
    +status(): str
    -_do_return_conn(record)
    +dispose()
    +recreate(): AssertionPool
    -_do_get(): ConnectionPoolEntry
  }

  class PoolResetState {
    +transaction_was_reset: bool
    +terminate_only: bool
    +asyncio_safe: bool
  }

  class ResetStyle {
    +reset_rollback: int
    +reset_commit: int
    +reset_none: int
  }

  class _ConnDialect {
    +is_async: bool
    +has_terminate: bool
    --
    +do_rollback(dbapi_connection)
    +do_commit(dbapi_connection)
    +do_terminate(dbapi_connection)
    +do_close(dbapi_connection)
    -_do_ping_w_event(dbapi_connection): bool
    +get_driver_connection(connection): Any
  }

  class _AsyncConnDialect {
    +is_async: bool
  }

  class _CreatorFnType {
    -__call__(): DBAPIConnection
  }

  class _CreatorWRecFnType {
    -__call__(rec): DBAPIConnection
  }

  class Pool {
    +dispatch
    +echo: log._EchoFlagType
    -_orig_logging_name
    -_dialect
    -_creator_arg
    -_invoke_creator: _CreatorWRecFnType
    -_invalidate_time: float
    +argspec
    +creator_fn
    +defaulted
    +defaulted: int
    +positionals
    +creator_fn
    +rec
    --
    -__init__(creator, recycle, echo, logging_name, reset_on_return, events, dialect, pre_ping, _dispatch)
    -_is_asyncio(): bool
    -_creator()
    -_creator(creator)
    -_creator()
    -_should_wrap_creator(creator): _CreatorWRecFnType
    -_close_connection(connection)
    -_create_connection(): ConnectionPoolEntry
    -_invalidate(connection, exception, _checkin)
    +recreate(): Pool
    +dispose()
    +connect(): PoolProxiedConnection
    -_return_conn(record)
    -_do_get(): ConnectionPoolEntry
    -_do_return_conn(record)
    +status(): str
  }

  class ManagesConnection {
    +dbapi_connection
    +driver_connection
    --
    +info(): _InfoType
    +record_info()
    +invalidate(e, soft)
  }

  class ConnectionPoolEntry {
    +in_use(): bool
    +close()
  }

  class _ConnectionRecord {
    +finalize_callback
    +fresh: bool
    +fairy_ref
    +starttime: float
    +dbapi_connection
    -_soft_invalidate_time: float
    +rec
    +rec
    +dbapi_connection
    +echo
    +fairy
    +ref
    +connection
    +pool
    +finalizer
    +recycle: bool
    +recycle: bool
    +recycle: bool
    +recycle: bool
    +pool
    +connection
    --
    -__init__(pool, connect)
    +driver_connection()
    +connection()
    +info(): _InfoType
    +record_info()
    +{class} checkout(pool): _ConnectionFairy
    -_checkin_failed(err, _fairy_was_created)
    +checkin(_fairy_was_created)
    +in_use(): bool
    +last_connect_time(): float
    +close()
    +invalidate(e, soft)
    +get_connection(): DBAPIConnection
    -_is_hard_or_soft_invalidated(): bool
    -__close()
    -__connect()
  }

  class PoolProxiedConnection {
    +commit()
    +cursor(): DBAPICursor
    +rollback()
    +is_valid(): bool
    +is_detached(): bool
    +detach()
    +close()
  }

  class _AdhocProxiedConnection {
    +dbapi_connection: DBAPIConnection
    -_connection_record: ConnectionPoolEntry
    --
    -__init__(dbapi_connection, connection_record)
    +driver_connection(): Any
    +connection(): DBAPIConnection
    +is_valid(): bool
    +invalidate(e, soft)
    +record_info()
    +cursor(): DBAPICursor
    -__getattr__(key): Any
  }

  class _ConnectionFairy {
    +pool: Pool
    +dbapi_connection: DBAPIConnection
    -_echo: log._EchoFlagType
    -_connection_record
    +fairy
    +attempts: int
    +connection_is_fresh
    +result
    +rec
    +rec
    --
    -__init__(pool, dbapi_connection, connection_record, echo)
    +driver_connection()
    +connection(): DBAPIConnection
    -{class} _checkout(pool, threadconns, fairy): _ConnectionFairy
    -_checkout_existing(): _ConnectionFairy
    -_checkin(transaction_was_reset)
    -_close()
    -_reset(pool, transaction_was_reset, terminate_only, asyncio_safe)
    -_logger(): log._IdentifiedLoggerType
    +is_valid(): bool
    +is_detached(): bool
    +info(): _InfoType
    +record_info()
    +invalidate(e, soft)
    +cursor(): DBAPICursor
    -__getattr__(key): Any
    +detach()
    +close()
    -_close_special(transaction_reset)
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.event" {
  class EventTarget {
    +dispatch
  }

  class _EventKey {
    +target: _ET
    +identifier: str
    +fn: _ListenerFnType
    +fn_key: _ListenerFnKeyType
    +dispatch_target: Any
    -_fn_wrap
    +once
    +once_unless_exception
    +named
    +dispatch_collection
    +adjusted_fn
    +self
    +stub_function
    +key
    +dispatch_reg
    +collection
    +listener_fn
    +dispatch_collection
    +for_modify
    --
    -__init__(target, identifier, fn, dispatch_target, _fn_wrap)
    -_key(): _EventKeyTupleType
    +with_wrapper(fn_wrap)
    +with_dispatch_target(dispatch_target)
    +listen()
    +remove()
    +contains(): bool
    +base_listen(propagate, insert, named, retval, asyncio)
    -_listen_fn(): _ListenerFnType
    +append_to_list(owner, list_): bool
    +remove_from_list(owner, list_)
    +prepend_to_list(owner, list_): bool
  }

  class RefCollection {
    +ref
    --
    -_memoized_attr_ref()
  }

  class _empty_collection {
    +append(element)
    +appendleft(element)
    +extend(other)
    +remove(element)
    -__contains__(element): bool
    -__iter__()
    +clear()
    -__len__(): int
  }

  class _ClsLevelDispatch {
    +clsname: str
    +name: str
    +arg_names
    +has_kw: bool
    +legacy_signatures
    -_clslevel
    +argspec
    +fn
    +argspec
    +fn
    +argdict
    +target
    +cls
    +clslevel
    +cls
    +target
    +cls
    +to_clear
    --
    -__init__(parent_dispatch_cls, fn)
    -_adjust_fn_spec(fn, named): _ListenerFnType
    -_wrap_fn_for_kw(fn): _ListenerFnType
    +wrap_kw(): Any
    -_do_insert_or_append(event_key, is_append)
    +insert(event_key, propagate)
    +append(event_key, propagate)
    +update_subclass(target)
    +remove(event_key)
    +clear()
    +for_modify(obj)
  }

  class _InstanceLevelDispatch {
    +parent
    --
    -_adjust_fn_spec(fn, named): _ListenerFnType
    -__contains__(item): bool
    -__len__(): int
    -__iter__()
    -__bool__(): bool
    +exec_once()
    +exec_once_unless_exception()
    -_exec_w_sync_on_first_run()
    -__call__()
    +insert(event_key, propagate)
    +append(event_key, propagate)
    +remove(event_key)
    +for_modify(obj)
  }

  class _EmptyListener {
    +propagate
    +listeners
    +parent
    +parent_listeners
    +name: str
    +obj
    +result
    --
    -__init__(parent, target_cls)
    +for_modify(obj)
    -_needs_modify(): NoReturn
    +exec_once(): NoReturn
    +exec_once_unless_exception(): NoReturn
    +insert(): NoReturn
    +append(): NoReturn
    +remove(): NoReturn
    +clear(): NoReturn
    -__call__()
    -__contains__(item): bool
    -__len__(): int
    -__iter__()
    -__bool__(): bool
  }

  class _MutexProtocol {
    -__enter__(): bool
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class _CompoundListener {
    -_exec_once_mutex: _MutexProtocol
    +parent_listeners
    +listeners
    -_exec_once: bool
    -_exec_w_sync_once: bool
    +exception: bool
    +exception: bool
    --
    -_set_asyncio()
    -_memoized_attr__exec_once_mutex(): _MutexProtocol
    -_exec_once_impl(retry_on_exception)
    +exec_once()
    +exec_once_unless_exception()
    -_exec_w_sync_on_first_run()
    -__call__()
    -__contains__(item): bool
    -__len__(): int
    -__iter__()
    -__bool__(): bool
  }

  class _ListenerCollection {
    +parent_listeners
    +parent
    +name: str
    +listeners
    +propagate
    +existing_listeners
    +existing_listener_set
    +other_listeners
    +to_associate
    --
    -__init__(parent, target_cls)
    +for_modify(obj)
    -_update(other, only_propagate)
    +insert(event_key, propagate)
    +append(event_key, propagate)
    +remove(event_key)
    +clear()
  }

  class _JoinedListener {
    +parent_dispatch
    +name: str
    +local
    +parent_listeners
    --
    -__init__(parent_dispatch, name, local)
    +listeners()
    -_adjust_fn_spec(fn, named): _ListenerFnType
    +for_modify(obj)
    +insert(event_key, propagate)
    +append(event_key, propagate)
    +remove(event_key)
    +clear()
  }

  class _UnpickleDispatch {
    -__call__(_instance_cls)
  }

  class _DispatchCommon {
    -_instance_cls
    --
    -_join(other)
    -__getattr__(name)
    -_events()
  }

  class _Dispatch {
    -_active_history: bool
    -_empty_listener_reg
    -_empty_listeners
    -_event_names
    -_instance_cls
    -_joined_dispatch_cls
    -_events
    +ls
    +instance_cls
    +cls
    --
    -__init__(parent, instance_cls)
    -__getattr__(name)
    -_event_descriptors()
    -_listen(event_key)
    -_for_class(instance_cls)
    -_for_instance(instance)
    -_join(other)
    -__reduce__()
    -_update(other, only_propagate)
    -_clear()
  }

  class _HasEventsDispatch {
    -_dispatch_target
    +dispatch
    +dispatch_base
    +dispatch_base: _Dispatch
    +event_names
    +dispatch_cls
    +dispatch_inst
    +dispatch_target_cls
    --
    -__getattr__(name)
    -__init_subclass__()
    -{class} _accept_with(target, identifier)
    -{class} _listen(event_key)
    -{static} _set_dispatch(dispatch_cls)
    -{class} _create_dispatcher_class(classname, bases, dict_)
  }

  class Events {
    -{class} _accept_with(target, identifier)
    +dispatch_is(): bool
    +dispatch_parent_is(): bool
    -{class} _listen(event_key)
    -{class} _remove(event_key)
    -{class} _clear()
  }

  class _JoinedDispatcher {
    +local
    +parent
    -_instance_cls
    +ls
    +jl
    --
    -__init__(local, parent)
    -__getattr__(name)
    -_listen(event_key)
    -_events()
  }

  class dispatcher {
    +disp
    --
    -__init__(events)
    -__get__(obj, cls)
    -__get__(obj, cls)
    -__get__(obj, cls): Any
  }

  class slots_dispatcher {
    +disp
    --
    -__get__(obj, cls): Any
  }

}

package "venv2.lib.python3.12.site-packages.sqlalchemy.sql" {
  class FunctionElement {
    +packagenames
    -_table_value_type
    +primary_key: Any
    -_is_clone_of: Any
    +clause_expr
    +args
    +new_func
    +with_ordinality
    +joins_implicitly
    +name
    +cols
    +cols
    +s
    +s
    --
    -__init__()
    -_proxy_key()
    -_execute_on_connection(connection, distilled_params, execution_options)
    +scalar_table_valued(name, type_)
    +table_valued()
    +column_valued(name, joins_implicitly)
    +columns()
    +c()
    -_all_selected_columns()
    +exported_columns()
    +clauses(): ClauseList
    +over(partition_by, order_by, rows, range_)
    +within_group()
    +filter()
    +as_comparison(left_index, right_index)
    -_from_objects()
    +within_group_type(within_group)
    +alias(name, joins_implicitly)
    +select()
    -_bind_param(operator, obj, type_)
    +self_group(against)
    +entity_namespace()
  }

  class FunctionAsBinary {
    +sql_function
    +left_index: int
    +right_index: int
    +left: left_expr
    +right: right_expr
    --
    -_gen_cache_key(anon_map, bindparams)
    -__init__(fn, left_index, right_index)
    +left_expr()
    +left_expr(value)
    +right_expr()
    +right_expr(value)
  }

  class ScalarFunctionColumn {
    +is_literal: bool
    +table: NoneType
    --
    -__init__(fn, name, type_)
  }

  class _FunctionGenerator {
    +name
    +f
    +o
    +tokens
    +package: NoneType
    +func
    --
    -__init__()
    -__getattr__(name): _FunctionGenerator
    -__call__()
    -__call__()
    -__call__()
    +aggregate_strings()
    +ansifunction()
    +array_agg()
    +cast()
    +char_length()
    +coalesce()
    +concat()
    +count()
    +cube()
    +cume_dist()
    +current_date()
    +current_time()
    +current_timestamp()
    +current_user()
    +dense_rank()
    +extract()
    +grouping_sets()
    +localtime()
    +localtimestamp()
    +max()
    +min()
    +mode()
    +next_value()
    +now()
    +orderedsetagg()
    +percent_rank()
    +percentile_cont()
    +percentile_disc()
    +random()
    +rank()
    +returntypefromargs()
    +rollup()
    +session_user()
    +sum()
    +sysdate()
    +user()
  }

  class Function {
    +name: str
    +identifier: str
    +type
    --
    -__init__(name)
    -_bind_param(operator, obj, type_)
  }

  class GenericFunction {
    +coerce_arguments: bool
    +inherit_cache: bool
    -_register: bool
    +name: str
    +name
    +identifier
    +package
    +parsed_args
    +parsed_args
    --
    -__init_subclass__()
    -{class} _register_generic_function(clsname, clsdict)
    -__init__()
  }

  class next_value {
    +type
    +name: str
    --
    -__init__(seq)
    +compare(other)
    -_from_objects()
  }

  class AnsiFunction {
    +inherit_cache: bool
    --
    -__init__()
  }

  class ReturnTypeFromArgs {
    +inherit_cache: bool
    +fn_args
    --
    -__init__()
  }

  class coalesce {
    +inherit_cache: bool
  }

  class max {
    +inherit_cache: bool
  }

  class min {
    +inherit_cache: bool
  }

  class sum {
    +inherit_cache: bool
  }

  class now {
    +type
    +inherit_cache: bool
  }

  class concat {
    +type
    +inherit_cache: bool
  }

  class char_length {
    +type
    +inherit_cache: bool
    --
    -__init__(arg)
  }

  class random {
    +inherit_cache: bool
  }

  class count {
    +type
    +inherit_cache: bool
    +expression
    --
    -__init__(expression)
  }

  class current_date {
    +type
    +inherit_cache: bool
  }

  class current_time {
    +type
    +inherit_cache: bool
  }

  class current_timestamp {
    +type
    +inherit_cache: bool
  }

  class current_user {
    +type
    +inherit_cache: bool
  }

  class localtime {
    +type
    +inherit_cache: bool
  }

  class localtimestamp {
    +type
    +inherit_cache: bool
  }

  class session_user {
    +type
    +inherit_cache: bool
  }

  class sysdate {
    +type
    +inherit_cache: bool
  }

  class user {
    +type
    +inherit_cache: bool
  }

  class array_agg {
    +inherit_cache: bool
    +fn_args
    +default_array_type
    +type_from_args
    --
    -__init__()
  }

  class OrderedSetAgg {
    +array_for_multi_clause: bool
    +inherit_cache: bool
    +func_clauses
    +order_by
    --
    +within_group_type(within_group)
  }

  class mode {
    +inherit_cache: bool
  }

  class percentile_cont {
    +array_for_multi_clause: bool
    +inherit_cache: bool
  }

  class percentile_disc {
    +array_for_multi_clause: bool
    +inherit_cache: bool
  }

  class rank {
    +type
    +inherit_cache: bool
  }

  class dense_rank {
    +type
    +inherit_cache: bool
  }

  class percent_rank {
    +type
    +inherit_cache: bool
  }

  class cume_dist {
    +type
    +inherit_cache: bool
  }

  class cube {
    +inherit_cache: bool
  }

  class rollup {
    +inherit_cache: bool
  }

  class grouping_sets {
    +inherit_cache: bool
  }

  class aggregate_strings {
    +type
    +inherit_cache: bool
    --
    -__init__(clause, separator)
  }

  class SupportsAnnotations {
    -_annotations
    +proxy_set
    -_is_immutable: bool
    +anon_map_
    --
    -_annotate(values): Self
    -_deannotate(values, clone): Self
    -_deannotate(values, clone): SupportsAnnotations
    -_deannotate(values, clone): SupportsAnnotations
    -_annotations_cache_key()
    -_gen_annotations_cache_key(anon_map)
  }

  class SupportsWrappingAnnotations {
    -_constructor
    +s
    --
    +entity_namespace(): _EntityNamespace
    -_annotate(values): Self
    -_with_annotations(values): Self
    -_deannotate(values, clone): Self
    -_deannotate(values, clone): SupportsAnnotations
    -_deannotate(values, clone): SupportsAnnotations
  }

  class SupportsCloneAnnotations {
    -_clone_annotations_traverse_internals: _TraverseInternalsType
    +new
    +new
    +new
    --
    -_annotate(values): Self
    -_with_annotations(values): Self
    -_deannotate(values, clone): Self
    -_deannotate(values, clone): SupportsAnnotations
    -_deannotate(values, clone): SupportsAnnotations
  }

  class Annotated {
    +cls
    +cls
    -_annotations
    -__element: SupportsWrappingAnnotations
    -_hash: int
    +new
    +clone
    +clone
    --
    -{class} _as_annotated_instance(element, values): Annotated
    -__new__(): Self
    -__init__(element, values)
    -_annotate(values): Self
    -_with_annotations(values): Self
    -_deannotate(values, clone): Self
    -_deannotate(values, clone): Annotated
    -_deannotate(values, clone): SupportsAnnotations
    -_compiler_dispatch(visitor): Any
    -_constructor()
    -_clone(): Self
    -__reduce__()
    -__hash__(): int
    -__eq__(other): bool
    +entity_namespace(): _EntityNamespace
  }

  class BaseDDLElement {
    -_compiler(dialect)
    -_compile_w_cache(dialect)
  }

  class DDLIfCallable {
    -__call__(ddl, target, bind, tables, state): bool
  }

  class DDLIf {
    +dialect
    +callable_
    +state
    +dialect
    +dialect
    --
    -_should_execute(ddl, target, bind, compiler): bool
  }

  class ExecutableDDLElement {
    -_ddl_if
    +target
    +s
    --
    -_execute_on_connection(connection, distilled_params, execution_options)
    +against(target): Self
    +execute_if(dialect, callable_, state): Self
    -_should_execute(target, bind)
    -_invoke_with(bind)
    -__call__(target, bind)
    -_generate()
  }

  class DDL {
    +parts
    --
    -__init__(statement, context)
    -__repr__()
  }

  class _CreateDropBase {
    -__init__(element)
    +stringify_dialect()
    -_create_rule_disable(compiler)
  }

  class _CreateBase {
    -__init__(element, if_not_exists)
  }

  class _DropBase {
    -__init__(element, if_exists)
  }

  class CreateSchema {
    +stringify_dialect: str
    --
    -__init__(name, if_not_exists)
  }

  class DropSchema {
    +stringify_dialect: str
    --
    -__init__(name, cascade, if_exists)
  }

  class CreateTable {
    -__init__(element, include_foreign_key_constraints, if_not_exists)
  }

  class _DropView {
  }

  class CreateConstraint {
    -__init__(element)
  }

  class CreateColumn {
    -__init__(element)
  }

  class DropTable {
    -__init__(element, if_exists)
  }

  class CreateSequence {
    -__init__(element, if_not_exists)
  }

  class DropSequence {
    -__init__(element, if_exists)
  }

  class CreateIndex {
    -__init__(element, if_not_exists)
  }

  class DropIndex {
    -__init__(element, if_exists)
  }

  class AddConstraint {
    -__init__(element)
  }

  class DropConstraint {
    -__init__(element, cascade, if_exists)
  }

  class SetTableComment {
  }

  class DropTableComment {
  }

  class SetColumnComment {
  }

  class DropColumnComment {
  }

  class SetConstraintComment {
  }

  class DropConstraintComment {
  }

  class InvokeDDLBase {
    -__init__(connection)
    +with_ddl_events(target)
  }

  class InvokeCreateDDLBase {
    +with_ddl_events(target)
  }

  class InvokeDropDDLBase {
    +with_ddl_events(target)
  }

  class SchemaGenerator {
    +effective_schema
    +effective_schema
    +effective_schema
    +tables
    +tables
    +collection
    +seq_coll
    +event_collection
    +include_foreign_key_constraints: NoneType
    --
    -__init__(dialect, connection, checkfirst, tables)
    -_can_create_table(table)
    -_can_create_index(index)
    -_can_create_sequence(sequence)
    +visit_metadata(metadata)
    +visit_table(table, create_ok, include_foreign_key_constraints, _is_metadata_operation)
    +visit_foreign_key_constraint(constraint)
    +visit_sequence(sequence, create_ok)
    +visit_index(index, create_ok)
  }

  class SchemaDropper {
    +tables
    +tables
    +unsorted_tables
    +collection
    +collection
    +seq_coll
    +event_collection
    +effective_schema
    +effective_schema
    +effective_schema
    --
    -__init__(dialect, connection, checkfirst, tables)
    +visit_metadata(metadata)
    -_can_drop_table(table)
    -_can_drop_index(index)
    -_can_drop_sequence(sequence)
    +visit_index(index, drop_ok)
    +visit_table(table, drop_ok, _is_metadata_operation, _ignore_sequences)
    +visit_foreign_key_constraint(constraint)
    +visit_sequence(sequence, drop_ok)
  }

  class ResultColumnsEntry {
    +keyname: str
    +name: str
    +objects
    +type
  }

  class _ResultMapAppender {
    -__call__(keyname, name, objects, type_)
  }

  class _BaseCompilerStackEntry {
    +asfrom_froms
    +correlate_froms
    +selectable: ReturnsRows
  }

  class _CompilerStackEntry {
    +compile_state: CompileState
    +need_result_map_for_nested: bool
    +need_result_map_for_compound: bool
    +select_0: ReturnsRows
    +insert_from_select
  }

  class ExpandedState {
    +statement: str
    +parameters: _CoreSingleExecuteParams
    +processors
    +positiontup
    +parameter_expansion
    --
    +positional_parameters()
    +additional_parameters(): _CoreSingleExecuteParams
  }

  class _InsertManyValues {
    +is_default_expr: bool
    +single_values_expr: str
    +insert_crud_params
    +num_positional_params_counted: int
    +sort_by_parameter_order: bool
    +includes_upsert_behaviors: bool
    +sentinel_columns
    +num_sentinel_columns: int
    +sentinel_param_keys
    +implicit_sentinel: bool
    +embed_values_counter: bool
  }

  class _InsertManyValuesBatch {
    +replaced_statement: str
    +replaced_parameters: _DBAPIAnyExecuteParams
    +processed_setinputsizes
    +batch
    +batch_size: int
    +batchnum: int
    +total_batches: int
    +rows_sorted: bool
    +is_downgraded: bool
  }

  class InsertmanyvaluesSentinelOpts {
    +NOT_SUPPORTED: int
    +AUTOINCREMENT: int
    +IDENTITY: int
    +SEQUENCE: int
    +ANY_AUTOINCREMENT
    +USE_INSERT_FROM_SELECT: int
    +RENDER_SELECT_COL_CASTS: int
  }

  class CompilerState {
    +COMPILING: int
    +STRING_APPLIED: int
    +NO_STATEMENT: int
  }

  class Linting {
    +NO_LINTING: int
    +COLLECT_CARTESIAN_PRODUCTS: int
    +WARN_LINTING: int
    +FROM_LINTING
  }

  class FromLinter {
    +froms
    +edges
    +the_rest
    +start_with: start
    +start_with
    +stack
    +node
    +to_remove
    +froms: the_rest
    +template: str
    +froms_str
    +message
    --
    +lint(start)
    +warn(stmt_type)
  }

  class Compiled {
    +statement
    +string: str
    +state: CompilerState
    +is_sql: bool
    +is_ddl: bool
    -_cached_metadata
    -_result_columns
    +schema_translate_map
    +execution_options: _ExecuteOptions
    +preparer: IdentifierPreparer
    -_annotations: _AnnotationDict
    +compile_state
    +dml_compile_state
    +cache_key
    -_gen_time: float
    --
    -__init__(dialect, statement, schema_translate_map, render_schema_translate, compile_kwargs)
    -__init_subclass__()
    -{class} _init_compiler_cls()
    -_execute_on_connection(connection, distilled_params, execution_options)
    +visit_unsupported_compilation(element, err)
    +sql_compiler()
    +process(obj): str
    -__str__(): str
    +construct_params(params, extracted_parameters, escape_names)
    +params()
  }

  class TypeCompiler {
    +ensure_kwarg: str
    +type_
    --
    -__init__(dialect)
    +process(type_): str
    +visit_unsupported_compilation(element, err): NoReturn
  }

  class _CompileLabel {
    -__init__(col, name, alt_names)
    +proxy_set()
    +type()
    +self_group()
  }

  class ilike_case_insensitive {
    -__init__(element)
    +proxy_set()
    +type()
    +self_group()
    -_with_binary_element_type(type_)
  }

  class SQLCompiler {
    +extract_map: EXTRACT_MAP
    +bindname_escape_characters
    -_bind_translate_re
    -_bind_translate_chars
    +is_sql: bool
    +compound_keywords: COMPOUND_KEYWORDS
    +isdelete: bool
    +isinsert: bool
    +isupdate: bool
    +postfetch
    +insert_prefetch
    +update_prefetch
    +implicit_returning
    +isplaintext: bool
    +binds
    +bind_names
    +stack
    +returning_precedes_values: bool
    +render_table_with_column_in_update_from: bool
    +ansi_bind_rules: bool
    +bindtemplate: str
    +compilation_bindtemplate: str
    -_numeric_binds_identifier_char: str
    -_result_columns
    -_textual_ordered_columns: bool
    -_ad_hoc_textual: bool
    -_ordered_columns: bool
    -_loose_column_name_matching: bool
    -_numeric_binds: bool
    -_render_postcompile: bool
    -_post_compile_expanded_state
    -_pre_expanded_string
    -_pre_expanded_positiontup
    -_insertmanyvalues
    -_insert_crud_params
    +literal_execute_params
    +post_compile_params
    +escaped_bind_names
    +has_out_parameters: bool
    +postfetch_lastrowid: bool
    -_cache_key_bind_match
    +positiontup
    -_values_bindparam
    -_visited_bindparam
    +inline: bool
    +ctes
    +ctes_by_level_name
    +level_name_by_cte
    +ctes_recursive: bool
    +reg
    +cksm
    +ckbm
    +nb
    +parameters
    +ctes
    +entry
    +entry: NoneType
    +placeholder: str
    +placeholder: str
    +positions
    +normal_bind
    +reverse_escape
    +positions
    +single_values_expr
    +insert_crud_params
    +sentinel_param_int_idxs
    +num: int
    +param_pos
    +order
    +order
    +order
    +bind
    +ph
    +len_before
    +param_pos
    +single_values_expr
    +insert_crud_params
    +sentinel_param_int_idxs
    +imv
    +sentinel_value_resolvers
    +parameters
    +has_escaped_names
    +orig_extracted
    +ckbm_tuple
    +resolved_extracted
    +resolved_extracted: NoneType
    +pd
    +escaped_name
    +value_param
    +value_param: bindparam
    +pd
    +escaped_name
    +value_param
    +value_param: bindparam
    +dialect
    +include_types
    +exclude_types
    +dbapi
    +dbtype
    +inputsizes
    +literal_execute_params
    +expanded_parameters
    +new_positiontup
    +pre_expanded_string
    +pre_expanded_string
    +new_positiontup
    +pre_expanded_positiontup
    +pre_expanded_positiontup
    +new_positiontup: NoneType
    +pre_expanded_positiontup: NoneType
    +processors
    +single_processors
    +tuple_processors
    +new_processors
    +replacement_expressions
    +to_update_sets
    +numeric_positiontup
    +names
    +numeric_positiontup
    +names
    +ebn
    +escaped_name
    +parameter
    +to_update
    +values: NoneType
    +values
    +leep_res
    +key
    +expr
    +tok
    +expr
    +statement
    +param_pos
    +statement
    +expanded_state
    +cursor
    -_get_bind_name_for_col: _BindNameForColProtocol
    +getter
    +result
    +param_key_getter
    +statement
    +table
    +getters
    +autoinc_getter: NoneType
    +autoinc_col
    +lastrowid_processor
    +autoinc_key
    +param_value
    +autoinc_getter: _autoinc_getter
    +lastrowid_processor: NoneType
    +row_fn
    +lastrowid
    +result
    +statement
    +param_key_getter
    +table
    +returning
    +ret
    +getters
    +row_fn
    +compile_state
    +resolve_dict: only_froms
    +resolve_dict: only_cols
    +order_by_elem
    +compile_state
    +col
    +col
    +render_label_with_as
    +render_label_only
    +labelname
    +labelname
    +sql_element
    +name
    +orig_name
    +name
    +is_literal
    +name
    +targets
    +name
    +name
    +table
    +effective_schema
    +schema_prefix
    +schema_prefix: str
    +tablename
    +tablename
    +tablename
    +text
    +text
    +name
    +toplevel
    +entry
    +new_entry: _CompilerStackEntry
    +populate_result_map
    +text
    +nesting_level
    +text
    +separator
    +sep
    +sep: str
    +sep
    +operator_
    +disp
    +opstring
    +x: str
    +type_clause
    +match
    +text
    +range_
    +range_
    +range_: NoneType
    +field
    +compiled_fn
    +compiled_col
    +disp
    +text: str
    +text
    +name
    +name
    +name
    +name
    +text
    +toplevel
    +compile_state
    +compound_stmt
    +entry
    +need_result_map
    +keyword
    +text
    +nesting_level
    +text
    +attrname
    +disp
    +disp
    +typ_dialect_impl
    +replacement_expression
    +replacement_expression
    +replacement_expression
    +post_compile_pattern
    +m
    +tok
    +replacement_expression
    +replacement_expression
    +dialect
    +typ_dialect_impl
    +bind_template
    +bind_template
    +to_update
    +replacement_expression
    +replacement_expression
    +to_update
    +replacement_expression
    +to_update
    +replacement_expression
    +enclosing_lateral
    +operator_
    +disp
    +opstring
    +text
    +text
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +binary
    +percent
    +escape
    +escape
    +binary
    +binary
    +symmetric
    +symmetric
    +impl
    +bind_expression
    +wrapped
    +m
    +wrapped
    +ret
    +literal_execute
    +post_compile
    +post_compile: bool
    +ret
    +ret
    +name
    +existing
    +ckbm_tuple
    +cb
    +ret
    +ret
    +value: render_literal_value
    +op
    +value
    +leep
    +processor
    +bind_name
    +bind_name
    +anonname
    +counter
    +truncname
    +truncname: anonname
    +new_name
    +escaped_from: name
    +name: new_name
    +ret
    +type_impl
    +ret
    +ret
    +ret
    +type_impl
    +ret
    +local_kw
    +self_ctes
    +cte_name
    +cte_name
    +is_new_cte: bool
    +embedded_in_current_named_cte: bool
    +nesting
    +cte_level_name
    +existing_cte
    +old_level_name
    +cte_level
    +cte_level_name
    +new_level_name
    +cte_level
    +cte_level_name
    +existing_cte
    +existing_cte: NoneType
    +embedded_in_current_named_cte
    +is_new_cte: bool
    +existing_cte_reference_cte
    +is_new_cte: bool
    +pre_alias_cte
    +cte_pre_alias_name
    +cte_pre_alias_name
    +pre_alias_cte: cte
    +cte_pre_alias_name: NoneType
    +text
    +col_source
    +recur_cols
    +prefixes
    +inner
    +text
    +cte_name
    +inner
    +inner
    +enclosing_alias: alias
    +alias_name
    +alias_name
    +inner
    +inner
    +ret
    +ret
    +text
    +tuples
    +v
    +name: NoneType
    +name
    +name
    +lateral: str
    +lateral: str
    +v
    +v
    +impl
    +col_expr
    +col_expr: column
    +add_to_result_map
    +add_to_result_map: NoneType
    +result_expr
    +result_expr: col_expr
    +result_expr
    +render_with_label: bool
    +render_with_label
    +render_with_label: bool
    +render_with_label
    +render_with_label: bool
    +render_with_label: bool
    +fallback_label_name
    +fallback_label_name
    +result_expr
    +result_expr: col_expr
    +hinttext
    -_default_stack_entry: _CompilerStackEntry
    +toplevel
    +entry
    +compile_state
    +correlate_froms
    +asfrom_froms
    +froms
    +froms
    +translate_select_structure: Any
    +compile_state
    +select_stmt
    +toplevel
    +is_embedded_select
    +new_select_stmt
    +compile_state_wraps_for: compile_state
    +select_wraps_for: select_stmt
    +select_stmt: new_select_stmt
    +compile_state
    +select_stmt
    +entry
    +populate_result_map
    +need_column_expressions
    +populate_result_map: bool
    +froms
    +column_clause_args
    +text: str
    +byfrom: NoneType
    +inner_columns
    +translate
    +text
    +per_dialect
    +nesting_level
    +text
    +byfrom
    +hint_text
    +correlate_froms
    +asfrom_froms
    +select_0
    +numcols
    +froms
    +froms
    +new_correlate_froms
    +all_correlate_froms
    +new_entry: _CompilerStackEntry
    +from_linter
    +warn_linting
    +from_linter: NoneType
    +warn_linting: bool
    +text
    +t
    +t
    +clause
    +ctes
    +ctes
    +nesting
    +is_rendered_level
    +ctes
    +ctes_recursive
    +cte_text
    +group_by
    +order_by
    +columns
    +text: str
    +fetch_clause
    +fetch_clause_options
    +fetch_clause_options
    +text: str
    +offset_clause
    +offset_clause
    +offset_str
    +fetch_clause
    +effective_schema
    +ret
    +ret
    +anon_name
    +ret
    +ret
    +join_type: str
    +join_type: str
    +join_type: str
    +dialect_hints
    +table_text
    +sentinel_opts
    +sentinel_characteristics
    +sent_cols
    +bitmask
    +bitmask
    +imv
    +lenparams
    +use_row_at_a_time: bool
    +downgraded: bool
    +use_row_at_a_time: bool
    +downgraded: bool
    +use_row_at_a_time: bool
    +downgraded: bool
    +executemany_values
    +statement
    +max_params
    +total_num_of_params
    +num_params_per_batch
    +num_params_outside_of_batch
    +batch_size
    +batches
    +processed_setinputsizes
    +batchnum: int
    +total_batches
    +insert_crud_params
    +escaped_bind_names
    +expand_pos_lower_index: int
    +expand_pos_upper_index: int
    +escaped_bind_names
    +escaped_bind_names
    +all_keys
    +key
    +formatted
    +imv_values_counter: str
    +imv_values_counter: str
    +formatted_values_clause
    +keys_to_replace
    +base_parameters
    +executemany_values_w_comma: str
    +formatted_values_clause: str
    +keys_to_replace
    +base_parameters
    +executemany_values_w_comma
    +executemany_values_w_comma
    +all_names_we_will_expand
    +positiontup
    +all_expand_positions
    +expand_pos_lower_index
    +expand_pos_upper_index
    +escaped
    +executemany_values_w_comma
    +batch
    +processed_setinputsizes
    +replaced_parameters: Any
    +num_ins_params
    +batch_iterator
    +extra_params_left
    +extra_params_right
    +batch_iterator: batch
    +extra_params_left
    +extra_params_right
    +batch_iterator
    +expanded_values_string
    +expanded_values_string
    +start
    +end
    +positions
    +expanded_values_string
    +replaced_statement
    +replaced_parameters
    +replaced_parameters
    +replaced_values_clauses
    +replaced_parameters
    +fmv
    +fmv
    +replaced_statement
    +compile_state
    +insert_stmt
    +toplevel
    +counted_bindparam: int
    +visited_bindparam: NoneType
    +has_visiting_cte
    +visited_bindparam
    +crud_params_struct
    +counted_bindparam
    +crud_params_single
    +crud_params_single
    +crud_params_single
    +preparer
    +supports_default_values
    +text: str
    +table_text
    +use_insertmanyvalues
    +named_sentinel_params
    +add_sentinel_cols: NoneType
    +implicit_sentinel: bool
    +returning_cols
    +add_sentinel_cols
    +named_sentinel_params
    +named_sentinel_params: NoneType
    +param_name
    +named_sentinel_params: NoneType
    +implicit_sentinel: bool
    +returning_cols
    +returning_clause
    +returning_clause: NoneType
    +select_text
    +nesting_level
    +insert_single_values_expr
    +embed_sentinel_value: bool
    +render_bind_casts
    +colnames
    +colnames_w_cast
    +colnames_w_cast: colnames
    +embed_sentinel_value: bool
    +post_values_clause
    +nesting_level
    +text
    +compile_state
    +update_stmt
    +toplevel
    +from_linter
    +warn_linting
    +from_linter: NoneType
    +warn_linting: bool
    +extra_froms
    +is_multitable
    +main_froms
    +render_extra_froms
    +correlate_froms
    +render_extra_froms
    +correlate_froms
    +text: str
    +table_text
    +crud_params_struct
    +crud_params
    +dialect_hints: NoneType
    +extra_from_text
    +t
    +limit_clause
    +nesting_level
    +text
    +compile_state
    +delete_stmt
    +toplevel
    +from_linter
    +warn_linting
    +from_linter: NoneType
    +warn_linting: bool
    +extra_froms
    +correlate_froms
    +text: str
    +table_text
    +table_text
    +dialect_hints: NoneType
    +extra_from_text
    +t
    +nesting_level
    +text
    --
    -{class} _init_compiler_cls()
    -{class} _init_bind_translate()
    -__init__(dialect, statement, cache_key, column_keys, for_executemany, linting)
    +insert_single_values_expr()
    +effective_returning()
    +returning()
    +current_executable()
    +prefetch()
    -_global_attributes()
    -_init_cte_state()
    -_nested_result()
    -_process_positional()
    +find_position(): str
    -_process_numeric()
    -_bind_processors()
    -_imv_sentinel_value_resolvers()
    +is_subquery()
    +sql_compiler()
    +construct_expanded_state(params, escape_names): ExpandedState
    +construct_params(params, extracted_parameters, escape_names, _group_number, _check, _no_postcompile): _MutableCoreSingleExecuteParams
    -_get_set_input_sizes_lookup()
    +lookup_type()
    +params()
    -_process_parameters_for_postcompile(parameters, _populate_self): ExpandedState
    +process_expanding()
    -_create_result_map()
    -_within_exec_param_key_getter()
    -_inserted_primary_key_from_lastrowid_getter()
    -_autoinc_getter(parameters)
    +get(parameters)
    -_inserted_primary_key_from_returning_getter()
    +get(parameters)
    +default_from()
    +visit_grouping(grouping, asfrom)
    +visit_select_statement_grouping(grouping)
    +visit_label_reference(element, within_columns_clause)
    +visit_textual_label_reference(element, within_columns_clause)
    +visit_label(label, add_to_result_map, within_label_clause, within_columns_clause, render_label_as_label, result_map_targets)
    -_fallback_column_name(column)
    +visit_lambda_element(element)
    +visit_column(column, add_to_result_map, include_table, result_map_targets, ambiguous_table_name_map): str
    +visit_collation(element)
    +visit_fromclause(fromclause)
    +visit_index(index)
    +visit_typeclause(typeclause)
    +post_process_text(text)
    +escape_literal_column(text)
    +visit_textclause(textclause, add_to_result_map)
    +do_bindparam()
    +visit_textual_select(taf, compound_index, asfrom)
    +visit_null(expr)
    +visit_true(expr)
    +visit_false(expr)
    -_generate_delimited_list(elements, separator)
    -_generate_delimited_and_list(clauses)
    +visit_tuple(clauselist)
    +visit_clauselist(clauselist)
    +visit_expression_clauselist(clauselist)
    +visit_case(clause)
    +visit_type_coerce(type_coerce)
    +visit_cast(cast)
    -_format_frame_clause(range_)
    +visit_over(over)
    +visit_withingroup(withingroup)
    +visit_funcfilter(funcfilter)
    +visit_extract(extract)
    +visit_scalar_function_column(element)
    +visit_function(func, add_to_result_map): str
    +visit_next_value_func(next_value)
    +visit_sequence(sequence)
    +function_argspec(func)
    +visit_compound_select(cs, asfrom, compound_index)
    -_row_limit_clause(cs)
    -_get_operator_dispatch(operator_, qualifier1, qualifier2)
    +visit_unary(unary, add_to_result_map, result_map_targets)
    +visit_truediv_binary(binary, operator)
    +visit_floordiv_binary(binary, operator)
    +visit_is_true_unary_operator(element, operator)
    +visit_is_false_unary_operator(element, operator)
    +visit_not_match_op_binary(binary, operator)
    +visit_not_in_op_binary(binary, operator)
    +visit_empty_set_op_expr(type_, expand_op)
    +visit_empty_set_expr(element_types)
    -_literal_execute_expanding_parameter_literal_binds(parameter, values, bind_expression_template)
    -_literal_execute_expanding_parameter(name, parameter, values)
    -_render_bindtemplate()
    -_render_bindtemplate()
    +visit_binary(binary, override_operator, eager_grouping, from_linter, lateral_from_linter)
    +visit_function_as_comparison_op_binary(element, operator)
    +visit_mod_binary(binary, operator)
    +visit_custom_op_binary(element, operator)
    +visit_custom_op_unary_operator(element, operator)
    +visit_custom_op_unary_modifier(element, operator)
    -_generate_generic_binary(binary, opstring, eager_grouping)
    -_generate_generic_unary_operator(unary, opstring)
    -_generate_generic_unary_modifier(unary, opstring)
    -_like_percent_literal()
    +visit_ilike_case_insensitive_operand(element)
    +visit_contains_op_binary(binary, operator)
    +visit_not_contains_op_binary(binary, operator)
    +visit_icontains_op_binary(binary, operator)
    +visit_not_icontains_op_binary(binary, operator)
    +visit_startswith_op_binary(binary, operator)
    +visit_not_startswith_op_binary(binary, operator)
    +visit_istartswith_op_binary(binary, operator)
    +visit_not_istartswith_op_binary(binary, operator)
    +visit_endswith_op_binary(binary, operator)
    +visit_not_endswith_op_binary(binary, operator)
    +visit_iendswith_op_binary(binary, operator)
    +visit_not_iendswith_op_binary(binary, operator)
    +visit_like_op_binary(binary, operator)
    +visit_not_like_op_binary(binary, operator)
    +visit_ilike_op_binary(binary, operator)
    +visit_not_ilike_op_binary(binary, operator)
    +visit_between_op_binary(binary, operator)
    +visit_not_between_op_binary(binary, operator)
    +visit_regexp_match_op_binary(binary, operator)
    +visit_not_regexp_match_op_binary(binary, operator)
    +visit_regexp_replace_op_binary(binary, operator)
    +visit_bindparam(bindparam, within_columns_clause, literal_binds, skip_bind_expression, literal_execute, render_postcompile)
    +render_bind_cast(type_, dbapi_type, sqltext)
    +render_literal_bindparam(bindparam, render_literal_value, bind_expression_template)
    +render_literal_value(value, type_)
    -_truncate_bindparam(bindparam)
    -_truncated_identifier(ident_class, name): str
    -_anonymize(name): str
    +bindparam_string(name, post_compile, expanding, escaped_from, bindparam_type, accumulate_bind_names, visited_bindparam): str
    -_dispatch_independent_ctes(stmt, kw)
    +visit_cte(cte, asfrom, ashint, fromhints, visiting_cte, from_linter, cte_opts)
    +visit_table_valued_alias(element)
    +visit_table_valued_column(element)
    +visit_alias(alias, asfrom, ashint, iscrud, fromhints, subquery, lateral, enclosing_alias, from_linter)
    +visit_subquery(subquery)
    +visit_lateral(lateral_)
    +visit_tablesample(tablesample, asfrom)
    -_render_values(element)
    +visit_values(element, asfrom, from_linter)
    +visit_scalar_values(element)
    +get_render_as_alias_suffix(alias_name_text)
    -_add_to_result_map(keyname, name, objects, type_)
    -_label_returning_column(stmt, column, populate_result_map, column_clause_args)
    -_label_select_column(select, column, populate_result_map, asfrom, column_clause_args, name, proxy_name, fallback_label_name, within_columns_clause, column_is_repeated, need_column_expressions, include_table)
    +add_to_result_map(name, objects, type_)
    +add_to_result_map(name, objects, type_)
    +format_from_hint_text(sqltext, table, hint, iscrud)
    +get_select_hint_text(byfroms)
    +get_from_hint_text(table, text)
    +get_crud_hint_text(table, text)
    +get_statement_hint_text(hint_texts)
    -_display_froms_for_select(select_stmt, asfrom, lateral)
    +visit_select(select_stmt, asfrom, insert_into, fromhints, compound_index, select_wraps_for, lateral, from_linter)
    -_setup_select_hints(select)
    -_setup_select_stack(select, compile_state, entry, asfrom, lateral, compound_index)
    -_compose_select_body(text, select, compile_state, inner_columns, froms, byfrom, toplevel, kwargs)
    -_generate_prefixes(stmt, prefixes)
    -_render_cte_clause(nesting_level, include_following_stack)
    +get_cte_preamble(recursive)
    +get_select_precolumns(select)
    +group_by_clause(select)
    +order_by_clause(select)
    +for_update_clause(select)
    +returning_clause(stmt, returning_cols): str
    +limit_clause(select)
    +fetch_clause(select, fetch_clause, require_offset, use_literal_execute_for_simple_int)
    +visit_table(table, asfrom, iscrud, ashint, fromhints, use_schema, from_linter, ambiguous_table_name_map)
    +visit_join(join, asfrom, from_linter)
    -_setup_crud_hints(stmt, table_text)
    -_get_sentinel_column_for_table(table)
    -_deliver_insertmanyvalues_batches(statement, parameters, generic_setinputsizes, batch_size, sort_by_parameter_order)
    +apply_placeholders(formatted)
    +visit_insert(insert_stmt, visited_bindparam)
    +update_limit_clause(update_stmt)
    +update_tables_clause(update_stmt, from_table, extra_froms)
    +update_from_clause(update_stmt, from_table, extra_froms, from_hints)
    +visit_update(update_stmt)
    +delete_extra_from_clause(update_stmt, from_table, extra_froms, from_hints)
    +delete_table_clause(delete_stmt, from_table, extra_froms)
    +visit_delete(delete_stmt)
    +visit_savepoint(savepoint_stmt)
    +visit_rollback_to_savepoint(savepoint_stmt)
    +visit_release_savepoint(savepoint_stmt)
  }

  class StrSQLCompiler {
    +url
    +dialect
    +compiler
    +columns
    --
    -_fallback_column_name(column)
    +visit_unsupported_compilation(element, err)
    +visit_getitem_binary(binary, operator)
    +visit_json_getitem_op_binary(binary, operator)
    +visit_json_path_getitem_op_binary(binary, operator)
    +visit_sequence(seq)
    +returning_clause(stmt, returning_cols): str
    +update_from_clause(update_stmt, from_table, extra_froms, from_hints)
    +delete_extra_from_clause(update_stmt, from_table, extra_froms, from_hints)
    +visit_empty_set_expr(type_)
    +get_from_hint_text(table, text)
    +visit_regexp_match_op_binary(binary, operator)
    +visit_not_regexp_match_op_binary(binary, operator)
    +visit_regexp_replace_op_binary(binary, operator)
    +visit_try_cast(cast)
  }

  class DDLCompiler {
    +is_ddl: bool
    +context
    +context
    +preparer
    +path
    +text: str
    +text: str
    +table
    +preparer
    +text: str
    +create_table_suffix
    +separator: str
    +first_pk: bool
    +column
    +processed
    +separator: str
    +first_pk: bool
    +const
    +column
    +text
    +const
    +constraints
    +all_fkcs
    +omit_fkcs
    +omit_fkcs
    +text: str
    +index
    +preparer
    +text: str
    +index
    +text: str
    +effective_schema
    +effective_schema: NoneType
    +schema_name
    +schema_name: NoneType
    +index_name
    +index_name
    +text
    +text: str
    +options
    +text: str
    +constraint
    +formatted_name
    +formatted_name: NoneType
    +colspec
    +default
    +text: str
    +formatted_name
    +text: str
    +formatted_name
    +text: str
    +formatted_name
    +preparer
    +text: str
    +formatted_name
    +remote_table
    +text: str
    +formatted_name
    +text: str
    +text: str
    +text: str
    +text
    +text
    +options
    --
    -__init__(dialect, statement, schema_translate_map, render_schema_translate, compile_kwargs)
    +sql_compiler()
    +type_compiler()
    +construct_params(params, extracted_parameters, escape_names)
    +visit_ddl(ddl)
    +visit_create_schema(create)
    +visit_drop_schema(drop)
    +visit_create_table(create)
    +visit_create_column(create, first_pk)
    +create_table_constraints(table, _include_foreign_key_constraints)
    +visit_drop_table(drop)
    +visit_drop_view(drop)
    -_verify_index_table(index)
    +visit_create_index(create, include_schema, include_table_schema)
    +visit_drop_index(drop)
    -_prepared_index_name(index, include_schema)
    +visit_add_constraint(create)
    +visit_set_table_comment(create)
    +visit_drop_table_comment(drop)
    +visit_set_column_comment(create)
    +visit_drop_column_comment(drop)
    +visit_set_constraint_comment(create)
    +visit_drop_constraint_comment(drop)
    +get_identity_options(identity_options)
    +visit_create_sequence(create, prefix)
    +visit_drop_sequence(drop)
    +visit_drop_constraint(drop)
    +get_column_specification(column)
    +create_table_suffix(table)
    +post_create_table(table)
    +get_column_default_string(column)
    +render_default_string(default)
    +visit_table_or_column_check_constraint(constraint)
    +visit_check_constraint(constraint)
    +visit_column_check_constraint(constraint)
    +visit_primary_key_constraint(constraint)
    +visit_foreign_key_constraint(constraint)
    +define_constraint_remote_table(constraint, table, preparer)
    +visit_unique_constraint(constraint)
    +define_unique_constraint_distinct(constraint)
    +define_constraint_cascades(constraint)
    +define_constraint_deferrability(constraint)
    +define_constraint_match(constraint)
    +visit_computed_column(generated)
    +visit_identity_column(identity)
  }

  class GenericTypeCompiler {
    +text: name
    --
    +visit_FLOAT(type_)
    +visit_DOUBLE(type_)
    +visit_DOUBLE_PRECISION(type_)
    +visit_REAL(type_)
    +visit_NUMERIC(type_)
    +visit_DECIMAL(type_)
    +visit_INTEGER(type_)
    +visit_SMALLINT(type_)
    +visit_BIGINT(type_)
    +visit_TIMESTAMP(type_)
    +visit_DATETIME(type_)
    +visit_DATE(type_)
    +visit_TIME(type_)
    +visit_CLOB(type_)
    +visit_NCLOB(type_)
    -_render_string_type(type_, name, length_override)
    +visit_CHAR(type_)
    +visit_NCHAR(type_)
    +visit_VARCHAR(type_)
    +visit_NVARCHAR(type_)
    +visit_TEXT(type_)
    +visit_BLOB(type_)
    +visit_BINARY(type_)
    +visit_VARBINARY(type_)
    +visit_BOOLEAN(type_)
    +visit_uuid(type_)
    +visit_large_binary(type_)
    +visit_boolean(type_)
    +visit_time(type_)
    +visit_datetime(type_)
    +visit_date(type_)
    +visit_big_integer(type_)
    +visit_small_integer(type_)
    +visit_integer(type_)
    +visit_real(type_)
    +visit_float(type_)
    +visit_double(type_)
    +visit_numeric(type_)
    +visit_string(type_)
    +visit_unicode(type_)
    +visit_text(type_)
    +visit_unicode_text(type_)
    +visit_enum(type_)
    +visit_null(type_)
    +visit_type_decorator(type_)
    +visit_user_defined(type_)
  }

  class StrSQLTypeCompiler {
    +get_col_spec
    --
    +process(type_)
    -__getattr__(key)
    -_visit_unknown(type_)
    +visit_null(type_)
    +visit_user_defined(type_)
  }

  class _SchemaForObjectCallable {
    -__call__(obj): str
  }

  class _BindNameForColProtocol {
    -__call__(col): str
  }

  class IdentifierPreparer {
    +reserved_words: RESERVED_WORDS
    +legal_characters: LEGAL_CHARACTERS
    +illegal_initial_characters: ILLEGAL_INITIAL_CHARACTERS
    +initial_quote: str
    +final_quote: str
    -_strings
    +schema_for_object: _SchemaForObjectCallable
    -_includes_none_schema_translate: bool
    +prep
    +includes_none
    +name
    +d: schema_translate_map
    +name
    +effective_schema
    +effective_schema: name
    +effective_schema
    +value
    +value
    +lc_value
    +force
    +name
    +effective_schema
    +name
    +ident
    +ident
    +naming
    +name
    +name
    +max_
    +max_
    +name
    +name
    +result
    +effective_schema
    +result
    +name
    +name
    +name
    +effective_schema
    +r
    +r
    --
    -__init__(dialect, initial_quote, final_quote, escape_quote, quote_case_sensitive_collations, omit_schema)
    -_with_schema_translate(schema_translate_map)
    +symbol_getter()
    -_render_schema_translates(statement, schema_translate_map)
    +replace()
    -_escape_identifier(value): str
    -_unescape_identifier(value): str
    +validate_sql_phrase(element, reg)
    +quote_identifier(value): str
    -_requires_quotes(value): bool
    -_requires_quotes_illegal_chars(value)
    +quote_schema(schema, force): str
    +quote(ident, force): str
    +format_collation(collation_name)
    +format_sequence(sequence, use_schema)
    +format_label(label, name): str
    +format_alias(alias, name): str
    +format_savepoint(savepoint, name)
    +format_constraint(constraint, _alembic_quote)
    +truncate_and_render_index_name(name, _alembic_quote)
    +truncate_and_render_constraint_name(name, _alembic_quote)
    -_truncate_and_render_maxlen_name(name, max_, _alembic_quote)
    +format_index(index)
    +format_table(table, use_schema, name)
    +format_schema(name)
    +format_label_name(name, anon_map)
    +format_column(column, use_table, name, table_name, use_schema, anon_map)
    +format_table_seq(table, use_schema)
    -_r_identifiers()
    +unformat_identifiers(identifiers)
  }

  class _HasClauseElement {
    -__clause_element__(): ColumnsClauseRole
  }

  class _CoreAdapterProto {
    -__call__(obj): _CE
  }

  class HasShallowCopy {
    +code
    +meth_text
    +code
    +meth_text
    +code
    +meth_text
    +cls
    +shallow_from_dict
    +shallow_from_dict
    +shallow_from_dict
    +cls
    +shallow_to_dict
    +shallow_to_dict
    +shallow_to_dict
    +cls
    +shallow_copy
    +shallow_copy
    +shallow_copy
    +c
    --
    -_generated_shallow_copy_traversal(other)
    -_generated_shallow_from_dict_traversal(d)
    -_generated_shallow_to_dict_traversal()
    -{class} _generate_shallow_copy(internal_dispatch, method_name)
    -{class} _generate_shallow_to_dict(internal_dispatch, method_name)
    -{class} _generate_shallow_from_dict(internal_dispatch, method_name)
    -_shallow_from_dict(d)
    -_shallow_to_dict()
    -_shallow_copy_to(other)
    -_clone(): Self
  }

  class GenerativeOnTraversal {
    +cls
    +s
    --
    -_generate(): Self
  }

  class HasCopyInternals {
    +traverse_internals
    +result
    --
    -_clone()
    -_copy_internals()
  }

  class _CopyInternalsTraversal {
    +visit_clauseelement(attrname, parent, element, clone)
    +visit_clauseelement_list(attrname, parent, element, clone)
    +visit_clauseelement_tuple(attrname, parent, element, clone)
    +visit_executable_options(attrname, parent, element, clone)
    +visit_clauseelement_unordered_set(attrname, parent, element, clone)
    +visit_clauseelement_tuples(attrname, parent, element, clone)
    +visit_string_clauseelement_dict(attrname, parent, element, clone)
    +visit_setup_join_tuple(attrname, parent, element, clone)
    +visit_memoized_select_entities(attrname, parent, element)
    +visit_dml_ordered_values(attrname, parent, element, clone)
    +visit_dml_values(attrname, parent, element, clone)
    +visit_dml_multi_values(attrname, parent, element, clone)
    +copy()
    +visit_propagate_attrs(attrname, parent, element, clone)
  }

  class _GetChildrenTraversal {
    +expr_values
    +str_values
    --
    +visit_has_cache_key(element)
    +visit_clauseelement(element)
    +visit_clauseelement_list(element)
    +visit_clauseelement_tuple(element)
    +visit_clauseelement_tuples(element)
    +visit_fromclause_canonical_column_collection(element)
    +visit_string_clauseelement_dict(element)
    +visit_fromclause_ordered_set(element)
    +visit_clauseelement_unordered_set(element)
    +visit_setup_join_tuple(element)
    +visit_memoized_select_entities(element)
    +visit_dml_ordered_values(element)
    +visit_dml_values(element)
    +visit_dml_multi_values(element)
    +visit_propagate_attrs(element)
  }

  class TraversalComparatorStrategy {
    +stack
    +cache
    +compare_annotations
    +visit_name
    +meth
    +attributes_compared
    +attributes_compared
    +dispatch
    +left_child
    +right_child
    +comparison
    +comparator
    +completed
    +lhc
    +rhc
    +lhc
    +rhc
    +left_keys
    +right_keys
    +lvce
    +rvce
    +compare_keys
    +compare_values
    +omit
    +omit
    --
    -__init__()
    -_memoized_attr_anon_map()
    +compare(obj1, obj2): bool
    +compare_inner(obj1, obj2)
    +visit_has_cache_key(attrname, left_parent, left, right_parent, right)
    +visit_propagate_attrs(attrname, left_parent, left, right_parent, right)
    +visit_has_cache_key_list(attrname, left_parent, left, right_parent, right)
    +visit_executable_options(attrname, left_parent, left, right_parent, right)
    +visit_clauseelement(attrname, left_parent, left, right_parent, right)
    +visit_fromclause_canonical_column_collection(attrname, left_parent, left, right_parent, right)
    +visit_fromclause_derived_column_collection(attrname, left_parent, left, right_parent, right)
    +visit_string_clauseelement_dict(attrname, left_parent, left, right_parent, right)
    +visit_clauseelement_tuples(attrname, left_parent, left, right_parent, right)
    +visit_clauseelement_list(attrname, left_parent, left, right_parent, right)
    +visit_clauseelement_tuple(attrname, left_parent, left, right_parent, right)
    -_compare_unordered_sequences(seq1, seq2)
    +visit_clauseelement_unordered_set(attrname, left_parent, left, right_parent, right)
    +visit_fromclause_ordered_set(attrname, left_parent, left, right_parent, right)
    +visit_string(attrname, left_parent, left, right_parent, right)
    +visit_string_list(attrname, left_parent, left, right_parent, right)
    +visit_string_multi_dict(attrname, left_parent, left, right_parent, right)
    +visit_multi(attrname, left_parent, left, right_parent, right)
    +visit_anon_name(attrname, left_parent, left, right_parent, right)
    +visit_boolean(attrname, left_parent, left, right_parent, right)
    +visit_operator(attrname, left_parent, left, right_parent, right)
    +visit_type(attrname, left_parent, left, right_parent, right)
    +visit_plain_dict(attrname, left_parent, left, right_parent, right)
    +visit_dialect_options(attrname, left_parent, left, right_parent, right)
    +visit_annotations_key(attrname, left_parent, left, right_parent, right)
    +visit_with_context_options(attrname, left_parent, left, right_parent, right)
    +visit_plain_obj(attrname, left_parent, left, right_parent, right)
    +visit_named_ddl_element(attrname, left_parent, left, right_parent, right)
    +visit_prefix_sequence(attrname, left_parent, left, right_parent, right)
    +visit_setup_join_tuple(attrname, left_parent, left, right_parent, right)
    +visit_memoized_select_entities(attrname, left_parent, left, right_parent, right)
    +visit_table_hint_list(attrname, left_parent, left, right_parent, right)
    +visit_statement_hint_list(attrname, left_parent, left, right_parent, right)
    +visit_unknown_structure(attrname, left_parent, left, right_parent, right)
    +visit_dml_ordered_values(attrname, left_parent, left, right_parent, right)
    -_compare_dml_values_or_ce(lv, rv)
    +visit_dml_values(attrname, left_parent, left, right_parent, right)
    +visit_dml_multi_values(attrname, left_parent, left, right_parent, right)
    +compare_expression_clauselist(left, right)
    +compare_clauselist(left, right)
    +compare_binary(left, right)
    +compare_bindparam(left, right)
  }

  class ColIdentityComparatorStrategy {
    +to_compare
    +to_compare
    --
    +compare_column_element(left, right, use_proxies, equivalents)
    +compare_column(left, right)
    +compare_label(left, right)
    +compare_table(left, right)
  }

  class _CacheKeyTraversalDispatchType {
    -__call__(self, visitor): CacheKey
  }

  class CacheConst {
    +NO_CACHE: int
  }

  class CacheTraverseTarget {
    +CACHE_IN_PLACE: int
    +CALL_GEN_CACHE_KEY: int
    +STATIC_CACHE_KEY: int
    +PROPAGATE_ATTRS: int
    +ANON_NAME: int
  }

  class HasCacheKey {
    -_cache_key_traversal: _CacheKeyTraversalType
    +inherit_cache
    -_generated_cache_key_traversal: Any
    +inherit_cache
    +inherit
    +cls
    +dispatcher
    +dispatcher
    +dispatcher
    +result
    +sck
    +elements
    +obj
    +bindparams
    +key
    +bindparams
    +key
    --
    -{class} _generate_cache_attrs()
    -_gen_cache_key(anon_map, bindparams)
    -_generate_cache_key()
    -{class} _generate_cache_key_for_object(obj)
  }

  class HasCacheKeyTraverse {
  }

  class MemoizedHasCacheKey {
    -_generate_cache_key()
  }

  class SlotsMemoizedHasCacheKey {
    -_memoized_method__generate_cache_key()
  }

  class CacheKey {
    +key
    +bindparams
    +sql_str
    +sql_str
    +param_tuple
    +param_tuple
    +ck1
    +ck2
    +k1
    +k2
    +stack
    +pickup_index: int
    +s1
    +s2
    +pickup_index
    +stack
    +output
    +sentinel
    +indent
    +elem
    +stack
    +repr_
    +repr_
    +translate
    --
    -__hash__()
    +to_offline_string(statement_cache, statement, parameters): str
    -__eq__(other): bool
    -__ne__(other): bool
    -{class} _diff_tuples(left, right): str
    -_whats_different(other)
    -_diff(other): str
    -__str__(): str
    -_generate_param_dict()
    -_apply_params_to_element(original_cache_key, target_element): ClauseElement
  }

  class _CacheKeyTraversal {
    +visit_has_cache_key: CALL_GEN_CACHE_KEY
    +visit_clauseelement: CALL_GEN_CACHE_KEY
    +visit_clauseelement_list
    +visit_annotations_key
    +visit_clauseelement_tuple
    +visit_memoized_select_entities
    +visit_string: CACHE_IN_PLACE
    +visit_boolean: CACHE_IN_PLACE
    +visit_operator: CACHE_IN_PLACE
    +visit_plain_obj: CACHE_IN_PLACE
    +visit_statement_hint_list: CACHE_IN_PLACE
    +visit_type: STATIC_CACHE_KEY
    +visit_anon_name: ANON_NAME
    +visit_propagate_attrs: PROPAGATE_ATTRS
    +cache_keys
    --
    +visit_with_context_options(attrname, obj, parent, anon_map, bindparams)
    +visit_inspectable(attrname, obj, parent, anon_map, bindparams)
    +visit_string_list(attrname, obj, parent, anon_map, bindparams)
    +visit_multi(attrname, obj, parent, anon_map, bindparams)
    +visit_multi_list(attrname, obj, parent, anon_map, bindparams)
    +visit_has_cache_key_tuples(attrname, obj, parent, anon_map, bindparams)
    +visit_has_cache_key_list(attrname, obj, parent, anon_map, bindparams)
    +visit_executable_options(attrname, obj, parent, anon_map, bindparams)
    +visit_inspectable_list(attrname, obj, parent, anon_map, bindparams)
    +visit_clauseelement_tuples(attrname, obj, parent, anon_map, bindparams)
    +visit_fromclause_ordered_set(attrname, obj, parent, anon_map, bindparams)
    +visit_clauseelement_unordered_set(attrname, obj, parent, anon_map, bindparams)
    +visit_named_ddl_element(attrname, obj, parent, anon_map, bindparams)
    +visit_prefix_sequence(attrname, obj, parent, anon_map, bindparams)
    +visit_setup_join_tuple(attrname, obj, parent, anon_map, bindparams)
    +visit_table_hint_list(attrname, obj, parent, anon_map, bindparams)
    +visit_plain_dict(attrname, obj, parent, anon_map, bindparams)
    +visit_dialect_options(attrname, obj, parent, anon_map, bindparams)
    +visit_string_clauseelement_dict(attrname, obj, parent, anon_map, bindparams)
    +visit_string_multi_dict(attrname, obj, parent, anon_map, bindparams)
    +visit_fromclause_canonical_column_collection(attrname, obj, parent, anon_map, bindparams)
    +visit_unknown_structure(attrname, obj, parent, anon_map, bindparams)
    +visit_dml_ordered_values(attrname, obj, parent, anon_map, bindparams)
    +visit_dml_values(attrname, obj, parent, anon_map, bindparams)
    +visit_dml_multi_values(attrname, obj, parent, anon_map, bindparams)
  }

  class SQLRole {
    +allows_lambda: bool
    +uses_inspection: bool
  }

  class UsesInspection {
    -_post_inspect
    +uses_inspection: bool
  }

  class AllowsLambdaRole {
    +allows_lambda: bool
  }

  class HasCacheKeyRole {
  }

  class ExecutableOptionRole {
  }

  class LiteralValueRole {
  }

  class ColumnArgumentRole {
  }

  class ColumnArgumentOrKeyRole {
  }

  class StrAsPlainColumnRole {
  }

  class ColumnListRole {
  }

  class StringRole {
  }

  class TruncatedLabelRole {
  }

  class ColumnsClauseRole {
    -_select_iterable(): _SelectIterable
  }

  class TypedColumnsClauseRole {
  }

  class LimitOffsetRole {
  }

  class ByOfRole {
  }

  class GroupByRole {
  }

  class OrderByRole {
  }

  class StructuralRole {
  }

  class StatementOptionRole {
  }

  class OnClauseRole {
  }

  class WhereHavingRole {
  }

  class ExpressionElementRole {
    +label(name)
  }

  class ConstExprRole {
  }

  class LabeledColumnExprRole {
  }

  class BinaryElementRole {
  }

  class InElementRole {
  }

  class JoinTargetRole {
  }

  class FromClauseRole {
    +named_with_column: bool
  }

  class StrictFromClauseRole {
  }

  class AnonymizedFromClauseRole {
    -_anonymous_fromclause(): FromClause
  }

  class ReturnsRowsRole {
  }

  class StatementRole {
    -_propagate_attrs(): _PropagateAttrsType
  }

  class SelectStatementRole {
    +subquery(): Subquery
  }

  class HasCTERole {
  }

  class IsCTERole {
  }

  class CompoundElementRole {
  }

  class DMLRole {
  }

  class DMLTableRole {
  }

  class DMLColumnRole {
  }

  class DMLSelectRole {
  }

  class DDLRole {
  }

  class DDLExpressionRole {
  }

  class DDLConstraintColumnRole {
  }

  class DDLReferredColumnRole {
  }

  class ConventionDict {
    +fk
    +cols
    +col
    +fk
    +refs
    +fk
    +col_template
    +idx
    +multiples
    +elems
    +elems
    +tokens
    +attr
    +sep
    +attr
    +idx
    --
    -__init__(const, table, convention)
    -_key_table_name()
    -_column_X(idx, attrname)
    -_key_constraint_name()
    -_key_column_X_key(idx)
    -_key_column_X_name(idx)
    -_key_column_X_label(idx)
    -_key_referred_table_name()
    -_key_referred_column_X_name(idx)
    -__getitem__(key)
  }

  class _repr_base {
    -_LIST: int
    -_TUPLE: int
    -_DICT: int
    +max_chars: int
    +rep
    +lenrep
    +segment_length
    +rep
    --
    +trunc(value): str
  }

  class _repr_row {
    +trunc
    --
    -__init__(row, max_chars)
    -__repr__(): str
  }

  class _long_statement {
    +lself
    +lleft: int
    +lright: int
    +trunc
    --
    -__str__(): str
  }

  class _repr_params {
    +typ
    +typ
    +typ
    +multi_params
    +msg: str
    +elem_type
    +elem_type
    +elem_type
    +elements
    +elements: str
    +lparams
    +lenparams
    +lleft
    +trunc
    +text
    +text
    +trunc
    +text
    +text
    +trunc
    +text
    +text
    --
    -__init__(params, batches, max_params, max_chars, ismulti)
    -__repr__(): str
    -_repr_multi(multi_params, typ): str
    -_get_batches(params): Any
    -_repr_params(params, typ): str
    -_repr_param_dict(params): str
    -_repr_param_tuple(params): str
    -_repr_param_list(params): str
  }

  class ClauseAdapter {
    +newcol
    +newcol
    +newcol
    +functions
    +col
    --
    -__init__(selectable, equivalents, include_fn, exclude_fn, adapt_on_names, anonymize_labels, adapt_from_selectables)
    +traverse(obj)
    +traverse(obj): _ET
    +traverse(obj)
    -_corresponding_column(col, require_embedded, _seen)
    +replace(col, _include_singleton_constants)
  }

  class _ColumnLookup {
    -__getitem__(key)
    -__getitem__(key)
    -__getitem__(key)
    -__getitem__(key): _ET
    -__getitem__(key): Any
  }

  class ColumnAdapter {
    +columns: _ColumnLookup
    --
    -__init__(selectable, equivalents, adapt_required, include_fn, exclude_fn, adapt_on_names, allow_label_resolve, anonymize_labels, adapt_from_selectables)
  }

  class _IncludeExcludeMapping {
    -__init__(parent, columns)
    -__getitem__(key)
  }

  class _CompilerDispatchType {
    -__call__(self, visitor): Any
  }

  class Visitable {
    -__visit_name__: str
    -_original_compiler_dispatch: _CompilerDispatchType
    +visit_name
    +name
    +getter
    +meth
    --
    -_compiler_dispatch(visitor): str
    -__init_subclass__()
    -{class} _generate_compiler_dispatch()
    -_compiler_dispatch(visitor): str
    -__class_getitem__(key): Any
  }

  class InternalTraversal {
    +dp_has_cache_key: str
    +dp_has_cache_key_list: str
    +dp_clauseelement: str
    +dp_fromclause_canonical_column_collection: str
    +dp_clauseelement_tuples: str
    +dp_clauseelement_list: str
    +dp_clauseelement_tuple: str
    +dp_executable_options: str
    +dp_with_context_options: str
    +dp_fromclause_ordered_set: str
    +dp_string: str
    +dp_string_list: str
    +dp_anon_name: str
    +dp_boolean: str
    +dp_operator: str
    +dp_type: str
    +dp_plain_dict: str
    +dp_dialect_options: str
    +dp_string_clauseelement_dict: str
    +dp_string_multi_dict: str
    +dp_annotations_key: str
    +dp_plain_obj: str
    +dp_named_ddl_element: str
    +dp_prefix_sequence: str
    +dp_table_hint_list: str
    +dp_setup_join_tuple: str
    +dp_memoized_select_entities: str
    +dp_statement_hint_list: str
    +dp_unknown_structure: str
    +dp_dml_ordered_values: str
    +dp_dml_values: str
    +dp_dml_multi_values: str
    +dp_propagate_attrs: str
    +dp_ignore: str
    +dp_inspectable: str
    +dp_multi: str
    +dp_multi_list: str
    +dp_has_cache_key_tuples: str
    +dp_inspectable_list: str
  }

  class HasTraverseInternals {
    -_traverse_internals: _TraverseInternalsType
    -_is_immutable: bool
    +traversals
    +traverse_internals
    +dispatch
    --
    +get_children()
  }

  class _InternalTraversalDispatchType {
    -__call__(self, visitor): Any
  }

  class HasTraversalDispatch {
    -_dispatch_lookup
    +name
    +dispatcher: _InternalTraversalDispatchType
    +dispatcher
    +dispatcher
    +dispatcher
    +names
    +meth
    +visit_name
    +code
    +meth_text
    --
    +dispatch(visit_symbol)
    +run_generated_dispatch(target, internal_dispatch, generate_dispatcher_name): Any
    +generate_dispatch(target_cls, internal_dispatch, generate_dispatcher_name): _InternalTraversalDispatchType
    -_generate_dispatcher(internal_dispatch, method_name): _InternalTraversalDispatchType
  }

  class ExternallyTraversible {
    -_annotations
    --
    -_annotate(values): Self
    +get_children()
    -_clone(): Self
    -_copy_internals()
  }

  class _CloneCallableType {
    -__call__(element): _ET
  }

  class _TraverseTransformCallableType {
    -__call__(element)
  }

  class ExternalTraversal {
    -__traverse_options__
    -_next
    +meth
    +visitors
    +v
    +v
    +tail
    --
    +traverse_single(obj): Any
    +iterate(obj)
    +traverse(obj)
    +traverse(obj): ExternallyTraversible
    +traverse(obj)
    -_memoized_attr__visitor_dict()
    +visitor_iterator()
    +chain(visitor): _ExtT
  }

  class CloningExternalTraversal {
    +copy_and_process(list_)
    +traverse(obj)
    +traverse(obj): ExternallyTraversible
    +traverse(obj)
  }

  class ReplacingExternalTraversal {
    +e
    --
    +replace(elem)
    +traverse(obj)
    +traverse(obj): ExternallyTraversible
    +traverse(obj)
    +replace()
  }

  class DDLEvents {
    +before_create(target, connection)
    +after_create(target, connection)
    +before_drop(target, connection)
    +after_drop(target, connection)
    +before_parent_attach(target, parent)
    +after_parent_attach(target, parent)
    -_sa_event_column_added_to_pk_constraint(const, col)
    +column_reflect(inspector, table, column_info)
  }

  class CompilerElement {
    +supports_execution: bool
    +stringify_dialect: str
    +dialect
    +default
    +dialect
    +url
    +dialect
    --
    +compile(bind, dialect): Compiled
    -_compiler(dialect): Compiled
    -__str__(): str
  }

  class ClauseElement {
    -_is_clone_of
    +is_clause_element: bool
    +is_selectable: bool
    +is_dml: bool
    -_cache_key_traversal: _CacheKeyTraversalType
    +negation_clause
    +skip
    +c
    +cc
    +s
    +f
    +f
    +self
    +d
    +key
    +bindparams
    +elem_cache_key
    +elem_cache_key
    +elem_cache_key: NoneType
    +key
    +compiled_sql
    +cache_hit
    +compiled_sql
    +cache_hit
    +extracted_params: NoneType
    +compiled_sql
    +cache_hit
    +cache_hit
    +cache_hit
    +grouped
    +friendly
    --
    -_propagate_attrs(): _PropagateAttrsType
    +description()
    -_order_by_label_element()
    +get_children()
    -_from_objects()
    -_set_propagate_attrs(values): Self
    -_clone(): Self
    -_negate_in_binary(negated_op, original_op)
    -_with_binary_element_type(type_)
    -_constructor()
    -_cloned_set()
    -_de_clone()
    +entity_namespace()
    -__getstate__()
    -_execute_on_connection(connection, distilled_params, execution_options)
    -_execute_on_scalar(connection, distilled_params, execution_options): Any
    -_get_embedded_bindparams()
    +unique_params(__optionaldict): Self
    +params(__optionaldict): Self
    -_replace_params(unique, optionaldict, kwargs): Self
    +visit_bindparam()
    +compare(other): bool
    +self_group(against): ClauseElement
    -_ungroup(): ClauseElement
    -_compile_w_cache(dialect)
    -__invert__()
    -_negate(): ClauseElement
    -__bool__()
    -__repr__()
  }

  class DQLDMLClauseElement {
    -_compiler(dialect): SQLCompiler
    +compile(bind, dialect): SQLCompiler
  }

  class CompilerColumnElement {
  }

  class SQLCoreOperations {
    -_propagate_attrs(): _PropagateAttrsType
    +operate(op)
    +reverse_operate(op, other)
    +op(opstring, precedence, is_comparison)
    +op(opstring, precedence, is_comparison, return_type, python_impl)
    +op(opstring, precedence, is_comparison, return_type, python_impl)
    +bool_op(opstring, precedence, python_impl)
    -__and__(other): BooleanClauseList
    -__or__(other): BooleanClauseList
    -__invert__()
    -__lt__(other)
    -__le__(other)
    -__hash__(): int
    -__eq__(other)
    -__ne__(other)
    +is_distinct_from(other)
    +is_not_distinct_from(other)
    -__gt__(other)
    -__ge__(other)
    -__neg__()
    -__contains__(other)
    -__getitem__(index)
    -__lshift__(other)
    -__lshift__(other)
    -__lshift__(other)
    -__rshift__(other)
    -__rshift__(other)
    -__rshift__(other)
    +concat(other)
    +concat(other)
    +concat(other)
    +like(other, escape)
    +ilike(other, escape)
    +bitwise_xor(other)
    +bitwise_or(other)
    +bitwise_and(other)
    +bitwise_not()
    +bitwise_lshift(other)
    +bitwise_rshift(other)
    +in_(other)
    +not_in(other)
    +notin_(other)
    +not_like(other, escape)
    +notlike(other, escape)
    +not_ilike(other, escape)
    +notilike(other, escape)
    +is_(other)
    +is_not(other)
    +isnot(other)
    +startswith(other, escape, autoescape)
    +istartswith(other, escape, autoescape)
    +endswith(other, escape, autoescape)
    +iendswith(other, escape, autoescape)
    +contains(other)
    +icontains(other)
    +match(other)
    +regexp_match(pattern, flags)
    +regexp_replace(pattern, replacement, flags)
    +desc()
    +asc()
    +nulls_first()
    +nullsfirst()
    +nulls_last()
    +nullslast()
    +collate(collation): CollationClause
    +between(cleft, cright, symmetric)
    +distinct()
    +any_()
    +all_()
    -__add__(other)
    -__add__(other)
    -__add__(other)
    -__radd__(other)
    -__radd__(other)
    -__radd__(other)
    -__sub__(other)
    -__sub__(other)
    -__sub__(other)
    -__rsub__(other)
    -__rsub__(other)
    -__rsub__(other)
    -__mul__(other)
    -__mul__(other)
    -__mul__(other)
    -__rmul__(other)
    -__rmul__(other)
    -__rmul__(other)
    -__mod__(other)
    -__mod__(other)
    -__mod__(other)
    -__rmod__(other)
    -__rmod__(other)
    -__rmod__(other)
    -__truediv__(other)
    -__truediv__(other)
    -__truediv__(other)
    -__truediv__(other)
    -__rtruediv__(other)
    -__rtruediv__(other)
    -__rtruediv__(other)
    -__floordiv__(other)
    -__floordiv__(other)
    -__floordiv__(other)
    -__rfloordiv__(other)
    -__rfloordiv__(other)
    -__rfloordiv__(other)
  }

  class SQLColumnExpression {
  }

  class ColumnElement {
    +primary_key: bool
    -_is_clone_of
    -_insert_sentinel: bool
    +foreign_keys
    +key
    -_alt_names
    +grouped
    +type
    +comparator_factory
    +name
    +name
    +name
    +key
    +key: name
    +co
    +self
    +hash_value
    +hash_value
    +seed
    +name
    +label
    +label
    --
    -_proxies()
    -_tq_label()
    -_tq_key_label()
    -_key_label()
    -_label()
    -_non_anon_label()
    +self_group(against)
    +self_group(against)
    +self_group(against)
    -_negate()
    -_negate()
    -_negate()
    +type()
    +comparator()
    -__setstate__(state)
    -__getattr__(key): Any
    +operate(op)
    +reverse_operate(op, other)
    -_bind_param(operator, obj, type_, expanding)
    +expression()
    -_select_iterable(): _SelectIterable
    +base_columns()
    +proxy_set()
    -_expanded_proxy_set()
    -_uncached_proxy_list()
    +shares_lineage(othercolumn): bool
    -_compare_name_for_result(other): bool
    -_proxy_key()
    -_expression_label()
    -_make_proxy(selectable)
    +cast(type_)
    +label(name)
    -_anon_label(seed, add_hash): _anonymous_label
    -_anon_name_label(): str
    -_anon_key_label(): _anonymous_label
    +anon_label(): str
    +anon_key_label(): str
    -_dedupe_anon_label_idx(idx): str
    -_anon_tq_label(): _anonymous_label
    -_anon_tq_key_label(): _anonymous_label
    -_dedupe_anon_tq_label_idx(idx): _anonymous_label
  }

  class KeyedColumnElement {
    +key: str
  }

  class WrapsColumnExpression {
    +wce
    +wce
    +nal
    +wce
    +nal
    +wce
    --
    +wrapped_column_expression()
    -_tq_label()
    -_label()
    -_non_anon_label()
    -_anon_name_label(): str
    -_dedupe_anon_label_idx(idx): str
    -_proxy_key()
  }

  class BindParameter {
    -_traverse_internals: _TraverseInternalsType
    +key: str
    +type
    +value
    +inherit_cache: bool
    +required
    +value: NoneType
    +key
    +check_value
    +check_value
    +check_value: value
    +check_value
    +check_value: value
    +cloned
    +c
    +bind
    +c
    +c
    +d
    +v
    +v
    --
    -__init__(key, value, type_, unique, required, quote, callable_, expanding, isoutparam, literal_execute, _compared_to_operator, _compared_to_type, _is_crud)
    -_with_value(value, maintain_key, required)
    +effective_value()
    +render_literal_execute()
    -_negate_in_binary(negated_op, original_op)
    -_with_binary_element_type(type_)
    -_clone(maintain_key): Self
    -_gen_cache_key(anon_map, bindparams)
    -_convert_to_unique()
    -__getstate__()
    -__setstate__(state)
    -__repr__()
  }

  class TypeClause {
    -_traverse_internals: _TraverseInternalsType
    --
    -__init__(type_)
  }

  class TextClause {
    -_traverse_internals: _TraverseInternalsType
    +key
    -_label
    +new_params
    +existing
    +existing
    +selectable
    +input_cols
    +positional_input_cols
    +keyed_input_cols
    +elem
    --
    -_hide_froms()
    -__and__(other)
    -_select_iterable(): _SelectIterable
    -_is_star()
    -__init__(text)
    +repl()
    +bindparams(): Self
    +columns(): TextualSelect
    +type()
    +comparator()
    +self_group(against)
  }

  class Null {
    -_traverse_internals: _TraverseInternalsType
    -_singleton: Null
    --
    +type()
    -{class} _instance(): Null
  }

  class False_ {
    -_traverse_internals: _TraverseInternalsType
    -_singleton: False_
    --
    +type()
    -_negate(): True_
    -{class} _instance(): False_
  }

  class True_ {
    -_traverse_internals: _TraverseInternalsType
    -_singleton: True_
    --
    +type()
    -_negate(): False_
    -{class} _ifnone(other)
    -{class} _instance(): True_
  }

  class ClauseList {
    -_traverse_internals: _TraverseInternalsType
    +clauses
    +clauses_iterator
    +text_converter_role
    +self
    --
    -__init__()
    -{class} _construct_raw(operator, clauses): ClauseList
    -__iter__()
    -__len__(): int
    -_select_iterable(): _SelectIterable
    +append(clause)
    -_from_objects()
    +self_group(against)
  }

  class OperatorExpression {
    +operator: OperatorType
    +type
    +group: bool
    +multi: bool
    +multi: bool
    +left_flattened
    +left_flattened
    +multi: bool
    +right_flattened
    +right_flattened
    --
    +is_comparison()
    +self_group(against)
    -_flattened_operator_clauses()
    -{class} _construct_for_op(left, right, op)
  }

  class ExpressionClauseList {
    -_traverse_internals: _TraverseInternalsType
    +clauses
    +group: bool
    +self
    +grouped
    --
    -__init__(operator)
    -_flattened_operator_clauses()
    -__iter__()
    -__len__(): int
    -_select_iterable(): _SelectIterable
    -_from_objects()
    -_append_inplace(clause)
    -{class} _construct_for_list(operator, type_)
    -_negate(): Any
  }

  class BooleanClauseList {
    +inherit_cache: bool
    +has_continue_on: NoneType
    +convert_clauses
    +against
    +lcc: int
    +has_continue_on: clause
    +convert_clauses
    +lcc: int
    +lcc: int
    +against: operator
    +lcc: int
    +convert_clauses
    +lcc: int
    +name
    +flattened_clauses
    +self
    --
    -__init__()
    -{class} _process_clauses_for_boolean(operator, continue_on, skip_on, clauses)
    -{class} _construct(operator, continue_on, skip_on, initial_clause)
    -{class} _construct_for_whereclause(clauses)
    -{class} _construct_raw(operator, clauses): BooleanClauseList
    +{class} and_(initial_clause)
    +{class} or_(initial_clause)
    -_select_iterable(): _SelectIterable
    +self_group(against)
  }

  class Tuple {
    -_traverse_internals: _TraverseInternalsType
    +type: TupleType
    +sqltypes
    +init_clauses
    +init_clauses
    --
    -__init__()
    -_select_iterable(): _SelectIterable
    -_bind_param(operator, obj, type_, expanding)
    +self_group(against)
  }

  class Case {
    -_traverse_internals: _TraverseInternalsType
    +whens
    +else_
    +value
    +new_whens
    +new_whens
    +whenlist
    +type_
    +type_: NoneType
    --
    -__init__()
    -_from_objects()
  }

  class Cast {
    -_traverse_internals: _TraverseInternalsType
    +clause
    +type
    +typeclause: TypeClause
    --
    -__init__(expression, type_)
    -_from_objects()
    +wrapped_column_expression()
  }

  class TryCast {
    +inherit_cache: bool
  }

  class TypeCoerce {
    -_traverse_internals: _TraverseInternalsType
    +clause
    +type
    +bp
    +grouped
    --
    -__init__(expression, type_)
    -_from_objects()
    +typed_expression()
    +wrapped_column_expression()
    +self_group(against)
  }

  class Extract {
    -_traverse_internals: _TraverseInternalsType
    +expr
    +field: str
    --
    -__init__(field, expr)
    -_from_objects()
  }

  class _label_reference {
    -_traverse_internals: _TraverseInternalsType
    +element
    --
    -__init__(element)
    -_from_objects()
  }

  class _textual_label_reference {
    -_traverse_internals: _TraverseInternalsType
    --
    -__init__(element)
    -_text_clause(): TextClause
  }

  class UnaryExpression {
    -_traverse_internals: _TraverseInternalsType
    +element: ClauseElement
    +col_expr
    +col_expr
    --
    -__init__(element, operator, modifier, type_, wraps_column_expression)
    -{class} _create_nulls_first(column)
    -{class} _create_nulls_last(column)
    -{class} _create_desc(column)
    -{class} _create_asc(column)
    -{class} _create_distinct(expr)
    -{class} _create_bitwise_not(expr)
    -_order_by_label_element()
    -_from_objects()
    -_negate()
    +self_group(against)
  }

  class CollectionAggregate {
    +inherit_cache: bool
    +col_expr
    +col_expr
    +col_expr
    +col_expr
    --
    -{class} _create_any(expr)
    -{class} _create_all(expr)
    +operate(op)
    +reverse_operate(op, other)
  }

  class AsBoolean {
    +inherit_cache: bool
    --
    -__init__(element, operator, negate)
    +wrapped_column_expression()
    +self_group(against)
    -_negate()
  }

  class BinaryExpression {
    -_traverse_internals: _TraverseInternalsType
    +modifiers
    +left
    +right
    +operator
    --
    -__init__(left, right, operator, type_, negate, modifiers)
    -_flattened_operator_clauses()
    -__bool__()
    -__invert__()
    -_from_objects()
    -_negate()
  }

  class Slice {
    -_traverse_internals: _TraverseInternalsType
    --
    -__init__(start, stop, step, _name)
    +self_group(against)
  }

  class IndexExpression {
    +inherit_cache: bool
  }

  class GroupedElement {
    +element: ClauseElement
    --
    +self_group(against)
    -_ungroup()
  }

  class Grouping {
    -_traverse_internals: _TraverseInternalsType
    +element
    --
    -__init__(element)
    -_with_binary_element_type(type_)
    -_is_implicitly_boolean()
    -_tq_label()
    -_proxies()
    -_from_objects()
    -__getattr__(attr)
    -__getstate__()
    -__setstate__(state)
  }

  class _OverRange {
    +RANGE_UNBOUNDED: int
    +RANGE_CURRENT: int
  }

  class Over {
    -_traverse_internals: _TraverseInternalsType
    +order_by
    +partition_by
    +element
    +range_
    +lower: int
    +upper: int
    +lower: RANGE_UNBOUNDED
    +lower
    +lower: RANGE_CURRENT
    +upper: RANGE_UNBOUNDED
    +upper
    +upper: RANGE_CURRENT
    --
    -__init__(element, partition_by, order_by, range_, rows)
    -__reduce__()
    -_interpret_range(range_)
    +type()
    -_from_objects()
  }

  class WithinGroup {
    -_traverse_internals: _TraverseInternalsType
    +order_by
    +wgt
    --
    -__init__(element)
    -__reduce__()
    +over(partition_by, order_by, range_, rows)
    +type()
    -_from_objects()
  }

  class FunctionFilter {
    -_traverse_internals: _TraverseInternalsType
    +criterion
    +crit
    --
    -__init__(func)
    +filter()
    +over(partition_by, order_by, range_, rows)
    +self_group(against)
    +type()
    -_from_objects()
  }

  class NamedColumn {
    +is_literal: bool
    +table
    +name: str
    +key: str
    +proxy_key
    +c
    --
    -_compare_name_for_result(other)
    +description(): str
    -_tq_key_label()
    -_tq_label()
    -_render_label_in_columns_clause()
    -_non_anon_label()
    -_gen_tq_label(name, dedupe_on_key)
    -_bind_param(operator, obj, type_, expanding)
    -_make_proxy(selectable)
  }

  class Label {
    -_traverse_internals: _TraverseInternalsType
    -_element
    +name: str
    +orig_element: element
    +element
    +element
    +sub_element
    +name
    --
    -__init__(name, element, type_)
    -__reduce__()
    -_render_label_in_columns_clause()
    -_bind_param(operator, obj, type_, expanding)
    -_is_implicitly_boolean()
    -_allow_label_resolve()
    -_order_by_label_element()
    +element()
    +self_group(against)
    -_negate()
    -_apply_to_inner(fn)
    +primary_key()
    +foreign_keys()
    -_copy_internals()
    -_from_objects()
    -_make_proxy(selectable)
  }

  class ColumnClause {
    +table
    +is_literal: bool
    -_traverse_internals: _TraverseInternalsType
    +onupdate
    +default
    +server_default
    +server_onupdate
    +clone
    +table
    +new
    +t
    +label: str
    +t
    +label
    +label
    +label
    +label
    +counter: int
    +label: _label
    +is_literal
    +c
    --
    -_is_star()
    -__init__(text, type_, is_literal, _selectable)
    +get_children()
    +entity_namespace()
    -_clone(detect_subquery_cols)
    -_from_objects()
    -_render_label_in_columns_clause()
    -_ddl_label()
    -_compare_name_for_result(other)
    -_gen_tq_label(name, dedupe_on_key)
    -_make_proxy(selectable)
  }

  class TableValuedColumn {
    -_traverse_internals: _TraverseInternalsType
    --
    -__init__(scalar_alias, type_)
    -_copy_internals(clone)
    -_from_objects()
  }

  class CollationClause {
    -_traverse_internals: _TraverseInternalsType
    +expr
    --
    -{class} _create_collation_expression(expression, collation)
    -__init__(collation)
  }

  class _IdentifiedClause {
    -__init__(ident)
  }

  class SavepointClause {
    +inherit_cache: bool
  }

  class RollbackToSavepointClause {
    +inherit_cache: bool
  }

  class ReleaseSavepointClause {
    +inherit_cache: bool
  }

  class quoted_name {
    +quote
    +self
    --
    +{class} construct(value, quote): quoted_name
    +{class} construct(value, quote)
    +{class} construct(value, quote)
    -__new__(value, quote): quoted_name
    -__reduce__()
    -_memoized_method_lower()
    -_memoized_method_upper()
  }

  class AnnotatedColumnElement {
    -_Annotated__element
    +clone
    --
    -__init__(element, values)
    -_with_annotations(values)
    +name()
    +table()
    +key()
    +info(): _InfoType
    -_anon_name_label(): str
  }

  class _truncated_label {
    +quote
    --
    -__new__(value, quote): Any
    -__reduce__(): Any
    +apply_map(map_): str
  }

  class conv {
  }

  class _anonymous_label {
    +body
    +body
    +label
    +label
    +other
    +other
    +other
    +other
    --
    +{class} safe_construct(seed, body, enclosing_label, sanitize_key): _anonymous_label
    -__add__(other)
    -__radd__(other)
    +apply_map(map_)
  }

  class HasExpressionLookup {
    -_expression_adaptations()
  }

  class Comparator {
    +operate(op)
    +reverse_operate(op, other)
  }

  class Concatenable {
  }

  class Indexable {
  }

  class String {
    +value
    +value
    --
    -__init__(length, collation)
    -_resolve_for_literal(value)
    +literal_processor(dialect)
    +process()
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
    +python_type()
    +get_dbapi_type(dbapi)
  }

  class Text {
  }

  class Unicode {
    -__init__(length)
  }

  class UnicodeText {
    -__init__(length)
  }

  class Integer {
    -_type_affinity()
    +get_dbapi_type(dbapi)
    +python_type()
    -_resolve_for_literal(value)
    +literal_processor(dialect)
    +process()
    -_expression_adaptations()
  }

  class SmallInteger {
  }

  class BigInteger {
  }

  class Numeric {
    -_type_affinity()
    -__init__(precision, scale, decimal_return_scale, asdecimal)
    -__init__(precision, scale, decimal_return_scale, asdecimal)
    -__init__(precision, scale, decimal_return_scale, asdecimal)
    -_effective_decimal_return_scale()
    +get_dbapi_type(dbapi)
    +literal_processor(dialect)
    +process()
    +python_type()
    +bind_processor(dialect)
    +result_processor(dialect, coltype)
    -_expression_adaptations()
  }

  class Float {
    +scale: NoneType
    --
    -__init__(precision, asdecimal, decimal_return_scale)
    -__init__(precision, asdecimal, decimal_return_scale)
    -__init__(precision, asdecimal, decimal_return_scale)
    +result_processor(dialect, coltype)
  }

  class Double {
  }

  class _RenderISO8601NoT {
    -_literal_processor_datetime(dialect)
    -_literal_processor_date(dialect)
    -_literal_processor_time(dialect)
    -_literal_processor_portion(dialect, _portion)
    +process()
    +process()
  }

  class DateTime {
    +with_timezone
    --
    -__init__(timezone)
    +get_dbapi_type(dbapi)
    -_resolve_for_literal(value)
    +literal_processor(dialect)
    +python_type()
    -_expression_adaptations()
  }

  class Date {
    +get_dbapi_type(dbapi)
    +python_type()
    +literal_processor(dialect)
    -_expression_adaptations()
  }

  class Time {
    +with_timezone
    --
    -__init__(timezone)
    +get_dbapi_type(dbapi)
    +python_type()
    -_resolve_for_literal(value)
    -_expression_adaptations()
    +literal_processor(dialect)
  }

  class _Binary {
    +value
    +DBAPIBinary
    +value
    --
    -__init__(length)
    +literal_processor(dialect)
    +process()
    +python_type()
    +bind_processor(dialect)
    +process()
    +result_processor(dialect, coltype)
    +process()
    +coerce_compared_value(op, value)
    +get_dbapi_type(dbapi)
  }

  class LargeBinary {
    -__init__(length)
  }

  class SchemaType {
    +name
    +variant_mapping
    +variant_mapping: NoneType
    +variant_mapping
    +t
    +t
    +t
    +t
    +t
    +t
    +variant_mapping
    --
    -__init__(name, schema, metadata, inherit_schema, quote, _create_events, _adapted_from)
    -_set_parent(column)
    -_variant_mapping_for_set_table(column)
    -_set_table(column, table)
    +copy()
    +adapt(cls): _TE
    +adapt(cls)
    +adapt(cls)
    +create(bind, checkfirst)
    +drop(bind, checkfirst)
    -_on_table_create(target, bind)
    -_on_table_drop(target, bind)
    -_on_metadata_create(target, bind)
    -_on_metadata_drop(target, bind)
    -_is_impl_for_variant(dialect, kw)
    -_we_are_the_impl()
  }

  class Enum {
    +length_arg
    +length
    +length: int
    +length: length_arg
    +enums
    +members
    +members: _members
    +values
    +values
    +objects
    +tv
    +typ
    +we_are_generic_form
    +native_enum: NoneType
    +enum_args
    +enum_args
    +bad_args
    +native_enum: bool
    +enum_args
    +enum_args
    +kw
    --
    -__init__()
    -_enums_argument()
    -_enum_init(enums, kw)
    -_parse_into_values(enums, kw)
    -_resolve_for_literal(value): Enum
    -_resolve_for_python_type(python_type, matched_on, matched_on_flattened)
    -_setup_for_values(values, objects, kw)
    +sort_key_function()
    +native()
    -_db_value_for_elem(elem)
  }

  class PickleType {
    +impl: LargeBinary
    +cache_ok: bool
    +impl_processor
    +dumps
    +protocol
    +fixed_impl_processor: impl_processor
    +value
    +value
    +impl_processor
    +loads
    +fixed_impl_processor: impl_processor
    +value
    --
    -__init__(protocol, pickler, comparator, impl)
    -__reduce__()
    +bind_processor(dialect)
    +process()
    +process()
    +result_processor(dialect, coltype)
    +process()
    +process()
    +compare_values(x, y)
  }

  class Boolean {
    +native: bool
    +schema
    +variant_mapping
    +e
    +compiler
    +true
    +false
    -_coerce
    +value
    +value
    --
    -__init__(create_constraint, name, _create_events, _adapted_from)
    -_should_create_constraint(compiler)
    -_set_table(column, table)
    +python_type()
    -_strict_as_bool(value)
    +literal_processor(dialect)
    +process()
    +bind_processor(dialect)
    +process()
    +result_processor(dialect, coltype)
  }

  class _AbstractInterval {
    -_expression_adaptations()
    -_type_affinity()
  }

  class Interval {
    +impl: DateTime
    +epoch
    +cache_ok: bool
    --
    -__init__(native, second_precision, day_precision)
  }

  class JSON {
    +hashable: bool
    +NULL
    --
    -__init__(none_as_null)
  }

  class JSONElementType {
    +int_processor
    +string_processor
    +value
    +value
    +int_processor
    +string_processor
    +value
    +value
    --
    +string_bind_processor(dialect)
    +string_literal_processor(dialect)
    +bind_processor(dialect)
    +process()
    +literal_processor(dialect)
    +process()
  }

  class JSONIndexType {
  }

  class JSONIntIndexType {
  }

  class JSONStrIndexType {
  }

  class JSONPathType {
  }

  class ARRAY {
    +zero_indexes: bool
  }

  class TupleType {
    +types
    --
    -__init__()
    +coerce_compared_value(op, value)
    -_resolve_values_to_types(value): TupleType
    +result_processor(dialect, coltype)
  }

  class REAL {
  }

  class FLOAT {
  }

  class DOUBLE {
  }

  class DOUBLE_PRECISION {
  }

  class NUMERIC {
  }

  class DECIMAL {
  }

  class INTEGER {
  }

  class SMALLINT {
  }

  class BIGINT {
  }

  class TIMESTAMP {
    -__init__(timezone)
    +get_dbapi_type(dbapi)
  }

  class DATETIME {
  }

  class DATE {
  }

  class TIME {
  }

  class TEXT {
  }

  class CLOB {
  }

  class VARCHAR {
  }

  class NVARCHAR {
  }

  class CHAR {
  }

  class NCHAR {
  }

  class BLOB {
  }

  class BINARY {
  }

  class VARBINARY {
  }

  class BOOLEAN {
  }

  class NullType {
    +literal_processor(dialect)
  }

  class TableValueType {
    -__init__()
  }

  class MatchType {
  }

  class Uuid {
    +collation
    +character_based_uuid
    +value
    +value
    +character_based_uuid
    +value
    +value
    +value
    +character_based_uuid
    --
    -__init__(as_uuid, native_uuid)
    -__init__(as_uuid, native_uuid)
    -__init__(as_uuid, native_uuid)
    +python_type()
    +native()
    +coerce_compared_value(op, value)
    +bind_processor(dialect)
    +process()
    +process()
    +result_processor(dialect, coltype)
    +process()
    +process()
    +process()
    +literal_processor(dialect)
    +process()
    +process()
    +process()
  }

  class UUID {
    -__init__(as_uuid)
    -__init__(as_uuid)
    -__init__(as_uuid)
    +{class} adapt_emulated_to_native(impl)
  }

  class OperatorType {
    -__name__: str
    --
    -__call__(left, right)
    -__call__(left, right): Operators
    -__call__(left, right): Operators
  }

  class Operators {
    +operator
    --
    -__and__(other): Operators
    -__or__(other): Operators
    -__invert__(): Operators
    +op(opstring, precedence, is_comparison, return_type, python_impl)
    +against(): Operators
    +bool_op(opstring, precedence, python_impl)
    +operate(op): Operators
    +reverse_operate(op, other): Operators
  }

  class custom_op {
    -__init__(opstring, precedence, is_comparison, return_type, natural_self_precedent, eager_grouping, python_impl)
    -__eq__(other): bool
    -__hash__(): int
    -_hash_key()
    -__call__(left, right)
    -__call__(left, right): Operators
    -__call__(left, right): Operators
  }

  class ColumnOperators {
    +timetuple
    +isnot_distinct_from: is_not_distinct_from
    +notin_: not_in
    +notlike: not_like
    +notilike: not_ilike
    +isnot: is_not
    +nullsfirst: nulls_first
    +nullslast: nulls_last
    --
    +operate(op): ColumnOperators
    +reverse_operate(op, other): ColumnOperators
    -__lt__(other): ColumnOperators
    -__le__(other): ColumnOperators
    -__hash__(): int
    -__eq__(other): ColumnOperators
    -__ne__(other): ColumnOperators
    +is_distinct_from(other): ColumnOperators
    +is_not_distinct_from(other): ColumnOperators
    +isnot_distinct_from(other): ColumnOperators
    -__gt__(other): ColumnOperators
    -__ge__(other): ColumnOperators
    -__neg__(): ColumnOperators
    -__contains__(other): ColumnOperators
    -__getitem__(index): ColumnOperators
    -__lshift__(other): ColumnOperators
    -__rshift__(other): ColumnOperators
    +concat(other): ColumnOperators
    -_rconcat(other): ColumnOperators
    +like(other, escape): ColumnOperators
    +ilike(other, escape): ColumnOperators
    +bitwise_xor(other): ColumnOperators
    +bitwise_or(other): ColumnOperators
    +bitwise_and(other): ColumnOperators
    +bitwise_not(): ColumnOperators
    +bitwise_lshift(other): ColumnOperators
    +bitwise_rshift(other): ColumnOperators
    +in_(other): ColumnOperators
    +not_in(other): ColumnOperators
    +notin_(other): ColumnOperators
    +not_like(other, escape): ColumnOperators
    +notlike(other, escape): ColumnOperators
    +not_ilike(other, escape): ColumnOperators
    +notilike(other, escape): ColumnOperators
    +is_(other): ColumnOperators
    +is_not(other): ColumnOperators
    +isnot(other): ColumnOperators
    +startswith(other, escape, autoescape): ColumnOperators
    +istartswith(other, escape, autoescape): ColumnOperators
    +endswith(other, escape, autoescape): ColumnOperators
    +iendswith(other, escape, autoescape): ColumnOperators
    +contains(other): ColumnOperators
    +icontains(other): ColumnOperators
    +match(other): ColumnOperators
    +regexp_match(pattern, flags): ColumnOperators
    +regexp_replace(pattern, replacement, flags): ColumnOperators
    +desc(): ColumnOperators
    +asc(): ColumnOperators
    +nulls_first(): ColumnOperators
    +nullsfirst(): ColumnOperators
    +nulls_last(): ColumnOperators
    +nullslast(): ColumnOperators
    +collate(collation): ColumnOperators
    -__radd__(other): ColumnOperators
    -__rsub__(other): ColumnOperators
    -__rmul__(other): ColumnOperators
    -__rmod__(other): ColumnOperators
    +between(cleft, cright, symmetric): ColumnOperators
    +distinct(): ColumnOperators
    +any_(): ColumnOperators
    +all_(): ColumnOperators
    -__add__(other): ColumnOperators
    -__sub__(other): ColumnOperators
    -__mul__(other): ColumnOperators
    -__mod__(other): ColumnOperators
    -__truediv__(other): ColumnOperators
    -__rtruediv__(other): ColumnOperators
    -__floordiv__(other): ColumnOperators
    -__rfloordiv__(other): ColumnOperators
  }

  class _OpLimit {
  }

  class _JoinTargetProtocol {
    -_from_objects()
    +entity_namespace(): _EntityNamespace
  }

  class _OffsetLimitParam {
    +inherit_cache: bool
    --
    -_limit_offset_value()
  }

  class ReturnsRows {
    +selectable(): ReturnsRows
    -_all_selected_columns(): _SelectIterable
    +is_derived_from(fromclause): bool
    -_generate_fromclause_column_proxies(fromclause)
    -_refresh_for_new_column(column)
    +exported_columns()
  }

  class ExecutableReturnsRows {
  }

  class TypedReturnsRows {
  }

  class Selectable {
    +is_selectable: bool
    --
    -_refresh_for_new_column(column)
    +lateral(name): LateralFromClause
    +replace_selectable(old, alias): Self
    +corresponding_column(column, require_embedded)
  }

  class HasPrefixes {
    -_prefixes
    -_has_prefixes_traverse_internals: _TraverseInternalsType
    --
    +prefix_with(): Self
  }

  class HasSuffixes {
    -_suffixes
    -_has_suffixes_traverse_internals: _TraverseInternalsType
    --
    +suffix_with(): Self
  }

  class HasHints {
    -_hints
    -_statement_hints
    -_has_hints_traverse_internals: _TraverseInternalsType
    --
    +with_statement_hint(text, dialect_name): Self
    +with_hint(selectable, text, dialect_name): Self
    -_with_hint(selectable, text, dialect_name): Self
  }

  class FromClause {
    +named_with_column: bool
    -_is_clone_of
    -_columns
    +schema
    +is_selectable: bool
    --
    -_hide_froms()
    +select()
    +join(right, onclause, isouter, full): Join
    +outerjoin(right, onclause, full): Join
    +alias(name, flat): NamedFromClause
    +tablesample(sampling, name, seed): TableSample
    +is_derived_from(fromclause): bool
    -_is_lexical_equivalent(other): bool
    +description(): str
    -_generate_fromclause_column_proxies(fromclause)
    +exported_columns()
    +columns()
    +c()
    +entity_namespace(): _EntityNamespace
    +primary_key()
    +foreign_keys()
    -_reset_column_collection()
    -_select_iterable(): _SelectIterable
    -_init_collections()
    -_cols_populated(): bool
    -_populate_column_collection()
    -_refresh_for_new_column(column)
    -_anonymous_fromclause(): FromClause
    +self_group(against)
  }

  class NamedFromClause {
    +named_with_column: bool
    +name: str
    --
    +table_valued()
  }

  class SelectLabelStyle {
    +LABEL_STYLE_NONE: int
    +LABEL_STYLE_TABLENAME_PLUS_COL: int
    +LABEL_STYLE_DISAMBIGUATE_ONLY: int
    +LABEL_STYLE_DEFAULT: LABEL_STYLE_DISAMBIGUATE_ONLY
    +LABEL_STYLE_LEGACY_ORM: int
  }

  class Join {
    -_traverse_internals: _TraverseInternalsType
    +left: FromClause
    +right: FromClause
    +onclause
    +isouter: bool
    +full: bool
    +sqlutil
    +columns
    +all_the_froms
    +new_froms
    +newelem
    +left_right
    +left_right: NoneType
    +constraints
    +hint: str
    +hint: str
    +crit
    +left_right
    +left_right: NoneType
    +constraints
    +sql_util
    +a
    +b
    +constraints
    +col
    +table_names
    +col
    +table_names
    +dedupe
    +key
    +constraints
    +sqlutil
    +adapter
    +self_list
    --
    -__init__(left, right, onclause, isouter, full)
    +description(): str
    +is_derived_from(fromclause): bool
    +self_group(against): FromGrouping
    -_populate_column_collection()
    -_copy_internals(clone)
    +replace()
    -_refresh_for_new_column(column)
    -_match_primaries(left, right)
    -{class} _join_condition(a, b)
    -{class} _can_join(left, right): bool
    -{class} _joincond_scan_left_right(a, a_subset, b, consider_as_foreign_keys)
    -{class} _joincond_trim_constraints(a, b, constraints, consider_as_foreign_keys)
    +select()
    -_anonymous_fromclause(name, flat): TODO_Any
    -_hide_froms()
    -_from_objects()
  }

  class NoInit {
    -__init__()
  }

  class LateralFromClause {
  }

  class AliasedReturnsRows {
    +element: ReturnsRows
    -_traverse_internals: _TraverseInternalsType
    +obj
    +name
    +name: NoneType
    +name
    +name
    +name: str
    +existing_element
    --
    -{class} _construct(selectable): Self
    -_init(selectable)
    -_refresh_for_new_column(column)
    -_populate_column_collection()
    +description(): str
    +implicit_returning(): bool
    +original(): ReturnsRows
    +is_derived_from(fromclause): bool
    -_copy_internals(clone)
    -_from_objects()
  }

  class FromClauseAlias {
    +element: FromClause
  }

  class Alias {
    +inherit_cache: bool
    +element: FromClause
    --
    -{class} _factory(selectable, name, flat): NamedFromClause
  }

  class TableValuedAlias {
    +joins_implicitly: bool
    -_traverse_internals: _TraverseInternalsType
    +tva: TableValuedAlias
    +tva
    +new_alias: TableValuedAlias
    --
    -_init(selectable)
    +column()
    +alias(name, flat): TableValuedAlias
    +lateral(name): LateralFromClause
    +render_derived(name, with_types): TableValuedAlias
  }

  class Lateral {
    +inherit_cache: bool
    --
    -{class} _factory(selectable, name): LateralFromClause
  }

  class TableSample {
    -_traverse_internals: _TraverseInternalsType
    +functions
    +sampling
    --
    -{class} _factory(selectable, sampling, name, seed): TableSample
    -_init(selectable)
    -_get_method()
  }

  class CTE {
    -_traverse_internals: _TraverseInternalsType
    +element: HasCTE
    --
    -{class} _factory(selectable, name, recursive): CTE
    -_init(selectable)
    -_populate_column_collection()
    +alias(name, flat): CTE
    +union(): CTE
    +union_all(): CTE
    -_get_reference_cte(): CTE
  }

  class _CTEOpts {
    +nesting: bool
  }

  class _ColumnsPlusNames {
    +required_label_name
    +proxy_key
    +fallback_label_name
    +column
    +repeated: bool
  }

  class SelectsRows {
    -_label_style: SelectLabelStyle
    +cols
    +key_naming_convention
    +names
    +result
    +result_append
    +table_qualified
    +label_style_none
    +dedupe_hash: int
    +repeated: bool
    +effective_name: NoneType
    +required_label_name: NoneType
    +fallback_label_name: NoneType
    +effective_name: NoneType
    +required_label_name: NoneType
    +fallback_label_name
    +required_label_name
    +effective_name
    +fallback_label_name
    +effective_name
    +fallback_label_name
    +required_label_name: NoneType
    +expr_label
    +repeated
    +effective_name: NoneType
    +required_label_name: NoneType
    +fallback_label_name
    +fallback_label_name
    +fallback_label_name
    +required_label_name: expr_label
    +effective_name: expr_label
    +fallback_label_name: expr_label
    +required_label_name
    +fallback_label_name
    +required_label_name
    +fallback_label_name
    +required_label_name
    +fallback_label_name
    +required_label_name
    +fallback_label_name
    +repeated: bool
    +required_label_name
    +fallback_label_name
    +required_label_name
    +fallback_label_name
    +repeated: bool
    --
    -_generate_columns_plus_names(anon_for_dupe_key, cols)
  }

  class HasCTE {
    -_has_ctes_traverse_internals: _TraverseInternalsType
    -_independent_ctes
    -_independent_ctes_opts
    +opt
    +cte
    --
    +add_cte(): Self
    +cte(name, recursive, nesting): CTE
  }

  class Subquery {
    +inherit_cache: bool
    +element: SelectBase
    --
    -{class} _factory(selectable, name): Subquery
    +as_scalar()
  }

  class FromGrouping {
    -_traverse_internals: _TraverseInternalsType
    +element: FromClause
    --
    -__init__(element)
    -_init_collections()
    +columns()
    +c()
    +primary_key()
    +foreign_keys()
    +is_derived_from(fromclause): bool
    +alias(name, flat): NamedFromGrouping
    -_anonymous_fromclause(): FromGrouping
    -_hide_froms()
    -_from_objects()
    -__getstate__()
    -__setstate__(state)
  }

  class NamedFromGrouping {
    +inherit_cache: bool
  }

  class TableClause {
    -_traverse_internals: _TraverseInternalsType
    +fullname: str
    +implicit_returning: bool
    +schema
    +existing
    --
    -_autoincrement_column()
    -__init__(name)
    +columns()
    +c()
    -__str__(): str
    -_refresh_for_new_column(column)
    -_init_collections()
    +description(): str
    +append_column(c)
    +insert(): util.preloaded.sql_dml.Insert
    +update(): Update
    +delete(): Delete
    -_from_objects()
  }

  class ForUpdateArg {
    -_traverse_internals: _TraverseInternalsType
    +of
    +nowait: bool
    +read: bool
    +skip_locked: bool
    --
    -{class} _from_argument(with_for_update)
    -__eq__(other): bool
    -__ne__(other): bool
    -__hash__(): int
    -__init__()
  }

  class Values {
    -_data
    -_unnamed: bool
    -_traverse_internals: _TraverseInternalsType
    +non_none_name: str
    +non_none_name
    +non_none_name: name
    +non_none_name: str
    +non_none_name
    +non_none_name: name
    --
    -__init__()
    -_column_types()
    +alias(name, flat): Self
    +lateral(name): LateralFromClause
    +data(values): Self
    +scalar_values(): ScalarValues
    -_populate_column_collection()
    -_from_objects()
  }

  class ScalarValues {
    -_traverse_internals: _TraverseInternalsType
    --
    -__init__(columns, data, literal_binds)
    -_column_types()
    -__clause_element__(): ScalarValues
  }

  class SelectBase {
    +is_select: bool
    -_label_style: SelectLabelStyle
    +self
    --
    -_refresh_for_new_column(column)
    +selected_columns()
    -_generate_fromclause_column_proxies(subquery)
    -_all_selected_columns(): _SelectIterable
    +exported_columns()
    +c()
    +columns()
    +get_label_style(): SelectLabelStyle
    +set_label_style(style): Self
    +select()
    -_implicit_subquery(): Subquery
    -_scalar_type()
    +as_scalar()
    +exists(): Exists
    +scalar_subquery()
    +label(name)
    +lateral(name): LateralFromClause
    +subquery(name): Subquery
    -_ensure_disambiguated_names(): Self
    +alias(name, flat): Subquery
  }

  class SelectStatementGrouping {
    -_traverse_internals: _TraverseInternalsType
    +element: _SB
    +new_element
    --
    -__init__(element)
    -_ensure_disambiguated_names()
    +get_label_style(): SelectLabelStyle
    +set_label_style(label_style)
    +select_statement(): _SB
    +self_group(against): Self
    -_ungroup(): _SB
    -_generate_fromclause_column_proxies(subquery)
    -_all_selected_columns(): _SelectIterable
    +selected_columns()
    -_from_objects()
  }

  class GenerativeSelect {
    -_order_by_clauses
    -_group_by_clauses
    -_limit_clause
    -_offset_clause
    -_fetch_clause
    -_fetch_clause_options
    -_for_update_arg
    +self
    +value
    +sql_util
    --
    -__init__(_label_style)
    +with_for_update(): Self
    +get_label_style(): SelectLabelStyle
    +set_label_style(style): Self
    -_group_by_clause(): ClauseList
    -_order_by_clause(): ClauseList
    -_offset_or_limit_clause(element, name, type_)
    -_offset_or_limit_clause_asint(clause, attrname): NoReturn
    -_offset_or_limit_clause_asint(clause, attrname)
    -_offset_or_limit_clause_asint(clause, attrname)
    -_limit()
    -_simple_int_clause(clause): bool
    -_offset()
    -_has_row_limiting_clause(): bool
    +limit(limit): Self
    +fetch(count, with_ties, percent): Self
    +offset(offset): Self
    +slice(start, stop): Self
    +order_by(__first): Self
    +group_by(__first): Self
  }

  class CompoundSelectState {
    +hacky_subquery
    +d
    --
    -_label_resolve_dict()
  }

  class _CompoundSelectKeyword {
    +UNION: str
    +UNION_ALL: str
    +EXCEPT: str
    +EXCEPT_ALL: str
    +INTERSECT: str
    +INTERSECT_ALL: str
  }

  class CompoundSelect {
    -_traverse_internals: _TraverseInternalsType
    +selects
    +self
    +select_0
    +new_select
    +self
    +select_0
    +select_0
    +extra_col_iterator
    --
    -__init__(keyword)
    -{class} _create_union(): CompoundSelect
    -{class} _create_union_all(): CompoundSelect
    -{class} _create_except(): CompoundSelect
    -{class} _create_except_all(): CompoundSelect
    -{class} _create_intersect(): CompoundSelect
    -{class} _create_intersect_all(): CompoundSelect
    -_scalar_type()
    +self_group(against): GroupedElement
    +is_derived_from(fromclause): bool
    +set_label_style(style): CompoundSelect
    -_ensure_disambiguated_names(): CompoundSelect
    -_generate_fromclause_column_proxies(subquery)
    -_refresh_for_new_column(column)
    -_all_selected_columns(): _SelectIterable
    +selected_columns()
  }

  class SelectState {
    +default_select_compile_options: CacheableOptions
  }

  class default_select_compile_options {
  }

  class _SelectFromElements {
    -_raw_columns
    -_where_criteria
    -_from_obj
    +seen
    --
    -_iterate_from_elements()
  }

  class _MemoizedSelectEntities {
    -_traverse_internals: _TraverseInternalsType
    -_is_clone_of
    -_raw_columns
    -_setup_joins
    -_with_options
    +c
    +self
    --
    -_clone(): Self
    -{class} _generate_for_statement(select_stmt)
  }

  class Select {
    -_setup_joins
    -_memoized_select_entities
    -_raw_columns
    -_distinct: bool
    -_distinct_on
    -_correlate
    -_correlate_except
    -_where_criteria
    -_having_criteria
    -_from_obj
    -_compile_options: CacheableOptions
    -_traverse_internals: _TraverseInternalsType
    -_cache_key_traversal: _CacheKeyTraversalType
    -_compile_state_factory
    +stmt
    +elem
    +cols
    +meth
    +from_entity
    +clauses
    +meth
    +meth
    +join_target
    +onclause_element
    +onclause_element: NoneType
    +from_
    +join_target
    +onclause_element
    +onclause_element: NoneType
    +all_the_froms
    +new_froms
    +existing_from_obj
    +add_froms
    +newelem
    +woc
    +woc
    +where_criteria
    +having_criteria
    +conv
    +cc
    +meth
    +self
    +extra_col_iterator: proxy_compound_columns
    +prox
    +prox
    --
    -{class} _create_raw_select()
    -__init__()
    -_scalar_type()
    +filter(): Self
    -_filter_by_zero()
    +scalar_subquery()
    +scalar_subquery()
    +scalar_subquery()
    +scalar_subquery()
    +filter_by(): Self
    +column_descriptions(): Any
    +from_statement(statement): ExecutableReturnsRows
    +join(target, onclause): Self
    +outerjoin_from(from_, target, onclause): Self
    +join_from(from_, target, onclause): Self
    +outerjoin(target, onclause): Self
    +get_final_froms()
    +froms()
    +columns_clause_froms()
    +inner_columns(): _SelectIterable
    +is_derived_from(fromclause): bool
    -_copy_internals(clone)
    +replace()
    +get_children()
    +add_columns()
    -_set_entities(entities)
    +column(column)
    +reduce_columns(only_synonyms)
    +with_only_columns(__ent0)
    +with_only_columns(__ent0, __ent1)
    +with_only_columns(__ent0, __ent1, __ent2)
    +with_only_columns(__ent0, __ent1, __ent2, __ent3)
    +with_only_columns(__ent0, __ent1, __ent2, __ent3, __ent4)
    +with_only_columns(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5)
    +with_only_columns(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6)
    +with_only_columns(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6, __ent7)
    +with_only_columns()
    +with_only_columns()
    +whereclause()
    +where(): Self
    +having(): Self
    +distinct(): Self
    +select_from(): Self
    +correlate(): Self
    +correlate_except(): Self
    +selected_columns()
    -_all_selected_columns(): _SelectIterable
    -_ensure_disambiguated_names()
    -_generate_fromclause_column_proxies(subquery)
    -_needs_parens_for_grouping(): bool
    +self_group(against)
    +union(): CompoundSelect
    +union_all(): CompoundSelect
    +except_(): CompoundSelect
    +except_all(): CompoundSelect
    +intersect(): CompoundSelect
    +intersect_all(): CompoundSelect
  }

  class ScalarSelect {
    -_traverse_internals: _TraverseInternalsType
    -_from_objects
    +inherit_cache: bool
    +element: SelectBase
    +c: columns
    --
    -__init__(element)
    -__getattr__(attr): Any
    -__getstate__()
    -__setstate__(state)
    +columns(): NoReturn
    +where(crit): Self
    +self_group(against)
    +self_group(against)
    +self_group(against)
    -_ungroup()
    +correlate(): Self
    +correlate_except(): Self
  }

  class Exists {
    +inherit_cache: bool
    +element
    +s
    +s
    +s
    +s: __argument
    +s
    +element
    +new_element
    +return_value
    +e
    +e
    +e
    +e
    --
    -__init__(__argument)
    -_from_objects()
    -_regroup(fn)
    +select()
    +correlate(): Self
    +correlate_except(): Self
    +select_from(): Self
    +where(): Self
  }

  class TextualSelect {
    -_traverse_internals: _TraverseInternalsType
    +is_text: bool
    +is_select: bool
    --
    -__init__(text, columns, positional)
    -_init(text, columns, positional)
    +selected_columns()
    -_all_selected_columns(): _SelectIterable
    +set_label_style(style): TextualSelect
    -_ensure_disambiguated_names(): TextualSelect
    +bindparams(): Self
    -_generate_fromclause_column_proxies(fromclause)
    -_scalar_type()
  }

  class AnnotatedFromClause {
    +ee
    +ee
    --
    -_copy_internals()
    +c()
  }

  class DMLState {
    -_dict_parameters
    -_multi_parameters
    -_ordered_values
    -_parameter_ordering
    -_primary_table: FromClause
    +isupdate: bool
    +isdelete: bool
    +isinsert: bool
    +statement: UpdateBase
    +froms
    +all_tables
    +primary_table
    +seen
    +consider
    +parameters
    --
    -__init__(statement, compiler)
    +{class} get_entity_description(statement)
    +{class} get_returning_column_descriptions(statement)
    +dml_table(): _DMLTableElement
    +{class} get_plugin_class(statement)
    -{class} _get_multi_crud_kv_pairs(statement, multi_kv_iterator)
    -{class} _get_crud_kv_pairs(statement, kv_iterator, needs_to_be_cacheable)
    -_make_extra_froms(statement)
    -_process_values(statement)
    -_process_select_values(statement)
    -_no_multi_values_supported(statement): NoReturn
    -_cant_mix_formats_error(): NoReturn
  }

  class InsertDMLState {
    +isinsert: bool
    +include_table_with_column_exprs: bool
    +multi_parameters
    --
    -__init__(statement, compiler, disable_implicit_returning)
    -_insert_col_keys()
    -_process_values(statement)
    -_process_multi_values(statement)
  }

  class UpdateDMLState {
    +isupdate: bool
    +include_table_with_column_exprs: bool
    +mt: ef
    +parameters
    --
    -__init__(statement, compiler)
    -_process_ordered_values(statement)
  }

  class DeleteDMLState {
    +isdelete: bool
    --
    -__init__(statement, compiler)
  }

  class UpdateBase {
    -_hints
    +named_with_column: bool
    -_label_style: SelectLabelStyle
    +table: _DMLTableElement
    -_return_defaults_columns
    -_supplemental_returning
    -_returning
    +is_dml: bool
    +supplemental_col_tup
    +selectable
    +selectable
    +meth
    +meth
    --
    -_generate_fromclause_column_proxies(fromclause)
    +params(): NoReturn
    +with_dialect_options(): Self
    +return_defaults(): Self
    +returning(): UpdateBase
    +corresponding_column(column, require_embedded)
    -_all_selected_columns(): _SelectIterable
    +exported_columns()
    +with_hint(text, selectable, dialect_name): Self
    +entity_description()
    +returning_column_descriptions()
  }

  class ValuesBase {
    +select
    -_post_values_clause
    -_values
    -_multi_values
    -_ordered_values
    -_select_names
    -_inline: bool
    +arg
    +multi_kv_generator
    +arg
    +arg
    +kv_generator
    +coerced_arg
    --
    -__init__(table)
    +values(): Self
  }

  class Insert {
    +select: NoneType
    +include_insert_from_select_defaults: bool
    -_sort_by_parameter_order: bool
    +is_insert: bool
    +table: TableClause
    --
    -__init__(table)
    +inline(): Self
    +from_select(names, select, include_defaults): Self
    +returning(__ent0)
    +returning(__ent0, __ent1)
    +returning(__ent0, __ent1, __ent2)
    +returning(__ent0, __ent1, __ent2, __ent3)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6, __ent7)
    +returning()
    +returning()
  }

  class ReturningInsert {
  }

  class DMLWhereBase {
    +table: _DMLTableElement
    -_where_criteria
    +where_criteria
    +from_entity
    +clauses
    --
    +where(): Self
    +filter(): Self
    -_filter_by_zero(): _DMLTableElement
    +filter_by(): Self
    +whereclause()
  }

  class Update {
    +is_update: bool
    +kv_generator
    --
    -__init__(table)
    +ordered_values(): Self
    +inline(): Self
    +returning(__ent0)
    +returning(__ent0, __ent1)
    +returning(__ent0, __ent1, __ent2)
    +returning(__ent0, __ent1, __ent2, __ent3)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6, __ent7)
    +returning()
    +returning()
  }

  class ReturningUpdate {
  }

  class Delete {
    +is_delete: bool
    --
    -__init__(table)
    +returning(__ent0)
    +returning(__ent0, __ent1)
    +returning(__ent0, __ent1, __ent2)
    +returning(__ent0, __ent1, __ent2, __ent3)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6)
    +returning(__ent0, __ent1, __ent2, __ent3, __ent4, __ent5, __ent6, __ent7)
    +returning()
    +returning()
  }

  class ReturningDelete {
  }

  class RoleImpl {
    -_post_coercion: Any
    +got
    +got
    +msg
    +msg
    --
    -_literal_coercion(element)
    -__init__(role_class)
    -_implicit_coercions(element, resolved, argname): Any
    -_raise_for_expected(element, argname, resolved, advice, code, err): NoReturn
  }

  class _Deannotate {
    -_post_coercion(resolved)
  }

  class _StringOnly {
  }

  class _ReturnsStringKey {
    -_implicit_coercions(element, resolved, argname)
    -_literal_coercion(element)
  }

  class _ColumnCoercions {
    +original_element: element
    --
    -_warn_for_scalar_subquery_coercion()
    -_implicit_coercions(element, resolved, argname)
  }

  class _NoTextCoercion {
    -_literal_coercion(element, argname)
  }

  class _CoerceLiterals {
    -_text_coercion(element, argname)
    -_literal_coercion(element, argname)
  }

  class LiteralValueImpl {
    -_implicit_coercions(element, resolved, argname, type_, literal_execute)
    -_literal_coercion(element, argname, type_)
  }

  class _SelectIsNotFrom {
    +advice
    +code: str
    +code: NoneType
    --
    -_raise_for_expected(element, argname, resolved, advice, code, err): NoReturn
  }

  class HasCacheKeyImpl {
    -_implicit_coercions(element, resolved, argname): Any
    -_literal_coercion(element)
  }

  class ExecutableOptionImpl {
    -_implicit_coercions(element, resolved, argname): Any
    -_literal_coercion(element)
  }

  class ExpressionElementImpl {
    +advice: str
    +advice: str
    +advice: NoneType
    --
    -_literal_coercion(element, name, type_, argname, is_crud)
    -_raise_for_expected(element, argname, resolved)
  }

  class BinaryElementImpl {
    +resolved
    --
    -_literal_coercion(element, expr, operator, bindparam_type, argname)
    -_post_coercion(resolved, expr, bindparam_type)
  }

  class InElementImpl {
    +non_literal_expressions
    +element
    +element
    --
    -_implicit_coercions(element, resolved, argname): Any
    -_warn_for_implicit_coercion(elem)
    -_literal_coercion(element, expr, operator)
    -_post_coercion(element, expr, operator)
  }

  class OnClauseImpl {
    -_literal_coercion(element, name, type_, argname, is_crud)
    -_post_coercion(resolved, original_element)
  }

  class WhereHavingImpl {
    -_text_coercion(element, argname)
  }

  class StatementOptionImpl {
    -_text_coercion(element, argname)
  }

  class ColumnArgumentImpl {
  }

  class ColumnArgumentOrKeyImpl {
  }

  class StrAsPlainColumnImpl {
    -_text_coercion(element, argname)
  }

  class ByOfImpl {
    -_text_coercion(element, argname)
  }

  class OrderByImpl {
    -_post_coercion(resolved)
  }

  class GroupByImpl {
    -_implicit_coercions(element, resolved, argname): Any
  }

  class DMLColumnImpl {
    -_post_coercion(element, as_key)
  }

  class ConstExprImpl {
    -_literal_coercion(element, argname)
  }

  class TruncatedLabelImpl {
    -_implicit_coercions(element, resolved, argname): Any
    -_literal_coercion(element, argname)
  }

  class DDLExpressionImpl {
    -_text_coercion(element, argname)
  }

  class DDLConstraintColumnImpl {
  }

  class DDLReferredColumnImpl {
  }

  class LimitOffsetImpl {
    +value
    --
    -_implicit_coercions(element, resolved, argname): Any
    -_literal_coercion(element, name, type_)
  }

  class LabeledColumnExprImpl {
    +new
    --
    -_implicit_coercions(element, resolved, argname): Any
  }

  class ColumnsClauseImpl {
    +advice
    +element
    +guess_is_literal
    --
    -_raise_for_expected(element, argname, resolved, advice)
    -_text_coercion(element, argname)
  }

  class ReturnsRowsImpl {
  }

  class StatementImpl {
    -_post_coercion(resolved, original_element, argname)
    -_implicit_coercions(element, resolved, argname): Any
  }

  class SelectStatementImpl {
    -_implicit_coercions(element, resolved, argname): Any
  }

  class HasCTEImpl {
  }

  class IsCTEImpl {
  }

  class JoinTargetImpl {
    -_literal_coercion(element, argname)
    -_implicit_coercions(element, resolved, argname, legacy): Any
  }

  class FromClauseImpl {
    -_implicit_coercions(element, resolved, argname, explicit_subquery, allow_select): Any
    -_post_coercion(element, deannotate)
  }

  class StrictFromClauseImpl {
    -_implicit_coercions(element, resolved, argname, explicit_subquery, allow_select): Any
  }

  class AnonymizedFromClauseImpl {
    -_post_coercion(element, flat, name)
  }

  class DMLTableImpl {
    -_post_coercion(element)
  }

  class DMLSelectImpl {
    -_implicit_coercions(element, resolved, argname): Any
  }

  class CompoundElementImpl {
    +advice: str
    +advice: str
    +advice: NoneType
    --
    -_raise_for_expected(element, argname, resolved)
  }

  class _NoArg {
    +NO_ARG: int
    --
    -__repr__()
  }

  class _NoneName {
    +NONE_NAME: int
  }

  class _DefaultDescriptionTuple {
    +arg: Any
    +is_scalar
    +is_callable
    +is_sentinel
    --
    -{class} _from_column_default(default): _DefaultDescriptionTuple
  }

  class _EntityNamespace {
    -__getattr__(key)
  }

  class _HasEntityNamespace {
    +entity_namespace(): _EntityNamespace
  }

  class Immutable {
    +unique_params()
    +params()
    -_clone(): _Self
    -_copy_internals()
  }

  class SingletonConstant {
    -_singleton: SingletonConstant
    +obj
    --
    -__new__(): _T
    +proxy_set()
    -{class} _create_singleton()
  }

  class _GenerativeType {
    -_generate(): Self
  }

  class _DialectArgView {
    +opt
    --
    -__init__(obj)
    -_key(key)
    -__getitem__(key)
    -__setitem__(key, value)
    -__delitem__(key)
    -__len__()
    -__iter__()
  }

  class _DialectArgDict {
    -__init__()
    -__len__()
    -__iter__()
    -__getitem__(key)
    -__setitem__(key, value)
    -__delitem__(key)
  }

  class DialectKWArgs {
    +construct_arg_dictionary
    +construct_arg_dictionary
    +d
    +m
    +construct_arg_dictionary
    +d
    --
    +{class} argument_for(dialect_name, argument_name, default)
    +dialect_kwargs()
    +kwargs()
    -_kw_reg_for_dialect_cls(dialect_name)
    +dialect_options()
    -_validate_dialect_kwargs(kwargs)
  }

  class CompileState {
    +plugins
    -_ambiguous_table_name_map
    +plugin_name
    +klass
    +klass
    +klass
    +plugin_name
    +key
    --
    +{class} create_for_statement(statement, compiler)
    -__init__(statement, compiler)
    +{class} get_plugin_class(statement)
    -{class} _get_plugin_class_for_plugin(statement, plugin_name)
    +{class} plugin_for(plugin_name, visit_name)
    +decorate()
  }

  class Generative {
    +skip
    +cls
    +s
    --
    -_generate(): Self
  }

  class InPlaceGenerative {
    +skip
    --
    -_generate()
  }

  class HasCompileState {
    -_compile_state_plugin
    -_attributes
  }

  class _MetaOptions {
    -_cache_attrs
    +o1
    --
    -__add__(other)
    -__getattr__(key): Any
    -__setattr__(key, value)
    -__delattr__(key)
  }

  class Options {
    -_cache_attrs
    +dict_
    +o1
    -_state_dict_const
    +d
    +check_argnames
    +existing_options
    +result
    +local
    +new_options
    +exec_options
    --
    -__init_subclass__()
    -__init__()
    -__add__(other)
    -__eq__(other)
    -__repr__()
    +{class} isinstance(klass): bool
    +add_to_element(name, value)
    -_state_dict_inst()
    -_state_dict()
    +{class} safe_merge(other)
    +{class} from_execution_options(key, attrs, exec_options, statement_exec_options)
    -__getattr__(key): Any
    -__setattr__(key, value)
    -__delattr__(key)
  }

  class CacheableOptions {
    -_gen_cache_key_inst(anon_map, bindparams)
    -_gen_cache_key(anon_map, bindparams)
    -_generate_cache_key()
  }

  class ExecutableOption {
    +c
    --
    -_clone()
  }

  class Executable {
    +supports_execution: bool
    -_execution_options: _ImmutableExecuteOptions
    -_with_options
    -_with_context_options
    -_compile_options
    +is_select: bool
    +is_update: bool
    +is_insert: bool
    +is_text: bool
    +is_delete: bool
    +is_dml: bool
    -__visit_name__: str
    --
    -_compile_w_cache(dialect)
    -_execute_on_connection(connection, distilled_params, execution_options)
    -_execute_on_scalar(connection, distilled_params, execution_options): Any
    -_all_selected_columns()
    -_effective_plugin_target(): str
    +options(): Self
    -_set_compile_options(compile_options): Self
    -_update_compile_options(options): Self
    -_add_context_option(callable_, cache_args): Self
    +execution_options(): Self
    +execution_options(): Self
    +execution_options(): Self
    +get_execution_options(): _ExecuteOptions
  }

  class SchemaEventTarget {
    +dispatch
    --
    -_set_parent(parent)
    -_set_parent_with_dispatch(parent)
  }

  class SchemaVisitor {
  }

  class _SentinelDefaultCharacterization {
    +NONE: str
    +UNKNOWN: str
    +CLIENTSIDE: str
    +SENTINEL_DEFAULT: str
    +SERVERSIDE: str
    +IDENTITY: str
    +SEQUENCE: str
  }

  class _SentinelColumnCharacterization {
    +columns
    +is_explicit: bool
    +is_autoinc: bool
    +default_characterization: _SentinelDefaultCharacterization
  }

  class _ColumnMetrics {
    +column: _COL_co
    +pi
    +pi
    +colset
    +expanded_proxy_set
    --
    -__init__(collection, col)
    +get_expanded_proxy_set()
    +dispose(collection)
    +embedded(target_set): bool
  }

  class ColumnCollection {
    -_collection
    -_index
    -_proxy_index
    -_colset
    +elements
    +cols
    +cols
    +collection
    +colkey: _COLKEY
    +colkey
    +colkey: key
    +l
    +pi
    +eps
    +target_set
    +pi
    +selected_metrics: current_metrics
    +current_intersection
    +selected_intersection
    +selected_metrics: current_metrics
    +selected_intersection: current_intersection
    +selected_col_distance
    +current_col_distance
    +selected_metrics: current_metrics
    +selected_intersection: current_intersection
    --
    -__init__(columns)
    -__clause_element__(): ClauseList
    -_initial_populate(iter_)
    -_all_columns()
    +keys()
    +values()
    +items()
    -__bool__(): bool
    -__len__(): int
    -__iter__()
    -__getitem__(key): _COL_co
    -__getitem__(key)
    -__getitem__(key)
    -__getitem__(key)
    -__getattr__(key): _COL_co
    -__contains__(key): bool
    +compare(other): bool
    -__eq__(other): bool
    +get(key, default)
    -__str__(): str
    -__setitem__(key, value): NoReturn
    -__delitem__(key): NoReturn
    -__setattr__(key, obj): NoReturn
    +clear(): NoReturn
    +remove(column)
    +update(iter_): NoReturn
    -_populate_separate_keys(iter_)
    +add(column, key)
    -__getstate__()
    -__setstate__(state)
    +contains_column(col): bool
    +as_readonly()
    -_init_proxy_index()
    +corresponding_column(column, require_embedded)
  }

  class DedupeColumnCollection {
    +named_column
    +key
    +existing
    +l
    +cols
    +replace_col
    +remove_col
    +remove_col
    +other
    +new_cols
    +replaced: bool
    +replaced: bool
    --
    +add(column, key)
    -_append_new_column(key, named_column)
    -_populate_separate_keys(iter_)
    +extend(iter_)
    +remove(column)
    +replace(column, extra_remove)
  }

  class ReadOnlyColumnCollection {
    +parent
    --
    -__init__(collection)
    -__getstate__()
    -__setstate__(state)
    +add(column, key): Any
    +extend(elements): NoReturn
    +remove(item): NoReturn
  }

  class ColumnSet {
    +l
    --
    +contains_column(col)
    +extend(cols)
    -__eq__(other)
    -__hash__()
  }

  class _NoValueInList {
    +NO_VALUE_IN_LIST: int
  }

  class _LiteralProcessorType {
    -__call__(value): str
  }

  class _BindProcessorType {
    -__call__(value): Any
  }

  class _ResultProcessorType {
    -__call__(value)
  }

  class _SentinelProcessorType {
    -__call__(value)
  }

  class _BaseTypeMemoDict {
    +impl
    +result
  }

  class _TypeMemoDict {
    +literal
    +bind
    +sentinel
    +custom
  }

  class _ComparatorFactory {
    -__call__(expr)
  }

  class TypeEngine {
    +render_bind_cast: bool
    +render_literal_cast: bool
  }

  class TypeEngineMixin {
    -_static_cache_key()
    +adapt(cls): _TE
    +adapt(cls)
    +adapt(cls)
    +dialect_impl(dialect)
  }

  class ExternalType {
    +cache_ok
    +cache_ok
    +subtype
    --
    -_static_cache_key()
  }

  class UserDefinedType {
    +ensure_kwarg: str
    --
    +coerce_compared_value(op, value)
  }

  class Emulated {
    +native: bool
    --
    +adapt_to_emulated(impltype)
    +adapt(cls): _TE
    +adapt(cls)
    +adapt(cls)
  }

  class NativeForEmulated {
    +impltype
    --
    +{class} adapt_native_to_emulated(impl)
    +{class} adapt_emulated_to_native(impl)
  }

  class TypeDecorator {
    +impl
    +coerce_to_is_types
    --
    +impl_instance()
    -__init__()
  }

  class Variant {
    -__init__()
  }

  class _CrudParams {
    +single_params: _CrudParamSequence
    +all_multi_params
    +is_default_metavalue_only: bool
    +use_insertmanyvalues: bool
    +use_sentinel_columns
  }

  class _multiparam_column {
    -__init__(original, index)
    +compare(other)
    -_copy_internals(other)
    -__eq__(other)
    -_default_description_tuple(): _DefaultDescriptionTuple
    -_onupdate_description_tuple(): _DefaultDescriptionTuple
  }

  class LambdaOptions {
    +enable_tracking: bool
    +track_closure_variables: bool
    +track_on
    +global_track_bound_values: bool
    +track_bound_values: bool
    +lambda_cache
  }

  class LambdaElement {
    -_transforms
    -_resolved_bindparams
    +parent_lambda
    +closure_cache_key
    +role
    -_rec
    +fn: _AnyLambdaType
    +tracker_key
    +apply_propagate_attrs: self
    +rec
    +propagate_attrs
    +lambda_cache
    +lambda_cache: _closure_per_cache_key
    +tracker_key
    +fn
    +closure
    +tracker
    +bindparams
    +bindparams
    +parent_closure_cache_key
    +parent_closure_cache_key
    +cache_key
    +anon_map
    +cache_key
    +cache_key
    +rec
    +rec: NoneType
    +cache_key
    +rec: NoneType
    +cache_key
    +rec: NoneType
    +key
    +rec
    +rec
    +rec
    +lambda_element
    +rec
    +tracker_instrumented_fn
    +lambda_element
    +bindparam_lookup
    +bind
    +expr
    +expr
    +expr
    +expr
    +cache_key
    +parent
    +parent_closure_cache_key
    +cache_key
    +parent
    --
    -__repr__()
    -__init__(fn, role, opts, apply_propagate_attrs)
    -_retrieve_tracker_rec(fn, apply_propagate_attrs, opts)
    -__getattr__(key)
    -_is_sequence()
    -_select_iterable()
    -_from_objects()
    -_param_dict()
    -_setup_binds_for_tracked_expr(expr)
    +replace()
    -_copy_internals(clone, deferred_copy_internals)
    -_resolved()
    -_gen_cache_key(anon_map, bindparams)
    -_invoke_user_fn(fn): ClauseElement
  }

  class DeferredLambdaElement {
    +tracker_fn
    +expr
    +expr
    +expr
    +expr
    --
    -__init__(fn, role, opts, lambda_args)
    -_invoke_user_fn(fn)
    -_resolve_with_args(): ClauseElement
    -_copy_internals(clone, deferred_copy_internals)
  }

  class StatementLambdaElement {
    +opts
    --
    -__init__(fn, role, opts, apply_propagate_attrs)
    -__add__(other): StatementLambdaElement
    +add_criteria(other, enable_tracking, track_on, track_closure_variables, track_bound_values): StatementLambdaElement
    -_execute_on_connection(connection, distilled_params, execution_options)
    -_proxied(): Any
    -_with_options()
    -_effective_plugin_target()
    -_execution_options()
    -_all_selected_columns()
    +is_select()
    +is_update()
    +is_insert()
    +is_text()
    +is_delete()
    +is_dml()
    +spoil(): NullLambdaStatement
  }

  class NullLambdaStatement {
    +statement
    +statement
    --
    -__init__(statement)
    -__getattr__(key)
    -__add__(other)
    +add_criteria(other)
    -_execute_on_connection(connection, distilled_params, execution_options)
  }

  class LinkedLambdaElement {
    +parent_lambda: StatementLambdaElement
    --
    -__init__(fn, parent_lambda, opts)
    -_invoke_user_fn(fn)
  }

  class AnalyzedCode {
    -_fns
    +analyzed: AnalyzedCode
    +analyzed
    +closure
    +enable_tracking
    +track_on
    +track_closure_variables
    +build_py_wrappers
    +bindparam_trackers
    +track_bound_values
    +build_py_wrappers
    +closure
    +track_bound_values
    +track_closure_variables
    +bindparam_trackers
    +closure_trackers
    +analyzed_function
    +closure_trackers
    +is_clause_element
    +element
    +insp
    +wrapper
    +wrapper
    +obj
    +obj
    +obj
    +contents
    +element: cell_contents
    +is_clause_element: bool
    +is_clause_element: bool
    +element
    +insp
    +elem
    +closure_index
    +variable_name
    --
    +{class} get(fn, lambda_element, lambda_kw)
    -__init__(fn, lambda_element, opts)
    -_init_track_on(track_on)
    -_init_globals(fn)
    -_init_closure(fn)
    -_setup_additional_closure_trackers(fn, lambda_element, opts)
    -{class} _roll_down_to_literal(element)
    -_bound_parameter_getter_func_globals(name)
    +extract_parameter_value(tracker_instrumented_fn, result)
    -_bound_parameter_getter_func_closure(name, closure_index)
    +extract_parameter_value(tracker_instrumented_fn, result)
    -_cache_key_getter_track_on(idx, elem)
    +get(opts, anon_map, bindparams)
    +get(opts, anon_map, bindparams)
    +get(opts, anon_map, bindparams)
    -_cache_key_getter_closure_variable(fn, variable_name, idx, cell_contents, use_clause_element, use_inspect)
    +get(opts, anon_map, bindparams)
    +get(opts, anon_map, bindparams)
    +get(opts, anon_map, bindparams)
    -_raise_for_uncacheable_closure_variable(variable_name, fn, from_)
    -_cache_key_getter_tracked_literal(fn, pytracker)
  }

  class NonAnalyzedFunction {
    +closure_bindparams
    +bindparam_trackers
    +is_sequence: bool
    +expr: ClauseElement
    --
    -__init__(expr)
    +expected_expr(): ClauseElement
  }

  class AnalyzedFunction {
    +closure_bindparams
    +expected_expr
    +bindparam_trackers
    +analyzed_code
    +fn
    +closure_pywrappers
    +build_py_wrappers
    +tracker_instrumented_fn: fn
    +track_closure_variables
    +closure
    +new_closure
    +new_closure
    +new_globals
    +value
    +bind
    +value
    +bind
    +tracker_instrumented_fn
    +parent_lambda
    +expr
    +argrange
    +code: str
    +vars_
    +closure
    +func
    --
    -__init__(analyzed_code, lambda_element, apply_propagate_attrs, fn)
    -_instrument_and_run_function(lambda_element)
    -_coerce_expression(lambda_element, apply_propagate_attrs)
    -_rewrite_code_obj(f, cell_values, globals_)
  }

  class PyWrapper {
    +elem
    +value
    +name
    +elem
    +elem
    +param
    +param
    +getter
    +element
    +param
    +to_evaluate
    +name
    +param
    +to_evaluate
    +elem
    +elem
    +elem
    +bind_paths
    +bind_path_key
    +getter
    +elem
    +value
    +rolled_down_value
    +wrapper
    --
    -__init__(fn, name, to_evaluate, closure_index, getter, track_bound_values)
    -__call__()
    +operate(op)
    +reverse_operate(op, other)
    -_extract_bound_parameters(starting_point, result_list)
    -_py_wrapper_literal(expr, operator)
    -__bool__()
    -__getattribute__(key)
    -__iter__()
    -__getitem__(key)
    -_add_getter(key, getter_fn)
  }

  class SchemaConst {
    +RETAIN_SCHEMA: int
    +BLANK_SCHEMA: int
    +NULL_UNSPECIFIED: int
  }

  class SchemaItem {
    +create_drop_stringify_dialect: str
    +spwd
    --
    -_init_items()
    -__repr__(): str
    +info(): _InfoType
    -_schema_item_copy(schema_item): _SI
  }

  class HasConditionalDDL {
    -_ddl_if
    --
    +ddl_if(dialect, callable_, state): Self
  }

  class HasSchemaAttr {
    +schema
  }

  class Table {
    -_columns
    -_sentinel_column
    +constraints
    +indexes
    -_traverse_internals: _TraverseInternalsType
    +schema
    +schema
    +schema: NoneType
    +keep_existing
    +extend_existing
    +msg: str
    +must_exist
    +key
    +table
    +table
    +quote_schema: quote_schema
    +insp
    +autoload_with
    +autoload
    +autoload_replace
    +schema
    +extend_existing
    +keep_existing
    +include_columns
    +resolve_fks
    +exclude_columns
    +exclude_columns
    +exclude_columns
    +all_names
    +sentinel_is_explicit: bool
    +sentinel_is_autoinc: bool
    +the_sentinel
    +explicit_sentinel_col
    +the_sentinel
    +sentinel_is_explicit: bool
    +autoinc_col
    +sentinel_is_autoinc: bool
    +the_sentinel
    +sentinel_is_autoinc: bool
    +default_characterization
    +the_sentinel_zero
    +autoinc_col: NoneType
    +sentinel_is_autoinc: bool
    +the_sentinel: NoneType
    +default_characterization
    +default_characterization
    +default_characterization
    +autoinc_col: NoneType
    +sentinel_is_autoinc: bool
    +the_sentinel: NoneType
    +default_characterization
    +default_characterization
    +default_characterization
    +the_sentinel
    +default_characterization
    +metadata: parent
    +name
    +actual_schema
    +actual_schema
    +actual_schema
    +actual_schema: schema
    +key
    +args
    +table
    +referred_schema
    +fk_constraint_schema
    +fk_constraint_schema
    --
    +primary_key(): PrimaryKeyConstraint
    +foreign_keys()
    +columns()
    +exported_columns()
    +c()
    -_gen_cache_key(anon_map, bindparams)
    -__new__(): Any
    -{class} _new(): Any
    -__init__(name, metadata)
    -_autoload(metadata, autoload_with, include_columns, exclude_columns, resolve_fks, _extend_on, _reflect_info)
    -_sorted_constraints()
    +foreign_key_constraints()
    -_init_existing()
    -_extra_kwargs()
    -_init_collections()
    -_reset_exported()
    -_autoincrement_column()
    -_sentinel_column_characteristics(): _SentinelColumnCharacterization
    +autoincrement_column()
    +key(): str
    -__repr__(): str
    -__str__(): str
    +add_is_dependent_on(table)
    +append_column(column, replace_existing)
    +append_constraint(constraint)
    -_set_parent(parent)
    +create(bind, checkfirst)
    +drop(bind, checkfirst)
    +tometadata(metadata, schema, referred_schema_fn, name): Table
    +to_metadata(metadata, schema, referred_schema_fn, name): Table
  }

  class Column {
    +inherit_cache: bool
    +key: str
    +server_default
    +l_args
    +name
    +coltype
    +type_
    +name
    +udn: nullable
    +default
    +onupdate
    +server_default
    +server_default
    +server_onupdate
    +server_onupdate
    +table: Table
    +constraints
    +foreign_keys
    +index
    +unique
    +computed
    +identity
    +kwarg
    +table: parent
    +existing
    +extra_remove: NoneType
    +existing_col: NoneType
    +conflicts_on: str
    +existing_col
    +conflicts_on: str
    +conflicts_on: str
    +existing_col
    +extra_remove
    +conflicts_on: str
    +fk_keys
    +args
    +column_kwargs
    +dialect_options
    +server_default
    +server_onupdate
    +server_default: NoneType
    +server_onupdate: NoneType
    +type_
    +type_
    +c
    +type_
    +type_
    +new_default
    +new_server_default
    +new_server_default
    +new_server_onupdate
    +new_server_onupdate
    +new_onupdate
    +new_const
    +new_fk
    +fk
    +c
    --
    -__init__(__name_pos, __type_pos)
    -_set_type(type_)
    -_default_description_tuple(): _DefaultDescriptionTuple
    -_onupdate_description_tuple(): _DefaultDescriptionTuple
    -_gen_static_annotations_cache_key(): bool
    -_extra_kwargs()
    -__str__(): str
    +references(column): bool
    +append_foreign_key(fk)
    -__repr__(): str
    -_set_parent(parent)
    -_setup_on_memoized_fks(fn)
    -_on_table_attach(fn)
    +copy()
    -_copy()
    -_merge(other)
    -_make_proxy(selectable, name, key, name_is_truncatable, compound_select_cols)
  }

  class ForeignKey {
    +parent
    -_table_column
    +fk
    +tname: table_name
    +target_fullname
    +m
    +tname
    +colname: NoneType
    +colname
    +tname
    +schema
    +schema: NoneType
    +parenttable
    +tablekey
    +schema
    +tablekey
    +parent
    +key
    +key: colname
    +key: colname
    -_column
    +table
    +fk_key
    +fk_key
    +table
    --
    -__init__(column, _constraint, use_alter, name, onupdate, ondelete, deferrable, initially, link_to_name, match, info, comment, _unresolvable)
    -__repr__(): str
    +copy(): ForeignKey
    -_copy(): ForeignKey
    -_get_colspec(schema, table_name, _is_copy): str
    -_referred_schema()
    -_table_key(): Any
    +references(table): bool
    +get_referent(table)
    -_column_tokens()
    -_resolve_col_tokens()
    -_link_to_col_by_colstring(parenttable, table, colname)
    -_set_target_column(column)
    +set_type()
    +column()
    -_resolve_column()
    -_resolve_column()
    -_resolve_column()
    -_set_parent(parent)
    -_set_remote_table(table)
    -_remove_from_metadata(metadata)
    -_set_table(column, table)
  }

  class DefaultGenerator {
    +is_sequence: bool
    +is_identity: bool
    +is_server_default: bool
    +is_clause_element: bool
    +is_callable: bool
    +is_scalar: bool
    +has_arg: bool
    +is_sentinel: bool
    +column
    --
    -__init__(for_update)
    -_set_parent(parent)
    -_copy(): DefaultGenerator
    -_execute_on_connection(connection, distilled_params, execution_options): Any
    -_execute_on_scalar(connection, distilled_params, execution_options): Any
  }

  class ColumnDefault {
    +arg: Any
    +cls: CallableColumnDefault
    +cls: ColumnElementColumnDefault
    +cls: ScalarElementColumnDefault
    --
    -__new__(arg, for_update): CallableColumnDefault
    -__new__(arg, for_update): ColumnElementColumnDefault
    -__new__(arg, for_update): ColumnDefault
    -__new__(arg, for_update): ColumnDefault
    -__repr__(): str
  }

  class ScalarElementColumnDefault {
    +is_scalar: bool
    +has_arg: bool
    --
    -__init__(arg, for_update)
    -_copy(): ScalarElementColumnDefault
  }

  class _InsertSentinelColumnDefault {
    +is_sentinel: bool
    +for_update: bool
    +arg: NoneType
    +col
    --
    -__new__(): _InsertSentinelColumnDefault
    -__init__()
    -_set_parent(parent)
    -_copy(): _InsertSentinelColumnDefault
  }

  class ColumnElementColumnDefault {
    +is_clause_element: bool
    +has_arg: bool
    +arg: _SQLExprDefault
    +sqltypes
    --
    -__init__(arg, for_update)
    -_copy(): ColumnElementColumnDefault
    -_arg_is_typed(): bool
  }

  class _CallableColumnDefaultProtocol {
    -__call__(context): Any
  }

  class CallableColumnDefault {
    +is_callable: bool
    +arg: _CallableColumnDefaultProtocol
    +has_arg: bool
    +argspec
    +defaulted
    +positionals
    --
    -__init__(arg, for_update)
    -_copy(): CallableColumnDefault
    -_maybe_wrap_callable(fn): _CallableColumnDefaultProtocol
  }

  class IdentityOptions {
    -__init__(start, increment, minvalue, maxvalue, nominvalue, nomaxvalue, cycle, cache, order)
    -_increment_is_negative(): bool
  }

  class Sequence {
    +is_sequence: bool
    +column
    +data_type
    +schema: NoneType
    +schema
    +column: parent
    --
    -__init__(name, start, increment, minvalue, maxvalue, nominvalue, nomaxvalue, cycle, schema, cache, order, data_type, optional, quote, metadata, quote_schema, for_update)
    +next_value()
    -_set_parent(parent)
    -_copy(): Sequence
    -_set_table(column, table)
    -_set_metadata(metadata)
    +create(bind, checkfirst)
    +drop(bind, checkfirst)
    -_not_a_column_expr(): NoReturn
  }

  class FetchedValue {
    +is_server_default: bool
    +reflected: bool
    +has_argument: bool
    +is_clause_element: bool
    +is_identity: bool
    +column
    +n
    +column: parent
    --
    -__init__(for_update)
    -_as_for_update(for_update): FetchedValue
    -_copy(): FetchedValue
    -_clone(for_update): Self
    -_set_parent(parent)
    -__repr__(): str
  }

  class DefaultClause {
    +has_argument: bool
    --
    -__init__(arg, for_update, _reflected)
    -_copy(): DefaultClause
    -__repr__(): str
  }

  class Constraint {
    -_creation_order: int
    -_column_flag: bool
    --
    -__init__(name, deferrable, initially, info, comment, _create_rule, _type_bound)
    -_should_create_for_compiler(compiler): bool
    +table(): Table
    -_set_parent(parent)
    +copy(): Self
    -_copy(): Self
  }

  class ColumnCollectionMixin {
    -_columns
    -_pending_colargs
    +processed_expressions
    +col_objs
    +cols_w_table
    +cols_wo_table
    +has_string_cols
    +columns: cols_w_table
    +tables
    +table
    +others
    +result
    --
    -_set_parent_with_dispatch(parent)
    -__init__()
    -_check_attach(evt)
    -_col_attached(table)
    +columns()
    +c()
    -_col_expressions(parent)
    -_set_parent(parent)
  }

  class ColumnCollectionConstraint {
    +columns
    +constraint_kwargs
    +dialect_options
    +c
    --
    -__init__()
    -_set_parent(parent)
    -__contains__(x): bool
    +copy(): ColumnCollectionConstraint
    -_copy(): ColumnCollectionConstraint
    +contains_column(col): bool
    -__iter__()
    -__len__(): int
  }

  class CheckConstraint {
    +columns
    +sqltext
    +sqltext
    +c
    --
    -__init__(sqltext, name, deferrable, initially, table, info, _create_rule, _autoattach, _type_bound)
    +is_column_level(): bool
    +copy(): CheckConstraint
    -_copy(): CheckConstraint
  }

  class ForeignKeyConstraint {
    +columns
    +elements
    +table_keys
    +table: parent
    +fkc
    --
    -__init__(columns, refcolumns, name, onupdate, ondelete, deferrable, initially, use_alter, link_to_name, match, table, info, comment)
    -_append_element(column, fk)
    -_elements()
    -_referred_schema()
    +referred_table(): Table
    -_validate_dest_table(table)
    +column_keys()
    -_col_description(): str
    -_set_parent(parent)
    +copy(): ForeignKeyConstraint
    -_copy(): ForeignKeyConstraint
  }

  class PrimaryKeyConstraint {
    +table: parent
    +table_pks
    +autoinc
    +col
    +autoinc: NoneType
    +autoinc: col
    --
    -__init__()
    -_set_parent(parent)
    -_reload(columns)
    -_replace(col)
    +columns_autoinc_first()
    -_autoincrement_column()
    -_validate_autoinc(autoinc_true): bool
  }

  class UniqueConstraint {
  }

  class Index {
    +table
    +expressions
    -_table_bound_expressions
    +table: NoneType
    +table: _table
    +table: parent
    +expressions
    +col_expressions
    +exprs
    +exprs
    --
    -__init__(name)
    -_set_parent(parent)
    +create(bind, checkfirst)
    +drop(bind, checkfirst)
    -__repr__(): str
  }

  class _NamingSchemaTD {
    +fk: _NamingSchemaDirective
    +pk: _NamingSchemaDirective
    +ix: _NamingSchemaDirective
    +ck: _NamingSchemaDirective
    +uq: _NamingSchemaDirective
  }

  class MetaData {
    +tables
    +table_or_key
    +key
    +key
    +removed
    +reflect_opts: Any
    +schema
    +kind
    +available
    +kind
    +available_w_schema
    +available_w_schema: available
    +current
    +load
    +load
    +missing
    +s
    +load
    --
    -__init__(schema, quote_schema, naming_convention, info)
    -__repr__(): str
    -__contains__(table_or_key): bool
    -_add_table(name, schema, table)
    -_remove_table(name, schema)
    -__getstate__()
    -__setstate__(state)
    +clear()
    +remove(table)
    +sorted_tables()
    +reflect(bind, schema, views, only, extend_existing, autoload_replace, resolve_fks)
    +create_all(bind, tables, checkfirst)
    +drop_all(bind, tables, checkfirst)
  }

  class Computed {
    +column
    +sqltext
    +g
    --
    -__init__(sqltext, persisted)
    -_set_parent(parent)
    -_as_for_update(for_update): FetchedValue
    +copy(): Computed
    -_copy(): Computed
  }

  class Identity {
    +is_identity: bool
    +i
    --
    -__init__(always, on_null, start, increment, minvalue, maxvalue, nominvalue, nomaxvalue, cycle, cache, order)
    -_set_parent(parent)
    -_as_for_update(for_update): FetchedValue
    +copy(): Identity
    -_copy(): Identity
  }

  class prefix_anon_map {
    +anonymous_counter
    +value
    --
    -__missing__(key): str
  }

  class cache_anon_map {
    +idself
    +s_val
    +id_
    +val
    --
    +get_anon(object_)
    -__missing__(key): str
  }

}

package "venv2.lib.python3.12.site-packages.wrapt" {
  class _ImportHookLoader {
    +module
    --
    +load_module(fullname)
  }

  class _ImportHookChainedLoader {
    -__init__(loader)
    -_self_set_loader(module)
  }

  class UNDEFINED {
  }

  class ImportHookFinder {
    +loader
    +spec
    +loader
    --
    -__init__()
    +find_module(fullname, path)
    +find_spec(fullname, path, target)
  }

  class AttributeWrapper {
    +value
    --
    -__init__(attribute, factory, args, kwargs)
    -__get__(instance, owner)
    -__set__(instance, value)
    -__delete__(instance)
  }

  class _ObjectProxyMethods {
    -__module__()
    -__module__(value)
    -__doc__()
    -__doc__(value)
    -__dict__()
    -__weakref__()
  }

  class _ObjectProxyMetaType {
    -__new__(name, bases, dictionary)
  }

  class ObjectProxy {
    -__init__(wrapped)
    -__self_setattr__(name, value)
    -__name__()
    -__name__(value)
    -__class__()
    -__class__(value)
    -__dir__()
    -__str__()
    -__bytes__()
    -__repr__()
    -__format__(format_spec)
    -__reversed__()
    -__round__(ndigits)
    -__mro_entries__(bases)
    -__lt__(other)
    -__le__(other)
    -__eq__(other)
    -__ne__(other)
    -__gt__(other)
    -__ge__(other)
    -__hash__()
    -__nonzero__()
    -__bool__()
    -__setattr__(name, value)
    -__getattr__(name)
    -__delattr__(name)
    -__add__(other)
    -__sub__(other)
    -__mul__(other)
    -__div__(other)
    -__truediv__(other)
    -__floordiv__(other)
    -__mod__(other)
    -__divmod__(other)
    -__pow__(other)
    -__lshift__(other)
    -__rshift__(other)
    -__and__(other)
    -__xor__(other)
    -__or__(other)
    -__radd__(other)
    -__rsub__(other)
    -__rmul__(other)
    -__rdiv__(other)
    -__rtruediv__(other)
    -__rfloordiv__(other)
    -__rmod__(other)
    -__rdivmod__(other)
    -__rpow__(other)
    -__rlshift__(other)
    -__rrshift__(other)
    -__rand__(other)
    -__rxor__(other)
    -__ror__(other)
    -__iadd__(other)
    -__isub__(other)
    -__imul__(other)
    -__idiv__(other)
    -__itruediv__(other)
    -__ifloordiv__(other)
    -__imod__(other)
    -__ipow__(other)
    -__ilshift__(other)
    -__irshift__(other)
    -__iand__(other)
    -__ixor__(other)
    -__ior__(other)
    -__neg__()
    -__pos__()
    -__abs__()
    -__invert__()
    -__int__()
    -__long__()
    -__float__()
    -__complex__()
    -__oct__()
    -__hex__()
    -__index__()
    -__len__()
    -__contains__(value)
    -__getitem__(key)
    -__setitem__(key, value)
    -__delitem__(key)
    -__getslice__(i, j)
    -__setslice__(i, j, value)
    -__delslice__(i, j)
    -__enter__()
    -__exit__()
    -__iter__()
    -__copy__()
    -__deepcopy__(memo)
    -__reduce__()
    -__reduce_ex__(protocol)
  }

  class CallableObjectProxy {
    -__call__()
    -_unpack_self()
  }

  class PartialCallableObjectProxy {
    -__init__()
    -_unpack_self()
    -__call__()
    -_unpack_self()
  }

  class _FunctionWrapperBase {
    +binder
    +descriptor
    +descriptor
    +instance
    --
    -__init__(wrapped, instance, wrapper, enabled, binding, parent, owner)
    -__get__(instance, owner)
    -__call__()
    -_unpack_self()
    -__set_name__(owner, name)
    -__instancecheck__(instance)
    -__subclasscheck__(subclass)
  }

  class BoundFunctionWrapper {
    +wrapped
    +wrapped
    +instance
    --
    -__call__()
    -_unpack_self()
  }

  class FunctionWrapper {
    +binding: NoneType
    +binding
    +binding: str
    +binding: str
    +binding: str
    +binding: str
    +binding: str
    +binding: str
    +binding: str
    +binding: str
    +binding: str
    --
    -__init__(wrapped, wrapper, enabled)
  }

  class WeakFunctionProxy {
    +instance
    +function
    --
    -__init__(wrapped, callback)
    -__call__()
    -_unpack_self()
  }

  class _AdapterFunctionCode {
    -__init__(wrapped_code, adapter_code)
    +co_argcount()
    +co_code()
    +co_flags()
    +co_kwonlyargcount()
    +co_varnames()
  }

  class _AdapterFunctionSurrogate {
    +func_code: __code__
    +func_defaults: __defaults__
    --
    -__init__(wrapped, adapter)
    -__code__()
    -__defaults__()
    -__kwdefaults__()
    -__signature__()
  }

  class _BoundAdapterWrapper {
    +im_func: __func__
    --
    -__func__()
    -__signature__()
  }

  class AdapterWrapper {
    +adapter
    +func_code: __code__
    +func_defaults: __defaults__
    --
    -__init__()
    -__code__()
    -__defaults__()
    -__kwdefaults__()
    -__signature__()
  }

  class AdapterFactory {
    -__call__(wrapped)
  }

  class DelegatedAdapterFactory {
    -__init__(factory)
    -__call__(wrapped)
  }

  class _PartialDecorator {
    -__enter__()
    -__exit__()
  }

  class _FinalDecorator {
    -__enter__()
    -__exit__()
  }

}

package "venv2.lib.python3.12.site-packages.pip" {
  class PipImportRedirectingFinder {
    +spec
    --
    +{class} find_spec(fullname, path, target)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal" {
  class Configuration {
    +orig_key: key
    +key
    +key
    +orig_key: key
    +key
    +retval
    +config_files
    +parser
    +parser
    +items
    +parser
    +locale_encoding
    +normalized
    +key
    +name
    +env_config_file
    +config_files
    +should_load_user_config
    +parsers
    +file_parser_tuple
    --
    -__init__(isolated, load_only)
    +load()
    +get_file_to_edit()
    +items()
    +get_value(key): Any
    +set_value(key, value)
    +unset_value(key)
    +save()
    -_ensure_have_load_only()
    -_dictionary()
    -_load_config_files()
    -_load_file(variant, fname): RawConfigParser
    -_construct_parser(fname): RawConfigParser
    -_load_environment_vars()
    -_normalized_keys(section, items)
    +get_environ_vars()
    +iter_config_files()
    +get_values_in_config(variant)
    -_get_parser_to_modify()
    -_mark_as_modified(fname, parser)
    -__repr__(): str
  }

  class Cache {
    +key_parts
    +hashed
    +parts
    +can_not_cache
    +path
    --
    -__init__(cache_dir)
    -_get_cache_path_parts(link)
    -_get_candidates(link, canonical_package_name)
    +get_path_for_link(link): str
    +get(link, package_name, supported_tags): Link
  }

  class SimpleWheelCache {
    +parts
    +candidates
    +canonical_package_name
    +wheel
    --
    -__init__(cache_dir)
    +get_path_for_link(link): str
    +get(link, package_name, supported_tags): Link
  }

  class EphemWheelCache {
    -__init__()
  }

  class CacheEntry {
    +origin_direct_url_path
    --
    -__init__(link, persistent)
  }

  class WheelCache {
    +cache_entry
    +retval
    +retval
    +origin_path
    +origin
    --
    -__init__(cache_dir)
    +get_path_for_link(link): str
    +get_ephem_path_for_link(link): str
    +get(link, package_name, supported_tags): Link
    +get_cache_entry(link, package_name, supported_tags)
    +{static} record_download_origin(download_info)
  }

  class PipError {
  }

  class DiagnosticPipError {
    +reference: str
    +reference
    +colour
    --
    -__init__()
    -__repr__(): str
    -__rich_console__(console, options): RenderResult
  }

  class ConfigurationError {
  }

  class InstallationError {
  }

  class MissingPyProjectBuildRequires {
    +reference: str
    --
    -__init__()
  }

  class InvalidPyProjectBuildRequires {
    +reference: str
    --
    -__init__()
  }

  class NoneMetadataError {
    -__init__(dist, metadata_name)
    -__str__(): str
  }

  class UserInstallationInvalid {
    -__str__(): str
  }

  class InvalidSchemeCombination {
    +before
    --
    -__str__(): str
  }

  class DistributionNotFound {
  }

  class RequirementsFileParseError {
  }

  class BestVersionAlreadyInstalled {
  }

  class BadCommand {
  }

  class CommandError {
  }

  class PreviousBuildDirError {
  }

  class NetworkConnectionError {
    -__init__(error_msg, response, request)
    -__str__(): str
  }

  class InvalidWheelFilename {
  }

  class UnsupportedWheel {
  }

  class InvalidWheel {
    -__init__(location, name)
    -__str__(): str
  }

  class MetadataInconsistent {
    -__init__(ireq, field, f_val, m_val)
    -__str__(): str
  }

  class MetadataInvalid {
    -__init__(ireq, error)
    -__str__(): str
  }

  class InstallationSubprocessError {
    +reference: str
    +output_prompt
    +output_prompt
    --
    -__init__()
    -__str__(): str
  }

  class MetadataGenerationFailed {
    +reference: str
    --
    -__init__()
    -__str__(): str
  }

  class HashErrors {
    +lines
    --
    -__init__()
    +append(error)
    -__str__(): str
    -__bool__(): bool
  }

  class HashError {
    +req
    +head: str
    +order: int
    --
    +body(): str
    -__str__(): str
    -_requirement_name(): str
  }

  class VcsHashUnsupported {
    +order: int
    +head: str
  }

  class DirectoryUrlHashUnsupported {
    +order: int
    +head: str
  }

  class HashMissing {
    +order: int
    +head: str
    +package: NoneType
    +package
    --
    -__init__(gotten_hash)
    +body(): str
  }

  class HashUnpinned {
    +order: int
    +head: str
  }

  class HashMismatch {
    +order: int
    +head: str
    +lines
    +prefix
    --
    -__init__(allowed, gots)
    +body(): str
    -_hash_comparison(): str
    +hash_then_or()
  }

  class UnsupportedPythonVersion {
  }

  class ConfigurationFileCouldNotBeLoaded {
    +message_part
    +message_part
    --
    -__init__(reason, fname, error)
    -__str__(): str
  }

  class ExternallyManagedEnvironment {
    +reference: str
    +context
    +context
    +category
    +lang
    +parser
    +section
    +exc_info
    --
    -__init__(error)
    -{static} _iter_externally_managed_error_keys()
    +{class} from_config(config)
  }

  class UninstallMissingRecord {
    +reference: str
    +installer
    +dep
    +hint
    +hint
    --
    -__init__()
  }

  class LegacyDistutilsInstall {
    +reference: str
    --
    -__init__()
  }

  class InvalidInstalledPackage {
    +reference: str
    +installed_location
    +invalid_type: str
    +invalid_type: str
    --
    -__init__()
  }

  class IncompleteDownloadError {
    +reference: str
    +download_status
    +retry_status
    +hint: str
    +retry_status: str
    +hint: str
    +message
    --
    -__init__(link, received, expected)
  }

  class ResolutionTooDeepError {
    +reference: str
    --
    -__init__()
  }

  class SelfCheckState {
    +last_check
    +time_since_last_check
    +state
    +text
    --
    -__init__(cache_dir)
    +key(): str
    +get(current_time)
    +set(pypi_version, current_time)
  }

  class UpgradePrompt {
    +old: str
    +new: str
    +pip_cmd
    +pip_cmd
    +notice: str
    --
    -__rich__(): Group
  }

  class _Prefix {
    +scheme
    --
    -__init__(path)
  }

  class BuildEnvironment {
    +temp_dir
    +system_sites
    +path
    +old_path
    +pythonpath
    +missing
    +conflicting
    +env
    +req
    +dist
    +installed_req_str
    +installed_req_str
    +prefix
    +args
    +formats
    +index_urls
    --
    -__init__()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    +check_requirements(reqs)
    +install_requirements(finder, requirements, prefix_as_string)
    -{static} _install_requirements(finder, requirements, prefix)
  }

  class NoOpBuildEnvironment {
    -__init__()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    +cleanup()
    +install_requirements(finder, requirements, prefix_as_string)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.network" {
  class Credentials {
    +url: str
    +username: str
    +password: str
  }

  class KeyRingBaseProvider {
    +has_keyring: bool
    --
    +get_auth_info(url, username)
    +save_auth_info(url, username, password)
  }

  class KeyRingNullProvider {
    +has_keyring: bool
    --
    +get_auth_info(url, username)
    +save_auth_info(url, username, password)
  }

  class KeyRingPythonProvider {
    +has_keyring: bool
    +cred
    +password
    --
    -__init__()
    +get_auth_info(url, username)
    +save_auth_info(url, username, password)
  }

  class KeyRingCliProvider {
    +has_keyring: bool
    +password
    +cmd
    +env
    +res
    +env
    --
    -__init__(cmd)
    +get_auth_info(url, username)
    +save_auth_info(url, username, password)
    -_get_password(service_name, username)
    -_set_password(service_name, username, password)
  }

  class MultiDomainBasicAuth {
    +KEYRING_DISABLED: bool
    +url
    +parsed_url
    +candidates
    +index
    +parsed_index
    +candidate
    +index_url
    +index_info
    +netrc_auth
    +kr_auth
    +username
    +password
    +req
    +username
    +auth
    +password
    +parsed
    +save: bool
    +req
    +new_resp
    +creds
    --
    -__init__(prompting, index_urls, keyring_provider)
    +keyring_provider(): KeyRingBaseProvider
    +keyring_provider(provider)
    +use_keyring(): bool
    -_get_keyring_auth(url, username)
    -_get_index_url(url)
    -_get_new_credentials(original_url): AuthInfo
    -_get_url_and_credentials(original_url)
    -__call__(req): Request
    -_prompt_for_password(netloc)
    -_should_save_password_to_keyring(): bool
    +handle_401(resp): Response
    +warn_on_401(resp)
    +save_credentials(resp)
  }

  class PipXmlrpcTransport {
    +index_parts
    +parts
    +url
    +headers
    +response
    --
    -__init__(index_url, session, use_datetime)
    +request(host, handler, request_body, verbose)
  }

  class Downloader {
    +resp
    +total_length
    +content_type
    +filename
    +filepath
    +bytes_received
    +chunks
    +bytes_received: int
    +etag_or_last_modified
    +attempts_left
    +resume_resp
    +must_restart
    +bytes_received: int
    +total_length
    +etag_or_last_modified
    --
    -__init__(session, progress_bar, resume_retries)
    -__call__(link, location)
    -_process_response(resp, link, content_file, bytes_received, total_length): int
    -_write_chunks_to_file(chunks, content_file): int
    -_attempt_resume(resp, link, content_file, total_length, bytes_received)
    -_reset_download_state(resp, content_file)
  }

  class BatchDownloader {
    -__init__(session, progress_bar, resume_retries)
    -__call__(links, location)
  }

  class LocalFSAdapter {
    +pathname
    +resp
    +stats
    +modified
    +content_type
    --
    +send(request, stream, timeout, verify, cert, proxies): Response
    +close()
  }

  class _SSLContextAdapterMixin {
    -__init__()
    +init_poolmanager(connections, maxsize, block)
  }

  class HTTPAdapter {
  }

  class CacheControlAdapter {
  }

  class InsecureHTTPAdapter {
    +cert_verify(conn, url, verify, cert)
  }

  class InsecureCacheControlAdapter {
    +cert_verify(conn, url, verify, cert)
  }

  class PipSession {
    +timeout
    +retries
    +insecure_adapter
    +secure_adapter
    +secure_adapter
    +msg
    +parsed
    +origin_protocol
    +addr
    +network
    --
    -__init__()
    +update_index_urls(new_index_urls)
    +add_trusted_host(host, source, suppress_logging)
    +iter_secure_origins()
    +is_secure_origin(location): bool
    +request(method, url): Response
  }

  class SafeFileCache {
    +hashed
    +parts
    +metadata_path
    +body_path
    +mode
    +path
    +path
    +metadata_path
    +body_path
    +path
    --
    -__init__(directory)
    -_get_cache_path(name): str
    +get(key)
    -_write(path, data)
    +set(key, value, expires)
    +delete(key)
    +get_body(key)
    +set_body(key, body)
  }

  class HTTPRangeRequestUnsupported {
  }

  class LazyZipOverHTTP {
    +head
    +download_size
    +stop
    +start
    +pos
    +end
    +headers
    +i
    +start
    +end
    +i
    +left
    +right
    +response
    --
    -__init__(url, session, chunk_size)
    +mode(): str
    +name(): str
    +seekable(): bool
    +close()
    +closed(): bool
    +read(size): bytes
    +readable(): bool
    +seek(offset, whence): int
    +tell(): int
    +truncate(size): int
    +writable(): bool
    -__enter__()
    -__exit__()
    -_stay()
    -_check_zip()
    -_stream_response(start, end, base_headers): Response
    -_merge(start, end, left, right)
    -_download(start, end)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.utils" {
  class BrokenStdoutLoggingError {
  }

  class IndentingFormatter {
    +default_time_format: str
    +formatted
    +message_start
    +formatted
    +prefix: str
    +prefix
    +formatted
    --
    -__init__()
    +get_message_start(formatted, levelno): str
    +format(record): str
  }

  class IndentedRenderable {
    +renderable: RenderableType
    +indent: int
    +segments
    +lines
    --
    -__rich_console__(console, options): RenderResult
  }

  class PipConsole {
    +on_broken_pipe()
  }

  class RichPipStreamHandler {
    +KEYWORDS
    +style
    +renderable: RenderableType
    +message
    +renderable
    +style
    +style
    --
    -__init__(console)
    +emit(record)
    +handleError(record)
  }

  class BetterRotatingFileHandler {
    -_open(): TextIOWrapper
  }

  class MaxLevelFilter {
    -__init__(level)
    +filter(record): bool
  }

  class ExcludeLoggerFilter {
    +filter(record): bool
  }

  class StreamWrapper {
    +orig_stream: TextIO
    +ret
    --
    +{class} from_stream(orig_stream)
    +encoding(): str
  }

  class HiddenText {
    +secret: str
    +redacted: str
    --
    -__repr__(): str
    -__str__(): str
    -__eq__(other): bool
  }

  class ConfiguredBuildBackendHookCaller {
    +cs
    +cs
    +cs
    +cs
    +cs
    +cs
    +cs
    +cs
    --
    -__init__(config_holder, source_dir, build_backend, backend_path, runner, python_executable)
    +build_wheel(wheel_directory, config_settings, metadata_directory): str
    +build_sdist(sdist_directory, config_settings): str
    +build_editable(wheel_directory, config_settings, metadata_directory): str
    +get_requires_for_build_wheel(config_settings)
    +get_requires_for_build_sdist(config_settings)
    +get_requires_for_build_editable(config_settings)
    +prepare_metadata_for_build_wheel(metadata_directory, config_settings, _allow_fallback): str
    +prepare_metadata_for_build_editable(metadata_directory, config_settings, _allow_fallback)
  }

  class PipDeprecationWarning {
  }

  class TempDirectoryTypeRegistry {
    -__init__()
    +set_delete(kind, value)
    +get_delete(kind): bool
  }

  class _Default {
  }

  class TempDirectory {
    +delete: bool
    +delete: NoneType
    +path
    +delete
    +delete
    +delete: bool
    +path
    +errors
    +formatted_exc
    +formatted_exc
    --
    -__init__(path, delete, kind, globally_managed, ignore_cleanup_errors)
    +path(): str
    -__repr__(): str
    -__enter__(): _T
    -__exit__(exc, value, tb)
    -_create(kind): str
    +cleanup()
    +onerror(path, exc_val)
  }

  class AdjacentTempDirectory {
    +LEADING_CHARS: str
    +new_name
    +new_name
    +path
    +path
    +path
    --
    -__init__(original, delete)
    -{class} _generate_names(name)
    -_create(kind): str
  }

  class Hashes {
    +allowed
    +new
    +gots
    --
    -__init__(hashes)
    -__and__(other)
    +digest_count(): int
    +is_hash_allowed(hash_name, hex_digest): bool
    +check_against_chunks(chunks)
    -_raise(gots)
    +check_against_file(file)
    +check_against_path(path)
    +has_one_of(hashes): bool
    -__bool__(): bool
    -__eq__(other): bool
    -__hash__(): int
  }

  class MissingHashes {
    -__init__()
    -_raise(gots)
  }

  class VerboseLogger {
    +verbose(msg)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.models" {
  class LinkHash {
    +name: str
    +value: str
    +match
    --
    -__post_init__()
    +{class} find_hash_url_fragment(url)
    +as_dict()
    +as_hashes(): Hashes
    +is_hash_allowed(hashes): bool
  }

  class MetadataFile {
    +hashes
    --
    -__post_init__()
  }

  class Link {
    +url
    +link_hash
    +hashes_from_link
    +file_url
    +url
    +pyrequire
    +yanked_reason
    +hashes
    +metadata_info
    +metadata_info
    +metadata_file_data
    +metadata_file_data
    +metadata_file_data: NoneType
    +yanked_reason: str
    +yanked_reason: NoneType
    +href
    +url
    +pyrequire
    +yanked_reason
    +metadata_info
    +metadata_info
    +metadata_file_data
    +metadata_file_data: NoneType
    +metadata_file_data
    +metadata_file_data
    +rp
    +rp: str
    +path
    +name
    +name
    +match
    +project_name
    +match
    +metadata_url
    --
    -__init__(url, comes_from, requires_python, yanked_reason, metadata_file_data, cache_link_parsing, hashes)
    +{class} from_json(file_data, page_url)
    +{class} from_element(anchor_attribs, page_url, base_url)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
    -__lt__(other): bool
    +url(): str
    +redacted_url(): str
    +filename(): str
    +file_path(): str
    +scheme(): str
    +netloc(): str
    +path(): str
    +splitext()
    +ext(): str
    +url_without_fragment(): str
    -_egg_fragment()
    +subdirectory_fragment()
    +metadata_link()
    +as_hashes(): Hashes
    +hash()
    +hash_name()
    +show_url(): str
    +is_file(): bool
    +is_existing_dir(): bool
    +is_wheel(): bool
    +is_vcs(): bool
    +is_yanked(): bool
    +has_hash(): bool
    +is_hash_allowed(hashes): bool
  }

  class _CleanResult {
    +parsed: urllib.parse.SplitResult
    +query
    +subdirectory: str
    +hashes
  }

  class SelectionPreferences {
    +ignore_requires_python: bool
    --
    -__init__(allow_yanked, allow_all_prereleases, format_control, prefer_binary, ignore_requires_python)
  }

  class DirectUrlValidationError {
  }

  class VcsInfo {
    +name: ClassVar
    +vcs: str
    +commit_id: str
    +requested_revision
    --
    -{class} _from_dict(d)
    -_to_dict()
  }

  class ArchiveInfo {
    +name: str
    --
    -__init__(hash, hashes)
    +hash()
    +hash(value)
    -{class} _from_dict(d)
    -_to_dict()
  }

  class DirInfo {
    +name: ClassVar
    +editable: bool
    --
    -{class} _from_dict(d)
    -_to_dict()
  }

  class DirectUrl {
    +url: str
    +info: InfoType
    +subdirectory
    +purl
    +netloc
    +surl
    +res
    --
    -_remove_auth_from_netloc(netloc): str
    +redacted_url(): str
    +validate()
    +{class} from_dict(d)
    +to_dict()
    +{class} from_json(s)
    +to_json(): str
    +is_local_editable(): bool
  }

  class PackageIndex {
    -__init__(url, file_storage_domain)
    -_url_for_path(path): str
  }

  class TargetPython {
    +py_version_info
    +py_version_info
    +py_version
    +display_version: NoneType
    +display_version
    +key_values
    +py_version_info
    +version: NoneType
    +version
    +tags
    --
    -__init__(platforms, py_version_info, abis, implementation)
    +format_given(): str
    +get_sorted_tags()
    +get_unsorted_tags()
  }

  class PackageVcs {
    +type: str
    +url
    +requested_revision
    +commit_id: str
    +subdirectory
  }

  class PackageDirectory {
    +path: str
    +editable
    +subdirectory
  }

  class PackageArchive {
    +url
    +hashes
    +subdirectory
  }

  class PackageSdist {
    +name: str
    +url
    +hashes
  }

  class PackageWheel {
    +name: str
    +url
    +hashes
  }

  class Package {
    +name: str
    +version
    +vcs
    +directory
    +archive
    +sdist
    +wheels
    +base_dir
    +dist
    +download_info
    +package
    +link
    --
    +{class} from_install_requirement(ireq, base_dir): Self
  }

  class Pylock {
    +lock_version: str
    +created_by: str
    +packages
    --
    +as_toml(): str
    +{class} from_install_requirements(install_requirements, base_dir): Self
  }

  class SearchScope {
    +find_links
    +index_urls
    +no_index: bool
    +built_find_links
    +new_link
    +link: new_link
    +parsed
    +lines
    +redacted_index_urls
    +redacted_index_url
    +purl
    +loc
    +loc
    --
    +{class} create(find_links, index_urls, no_index)
    +get_formatted_locations(): str
    +get_index_urls_locations(project_name)
    +mkurl_pypi_url(): str
  }

  class InstallationCandidate {
    +name: str
    +version: Version
    +link: Link
    --
    -__init__(name, version, link)
    -__str__(): str
  }

  class FormatControl {
    +no_binary
    +only_binary
    +new
    +name
    +result
    --
    -__init__(no_binary, only_binary)
    -__eq__(other): bool
    -__repr__(): str
    +{static} handle_mutual_excludes(target, other)
    +get_allowed_formats(canonical_name)
    +disallow_binaries()
  }

  class InstallationReport {
    +res
    --
    -__init__(install_requirements)
    -{class} _install_req_to_dict(ireq)
    +to_dict()
  }

  class Scheme {
    +platlib: str
    +purelib: str
    +headers: str
    +scripts: str
    +data: str
  }

  class Wheel {
    +legacy_wheel_file_re
    +wheel_info
    +legacy_wheel_info
    +pyversions
    +abis
    +plats
    +legacy_wheel_info
    +build_tag
    +match
    +build_tag_groups
    --
    -__init__(filename)
    +build_tag(): BuildTag
    +get_formatted_file_tags()
    +support_index_min(tags): int
    +find_most_preferred_tag(tags, tag_to_priority): int
    +supported(tags): bool
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.cli" {
  class PipOption {
    +TYPES
    +TYPE_CHECKER
  }

  class SessionCommandMixin {
    +index_urls
    +url
    +urls
    +cache_dir
    +ssl_context
    +ssl_context: NoneType
    +session
    --
    -__init__()
    -{class} _get_index_urls(options)
    +get_default_session(options)
    -_build_session(options, retries, timeout)
  }

  class IndexGroupCommand {
    +session
    --
    +handle_pip_version_check(options)
  }

  class PrettyHelpFormatter {
    +opts
    +metavar
    +msg
    +label: str
    +label: str
    +description
    +description
    +description
    +description
    +new_lines
    --
    -__init__()
    +format_option_strings(option): str
    -_format_option_strings(option, mvarfmt, optsep): str
    +format_heading(heading): str
    +format_usage(usage): str
    +format_description(description): str
    +format_epilog(epilog): str
    +indent_lines(text, indent): str
  }

  class UpdatingDefaultsHelpFormatter {
    +default_values: NoneType
    +default_values
    +help_text
    +default_values
    +default_values
    +help_text
    --
    +expand_default(option): str
  }

  class CustomOptionParser {
    +group
    +res
    --
    +insert_option_group(idx): optparse.OptionGroup
    +option_list_all()
  }

  class ConfigOptionParser {
    +override_order
    +section_items
    +late_eval
    +option
    +val
    +val
    +val
    +val
    +val
    +opt_str
    +val
    +args
    +kwargs
    +val
    +defaults
    +default
    +opt_str
    --
    -__init__()
    +check_default(option, key, val): Any
    -_get_ordered_configuration_items()
    -_update_defaults(defaults)
    +get_default_values(): optparse.Values
    +error(msg): NoReturn
  }

  class CommandContextMixIn {
    -__init__()
    +main_context()
    +enter_context(context_provider): _T
  }

  class SpinnerInterface {
    +spin()
    +finish(final_status)
  }

  class InteractiveSpinner {
    +file
    +backup
    --
    -__init__(message, file, spin_chars, min_update_interval_seconds)
    -_write(status)
    +spin()
    +finish(final_status)
  }

  class NonInteractiveSpinner {
    -__init__(message, min_update_interval_seconds)
    -_update(status)
    +spin()
    +finish(final_status)
  }

  class RateLimiter {
    +now
    +delta
    --
    -__init__(min_update_interval_seconds)
    +ready(): bool
    +reset()
  }

  class Command {
    +usage: str
    +ignore_require_venv: bool
    +optgroup_name
    +gen_opts
    +status
    +level_number
    +always_enabled_features
    --
    -__init__(name, summary, isolated)
    +add_options()
    +handle_pip_version_check(options)
    +run(options, args): int
    -_run_wrapper(level_number, options, args): int
    -_inner_run(): int
    +parse_args(args)
    +main(args): int
    -_main(args): int
  }

  class RequirementCommand {
    +temp_build_dir_path
    +legacy_resolver: bool
    +resolver_variant
    +lazy_wheel
    +legacy_resolver: bool
    +lazy_wheel: bool
    +make_install_req
    +resolver_variant
    +requirements
    +req_to_add
    +req_to_add
    +req_to_add
    +req_to_add
    +req_to_add
    +opts
    +search_scope
    +locations
    +link_collector
    +selection_prefs
    --
    -__init__()
    +{static} determine_resolver_variant(): str
    +{class} make_requirement_preparer(temp_build_dir, options, build_tracker, session, finder, use_user_site, download_dir, verbosity): RequirementPreparer
    +{class} make_resolver(preparer, finder, options, wheel_cache, use_user_site, ignore_installed, ignore_requires_python, force_reinstall, upgrade_strategy, use_pep517, py_version_info): BaseResolver
    +get_requirements(args, options, finder, session)
    +{static} trace_basic_info()
    -_build_package_finder(options, session, target_python, ignore_requires_python): PackageFinder
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.operations" {
  class PackageDetails {
    +version: Version
    +dependencies
  }

  class _EditableInfo {
    +requirement: str
    +comments
  }

  class FrozenRequirement {
    +name: str
    +req: str
    +editable: bool
    +comments
    +editable
    +comments
    +direct_url
    +req
    +req
    +req
    +req
    --
    +canonical_name(): NormalizedName
    +{class} from_dist(dist)
    -__str__(): str
  }

  class File {
    +path: str
    +content_type
    --
    -__post_init__()
  }

  class RequirementPreparer {
    +message: str
    +information
    +message: str
    +information
    +comes_from
    +comes_from
    +metadata_link
    +metadata_file
    +metadata_contents
    +metadata_dist
    +wheel
    +name
    +url
    +temp_dir
    +links_to_fully_download
    +batch_download
    +req
    +file_path: NoneType
    +hashes
    +file_path
    +metadata_dist
    +reqs
    +hashes
    +file_path
    +partially_downloaded_reqs
    +link
    +hashes
    +hashes: NoneType
    +link
    +local_file: NoneType
    +local_file
    +file_path
    +local_file
    +hash
    +dist
    +link
    +download_location
    +download_path
    +dist
    --
    -__init__(build_dir, download_dir, src_dir, build_isolation, check_build_deps, build_tracker, session, progress_bar, finder, require_hashes, use_user_site, lazy_wheel, verbosity, legacy_resolver, resume_retries)
    -_log_preparing_link(req)
    -_ensure_link_req_src_dir(req, parallel_builds)
    -_get_linked_req_hashes(req): Hashes
    -_fetch_metadata_only(req)
    -_fetch_metadata_using_link_data_attr(req)
    -_fetch_metadata_using_lazy_wheel(link)
    -_complete_partial_requirements(partially_downloaded_reqs, parallel_builds)
    +prepare_linked_requirement(req, parallel_builds): BaseDistribution
    +prepare_linked_requirements_more(reqs, parallel_builds)
    -_prepare_linked_requirement(req, parallel_builds): BaseDistribution
    +save_linked_requirement(req)
    +prepare_editable_requirement(req): BaseDistribution
    +prepare_installed_requirement(req, skip_reason): BaseDistribution
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.operations.install" {
  class File {
    +src_record_path
    +dest_path: str
    +changed: bool
    --
    +save()
  }

  class ZipBackedFile {
    +zipinfo
    +blocksize
    --
    -__init__(src_record_path, dest_path, zip_file)
    -_getinfo(): ZipInfo
    +save()
  }

  class ScriptFile {
    -__init__(file)
    +save()
  }

  class MissingCallableSuffix {
    -__init__(entry_point)
  }

  class PipScriptMaker {
    +make(specification, options)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.operations.build" {
  class TrackerId {
  }

  class BuildTracker {
    +hashed
    +entry_path
    +contents
    +message
    +tracker_id
    --
    -__init__(root)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    -_entry_path(key): str
    +add(req, key)
    +remove(req, key)
    +cleanup()
    +track(req, key)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.req" {
  class InstallRequirement {
    +link
    +markers
    +s
    +s
    +s: str
    +location
    +location: str
    +comes_from
    +comes_from
    +attributes
    +names
    +state
    +runner
    +specifiers
    +extras_requested
    +good_hashes
    +link
    +link
    +link: NoneType
    +s
    +comes_from
    +comes_from
    +comes_from
    +dir_name: str
    +dir_name
    +actual_build_dir
    +delete_arg
    +op: str
    +op: str
    +metadata_name
    +existing_dist
    +version_compatible
    +setup_py
    +setup_cfg
    +pyproject_toml_data
    +details
    +version
    +vcs_backend
    +hidden_url
    +dist
    +uninstalled_pathset
    +name
    +name
    +path
    +name
    +create_archive: bool
    +archive_name
    +archive_path
    +response
    +create_archive: bool
    +dest_file
    +zip_output
    +dir
    +dir_arcname
    +zipdir
    +file_arcname
    +filename
    +scheme
    --
    -__init__(req, comes_from, editable, link, markers, use_pep517, isolated)
    -__str__(): str
    -__repr__(): str
    +format_debug(): str
    +name()
    +supports_pyproject_editable(): bool
    +specifier(): SpecifierSet
    +is_direct(): bool
    +is_pinned(): bool
    +match_markers(extras_requested): bool
    +has_hash_options(): bool
    +hashes(trust_internet): Hashes
    +from_path()
    +ensure_build_location(build_dir, autodelete, parallel_builds): str
    -_set_requirement()
    +warn_on_mismatching_name()
    +check_if_exists(use_user_site)
    +is_wheel(): bool
    +is_wheel_from_cache(): bool
    +unpacked_source_directory(): str
    +setup_py_path(): str
    +setup_cfg_path(): str
    +pyproject_toml_path(): str
    +load_pyproject_toml()
    +isolated_editable_sanity_check()
    +prepare_metadata()
    +metadata(): Any
    +get_dist(): BaseDistribution
    +assert_source_matches_version()
    +ensure_has_source_dir(parent_dir, autodelete, parallel_builds)
    +needs_unpacked_archive(archive_source)
    +ensure_pristine_source_checkout()
    +update_editable()
    +uninstall(auto_confirm, verbose)
    -_get_archive_name(path, parentdir, rootdir): str
    -_clean_zip_name(prefix): str
    +archive(build_dir)
    +install(global_options, root, home, prefix, warn_script_location, use_user_site, pycompile)
  }

  class RequirementSet {
    +requirements
    +requirements
    +format_string: str
    +project_name
    +project_name
    +project_name
    --
    -__init__(check_supported_wheels)
    -__str__(): str
    -__repr__(): str
    +add_unnamed_requirement(install_req)
    +add_named_requirement(install_req)
    +has_requirement(name): bool
    +get_requirement(name): InstallRequirement
    +all_requirements()
    +requirements_to_install()
  }

  class StashedUninstallPathSet {
    +save_dir: TempDirectory
    +save_dir
    +path
    +save_dir: NoneType
    +save_dir
    +head
    +save_dir
    +relpath
    +path_is_dir
    +new_path
    +new_path
    --
    -__init__()
    -_get_directory_stash(path): str
    -_get_file_stash(path): str
    +stash(path): str
    +commit()
    +rollback()
    +can_rollback(): bool
  }

  class UninstallPathSet {
    +path
    +pth_file
    +dist_name_version
    +moved
    +for_rename
    +will_remove
    +will_skip
    +dist_location
    +info_location
    +normalized_dist_location
    +paths_to_remove
    +develop_egg_link
    +setuptools_flat_installation
    +installed_files
    +namespace_packages
    +namespaces
    +namespaces
    +path
    +easy_install_egg
    +easy_install_pth
    +link_pointer
    +normalized_link_pointer
    +easy_install_pth
    +bin_dir
    +bin_dir
    --
    -__init__(dist)
    -_permitted(path): bool
    +add(path)
    +add_pth(pth_file, entry)
    +remove(auto_confirm, verbose)
    -_allowed_to_proceed(verbose): bool
    -_display(paths)
    +rollback()
    +commit()
    +{class} from_dist(dist)
    +iter_scripts_to_remove(bin_dir)
  }

  class UninstallPthEntries {
    +entry
    +entry
    +lines
    +endline: str
    +endline: str
    --
    -__init__(pth_file)
    +add(entry)
    +remove()
    +rollback(): bool
  }

  class InstallationResult {
    +name: str
  }

  class ParsedRequirement {
    +requirement: str
    +is_editable: bool
    +comes_from: str
    +constraint: bool
    +options
    +line_source
  }

  class ParsedLine {
    +filename: str
    +lineno: int
    +args: str
    +opts: Values
    +constraint: bool
    --
    +is_editable(): bool
    +requirement()
  }

  class RequirementsFileParser {
    +req_path
    +nested_constraint: bool
    +req_path
    +nested_constraint: bool
    +req_path
    +req_path
    +parsed_files
    +initial_file
    +tail
    +new_parsed_files
    +lines_enum
    +msg
    --
    -__init__(session, line_parser)
    +parse(filename, constraint)
    -_parse_and_recurse(filename, constraint, parsed_files_stack)
    -_parse_file(filename, constraint)
  }

  class OptionParsingError {
    -__init__(msg)
  }

  class RequirementParts {
    +requirement
    +link
    +markers
    +extras
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.resolution" {
  class BaseResolver {
    +resolve(root_reqs, check_supported_wheels): RequirementSet
    +get_installation_order(req_set)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.resolution.legacy" {
  class Resolver {
    +py_version_info
    +py_version_info
    +requirement_set
    +discovered_reqs
    +hash_errors
    +wheel
    +tags
    +existing_req
    +existing_req: NoneType
    +has_conflicting_requirement
    +does_not_satisfy_constraint
    +upgrade
    +best_candidate
    +link
    +reason
    +msg
    +cache_entry
    +skip_reason
    +dist
    +should_modify
    +dist
    +more_reqs
    +sub_install_req
    +parent_req_name
    +missing_requested
    +available_requested
    +order
    +ordered_reqs
    --
    -__init__(preparer, finder, wheel_cache, make_install_req, use_user_site, ignore_dependencies, ignore_installed, ignore_requires_python, force_reinstall, upgrade_strategy, py_version_info)
    +resolve(root_reqs, check_supported_wheels): RequirementSet
    -_add_requirement_to_set(requirement_set, install_req, parent_req_name, extras_requested)
    -_is_upgrade_allowed(req): bool
    -_set_req_to_reinstall(req)
    -_check_skip_installed(req_to_install)
    -_find_requirement_link(req)
    -_populate_link(req)
    -_get_dist_for(req): BaseDistribution
    -_resolve_one(requirement_set, req_to_install)
    +add_req(extras_requested)
    +get_installation_order(req_set)
    +schedule()
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.resolution.resolvelib" {
  class PipProvider {
    +backtrack_identifiers
    +current_backtrack_causes
    +has_information: bool
    +has_information: bool
    +direct: bool
    +ireqs
    +direct
    +operators
    +pinned
    +upper_bounded
    +unfree
    +requested_order
    +user_order
    +constraint
    +with_requires
    --
    -__init__(factory, constraints, ignore_dependencies, upgrade_strategy, user_requested)
    +identify(requirement_or_candidate): str
    +narrow_requirement_selection(identifiers, resolutions, candidates, information, backtrack_causes)
    +get_preference(identifier, resolutions, candidates, information, backtrack_causes)
    +find_matches(identifier, requirements, incompatibilities)
    -_eligible_for_upgrade(): bool
    +{static} is_satisfied_by(candidate): bool
    +get_dependencies(candidate)
  }

  class FoundCandidates {
    +infos
    +iterator
    +iterator
    +iterator
    --
    -__init__(get_infos, installed, prefers_installed, incompatible_ids)
    -__getitem__(index): Any
    -__iter__()
    -__len__(): int
    -__bool__(): bool
  }

  class PipReporter {
    +count
    +message
    +msg: str
    --
    -__init__()
    +rejecting_candidate(criterion, candidate)
  }

  class PipDebuggingReporter {
    +starting()
    +starting_round(index)
    +ending_round(index, state)
    +ending(state)
    +adding_requirement(requirement, parent)
    +rejecting_candidate(criterion, candidate)
    +pinning(candidate)
  }

  class ConflictCause {
    +requirement: RequiresPythonRequirement
    +parent: Candidate
  }

  class CollectedRootRequirements {
    +requirements
    +constraints
    +user_requested
  }

  class Factory {
    +env
    +wheel
    +msg
    +cache_key
    +candidate
    +candidate
    +base
    +base
    +base
    +template
    +name
    +extras
    +installed_dist
    +candidate
    +result
    +icans
    +all_yanked
    +pinned
    +func
    +base_cand
    +candidate
    +explicit_candidates
    +ireqs
    +parsed_requirement
    +incompat_ids
    +cand
    +collected
    +problem
    +name
    +reqs
    +template
    +ireq
    +dist
    +message
    +version
    +specifier
    +message
    +message
    +package
    +specifier
    +req_disp
    +req_disp
    +cands
    +skipped_by_requires_python
    +versions_set
    +yanked_versions_set
    +is_yanked
    +versions
    +yanked_versions
    +requires_python_causes
    +ireq
    +triggers
    +trigger
    +trigger
    +info
    +info: str
    +msg
    +msg: str
    +relevant_constraints
    +msg
    +msg
    +msg
    +msg
    +spec
    +msg
    --
    -__init__(finder, preparer, make_install_req, wheel_cache, use_user_site, force_reinstall, ignore_installed, ignore_requires_python, py_version_info)
    +force_reinstall(): bool
    -_fail_if_link_is_unsupported_wheel(link)
    -_make_extras_candidate(base, extras): ExtrasCandidate
    -_make_candidate_from_dist(dist, extras, template): Candidate
    -_make_candidate_from_link(link, extras, template, name, version)
    -_make_base_candidate_from_link(link, template, name, version)
    -_iter_found_candidates(ireqs, specifier, hashes, prefers_installed, incompatible_ids)
    -_get_installed_candidate()
    +iter_index_candidate_infos()
    +is_pinned(): bool
    -_iter_explicit_candidates_from_base(base_requirements, extras)
    -_iter_candidates_from_constraints(identifier, constraint, template)
    +find_candidates(identifier, requirements, incompatibilities, constraint, prefers_installed, is_satisfied_by)
    -_make_requirements_from_install_req(ireq, requested_extras)
    +collect_root_requirements(root_ireqs): CollectedRootRequirements
    +make_requirement_from_candidate(candidate): ExplicitRequirement
    +make_requirements_from_spec(specifier, comes_from, requested_extras)
    +make_requires_python_requirement(specifier)
    +get_wheel_cache_entry(link, name)
    +get_dist_to_uninstall(candidate)
    -_report_requires_python_error(causes): UnsupportedPythonVersion
    -_report_single_requirement_conflict(req, parent): DistributionNotFound
    +get_installation_error(e, constraints): InstallationError
    +text_join(): str
    +describe_trigger(): str
  }

  class ExplicitRequirement {
    -__init__(candidate)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
    +project_name(): NormalizedName
    +name(): str
    +format_for_error(): str
    +get_candidate_lookup(): CandidateLookup
    +is_satisfied_by(candidate): bool
  }

  class SpecifierRequirement {
    +parts
    +spec
    --
    -__init__(ireq)
    -_equal(): str
    -__str__(): str
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +project_name(): NormalizedName
    +name(): str
    +format_for_error(): str
    +get_candidate_lookup(): CandidateLookup
    +is_satisfied_by(candidate): bool
  }

  class SpecifierWithoutExtrasRequirement {
    -__init__(ireq)
    -_equal(): str
    -__eq__(other): bool
    -__hash__(): int
  }

  class RequiresPythonRequirement {
    -__init__(specifier, match)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
    +project_name(): NormalizedName
    +name(): str
    +format_for_error(): str
    +get_candidate_lookup(): CandidateLookup
    +is_satisfied_by(candidate): bool
  }

  class UnsatisfiableRequirement {
    -__init__(name)
    -__str__(): str
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +project_name(): NormalizedName
    +name(): str
    +format_for_error(): str
    +get_candidate_lookup(): CandidateLookup
    +is_satisfied_by(candidate): bool
  }

  class Resolver {
    +collected
    +provider
    +reporter
    +reporter
    +resolver
    +limit_how_complex_resolution_can_be: int
    +result
    +error
    +req_set
    +ireq
    +req
    +installed_dist
    +link
    +msg
    +reqs
    +graph
    +weights
    +sorted_items
    --
    -__init__(preparer, finder, wheel_cache, make_install_req, use_user_site, ignore_dependencies, ignore_installed, ignore_requires_python, force_reinstall, upgrade_strategy, py_version_info)
    +resolve(root_reqs, check_supported_wheels): RequirementSet
    +get_installation_order(req_set)
  }

  class _InstallRequirementBackedCandidate {
    +dist: BaseDistribution
    +is_installed: bool
    +dist
    +requires
    --
    -__init__(link, source_link, ireq, factory, name, version)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
    +source_link()
    +project_name(): NormalizedName
    +name(): str
    +version(): Version
    +format_for_error(): str
    -_prepare_distribution(): BaseDistribution
    -_check_metadata_consistency(dist)
    -_prepare(): BaseDistribution
    +iter_dependencies(with_requires)
    +get_install_requirement()
  }

  class LinkCandidate {
    +is_editable: bool
    +source_link: link
    +cache_entry
    +link
    +ireq
    +wheel
    +wheel_name
    +wheel_version
    +preparer
    --
    -__init__(link, template, factory, name, version)
    -_prepare_distribution(): BaseDistribution
  }

  class EditableCandidate {
    +is_editable: bool
    --
    -__init__(link, template, factory, name, version)
    -_prepare_distribution(): BaseDistribution
  }

  class AlreadyInstalledCandidate {
    +is_installed: bool
    +source_link: NoneType
    +skip_reason: str
    --
    -__init__(dist, template, factory)
    -__str__(): str
    -__repr__(): str
    -__eq__(other): bool
    -__hash__(): int
    +project_name(): NormalizedName
    +name(): str
    +version(): Version
    +is_editable(): bool
    +format_for_error(): str
    +iter_dependencies(with_requires)
    +get_install_requirement()
  }

  class ExtrasCandidate {
    +factory
    +valid_extras
    +invalid_extras
    --
    -__init__(base, extras)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
    +project_name(): NormalizedName
    +name(): str
    +version(): Version
    +format_for_error(): str
    +is_installed(): bool
    +is_editable(): bool
    +source_link()
    +iter_dependencies(with_requires)
    +get_install_requirement()
  }

  class RequiresPythonCandidate {
    +is_installed: bool
    +source_link: NoneType
    +version_info
    +version_info
    --
    -__init__(py_version_info)
    -__str__(): str
    -__repr__(): str
    +project_name(): NormalizedName
    +name(): str
    +version(): Version
    +format_for_error(): str
    +iter_dependencies(with_requires)
    +get_install_requirement()
  }

  class Constraint {
    +specifier: SpecifierSet
    +hashes: Hashes
    +links
    +links
    +specifier
    +hashes
    +links
    +links
    --
    +{class} empty()
    +{class} from_ireq(ireq)
    -__bool__(): bool
    -__and__(other)
    +is_satisfied_by(candidate): bool
  }

  class Requirement {
    +project_name(): NormalizedName
    +name(): str
    +is_satisfied_by(candidate): bool
    +get_candidate_lookup(): CandidateLookup
    +format_for_error(): str
  }

  class Candidate {
    +project_name(): NormalizedName
    +name(): str
    +version(): Version
    +is_installed(): bool
    +is_editable(): bool
    +source_link()
    +iter_dependencies(with_requires)
    +get_install_requirement()
    +format_for_error(): str
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.vcs" {
  class Git {
    +name: str
    +dirname: str
    +repo_name: str
    +schemes
    +unset_environ
    +default_arg_rev: str
    +extra_environ
    +is_tag_or_branch
    +version
    +match
    +args
    +output
    +ref
    +output
    +refs
    +line
    +branch_ref
    +tag_ref
    +sha
    +sha
    +rev
    +rev_options
    +rev_options
    +sha
    +rev_options
    +rev_display
    +flags
    +flags
    +flags
    +rev_options
    +branch_name
    +cmd_args
    +track_branch
    +cmd_args
    +sha
    +rev_options
    +cmd_args
    +rev_options
    +cmd_args
    +stdout
    +remotes
    +found_remote
    +found_remote: remote
    +url
    +scp_match
    +rev: str
    +current_rev
    +git_dir
    +git_dir
    +repo_root
    +initial_slashes
    +newpath
    +after_plus
    +url
    +url
    +url
    +loc
    +r
    --
    +{static} get_base_rev_args()
    +{class} run_command(): str
    +is_immutable_rev_checkout(url, dest): bool
    +get_git_version()
    +{class} get_current_branch(location)
    +{class} get_revision_sha(dest, rev)
    -{class} _should_fetch(dest, rev): bool
    +{class} resolve_revision(dest, url, rev_options): RevOptions
    +{class} is_commit_id_equal(dest, name): bool
    +fetch_new(dest, url, rev_options, verbosity)
    +switch(dest, url, rev_options)
    +update(dest, url, rev_options)
    +{class} get_remote_url(location): str
    -{static} _git_remote_to_pip_url(): str
    +{class} has_commit(location, rev): bool
    +{class} get_revision(location, rev): str
    +{class} get_subdirectory(location)
    +{class} get_url_rev_and_auth(url)
    +{class} update_submodules(location)
    +{class} get_repository_root(location)
    +{static} should_add_vcs_url_prefix(): bool
  }

  class Mercurial {
    +name: str
    +dirname: str
    +repo_name: str
    +schemes
    +rev_display
    +flags
    +flags
    +flags
    +flags
    +repo_config
    +config
    +cmd_args
    +cmd_args
    +url
    +url
    +current_revision
    +current_rev_hash
    +repo_root
    +repo_root
    +loc
    +r
    --
    +{static} get_base_rev_args()
    +fetch_new(dest, url, rev_options, verbosity)
    +switch(dest, url, rev_options)
    +update(dest, url, rev_options)
    +{class} get_remote_url(location): str
    +{class} get_revision(location): str
    +{class} get_requirement_revision(location): str
    +{class} is_commit_id_equal(dest, name): bool
    +{class} get_subdirectory(location)
    +{class} get_repository_root(location)
  }

  class Bazaar {
    +name: str
    +dirname: str
    +repo_name: str
    +schemes
    +rev_display
    +flags
    +flags
    +flags
    +cmd_args
    +output
    +cmd_args
    +cmd_args
    +url
    +urls
    +line
    +repo
    +revision
    --
    +{static} get_base_rev_args()
    +fetch_new(dest, url, rev_options, verbosity)
    +switch(dest, url, rev_options)
    +update(dest, url, rev_options)
    +{class} get_url_rev_and_auth(url)
    +{class} get_remote_url(location): str
    +{class} get_revision(location): str
    +{class} is_commit_id_equal(dest, name): bool
  }

  class RemoteNotFoundError {
  }

  class RemoteNotValidError {
    -__init__(url)
  }

  class RevOptions {
    +vc_class
    +rev
    +extra_args: CommandArgs
    +branch_name
    +args: CommandArgs
    +rev
    --
    -__repr__(): str
    +arg_rev()
    +to_args(): CommandArgs
    +to_display(): str
    +make_new(rev)
  }

  class VcsSupport {
    -_registry
    +schemes
    +schemes
    +vcs_backends
    +repo_path
    +inner_most_repo_path
    +name
    --
    -__init__()
    -__iter__()
    +backends()
    +dirnames()
    +all_schemes()
    +register(cls)
    +unregister(name)
    +get_backend_for_dir(location)
    +get_backend_for_scheme(scheme)
    +get_backend(name)
  }

  class VersionControl {
    +name: str
    +dirname: str
    +repo_name: str
    +schemes
    +unset_environ
    +default_arg_rev
    +repo_url
    +repo_url
    +revision
    +subdir
    +req
    +scheme
    +rev: NoneType
    +url
    +password
    +password
    +extra_args
    +rev_options
    +rev_display
    +existing_url
    +prompt
    +prompt
    +response
    +dest_dir
    +cmd
    +command_desc
    --
    +{class} should_add_vcs_url_prefix(remote_url): bool
    +{class} get_subdirectory(location)
    +{class} get_requirement_revision(repo_dir): str
    +{class} get_src_requirement(repo_dir, project_name): str
    +{static} get_base_rev_args()
    +is_immutable_rev_checkout(url, dest): bool
    +{class} make_rev_options(rev, extra_args): RevOptions
    -{class} _is_local_repository(repo): bool
    +{class} get_netloc_and_auth(netloc, scheme)
    +{class} get_url_rev_and_auth(url)
    +{static} make_rev_args(password): CommandArgs
    +get_url_rev_options(url)
    +{static} normalize_url(): str
    +{class} compare_urls(url1, url2): bool
    +fetch_new(dest, url, rev_options, verbosity)
    +switch(dest, url, rev_options)
    +update(dest, url, rev_options)
    +{class} is_commit_id_equal(dest, name): bool
    +obtain(dest, url, verbosity)
    +unpack(location, url, verbosity)
    +{class} get_remote_url(location): str
    +{class} get_revision(location): str
    +{class} run_command(cmd, show_stdout, cwd, on_returncode, extra_ok_returncodes, command_desc, extra_environ, spinner, log_failed_cmd, stdout_only): str
    +{class} is_repository_directory(path): bool
    +{class} get_repository_root(location)
  }

  class Subversion {
    +name: str
    +dirname: str
    +repo_name: str
    +schemes
    +revision: int
    +entries_fn
    +base
    +revision
    +url
    +extra_args: CommandArgs
    +orig_location: location
    +last_location: location
    +location
    +entries_path
    +data
    +data: str
    +url: NoneType
    +entries
    +url
    +revs
    +match
    +url
    +revs
    +xml
    +match
    +url
    +revs
    +rev
    +rev: int
    +use_interactive
    +version_prefix: str
    +version
    +version
    +version_list
    +parsed_version
    +vcs_version
    +svn_version
    +rev_display
    +flags
    +flags
    +cmd_args
    +cmd_args
    +cmd_args
    --
    +{class} should_add_vcs_url_prefix(remote_url): bool
    +{static} get_base_rev_args()
    +{class} get_revision(location): str
    +{class} get_netloc_and_auth(netloc, scheme)
    +{class} get_url_rev_and_auth(url)
    +{static} make_rev_args(password): CommandArgs
    +{class} get_remote_url(location): str
    -{class} _get_svn_url_rev(location)
    +{class} is_commit_id_equal(dest, name): bool
    -__init__(use_interactive)
    +call_vcs_version()
    +get_vcs_version()
    +get_remote_call_options(): CommandArgs
    +fetch_new(dest, url, rev_options, verbosity)
    +switch(dest, url, rev_options)
    +update(dest, url, rev_options)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.index" {
  class _NotAPIContent {
    -__init__(content_type, request_desc)
  }

  class _NotHTTP {
  }

  class CacheablePageContent {
    -__init__(page)
    -__eq__(other): bool
    -__hash__(): int
  }

  class ParseLinks {
    -__call__(page)
  }

  class IndexContent {
    +content: bytes
    +content_type: str
    +encoding
    +url: str
    +cache_link_parsing: bool
    --
    -__str__(): str
  }

  class HTMLLinkParser {
    +href
    --
    -__init__(url)
    +handle_starttag(tag, attrs)
    +get_href(attrs)
  }

  class CollectedSources {
    +find_links
    +index_urls
  }

  class LinkCollector {
    +index_urls
    +index_urls
    +find_links
    +search_scope
    +link_collector
    +index_url_sources
    +find_links_sources
    +lines
    +lines
    --
    -__init__(session, search_scope)
    +{class} create(session, options, suppress_no_index)
    +find_links()
    +fetch_response(location)
    +collect_sources(project_name, candidates_from_page): CollectedSources
  }

  class LinkSource {
    +link()
    +page_candidates(): FoundCandidates
    +file_links(): FoundLinks
  }

  class _FlatDirectoryToUrls {
    +url
    +project_filename
    +project_filename
    --
    -__init__(path)
    -_scan_directory()
    +page_candidates()
    +project_name_to_urls()
  }

  class _FlatDirectorySource {
    -_paths_to_urls
    --
    -__init__(candidates_from_page, path, project_name)
    +link()
    +page_candidates(): FoundCandidates
    +file_links(): FoundLinks
  }

  class _LocalFileSource {
    -__init__(candidates_from_page, link)
    +link()
    +page_candidates(): FoundCandidates
    +file_links(): FoundLinks
  }

  class _RemoteFileSource {
    -__init__(candidates_from_page, page_validator, link)
    +link()
    +page_candidates(): FoundCandidates
    +file_links(): FoundLinks
  }

  class _IndexDirectorySource {
    -__init__(candidates_from_page, link)
    +link()
    +page_candidates(): FoundCandidates
    +file_links(): FoundLinks
  }

  class LinkType {
    +candidate
    +different_project
    +yanked
    +format_unsupported
    +format_invalid
    +platform_mismatch
    +requires_python_mismatch
  }

  class LinkEvaluator {
    +ignore_requires_python: bool
    +version: NoneType
    +reason
    +egg_info
    +ext
    +reason
    +wheel
    +reason
    +supported_tags
    +file_tags
    +reason
    +version
    +reason
    +version
    +reason
    +match
    +version
    +py_version
    +supports_python
    +reason
    --
    -__init__(project_name, canonical_name, formats, target_python, allow_yanked, ignore_requires_python)
    +evaluate_link(link)
  }

  class CandidatePreferences {
    +prefer_binary: bool
    +allow_all_prereleases: bool
  }

  class BestCandidateResult {
    +all_candidates
    +applicable_candidates
    +best_candidate
    --
    -__post_init__()
  }

  class CandidateEvaluator {
    +target_python
    +specifier
    +supported_tags
    +allow_prereleases
    +specifier
    +candidates_and_versions
    +versions
    +applicable_candidates
    +filtered_applicable_candidates
    +valid_tags
    +support_num
    +build_tag: BuildTag
    +binary_preference: int
    +link
    +wheel
    +pri
    +binary_preference: int
    +build_tag
    +pri
    +has_allowed_hash
    +yank_value
    +best_candidate
    +applicable_candidates
    +best_candidate
    --
    +{class} create(project_name, target_python, prefer_binary, allow_all_prereleases, specifier, hashes)
    -__init__(project_name, supported_tags, specifier, prefer_binary, allow_all_prereleases, hashes)
    +get_applicable_candidates(candidates)
    -_sort_key(candidate): CandidateSortingKey
    +sort_best_candidate(candidates)
    +compute_best_candidate(candidates): BestCandidateResult
  }

  class PackageFinder {
    +candidate_prefs
    +format_control
    +target_python
    +candidate_prefs
    +verify
    +cert
    +reasons
    +canonical_name
    +formats
    +seen
    +entry
    +candidates
    +candidate
    +index_response
    +page_links
    +package_links
    +link_evaluator
    +collected_sources
    +page_candidates_it
    +page_candidates
    +file_links_it
    +file_candidates
    +paths
    +candidate_prefs
    +candidates
    +candidate_evaluator
    +name
    +hashes
    +best_candidate_result
    +best_candidate
    +installed_version
    +installed_version
    --
    -__init__(link_collector, target_python, allow_yanked, format_control, candidate_prefs, ignore_requires_python)
    +{class} create(link_collector, selection_prefs, target_python)
    +target_python(): TargetPython
    +search_scope(): SearchScope
    +search_scope(search_scope)
    +find_links()
    +index_urls()
    +proxy()
    +trusted_hosts()
    +custom_cert()
    +client_cert()
    +allow_all_prereleases(): bool
    +set_allow_all_prereleases()
    +prefer_binary(): bool
    +set_prefer_binary()
    +requires_python_skipped_reasons()
    +make_link_evaluator(project_name): LinkEvaluator
    -_sort_links(links)
    -_log_skipped_link(link, result, detail)
    +get_install_candidate(link_evaluator, link)
    +evaluate_links(link_evaluator, links)
    +process_project_url(project_url, link_evaluator)
    +find_all_candidates(project_name)
    +make_candidate_evaluator(project_name, specifier, hashes): CandidateEvaluator
    +find_best_candidate(project_name, specifier, hashes): BestCandidateResult
    +find_requirement(req, upgrade)
    -_format_versions(): str
    -_should_install_candidate()
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.commands" {
  class ConfigurationCommand {
    +ignore_require_venv: bool
    +usage: str
    +handlers
    +action
    +load_only
    +file_options
    +key
    +value
    +key
    +file_exists
    +env_var
    +editor
    +fname
    +msg
    --
    +add_options()
    +run(options, args): int
    -_determine_file(options, need_value)
    +list_values(options, args)
    +get_name(options, args)
    +set_name_value(options, args)
    +unset_name(options, args)
    +list_config_values(options, args)
    +print_config_file_values(variant)
    +print_env_var_values()
    +open_in_editor(options, args)
    -_get_n_args(args, example, n): Any
    -_save_configuration()
    -_determine_editor(options): str
  }

  class ShowCommand {
    +usage: str
    +ignore_require_venv: bool
    +query: args
    +results
    --
    +add_options()
    +run(options, args): int
  }

  class _PackageInfo {
    +name: str
    +version: str
    +location: str
    +editable_project_location
    +requires
    +required_by
    +installer: str
    +metadata_version: str
    +classifiers
    +summary: str
    +homepage: str
    +project_urls
    +author: str
    +author_email: str
    +license: str
    +license_expression: str
    +entry_points
    +files
  }

  class _DistWithLatestInfo {
    +latest_version: Version
    +latest_filetype: str
  }

  class ListCommand {
    +ignore_require_venv: bool
    +usage: str
    +index_opts
    +link_collector
    +selection_prefs
    +skip
    +packages: _ProcessedDists
    +packages
    +packages
    +packages
    +dep_keys
    +finder
    +all_candidates
    +all_candidates
    +evaluator
    +best_candidate
    +remote_version
    +typ: str
    +typ: str
    +packages
    --
    +add_options()
    +handle_pip_version_check(options)
    -_build_package_finder(options, session)
    +run(options, args): int
    +get_outdated(packages, options)
    +get_uptodate(packages, options)
    +get_not_required(packages, options)
    +iter_packages_latest_infos(packages, options)
    +latest_info()
    +output_package_listing(packages, options)
    +output_package_listing_columns(data, header)
  }

  class CheckCommand {
    +ignore_require_venv: bool
    +usage: str
    +unsupported
    +version
    +version
    --
    +run(options, args): int
  }

  class IndexCommand {
    +ignore_require_venv: bool
    +usage: str
    +index_opts
    +handlers
    +action
    +link_collector
    +selection_prefs
    +target_python
    +query
    +finder
    +versions
    +versions
    +versions
    +formatted_versions
    +latest
    +dist
    +structured_output
    --
    +add_options()
    +run(options, args): int
    -_build_package_finder(options, session, target_python, ignore_requires_python): PackageFinder
    +get_available_package_versions(options, args)
  }

  class CompletionCommand {
    +ignore_require_venv: bool
    +shells
    +shell_options
    +script
    --
    +add_options()
    +run(options, args): int
  }

  class DownloadCommand {
    +usage: str
    +index_opts
    +session
    +target_python
    +finder
    +build_tracker
    +directory
    +reqs
    +preparer
    +resolver
    +requirement_set
    +downloaded
    --
    +add_options()
    +run(options, args): int
  }

  class CacheCommand {
    +ignore_require_venv: bool
    +usage: str
    +handlers
    +action
    +num_http_files
    +num_packages
    +http_cache_location
    +old_http_cache_location
    +wheels_cache_location
    +http_cache_size
    +wheels_cache_size
    +message
    +pattern
    +pattern: str
    +files
    +results
    +wheel
    +size
    +files
    +no_matching_msg: str
    +bytes_removed: int
    +old_http_dir
    +new_http_dir
    +wheel_dir
    +pattern
    --
    +add_options()
    +run(options, args): int
    +get_cache_dir(options, args)
    +get_cache_info(options, args)
    +list_cache_items(options, args)
    +format_for_human(files)
    +format_for_abspath(files)
    +remove_cache_items(options, args)
    +purge_cache(options, args)
    -_cache_dir(options, subdir): str
    -_find_http_files(options)
    -_find_wheels(options, pattern)
  }

  class HashCommand {
    +usage: str
    +ignore_require_venv: bool
    +algorithm
    --
    +add_options()
    +run(options, args): int
  }

  class InspectCommand {
    +ignore_require_venv: bool
    +usage: str
    +dists
    +output
    +res
    +direct_url
    +editable_project_location
    +installer
    --
    +add_options()
    +run(options, args): int
    -_dist_to_dict(dist)
  }

  class DebugCommand {
    +usage: str
    +ignore_require_venv: bool
    --
    +add_options()
    +run(options, args): int
  }

  class UninstallCommand {
    +usage: str
    +session
    +reqs_to_uninstall
    +req
    +req
    +uninstall_pathset
    --
    +add_options()
    +run(options, args): int
  }

  class LockCommand {
    +usage: str
    +index_opts
    +session
    +finder
    +build_tracker
    +directory
    +reqs
    +wheel_cache
    +preparer
    +resolver
    +requirement_set
    +base_dir
    +output_file_path
    +base_dir
    +pylock_toml
    --
    +add_options()
    +run(options, args): int
  }

  class FreezeCommand {
    +ignore_require_venv: bool
    +usage: str
    +skip
    --
    +add_options()
    +run(options, args): int
  }

  class TransformedHit {
    +name: str
    +summary: str
    +versions
  }

  class SearchCommand {
    +usage: str
    +ignore_require_venv: bool
    +query: args
    +pypi_hits
    +hits
    +terminal_width: NoneType
    +terminal_width
    +index_url
    +session
    +transport
    +pypi
    +hits
    +message
    --
    +add_options()
    +run(options, args): int
    +search(query, options)
  }

  class InstallCommand {
    +usage: str
    +index_opts
    +installing_into_current_environment
    +upgrade_strategy: str
    +upgrade_strategy
    +target_temp_dir
    +target_temp_dir_path
    +target_temp_dir
    +target_temp_dir_path
    +global_options
    +session
    +target_python
    +finder
    +build_tracker
    +directory
    +reqs
    +wheel_cache
    +preparer
    +resolver
    +requirement_set
    +report
    +would_install_items
    +pip_req
    +modifying_pip: bool
    +modifying_pip
    +reqs_to_build
    +to_install
    +conflicts
    +should_warn_about_conflicts
    +conflicts
    +warn_script_location
    +warn_script_location: bool
    +installed
    +lib_locations
    +env
    +summary
    +installed_versions
    +display_name
    +version
    +text
    +text: display_name
    +installed_desc
    +show_traceback
    +message
    +lib_dir_list
    +scheme
    +purelib_dir
    +platlib_dir
    +data_dir
    +ddir
    +target_item_dir
    +parts
    +version
    +message
    +version
    +message
    --
    +add_options()
    +run(options, args): int
    -_handle_target_dir(target_dir, target_temp_dir, upgrade)
    -_determine_conflicts(to_install)
    -_warn_about_conflicts(conflict_details, resolver_variant)
  }

  class HelpCommand {
    +usage: str
    +ignore_require_venv: bool
    +cmd_name
    +guess
    +msg
    +command
    --
    +run(options, args): int
  }

  class WheelCommand {
    +usage: str
    +index_opts
    +session
    +finder
    +build_tracker
    +directory
    +reqs
    +wheel_cache
    +preparer
    +resolver
    +requirement_set
    +reqs_to_build
    --
    +add_options()
    +run(options, args): int
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.metadata" {
  class Backend {
    +NAME
    +Distribution
    +Environment
  }

  class EntryPoint {
    +name: str
    +value: str
    +group: str
  }

  class InMemoryMetadata {
    -__init__(metadata, wheel_name)
    +has_metadata(name): bool
    +get_metadata(name): str
    +get_metadata_lines(name)
    +metadata_isdir(name): bool
    +metadata_listdir(name)
    +run_script(script_name, namespace)
  }

  class Distribution {
    +dist_dir
    +metadata
    +dist_cls
    +dist_name
    +dist_cls
    +dist_name
    +dist
    +metadata_dict
    +dist
    +metadata_dict
    +dist
    +egg_link
    +location: egg_link
    +location
    +name
    +content
    +metadata_name: str
    +metadata_name: str
    +metadata
    +displaying_path
    +displaying_path
    +metadata: str
    +feed_parser
    +relevant_extras
    +extras
    --
    -__init__(dist)
    -_extra_mapping()
    +{class} from_directory(directory): BaseDistribution
    +{class} from_metadata_file_contents(metadata_contents, filename, project_name): BaseDistribution
    +{class} from_wheel(wheel, name): BaseDistribution
    +location()
    +installed_location()
    +info_location()
    +installed_by_distutils(): bool
    +canonical_name(): NormalizedName
    +version(): Version
    +raw_version(): str
    +is_file(path): bool
    +iter_distutils_script_names()
    +read_text(path): str
    +iter_entry_points()
    -_metadata_impl(): email.message.Message
    +iter_dependencies(extras)
    +iter_provided_extras()
  }

  class Environment {
    +canonical_name
    +dist
    --
    -__init__(ws)
    +{class} default(): BaseEnvironment
    +{class} from_paths(paths): BaseEnvironment
    -_iter_distributions()
    -_search_distribution(name)
    +get_distribution(name)
  }

  class BaseEntryPoint {
    +name(): str
    +value(): str
    +group(): str
  }

  class RequiresEntry {
    +requirement: str
    +extra: str
    +marker: str
  }

  class BaseDistribution {
    +direct_url
    +egg_link_path
    +info_location
    +location
    +info_location
    +info_location
    +content
    +installer_text
    +cleaned_line
    +metadata
    +value
    +spec
    +message: str
    +text
    +text
    +paths
    +root
    +info
    +info_rel
    +content
    +extra: str
    +marker: str
    +line
    +known_extras
    +extra
    +extra
    +marker
    +marker
    +marker
    +marker: str
    --
    +{class} from_directory(directory)
    +{class} from_metadata_file_contents(metadata_contents, filename, project_name)
    +{class} from_wheel(wheel, name)
    -__repr__(): str
    -__str__(): str
    +location()
    +editable_project_location()
    +installed_location()
    +info_location()
    +installed_by_distutils(): bool
    +installed_as_egg(): bool
    +installed_with_setuptools_egg_info(): bool
    +installed_with_dist_info(): bool
    +canonical_name(): NormalizedName
    +version(): Version
    +raw_version(): str
    +setuptools_filename(): str
    +direct_url()
    +installer(): str
    +requested(): bool
    +editable(): bool
    +local(): bool
    +in_usersite(): bool
    +in_site_packages(): bool
    +is_file(path): bool
    +iter_distutils_script_names()
    +read_text(path): str
    +iter_entry_points()
    -_metadata_impl(): email.message.Message
    +metadata(): email.message.Message
    +metadata_dict()
    +metadata_version()
    +raw_name(): str
    +requires_python(): SpecifierSet
    +iter_dependencies(extras)
    +iter_raw_dependencies()
    +iter_provided_extras()
    -_iter_declared_entries_from_record()
    -_iter_declared_entries_from_legacy()
    +iter_declared_entries()
    -_iter_requires_txt_entries()
    -_iter_egg_info_extras()
    -_iter_egg_info_dependencies()
    -_add_egg_info_requires(metadata)
  }

  class BaseEnvironment {
    +project_name_valid
    +it
    +it
    +it
    +it
    +it
    --
    +{class} default()
    +{class} from_paths(paths)
    +get_distribution(name)
    -_iter_distributions()
    +iter_all_distributions()
    +iter_installed_distributions(local_only, skip, include_editables, editables_only, user_only)
  }

  class Wheel {
    +location: str
    --
    +as_zipfile(): zipfile.ZipFile
  }

  class FilesystemWheel {
    -__init__(location)
    +as_zipfile(): zipfile.ZipFile
  }

  class MemoryWheel {
    -__init__(location, stream)
    +as_zipfile(): zipfile.ZipFile
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.metadata.importlib" {
  class WheelDistribution {
    +paths
    +files
    +info_location
    +data
    +text
    +wheel
    +error
    --
    -__init__(files, info_location)
    +{class} from_zipfile(zf, name, location)
    +iterdir(path)
    +read_text(filename)
    +locate_file(path): pathlib.Path
  }

  class Distribution {
    +info_location
    +dist
    +temp_dir
    +metadata_path
    +dist
    +dist
    +content
    +contexts
    +req
    --
    -__init__(dist, info_location, installed_location)
    +{class} from_directory(directory): BaseDistribution
    +{class} from_metadata_file_contents(metadata_contents, filename, project_name): BaseDistribution
    +{class} from_wheel(wheel, name): BaseDistribution
    +location()
    +info_location()
    +installed_location()
    +canonical_name(): NormalizedName
    +version(): Version
    +raw_version(): str
    +is_file(path): bool
    +iter_distutils_script_names()
    +read_text(path): str
    +iter_entry_points()
    -_metadata_impl(): email.message.Message
    +iter_provided_extras()
    +iter_dependencies(extras)
  }

  class BadMetadata {
    -__init__(dist)
    -__str__(): str
  }

  class BasePath {
    +name(): str
    +parent()
  }

  class _DistributionFinder {
    +FoundResult
    +info_location
    +name
    +installed_location
    +installed_location
    +path
    +lines
    +target_rel
    +target_location
    --
    -__init__()
    -_find_impl(location)
    +find(location)
    +find_legacy_editables(location)
  }

  class Environment {
    +finder
    +canonical_name
    +matches
    --
    -__init__(paths)
    +{class} default(): BaseEnvironment
    +{class} from_paths(paths): BaseEnvironment
    -_iter_distributions()
    +get_distribution(name)
  }

}

package "venv2.lib.python3.12.site-packages.pip._internal.distributions" {
  class SourceDistribution {
    +should_isolate
    +should_check_deps
    +pyproject_requires
    +pyproject_requires
    +runner
    +backend
    +runner
    +backend
    +build_reqs
    +build_reqs
    +format_string: str
    +error_message
    +format_string: str
    +error_message
    --
    +build_tracker_id()
    +get_metadata_distribution(): BaseDistribution
    +prepare_distribution_metadata(finder, build_isolation, check_build_deps)
    -_prepare_build_backend(finder)
    -_get_build_requires_wheel()
    -_get_build_requires_editable()
    -_install_build_reqs(finder)
    -_raise_conflicts(conflicting_with, conflicting_reqs)
    -_raise_missing_reqs(missing)
  }

  class InstalledDistribution {
    +build_tracker_id()
    +get_metadata_distribution(): BaseDistribution
    +prepare_distribution_metadata(finder, build_isolation, check_build_deps)
  }

  class AbstractDistribution {
    -__init__(req)
    +build_tracker_id()
    +get_metadata_distribution(): BaseDistribution
    +prepare_distribution_metadata(finder, build_isolation, check_build_deps)
  }

  class WheelDistribution {
    +wheel
    --
    +build_tracker_id()
    +get_metadata_distribution(): BaseDistribution
    +prepare_distribution_metadata(finder, build_isolation, check_build_deps)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor" {
  class _Sentinel {
    -__repr__()
  }

  class _AnyMeta {
    -__instancecheck__(obj)
    -__repr__()
  }

  class Any {
    -__new__()
  }

  class _ExtensionsSpecialForm {
    -__repr__()
  }

  class _LiteralGenericAlias {
    +these_args_deduped
    +other_args_deduped
    --
    -__eq__(other)
    -__hash__()
  }

  class _LiteralForm {
    +parameters
    +parameters
    +val_type_pairs
    +deduped_pairs
    +new_parameters
    +parameters
    --
    -__init__(doc)
    -__getitem__(parameters)
  }

  class _SpecialGenericAlias {
    +allowed_attrs
    +params
    +msg: str
    +params
    +params
    +actual_len
    +expected
    +expected
    --
    -__init__(origin, nparams)
    -__setattr__(attr, val)
    -__getitem__(params)
  }

  class _ProtocolMeta {
    +non_method_attrs
    +val
    --
    -__new__(name, bases, namespace)
    -__init__()
    -__subclasscheck__(other)
    -__instancecheck__(instance)
    -__eq__(other)
    -__hash__(): int
  }

  class Protocol {
    -__init_subclass__()
  }

  class SupportsInt {
    -__int__(): int
  }

  class SupportsFloat {
    -__float__(): float
  }

  class SupportsComplex {
    -__complex__(): complex
  }

  class SupportsBytes {
    -__bytes__(): bytes
  }

  class SupportsIndex {
    -__index__(): int
  }

  class SupportsAbs {
    -__abs__(): T_co
  }

  class SupportsRound {
    -__round__(ndigits): T_co
  }

  class SingletonMeta {
    -__setattr__(attr, value)
  }

  class NoDefaultType {
    -__new__()
    -__repr__()
    -__reduce__()
  }

  class NoExtraItemsType {
    -__new__()
    -__repr__()
    -__reduce__()
  }

  class _TypedDictMeta {
    +generic_base
    +generic_base
    +tp_dict
    +annotations
    +own_annotations
    +own_annotations
    +own_annotations
    +msg: str
    +own_annotations
    +own_annotations
    +required_keys
    +optional_keys
    +readonly_keys
    +mutable_keys
    +extra_items_type: extra_items
    +base_dict
    +annotation_type
    +qualifiers
    +extra_items_type: annotation_type
    +qualifiers
    --
    -__new__(name, bases, ns)
    -__subclasscheck__(other)
  }

  class _AnnotatedAlias {
    +metadata
    +origin
    +new_type
    --
    -__init__(origin, metadata)
    +copy_with(params)
    -__repr__()
    -__reduce__()
    -__eq__(other)
    -__hash__()
  }

  class Annotated {
    +allowed_special_forms
    +origin
    +msg: str
    +origin
    +metadata
    --
    -__new__()
    -__class_getitem__(params)
    -__init_subclass__()
  }

  class _DefaultMixin {
  }

  class _TypeVarLikeMeta {
    -__instancecheck__(__instance): bool
  }

  class TypeVar {
    +typevar
    +typevar
    --
    -__new__(name)
    -_tvar_prepare_subst(args)
    -__init_subclass__()
  }

  class _Immutable {
    -__copy__()
    -__deepcopy__(memo)
  }

  class ParamSpecArgs {
    -__init__(origin)
    -__repr__()
    -__eq__(other)
  }

  class ParamSpecKwargs {
    -__init__(origin)
    -__repr__()
    -__eq__(other)
  }

  class ParamSpec {
    +def_mod
    +prefix: str
    +prefix: str
    +prefix: str
    +prefix: str
    --
    +args()
    +kwargs()
    -__init__(name)
    -__repr__()
    -__hash__()
    -__eq__(other)
    -__reduce__()
    -__call__()
  }

  class _ConcatenateGenericAlias {
    +params
    +value
    --
    +copy_with(params)
    -__getitem__(args)
  }

  class _EllipsisDummy {
  }

  class _ConcatenateForm {
    -__getitem__(parameters)
  }

  class _TypeGuardForm {
    +item
    --
    -__getitem__(parameters)
  }

  class _TypeIsForm {
    +item
    --
    -__getitem__(parameters)
  }

  class _TypeFormForm {
    +item
    --
    -__getitem__(parameters)
    -__call__()
  }

  class _SpecialForm {
    -__init__(getitem)
    -__getattr__(item)
    -__mro_entries__(bases)
    -__repr__()
    -__reduce__()
    -__call__()
    -__or__(other)
    -__ror__(other)
    -__instancecheck__(obj)
    -__subclasscheck__(cls)
    -__getitem__(parameters)
  }

  class _RequiredForm {
    +item
    --
    -__getitem__(parameters)
  }

  class _ReadOnlyForm {
    +item
    --
    -__getitem__(parameters)
  }

  class _UnpackSpecialForm {
    -__init__(getitem)
  }

  class _UnpackAlias {
    -__typing_unpacked_tuple_args__()
    -__typing_is_unpacked_typevartuple__()
    -__getitem__(args)
  }

  class _UnpackForm {
    +item
    --
    -__getitem__(parameters)
  }

  class TypeVarTuple {
    +def_mod
    --
    -__iter__()
    -__init__(name)
    -__repr__()
    -__hash__()
    -__eq__(other)
    -__reduce__()
    -__init_subclass__()
  }

  class deprecated {
    +msg
    +category
    +stacklevel
    +original_new
    +original_init_subclass
    +original_init_subclass
    +wrapper
    --
    -__init__()
    -__call__(): _T
    -__new__()
    -__init_subclass__()
    -__init_subclass__()
    +wrapper()
  }

  class _NamedTupleMeta {
    +bases
    +types
    +types
    +types
    +default_names
    +nm_tpl
    +class_getitem
    +set_name
    +msg
    --
    -__new__(typename, bases, ns)
  }

  class Buffer {
  }

  class NewType {
    +name
    +def_mod
    +supercls_name
    --
    -__call__()
    -__init__(name, tp)
    -__mro_entries__(bases)
  }

  class Dummy {
    +subcls_name
    --
    -__init_subclass__()
  }

  class _TypeAliasGenericAlias {
    +result
    --
    -__getattr__(attr)
    -__getitem__(item)
  }

  class TypeAliasType {
    +default_value_encountered: bool
    +parameters
    +has_default
    +default_value_encountered: bool
    +def_mod
    +parameters
    +type_vars
    +parameters
    +alias
    --
    -__init__(name, value)
    -__setattr__()
    -__delattr__(): Never
    -_raise_attribute_error(name): Never
    -__repr__(): str
    -_check_single_param(param, recursion)
    -_check_parameters(parameters)
    -__getitem__(parameters)
    -__reduce__()
    -__init_subclass__()
    -__call__()
    -__or__(right)
    -__ror__(left)
  }

  class Doc {
    -__init__()
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
  }

  class Format {
    +VALUE: int
    +FORWARDREF: int
    +STRING: int
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.packaging" {
  class Tag {
    -__init__(interpreter, abi, platform)
    +interpreter(): str
    +abi(): str
    +platform(): str
    -__eq__(other): bool
    -__hash__(): int
    -__str__(): str
    -__repr__(): str
  }

  class _MuslVersion {
    +major: int
    +minor: int
  }

  class ExceptionGroup {
    +message: str
    +exceptions
    --
    -__init__(message, exceptions)
    -__repr__(): str
  }

  class InvalidMetadata {
    +field: str
    --
    -__init__(field, message)
  }

  class RawMetadata {
    +metadata_version: str
    +name: str
    +version: str
    +platforms
    +summary: str
    +description: str
    +keywords
    +home_page: str
    +author: str
    +author_email: str
    +license: str
    +supported_platforms
    +download_url: str
    +classifiers
    +requires
    +provides
    +obsoletes
    +maintainer: str
    +maintainer_email: str
    +requires_dist
    +provides_dist
    +obsoletes_dist
    +requires_python: str
    +requires_external
    +project_urls
    +description_content_type: str
    +provides_extra
    +dynamic
    +license_expression: str
    +license_files
  }

  class _Validator {
    +name: str
    +raw_name: str
    +added: _MetadataVersion
    +cache
    +value
    +converter
    +value
    +exc
    +content_types
    +message
    +charset
    +markdown_variants
    +variant
    +normalized_names
    +reqs
    +paths
    --
    -__init__()
    -__set_name__(_owner, name)
    -__get__(instance, _owner): T
    -_invalid_metadata(msg, cause): InvalidMetadata
    -_process_metadata_version(value): _MetadataVersion
    -_process_name(value): str
    -_process_version(value): version_module.Version
    -_process_summary(value): str
    -_process_description_content_type(value): str
    -_process_dynamic(value)
    -_process_provides_extra(value)
    -_process_requires_python(value): specifiers.SpecifierSet
    -_process_requires_dist(value)
    -_process_license_expression(value)
    -_process_license_files(value)
  }

  class Metadata {
    -_raw: RawMetadata
    +ins
    +exceptions
    +metadata_version
    +metadata_age
    +metadata_version: NoneType
    +fields_to_check
    +field_metadata_version
    +exc
    +field_age
    +field
    +exc
    +exceptions
    +message
    +message
    +metadata_version
    +name
    +version
    +dynamic
    +platforms
    +supported_platforms
    +summary
    +description
    +description_content_type
    +keywords
    +home_page
    +download_url
    +author
    +author_email
    +maintainer
    +maintainer_email
    +license
    +license_expression
    +license_files
    +classifiers
    +requires_dist
    +requires_python
    +requires_external
    +project_urls
    +provides_extra
    +provides_dist
    +obsoletes_dist
    +requires
    +provides
    +obsoletes
    --
    +{class} from_raw(data): Metadata
    +{class} from_email(data): Metadata
  }

  class _Version {
    +epoch: int
    +release
    +dev
    +pre
    +post
    +local
  }

  class InvalidVersion {
  }

  class _BaseVersion {
    -_key
    --
    -__hash__(): int
    -__lt__(other): bool
    -__le__(other): bool
    -__eq__(other): bool
    -__ge__(other): bool
    -__gt__(other): bool
    -__ne__(other): bool
  }

  class Version {
    -_key: CmpKey
    +match
    +parts
    +parts
    --
    -__init__(version)
    -__repr__(): str
    -__str__(): str
    +epoch(): int
    +release()
    +pre()
    +post()
    +dev()
    +local()
    +public(): str
    +base_version(): str
    +is_prerelease(): bool
    +is_postrelease(): bool
    +is_devrelease(): bool
    +major(): int
    +minor(): int
    +micro(): int
  }

  class _TrimmedRelease {
    +rel
    +nonzeros
    +last_nonzero
    --
    +release()
  }

  class Node {
    -__init__(value)
    -__str__(): str
    -__repr__(): str
    +serialize(): str
  }

  class Variable {
    +serialize(): str
  }

  class Value {
    +serialize(): str
  }

  class Op {
    +serialize(): str
  }

  class ParsedRequirement {
    +name: str
    +url: str
    +extras
    +specifier: str
    +marker
  }

  class InvalidName {
  }

  class InvalidWheelFilename {
  }

  class InvalidSdistFilename {
  }

  class InvalidRequirement {
  }

  class Requirement {
    +parsed
    +formatted_extras
    --
    -__init__(requirement_string)
    -_iter_parts(name)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
  }

  class InfinityType {
    -__repr__(): str
    -__hash__(): int
    -__lt__(other): bool
    -__le__(other): bool
    -__eq__(other): bool
    -__gt__(other): bool
    -__ge__(other): bool
    -__neg__()
  }

  class NegativeInfinityType {
    -__repr__(): str
    -__hash__(): int
    -__lt__(other): bool
    -__le__(other): bool
    -__eq__(other): bool
    -__gt__(other): bool
    -__ge__(other): bool
    -__neg__(): InfinityType
  }

  class InvalidMarker {
  }

  class UndefinedComparison {
  }

  class UndefinedEnvironmentName {
  }

  class Environment {
    +implementation_name: str
    +implementation_version: str
    +os_name: str
    +platform_machine: str
    +platform_release: str
    +platform_system: str
    +platform_version: str
    +python_full_version: str
    +platform_python_implementation: str
    +python_version: str
    +sys_platform: str
  }

  class Marker {
    +current_environment
    --
    -__init__(marker)
    -__str__(): str
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
    +evaluate(environment, context): bool
  }

  class _GLibCVersion {
    +major: int
    +minor: int
  }

  class Token {
    +name: str
    +text: str
    +position: int
  }

  class ParserSyntaxError {
    +marker
    --
    -__init__(message)
    -__str__(): str
  }

  class Tokenizer {
    +expression
    +match
    +token
    +span
    +open_position
    +open_position: NoneType
    --
    -__init__(source)
    +consume(name)
    +check(name): bool
    +expect(name): Token
    +read(): Token
    +raise_syntax_error(message): NoReturn
    +enclosing_tokens(open_token, close_token)
  }

  class InvalidSpecifier {
  }

  class BaseSpecifier {
    -__str__(): str
    -__hash__(): int
    -__eq__(other): bool
    +prereleases()
    +prereleases(value)
    +contains(item, prereleases): bool
    +filter(iterable, prereleases)
  }

  class Specifier {
    +match
    +version
    +pre
    +canonical_version
    +other
    +operator_callable: CallableOperator
    +prefix
    +normalized_prospective
    +normalized_spec
    +split_spec
    +split_prospective
    +shortened_prospective
    +spec_version
    +prospective
    +spec
    +spec
    +prereleases
    +normalized_item
    +operator_callable: CallableOperator
    +yielded: bool
    +found_prereleases
    +kw
    +parsed_version
    +yielded: bool
    --
    -__init__(spec, prereleases)
    +prereleases(): bool
    +prereleases(value)
    +operator(): str
    +version(): str
    -__repr__(): str
    -__str__(): str
    -_canonical_spec()
    -__hash__(): int
    -__eq__(other): bool
    -_get_operator(op): CallableOperator
    -_compare_compatible(prospective, spec): bool
    -_compare_equal(prospective, spec): bool
    -_compare_not_equal(prospective, spec): bool
    -_compare_less_than_equal(prospective, spec): bool
    -_compare_greater_than_equal(prospective, spec): bool
    -_compare_less_than(prospective, spec_str): bool
    -_compare_greater_than(prospective, spec_str): bool
    -_compare_arbitrary(prospective, spec): bool
    -__contains__(item): bool
    +contains(item, prereleases): bool
    +filter(iterable, prereleases)
  }

  class SpecifierSet {
    +split_specifiers
    +pre
    +other
    +specifier
    +other
    +item
    +prereleases
    +item
    +prereleases
    +iterable
    +filtered
    +found_prereleases
    +parsed_version
    --
    -__init__(specifiers, prereleases)
    +prereleases()
    +prereleases(value)
    -__repr__(): str
    -__str__(): str
    -__hash__(): int
    -__and__(other): SpecifierSet
    -__eq__(other): bool
    -__len__(): int
    -__iter__()
    -__contains__(item): bool
    +contains(item, prereleases, installed): bool
    +filter(iterable, prereleases)
  }

  class ELFInvalid {
  }

  class EIClass {
    +C32: int
    +C64: int
  }

  class EIData {
    +Lsb: int
    +Msb: int
  }

  class EMachine {
    +I386: int
    +S390: int
    +Arm: int
    +X8664: int
    +AArc64: int
  }

  class ELFFile {
    +ident
    +magic
    +data
    --
    -__init__(f)
    -_read(fmt)
    +interpreter()
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.packaging.licenses" {
  class InvalidLicenseExpression {
  }

  class SPDXLicense {
    +id: str
    +deprecated: bool
  }

  class SPDXException {
    +id: str
    +deprecated: bool
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.truststore" {
  class SSLContext {
    -__class__(): type
    -__init__(protocol)
  }

  class TruststoreSSLObject {
    +ret
    --
    +do_handshake()
  }

  class CFConst {
    +kCFStringEncodingUTF8
    +errSecIncompleteCertRevocationCheck
    +errSecHostNameMismatch
    +errSecCertificateExpired
    +errSecNotTrusted
  }

  class CERT_CONTEXT {
  }

  class CERT_ENHKEY_USAGE {
  }

  class CERT_USAGE_MATCH {
  }

  class CERT_CHAIN_PARA {
  }

  class CERT_TRUST_STATUS {
  }

  class CERT_CHAIN_ELEMENT {
  }

  class CERT_SIMPLE_CHAIN {
  }

  class CERT_CHAIN_CONTEXT {
  }

  class SSL_EXTRA_CERT_CHAIN_POLICY_PARA {
  }

  class CERT_CHAIN_POLICY_PARA {
  }

  class CERT_CHAIN_POLICY_STATUS {
  }

  class CERT_CHAIN_ENGINE_CONFIG {
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.msgpack" {
  class UnpackException {
  }

  class BufferFull {
  }

  class OutOfData {
  }

  class FormatError {
  }

  class StackError {
  }

  class ExtraData {
    -__init__(unpacked, extra)
    -__str__()
  }

  class BytesIO {
    +s
    +s
    --
    -__init__(s)
    +write(s)
    +getvalue()
  }

  class Unpacker {
    +unicode_errors: str
    +max_buffer_size
    +max_str_len: max_buffer_size
    +max_bin_len: max_buffer_size
    +max_array_len: max_buffer_size
    +max_map_len
    +max_ext_len: max_buffer_size
    +view
    +ret
    +i
    +ret
    +remain_bytes
    +remain_bytes
    +to_read_bytes
    +read_data
    +typ: TYPE_IMMEDIATE
    +n: int
    +obj: NoneType
    +b
    +obj: b
    +obj
    +n
    +typ: TYPE_RAW
    +obj
    +n
    +typ: TYPE_ARRAY
    +n
    +typ: TYPE_MAP
    +obj: NoneType
    +obj: bool
    +obj: bool
    +n
    +n
    +obj
    +obj
    +obj
    +obj
    +n
    +obj
    +ret
    +ret
    +ret
    +ret
    +key
    +key
    +ret
    +obj
    +obj
    +ts
    +ret
    +next: __next__
    +ret
    +ret
    +ret
    --
    -__init__(file_like)
    +feed(next_bytes)
    -_consume()
    -_got_extradata()
    -_get_extradata()
    +read_bytes(n)
    -_read(n, raise_outofdata)
    -_reserve(n, raise_outofdata)
    -_read_header()
    -_unpack(execute)
    -__iter__()
    -__next__()
    +skip()
    +unpack()
    +read_array_header()
    +read_map_header()
    +tell()
  }

  class Packer {
    +default_used: bool
    +check: check_type_strict
    +list_types: list
    +list_types
    +obj
    +default_used: bool
    +n
    +obj
    +n
    +n
    +code
    +data
    +code
    +data
    +L
    +n
    +obj
    +default_used: int
    +obj
    +default_used: int
    +ret
    +ret
    +ret
    +ret
    +L
    --
    -__init__()
    -_pack(obj, nest_limit, check, check_type_strict)
    +pack(obj)
    +pack_map_pairs(pairs)
    +pack_array_header(n)
    +pack_map_header(n)
    +pack_ext_type(typecode, data)
    -_pack_array_header(n)
    -_pack_map_header(n)
    -_pack_map_pairs(n, pairs, nest_limit)
    -_pack_raw_header(n)
    -_pack_bin_header(n)
    +bytes()
    +reset()
    +getbuffer()
  }

  class ExtType {
    -__new__(code, data)
  }

  class Timestamp {
    +seconds
    +nanoseconds: int
    +data64
    +seconds
    +nanoseconds
    +data64
    +data
    +data
    +data
    +seconds
    +nanoseconds
    +utc
    --
    -__init__(seconds, nanoseconds)
    -__repr__()
    -__eq__(other)
    -__ne__(other)
    -__hash__()
    +{static} from_bytes()
    +to_bytes()
    +{static} from_unix()
    +to_unix()
    +{static} from_unix_nano()
    +to_unix_nano()
    +to_datetime()
    +{static} from_datetime()
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.dependency_groups" {
  class DependencyGroupInclude {
    +include_group: str
  }

  class CyclicDependencyError {
    +reason
    +reason
    --
    -__init__(requested_group, group, include_group)
  }

  class DependencyGroupResolver {
    +group
    +group
    +raw_group
    +elements
    +include_group
    +parsed
    +resolved_group
    +include_group
    --
    -__init__(dependency_groups)
    +lookup(group)
    +resolve(group)
    -_parse_group(group)
    -_resolve(group, requested_group)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.pygments" {
  class EndOfText {
  }

  class Scanner {
    +eos
    +m
    --
    -__init__(text, flags)
    +eos()
    +check(pattern)
    +test(pattern)
    +scan(pattern)
    +get_char()
    -__repr__()
  }

  class Formatter {
    +name: NoneType
    +aliases
    +filenames
    +unicodeoutput: bool
    +outfile
    --
    -__init__()
    +get_style_defs(arg)
    +format(tokensource, outfile)
    -__class_getitem__(name)
  }

  class _TokenType {
    +parent: NoneType
    +buf
    +node: self
    +node
    +new
    --
    +split()
    -__init__()
    -__contains__(val)
    -__getattr__(val)
    -__repr__()
    -__copy__()
    -__deepcopy__(memo)
  }

  class StyleMeta {
    +obj
    +col
    +ndef
    +styledefs
    +ndef
    +ndef
    +ndef
    +t
    +ansicolor: NoneType
    +bgansicolor: NoneType
    +color
    +color
    +ansicolor: color
    +color
    +bgcolor
    +bgcolor
    +bgansicolor: bgcolor
    +bgcolor
    --
    -__new__(name, bases, dct)
    +colorformat()
    +style_for_token(token)
    +list_styles()
    +styles_token(ttype)
    -__iter__()
    -__len__()
  }

  class Style {
    +background_color: str
    +highlight_color: str
    +line_number_color: str
    +line_number_background_color: str
    +line_number_special_color: str
    +line_number_special_background_color: str
    +styles
    +name: str
    +aliases
    +web_style_gallery_exclude: bool
  }

  class ClassNotFound {
  }

  class OptionError {
  }

  class Future {
    +get()
  }

  class UnclosingTextIOWrapper {
    +close()
  }

  class PygmentsDoc {
    +has_content: bool
    +required_arguments: int
    +optional_arguments: int
    +final_argument_whitespace: bool
    +option_spec
    +out
    +out
    +out
    +out
    +node
    +vl
    +out
    +table
    +lexer_cls
    +extensions
    +column_names
    +column_lengths
    +out
    +sep
    +out
    +modules
    +moduledocstrings
    +module
    +mod
    +cls
    +docstring
    +docstring
    +example_file
    +p
    +content
    +lexer_name
    +version_line
    +version_line: str
    +moddoc
    +moddoc
    +heading
    +out
    +module
    +mod
    +cls
    +docstring
    +docstring
    +heading
    +out
    +docstring
    +docstring
    --
    +run()
    +document_lexers_overview()
    +format_link(url)
    +write_row()
    +write_seperator()
    +document_lexers()
    +document_formatters()
    +document_filters()
  }

  class LexerMeta {
    -__new__(name, bases, d)
  }

  class Lexer {
    +name: NoneType
    +aliases
    +filenames
    +alias_filenames
    +mimetypes
    +priority: int
    +url: NoneType
    +version_added: NoneType
    +filter_
    +decoded: NoneType
    +decoded
    +enc
    +decoded
    +text: decoded
    +text
    +text
    +text
    +text
    +text
    +text
    +text
    +text
    +text
    +stream
    +stream
    --
    -__init__()
    -__repr__()
    +add_filter(filter_)
    +analyse_text()
    -_preprocess_lexer_input(text)
    +get_tokens(text, unfiltered)
    +streamer()
    +get_tokens_unprocessed(text)
  }

  class DelegatingLexer {
    +buffered: str
    +insertions
    +lng_buffer
    +lng_buffer
    --
    -__init__(_root_lexer, _language_lexer, _needle)
    +get_tokens_unprocessed(text)
  }

  class include {
  }

  class _inherit {
    -__repr__()
  }

  class combined {
    -__new__()
    -__init__()
  }

  class _PseudoMatch {
    -__init__(start, text)
    +start(arg)
    +end(arg)
    +group(arg)
    +groups()
    +groupdict()
  }

  class _This {
  }

  class default {
    -__init__(state)
  }

  class words {
    -__init__(words, prefix, suffix)
    +get()
  }

  class RegexLexerMeta {
    +regex
    +tmp_state
    +itokens
    +tokens
    +rflags
    +new_state
    +rex
    +token
    +new_state: NoneType
    +new_state
    +processed
    +tokendefs
    +tokens
    +inheritable
    +toks
    +curitems
    +inherit_ndx
    +inherit_ndx
    +new_inh_ndx
    --
    -_process_regex(regex, rflags, state)
    -_process_token(token)
    -_process_new_state(new_state, unprocessed, processed)
    -_process_state(unprocessed, processed, state)
    +process_tokendef(name, tokendefs)
    +get_tokendefs()
    -__call__()
  }

  class RegexLexer {
    +flags
    +tokens
    +pos: int
    +tokendefs
    +statestack
    +statetokens
    +m
    +pos
    +statetokens
    +statestack
    +statetokens
    --
    +get_tokens_unprocessed(text, stack)
  }

  class LexerContext {
    -__init__(text, pos, stack, end)
    -__repr__()
  }

  class ExtendedRegexLexer {
    +tokendefs
    +ctx
    +statetokens
    +ctx: context
    +statetokens
    +text
    +m
    +statetokens
    +statetokens
    +statetokens
    --
    +get_tokens_unprocessed(text, context)
  }

  class ProfilingRegexLexerMeta {
    +rex
    +rex: regex
    +compiled
    +info
    +t0
    +res
    +t1
    --
    -_process_regex(regex, rflags, state)
    +match_func(pos, endpos)
  }

  class ProfilingRegexLexer {
    +rawdata
    +data
    +sum_total
    --
    +get_tokens_unprocessed(text, stack)
  }

  class Filter {
    -__init__()
    +filter(lexer, stream)
  }

  class FunctionFilter {
    +function: NoneType
    --
    -__init__()
    +filter(lexer, stream)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.pygments.filters" {
  class CodeTagFilter {
    +tags
    +regex
    --
    -__init__()
    +filter(lexer, stream)
  }

  class SymbolFilter {
    +latex_symbols
    +isabelle_symbols
    +lang_map
    +lang
    --
    -__init__()
    +filter(lexer, stream)
  }

  class KeywordCaseFilter {
    +case
    --
    -__init__()
    +filter(lexer, stream)
  }

  class NameHighlightFilter {
    +tokentype
    --
    -__init__()
    +filter(lexer, stream)
  }

  class ErrorToken {
  }

  class RaiseOnErrorTokenFilter {
    -__init__()
    +filter(lexer, stream)
  }

  class VisibleWhitespaceFilter {
    +opt
    +tabsize
    +spaces
    +tabs
    +newlines
    +regex
    +value
    +value
    +value
    --
    -__init__()
    +filter(lexer, stream)
    +replacefunc()
  }

  class GobbleFilter {
    +n
    +left: n
    +parts
    +value
    --
    -__init__()
    +gobble(value, left)
    +filter(lexer, stream)
  }

  class TokenMergeFilter {
    +current_type: NoneType
    +current_value: NoneType
    +current_type: ttype
    +current_value: value
    --
    -__init__()
    +filter(lexer, stream)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.pygments.lexers" {
  class _automodule {
    +info
    +cls
    --
    -__getattr__(name)
  }

  class PythonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +uni_name
    +tokens
    --
    +innerstring_rules()
    +fstring_rules()
    +analyse_text()
  }

  class Python2Lexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
    --
    +innerstring_rules()
    +analyse_text()
  }

  class _PythonConsoleLexerBase {
    +name: str
    +aliases
    +mimetypes
    +tokens
  }

  class PythonConsoleLexer {
    +name: str
    +aliases
    +mimetypes
    +url: str
    +version_added: str
    +python3
    +pylexer: PythonLexer
    +tblexer: PythonTracebackLexer
    +pylexer: Python2Lexer
    +tblexer: Python2TracebackLexer
    --
    -__init__()
  }

  class _ReplaceInnerCode {
    -__init__()
  }

  class PythonTracebackLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class Python2TracebackLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class CythonLexer {
    +name: str
    +url: str
    +aliases
    +filenames
    +mimetypes
    +version_added: str
    +tokens
  }

  class DgLexer {
    +name: str
    +aliases
    +filenames
    +mimetypes
    +url: str
    +version_added: str
    +tokens
  }

  class NumPyLexer {
    +name: str
    +url: str
    +aliases
    +version_added: str
    +mimetypes
    +filenames
    +EXTRA_KEYWORDS
    +ltext
    --
    +get_tokens_unprocessed(text)
    +analyse_text()
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.pygments.formatters" {
  class _automodule {
    +info
    +cls
    --
    -__getattr__(name)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.distlib" {
  class RedirectHandler {
    +newurl: NoneType
    +newurl
    +urlparts
    +newurl
    +http_error_301: http_error_302
    +http_error_303: http_error_302
    +http_error_307: http_error_302
    --
    +http_error_302(req, fp, code, msg, headers)
  }

  class Locator {
    +source_extensions
    +binary_extensions
    +excluded_extensions
    +wheel_tags: NoneType
    +downloadable_extensions
    +result
    +e
    +scheme
    +result
    +result
    +result
    +t
    +basename
    +compatible: bool
    +is_wheel
    +is_downloadable
    +compatible
    +result: url2
    +s1
    +s2
    +result: url1
    +result: NoneType
    +m
    +origpath: path
    +path
    +wheel
    +include: bool
    +include
    +result
    +path
    +filename
    +path
    +t
    +result
    +result: NoneType
    +digests
    +result
    +key
    +result
    +name
    +version
    +dist
    +md
    +dist
    +md
    +digest
    +url
    +result: NoneType
    +r
    +scheme
    +matcher
    +versions
    +slist
    +vcls
    +slist
    +version
    +result
    +d
    +sd
    --
    -__init__(scheme)
    +get_errors()
    +clear_errors()
    +clear_cache()
    -_get_scheme()
    -_set_scheme(value)
    -_get_project(name)
    +get_distribution_names()
    +get_project(name)
    +score_url(url)
    +prefer_url(url1, url2)
    +split_filename(filename, project_name)
    +convert_url_to_download_info(url, project_name)
    +same_project(name2)
    -_get_digest(info)
    -_update_version_data(result, info)
    +locate(requirement, prereleases)
  }

  class PyPIRPCLocator {
    +result
    +versions
    +urls
    +data
    +metadata
    +dist
    +info
    +url
    +digest
    --
    -__init__(url)
    +get_distribution_names()
    -_get_project(name)
  }

  class PyPIJSONLocator {
    +result
    +url
    +resp
    +data
    +d
    +md
    +data
    +dist
    +url
    +omd
    +odist
    +url
    --
    -__init__(url)
    +get_distribution_names()
    -_get_project(name)
  }

  class Page {
    +m
    +result
    +d
    +rel
    +url
    +url
    +url
    +url
    +result
    --
    -__init__(data, url)
    +links()
    +clean()
  }

  class SimpleScrapingLocator {
    +decoders
    +t
    +result
    +url
    +platform_dependent
    +info: NoneType
    +info
    +result: bool
    +result: bool
    +result: bool
    +result: bool
    +result: bool
    +result: bool
    +host
    +result: bool
    +result: bool
    +url
    +page
    +url
    +result
    +host
    +result: NoneType
    +req
    +resp
    +headers
    +content_type
    +final_url
    +data
    +encoding
    +decoder
    +data
    +encoding: str
    +m
    +encoding
    +data
    +data
    +result
    +result
    +page
    --
    -__init__(url, timeout, num_workers)
    -_prepare_threads()
    -_wait_threads()
    -_get_project(name)
    -_is_platform_dependent(url)
    -_process_download(url)
    -_should_queue(link, referrer, rel)
    -_fetch()
    +get_page(url)
    +get_distribution_names()
  }

  class DirectoryLocator {
    +path
    +result
    +fn
    +url
    +info
    +result
    +fn
    +url
    +info
    --
    -__init__(path)
    +should_include(filename, parent)
    -_get_project(name)
    +get_distribution_names()
  }

  class JSONLocator {
    +result
    +data
    +dist
    +md
    --
    +get_distribution_names()
    -_get_project(name)
  }

  class DistPathLocator {
    +dist
    +result
    +result
    --
    -__init__(distpath)
    -_get_project(name)
  }

  class AggregatingLocator {
    +scheme
    +result
    +d
    +files
    +digests
    +df
    +dd
    +found: bool
    +found: bool
    +found: bool
    +result: d
    +result
    --
    -__init__()
    +clear_cache()
    -_set_scheme(value)
    -_get_project(name)
    +get_distribution_names()
  }

  class DependencyFinder {
    +name
    +name
    +s
    +matcher
    +name
    +matcher
    +matcher
    +name
    +result
    +provided
    +match
    +match: bool
    +rlist
    +unmatched
    +matcher
    +result: bool
    +result: bool
    +meta_extras
    +dist: requirement
    +odist: requirement
    +dist
    +odist
    +problems
    +todo
    +install_dists
    +dist
    +name
    +other
    +ireqts
    +sreqts
    +ereqts
    +e
    +all_reqts
    +providers
    +provider
    +provider
    +name
    +other
    +dists
    --
    -__init__(locator)
    +add_distribution(dist)
    +remove_distribution(dist)
    +get_matcher(reqt)
    +find_providers(reqt)
    +try_to_replace(provider, other, problems)
    +find(requirement, meta_extras, prereleases)
  }

  class MetadataMissingError {
  }

  class MetadataConflictError {
  }

  class MetadataUnrecognizedVersionError {
  }

  class MetadataInvalidError {
  }

  class LegacyMetadata {
    +field_name
    +name
    +name
    +name
    +fp
    +msg
    +values
    +values
    +value
    +body
    +fp
    +values
    +values
    +values
    +values
    +values
    +name
    +value
    +value
    +value
    +value
    +project_name
    +scheme
    +value
    +name
    +default
    +value
    +value
    +res
    +value
    +msg
    +scheme
    +value
    +fields
    +data
    +key
    --
    -__init__(path, fileobj, mapping, scheme)
    +set_metadata_version()
    -_write_field(fileobj, name, value)
    -__getitem__(name)
    -__setitem__(name, value)
    -__delitem__(name)
    -__contains__(name)
    -_convert_name(name)
    -_default_value(name)
    -_remove_line_prefix(value)
    -__getattr__(name)
    +get_fullname(filesafe)
    +is_field(name)
    +is_multi_field(name)
    +read(filepath)
    +read_file(fileob)
    +write(filepath, skip_unknown)
    +write_file(fileobject, skip_unknown)
    +update(other)
    -_set(value)
    +set(name, value)
    +get(name, default)
    +check(strict)
    +are_valid_constraints()
    +todict(skip_missing)
    +add_requirements(requirements)
    +keys()
    -__iter__()
    +values()
    +items()
    -__repr__()
  }

  class Metadata {
    +METADATA_VERSION_MATCHER
    +NAME_MATCHER
    +FIELDNAME_MATCHER
    +VERSION_MATCHER: PEP440_VERSION_RE
    +SUMMARY_MATCHER
    +METADATA_VERSION: str
    +GENERATOR
    +MANDATORY_KEYS
    +INDEX_KEYS: str
    +DEPENDENCY_KEYS: str
    +SYNTAX_VALIDATORS
    +data: NoneType
    +data
    +data
    +data
    +common_keys
    +none_list
    +none_dict
    +mapped_keys
    +common
    +mapped
    +result
    +result
    +value
    +result
    +sentinel
    +result: sentinel
    +d
    +result
    +d
    +result
    +d
    +d
    +result
    +result: value
    +result
    +result
    +result
    +m
    +common
    +mapped
    +d
    +d
    +d
    +value
    +value
    +value
    +result
    +result
    +s
    +result: reqts
    +result
    +extras
    +include: bool
    +include: bool
    +include
    +marker
    +include
    +e
    +reqts
    +missing
    +msg
    +result
    +result
    +lmd
    +nk: str
    +nk: k
    +kw
    +kw
    +keys
    +LEGACY_MAPPING
    +reqts
    +extra
    +env
    +rlist
    +marker: str
    +marker
    +marker
    +marker: env
    +result
    +nmd
    +d: nmd
    +found: bool
    +d
    +found: bool
    +r1
    +r2
    +legacy_md
    +legacy_md
    +d
    +d
    +run_requires
    +always: NoneType
    +always: entry
    +always
    +rset
    +name
    +version
    --
    -__init__(path, fileobj, mapping, scheme)
    -__getattribute__(key)
    -_validate_value(key, value, scheme)
    -__setattr__(key, value)
    +name_and_version()
    +provides()
    +provides(value)
    +get_requirements(reqts, extras, env)
    +dictionary()
    +dependencies()
    +dependencies(value)
    -_validate_mapping(mapping, scheme)
    +validate()
    +todict()
    -_from_legacy()
    -_to_legacy()
    +process_entries()
    +write(path, fileobj, legacy, skip_unknown)
    +add_requirements(requirements)
    -__repr__()
  }

  class UnsupportedVersionError {
  }

  class Version {
    +s
    +parts
    --
    -__init__(s)
    +parse(s)
    -_check_compatible(other)
    -__eq__(other)
    -__ne__(other)
    -__lt__(other)
    -__gt__(other)
    -__le__(other)
    -__ge__(other)
    -__hash__()
    -__repr__()
    -__str__()
    +is_prerelease()
  }

  class Matcher {
    +version_class: NoneType
    +s
    +r
    +clist
    +version
    +f
    +f
    +msg
    +result: NoneType
    +result
    --
    +parse_requirement(s)
    -__init__(s)
    +match(version)
    +exact_version()
    -_check_compatible(other)
    -__eq__(other)
    -__ne__(other)
    -__hash__()
    -__repr__()
    -__str__()
  }

  class NormalizedVersion {
    +result
    +m
    +groups
    +PREREL_TAGS
    --
    +parse(s)
    +is_prerelease()
  }

  class NormalizedMatcher {
    +version_class: NormalizedVersion
    +strip_local
    +strip_local
    +s
    +version
    +release_clause
    +pfx
    +release_clause
    +pfx
    +result
    +result
    +result
    +result
    +release_clause
    +release_clause
    +pfx
    --
    -_adjust_local(version, constraint, prefix)
    -_match_lt(version, constraint, prefix)
    -_match_gt(version, constraint, prefix)
    -_match_le(version, constraint, prefix)
    -_match_ge(version, constraint, prefix)
    -_match_eq(version, constraint, prefix)
    -_match_arbitrary(version, constraint, prefix)
    -_match_ne(version, constraint, prefix)
    -_match_compatible(version, constraint, prefix)
  }

  class LegacyVersion {
    +result: bool
    +result: bool
    --
    +parse(s)
    +is_prerelease()
  }

  class LegacyMatcher {
    +version_class: LegacyVersion
    +numeric_re
    +m
    +s
    +s
    --
    -_match_compatible(version, constraint, prefix)
  }

  class SemanticVersion {
    +parse(s)
    +is_prerelease()
  }

  class SemanticMatcher {
    +version_class: SemanticVersion
  }

  class VersionScheme {
    +result: bool
    +result: bool
    +result: bool
    +result: bool
    +s
    +result: NoneType
    +result
    --
    -__init__(key, matcher, suggester)
    +is_valid_version(s)
    +is_valid_matcher(s)
    +is_valid_constraint_list(s)
    +suggest(s)
  }

  class CertificateError {
  }

  class Container {
    -__init__()
  }

  class ZipExtFile {
    -__init__(base)
    -__enter__()
    -__exit__()
  }

  class ZipFile {
    +base
    --
    -__enter__()
    -__exit__()
    +open()
  }

  class ChainMap {
    -__init__()
    -__missing__(key)
    -__getitem__(key)
    +get(key, default)
    -__len__()
    -__iter__()
    -__contains__(key)
    -__bool__()
    -__repr__()
    +{class} fromkeys(iterable)
    +copy()
    +new_child()
    +parents()
    -__setitem__(key, value)
    -__delitem__(key)
    +popitem()
    +pop(key)
    +clear()
  }

  class OrderedDict {
    +root
    +root
    +last
    +root
    +curr
    +curr
    +root
    +curr
    +curr
    +root
    +root
    +link
    +link_prev
    +link
    +link_next
    +key
    +value
    +self
    +other
    +other
    +result
    +call_key
    +items
    +inst_dict
    +d
    --
    -__init__()
    -__setitem__(key, value, dict_setitem)
    -__delitem__(key, dict_delitem)
    -__iter__()
    -__reversed__()
    +clear()
    +popitem(last)
    +keys()
    +values()
    +items()
    +iterkeys()
    +itervalues()
    +iteritems()
    +update()
    +pop(key, default)
    +setdefault(key, default)
    -__repr__(_repr_running)
    -__reduce__()
    +copy()
    +{class} fromkeys(iterable, value)
    -__eq__(other)
    -__ne__(other)
    +viewkeys()
    +viewvalues()
    +viewitems()
  }

  class ConvertingDict {
    +value
    +result
    +value
    +result
    --
    -__getitem__(key)
    +get(key, default)
  }

  class ConvertingList {
    +value
    +result
    +value
    +result
    --
    -__getitem__(key)
    +pop(idx)
  }

  class ConvertingTuple {
    +value
    +result
    --
    -__getitem__(key)
  }

  class BaseConfigurator {
    +CONVERT_PATTERN
    +WORD_PATTERN
    +DOT_PATTERN
    +INDEX_PATTERN
    +DIGIT_PATTERN
    +value_converters
    +importer
    +name
    +used
    +found
    +found
    +found
    +v
    +rest: value
    +m
    +rest
    +d
    +m
    +d
    +m
    +idx
    +d
    +n
    +d
    +d
    +rest
    +value
    +value
    +value
    +m
    +d
    +prefix
    +converter
    +suffix
    +converter
    +value
    +c
    +c
    +props
    +kwargs
    +result
    +value
    --
    -__init__(config)
    +resolve(s)
    +ext_convert(value)
    +cfg_convert(value)
    +convert(value)
    +configure_custom(config)
    +as_tuple(value)
  }

  class PackageIndex {
    +boundary: bytes
    +rc
    +cfg
    +pm
    +d
    +request
    +request
    +s
    +s
    +cmd
    +keystore
    +td
    +sf
    +kwargs
    +stdout
    +stderr
    +p
    +t1
    +t2
    +d
    +sig_file: NoneType
    +sig_file
    +file_data
    +md5_digest
    +sha256_digest
    +files
    +sig_data
    +request
    +fn
    +zip_data
    +fields
    +files
    +request
    +cmd
    +keystore
    +cmd
    +digester: NoneType
    +hasher: str
    +digester
    +sfp
    +headers
    +blocksize: int
    +size
    +read: int
    +blocknum: int
    +size
    +block
    +actual
    +handlers
    +opener
    +parts
    +boundary
    +values
    +body
    +ct
    +headers
    +terms
    +rpc_proxy
    --
    -__init__(url)
    -_get_pypirc_command()
    +read_configuration()
    +save_configuration()
    +check_credentials()
    +register(metadata)
    -_reader(name, stream, outbuf)
    +get_sign_command(filename, signer, sign_password, keystore)
    +run_command(cmd, input_data)
    +sign_file(filename, signer, sign_password, keystore)
    +upload_file(metadata, filename, signer, sign_password, filetype, pyversion, keystore)
    +upload_documentation(metadata, doc_dir)
    +get_verify_command(signature_filename, data_filename, keystore)
    +verify_signature(signature_filename, data_filename, keystore)
    +download_file(url, destfile, digest, reporthook)
    +send_request(req)
    +encode_request(fields, files)
    +search(terms, operator)
  }

  class Manifest {
    +allfiles
    +root
    +stack
    +pop
    +push
    +root
    +names
    +fullname
    +stat
    +mode
    +item
    +result
    +dirs
    +words
    +action
    +patterns: NoneType
    +thedir: NoneType
    +dir_pattern: NoneType
    +patterns
    +thedir
    +patterns
    +dir_pattern
    +found: bool
    +pattern_re
    +found: bool
    +found: bool
    +pattern_re
    +found: bool
    +pattern_re
    +pattern_re: str
    +base
    +empty_pattern
    +prefix_re
    +prefix_re
    +prefix_re
    +sep
    +sep: str
    +pattern_re
    +pattern_re
    +pattern_re
    +pattern_re
    +pattern_re
    +pattern_re
    +sep
    +sep: str
    +escaped
    +pattern_re
    --
    -__init__(base)
    +findall()
    +add(item)
    +add_many(items)
    +sorted(wantdirs)
    +add_dir(d)
    +clear()
    +process_directive(directive)
    -_parse_directive(directive)
    -_include_pattern(pattern, anchor, prefix, is_regex)
    -_exclude_pattern(pattern, anchor, prefix, is_regex)
    -_translate_pattern(pattern, anchor, prefix, is_regex)
    -_glob_to_re(pattern)
  }

  class cached_property {
    +value
    --
    -__init__(func)
    -__get__(obj, cls)
  }

  class FileOperator {
    +msg: NoneType
    +msg
    +msg
    +outstream
    +outstream
    +mode
    +set_executable_mode
    +path
    +dpath
    +diagpath: NoneType
    +diagpath
    +compile_kwargs
    +hashed_invalidation
    +s: str
    +s: str
    +result: bool
    +result
    +parent
    +path: parent
    +result
    +dirs
    +flist
    +sd
    --
    -__init__(dry_run)
    -_init_record()
    +record_as_written(path)
    +newer(source, target)
    +copy_file(infile, outfile, check)
    +copy_stream(instream, outfile, encoding)
    +write_binary_file(path, data)
    +write_text_file(path, data, encoding)
    +set_mode(bits, mask, files)
    +ensure_dir(path)
    +byte_compile(path, optimize, force, prefix, hashed_invalidation)
    +ensure_removed(path)
    +is_writable(path)
    +commit()
    +rollback()
  }

  class ExportEntry {
    +result: bool
    +result
    --
    -__init__(name, prefix, suffix, flags)
    +value()
    -__repr__()
    -__eq__(other)
  }

  class Cache {
    +not_removed
    +fn
    --
    -__init__(base)
    +prefix_to_dir(prefix, use_abspath)
    +clear()
  }

  class EventMixin {
    +subs
    +sq
    +subs
    +result
    +value
    +value: NoneType
    --
    -__init__()
    +add(event, subscriber, append)
    +remove(event, subscriber)
    +get_subscribers(event)
    +publish(event)
  }

  class Sequencer {
    +preds
    +succs
    +result
    +todo
    +seen
    +step
    +preds
    +index_counter
    +stack
    +lowlinks
    +index
    +result
    +graph
    +successors
    +successors
    +connected_component
    +successor
    +component
    +result
    +preds
    --
    -__init__()
    +add_node(node)
    +remove_node(node, edges)
    +add(pred, succ)
    +remove(pred, succ)
    +is_step(step)
    +get_steps(final)
    +strong_connections()
    +strongconnect()
    +dot()
  }

  class Progress {
    +unknown: str
    +now
    +result: str
    +result: str
    +v
    +result
    +result: str
    +result
    +prefix: str
    +t
    +prefix: str
    +t
    +t: int
    +t
    +t
    +result: float
    +result
    --
    -__init__(minval, maxval)
    +update(curval)
    +increment(incr)
    +start()
    +stop()
    +maximum()
    +percentage()
    +format_duration(duration)
    +ETA()
    +speed()
  }

  class HTTPSConnection {
    +ca_certs: NoneType
    +check_domain: bool
    +sock
    +context
    +kwargs
    --
    +connect()
  }

  class HTTPSHandler {
    +result
    --
    -__init__(ca_certs, check_domain)
    -_conn_maker()
    +https_open(req)
  }

  class HTTPSOnlyHandler {
    +http_open(req)
  }

  class Transport {
    -__init__(timeout, use_datetime)
    +make_connection(host)
  }

  class SafeTransport {
    +kwargs
    --
    -__init__(timeout, use_datetime)
    +make_connection(host)
  }

  class ServerProxy {
    +timeout
    +scheme
    +use_datetime
    +tcls: SafeTransport
    +tcls: Transport
    +t
    --
    -__init__(uri)
  }

  class CSVBase {
    +defaults
    --
    -__enter__()
    -__exit__()
  }

  class CSVReader {
    +stream
    +stream
    +result
    --
    -__init__()
    -__iter__()
    +next()
  }

  class CSVWriter {
    +r
    +item
    +row: r
    --
    -__init__(fn)
    +writerow(row)
  }

  class Configurator {
    +value_converters
    +result
    +result
    +result
    +result
    +c
    +c
    +props
    +args
    +args
    +items
    +kwargs
    +result
    +result
    +result
    +value
    +result
    --
    -__init__(config, base)
    +configure_custom(config)
    +convert()
    -__getitem__(key)
    +inc_convert(value)
  }

  class SubprocessMixin {
    +progress
    +verbose
    +s
    +p
    +t1
    +t2
    --
    -__init__(verbose, progress)
    +reader(stream, context)
    +run_command(cmd)
  }

  class PyPIRCFile {
    +DEFAULT_REPOSITORY: str
    +DEFAULT_REALM: str
    +fn
    +result
    +repository
    +config
    +sections
    +index_servers
    +result
    +result
    +server: str
    +repository
    +repository
    +result
    +config
    +fn
    --
    -__init__(fn, url)
    +read()
    +update(username, password)
  }

  class _Cache {
    -__init__()
    +clear()
    +add(dist)
  }

  class DistributionPath {
    +path
    +cache_enabled
    +seen
    +finder
    +r
    +rset
    +r
    +possible_filenames
    +metadata_path
    +pydist
    +metadata
    +msg: str
    +gen_dist
    +gen_egg
    +name
    +result: NoneType
    +name
    +result: dist
    +result
    +result
    +matcher: NoneType
    +matcher
    +provided
    +dist
    +r
    +d
    --
    -__init__(path, include_egg)
    -_get_cache_enabled()
    -_set_cache_enabled(value)
    +clear_cache()
    -_yield_distributions()
    -_generate_cache()
    +{class} distinfo_dirname(name, version)
    +get_distributions()
    +get_distribution(name)
    +provides_distribution(name, version)
    +get_file_path(name, relative_path)
    +get_exported_entries(category, name)
  }

  class Distribution {
    +build_time_dependency: bool
    +requested: bool
    +download_url: source_url
    +plist
    +s
    +md
    +reqts
    +r
    +scheme
    +matcher
    +name
    +matcher
    +name
    +result: bool
    +result
    +suffix
    +suffix: str
    +result: bool
    +result
    --
    -__init__(metadata)
    +source_url()
    +name_and_version()
    +provides()
    -_get_requirements(req_attr)
    +run_requires()
    +meta_requires()
    +build_requires()
    +test_requires()
    +dev_requires()
    +matches_requirement(req)
    -__repr__()
    -__eq__(other)
    -__hash__()
  }

  class BaseInstalledDistribution {
    +hasher: NoneType
    +hasher
    +hasher
    +prefix: str
    +hasher
    +prefix
    +digest
    +digest
    --
    -__init__(metadata, path, env)
    +get_hash(data, hasher)
  }

  class InstalledDistribution {
    +hasher: str
    +finder
    +metadata
    +r
    +r
    +r
    +metadata
    +r
    +p
    +data
    +results
    +r
    +missing
    +result
    +r
    +result
    +result
    +r
    +result
    +rf
    +r
    +prefix
    +base
    +base_under_prefix
    +base
    +record_path
    +hash_value: str
    +size: str
    +size
    +hash_value
    +path
    +record_path
    +mismatches
    +base
    +record_path
    +path
    +actual_size
    +hasher
    +hasher: NoneType
    +actual_hash
    +result
    +shared_path
    +lines
    +shared_path
    +lines
    +path
    +finder
    +base
    +path
    --
    -__init__(path, metadata, env)
    -__repr__()
    -__str__()
    -_get_records()
    +exports()
    +read_exports()
    +write_exports(exports)
    +get_resource_path(relative_path)
    +list_installed_files()
    +write_installed_files(paths, prefix, dry_run)
    +check_installed_files()
    +shared_locations()
    +write_shared_locations(paths, dry_run)
    +get_distinfo_resource(path)
    +get_distinfo_file(path)
    +list_distinfo_files()
    -__eq__(other)
  }

  class EggInfoDistribution {
    +requested: bool
    +shared_locations
    +metadata
    +metadata
    +requires: NoneType
    +reqs
    +lines
    +line
    +r
    +cons
    +reqs
    +reqs
    +tl_path: NoneType
    +tl_data: NoneType
    +p
    +meta_path
    +metadata
    +req_path
    +tl_path
    +requires
    +zipf
    +fileobj
    +metadata
    +data
    +tl_data
    +requires
    +requires: NoneType
    +req_path
    +requires
    +path
    +tl_path
    +metadata
    +tl_data
    +tl_data
    +tl_data
    +mismatches
    +record_path
    +f
    +content
    +record_path
    +result
    +line
    +p
    +record_path
    +skip: bool
    +line
    +skip: bool
    +p
    --
    -__init__(path, env)
    +set_name_and_version(n, v)
    -_get_metadata(path)
    +parse_requires_data()
    +parse_requires_path()
    -__repr__()
    -__str__()
    +check_installed_files()
    +list_installed_files()
    -_md5()
    -_size()
    +list_distinfo_files(absolute)
    -__eq__(other)
  }

  class DependencyGraph {
    +output
    +dist
    +dist
    +suboutput
    +subs
    +disconnected
    +result
    +alist
    +to_remove
    +output
    --
    -__init__()
    +add_distribution(distribution)
    +add_edge(x, y, label)
    +add_missing(distribution, requirement)
    -_repr_dist(dist)
    +repr_node(dist, level)
    +to_dot(f, skip_disconnected)
    +topological_sort()
    -__repr__()
  }

  class DistlibException {
  }

  class NullHandler {
    +handle(record)
    +emit(record)
    +createLock()
  }

  class Evaluator {
    +operations
    +result
    +result
    +op
    +elhs
    +erhs
    +lhs
    +rhs
    +lhs
    +rhs
    +lhs
    +rhs
    +result
    --
    +evaluate(expr, context)
  }

  class ResourceCache {
    +base
    +result: path
    +result
    +dirname
    +stale: bool
    +stale
    --
    -__init__(base)
    +is_stale(resource, path)
    +get(resource)
  }

  class ResourceBase {
    -__init__(finder, name)
  }

  class Resource {
    +is_container: bool
    +cache
    --
    +as_stream()
    +file_path()
    +bytes()
    +size()
  }

  class ResourceContainer {
    +is_container: bool
    --
    +resources()
  }

  class ResourceFinder {
    +skipped_extensions
    +skipped_extensions
    +sep: bytes
    +sep: str
    +parts
    +result
    +path
    +result: NoneType
    +result
    +result
    +resource
    +todo
    +resource
    +rname
    +new_name: name
    +new_name
    +child
    --
    -__init__(module)
    -_adjust_path(path)
    -_make_path(resource_name)
    -_find(path)
    +get_cache_info(resource)
    +find(resource_name)
    +get_stream(resource)
    +get_bytes(resource)
    +get_size(resource)
    +get_resources(resource)
    +allowed()
    +is_container(resource)
    +iterator(resource_name)
  }

  class ZipResourceFinder {
    +archive
    +path
    +result: bool
    +path
    +i
    +result
    +result: bool
    +prefix
    +path
    +path
    +path
    +plen
    +result
    +i
    +s
    +path
    +i
    +result
    +result: bool
    --
    -__init__(module)
    -_adjust_path(path)
    -_find(path)
    +get_cache_info(resource)
    +get_bytes(resource)
    +get_stream(resource)
    +get_size(resource)
    +get_resources(resource)
    -_is_directory(path)
  }

  class ScriptMaker {
    +script_template: SCRIPT_TEMPLATE
    +executable: NoneType
    +fn
    +executable
    +simple_shebang: bool
    +simple_shebang: bool
    +shebang_length
    +max_shebang_length: int
    +max_shebang_length: int
    +simple_shebang
    +result
    +result: bytes
    +enquote: bool
    +executable
    +enquote: bool
    +executable
    +executable
    +executable
    +executable
    +executable
    +executable
    +executable
    +executable
    +shebang
    +manifest: _DEFAULT_MANIFEST
    +base
    +use_launcher
    +script_bytes
    +launcher
    +launcher
    +stream
    +source_date_epoch
    +date_time
    +zinfo
    +zip_data
    +script_bytes
    +outname
    +outname: n
    +outname
    +dfname
    +outname
    +variant_separator: str
    +result
    +post_interp: bytes
    +args
    +args
    +post_interp
    +shebang
    +script
    +scriptnames
    +ext: str
    +ext: str
    +adjust: bool
    +script
    +outname
    +f
    +f: NoneType
    +first_line
    +match
    +adjust: bool
    +post_interp
    +shebang
    +ext: str
    +ext: str
    +n
    +bits: str
    +bits: str
    +platform_suffix
    +name
    +msg
    +filenames
    +entry
    +filenames
    --
    -__init__(source_dir, target_dir, add_launchers, dry_run, fileop)
    -_get_alternate_executable(executable, options)
    -_is_shell(executable)
    -_fix_jython_executable(executable)
    -_build_shebang(executable, post_interp)
    -_get_shebang(encoding, post_interp, options)
    -_get_script_text(entry)
    +get_manifest(exename)
    -_write_script(names, shebang, script_bytes, filenames, ext)
    +get_script_filenames(name)
    -_make_script(entry, filenames, options)
    -_copy_script(script, filenames)
    +dry_run()
    +dry_run(value)
    -_get_launcher(kind)
    +make(specification, options)
    +make_multiple(specifications, options)
  }

  class Mounter {
    +extensions
    +result: self
    +result: NoneType
    +result
    +result
    +parts
    --
    -__init__()
    +add(pathname, extensions)
    +remove(pathname)
    +find_module(fullname, path)
    +load_module(fullname)
  }

  class Wheel {
    +wheel_version
    +hash_kind: str
    +m
    +info
    +m
    +info
    +buildver
    +buildver: str
    +pyver
    +abi
    +arch
    +version
    +path
    +pathname
    +name_ver
    +info_dir
    +wrapper
    +fns
    +result: NoneType
    +metadata_filename
    +wf
    +result
    +name_ver
    +info_dir
    +metadata_filename
    +wf
    +message
    +pathname
    +result
    +m
    +end
    +shebang_python: SHEBANG_PYTHONW
    +shebang_python: SHEBANG_PYTHON
    +m
    +args
    +args: bytes
    +shebang
    +data
    +cr
    +lf
    +term: bytes
    +term: bytes
    +term: bytes
    +data
    +hash_kind
    +hasher
    +result
    +result
    +records
    +records
    +data
    +digest
    +size
    +p
    +ap
    +tags
    +libkey
    +is_pure: str
    +default_pyver
    +default_abi
    +default_arch
    +is_pure: str
    +default_pyver
    +default_abi
    +default_arch
    +libdir
    +name_ver
    +data_dir
    +info_dir
    +archive_paths
    +path
    +p
    +rp
    +ap
    +data
    +data
    +path: libdir
    +distinfo: NoneType
    +dn
    +distinfo
    +p
    +rp
    +files
    +p
    +ap
    +wheel_metadata
    +p
    +ap
    +ap
    +n
    +archive_paths
    +pathname
    +dry_run
    +warner
    +lib_only
    +bc_hashed_invalidation
    +pathname
    +name_ver
    +data_dir
    +info_dir
    +metadata_name
    +wheel_metadata_name
    +record_name
    +wrapper
    +wf
    +message
    +wv
    +file_version
    +libdir
    +libdir
    +records
    +p
    +data_pfx
    +info_pfx
    +script_pfx
    +fileop
    +bc
    +outfiles
    +workdir
    +arcname
    +u_arcname: arcname
    +u_arcname
    +row
    +data
    +is_script
    +outfile
    +outfile
    +data
    +pyc
    +fn
    +workname
    +filenames
    +dist: NoneType
    +commands: NoneType
    +file_version
    +ep
    +epdata
    +commands
    +k
    +d
    +s
    +wf
    +commands
    +commands
    +console_scripts
    +gui_scripts
    +script_dir
    +script
    +filenames
    +options
    +script
    +filenames
    +p
    +dist
    +paths
    +p
    +base
    +cache
    +pathname
    +name_ver
    +info_dir
    +arcname
    +wrapper
    +result
    +wf
    +extensions
    +cache
    +prefix
    +cache_base
    +dest
    +extract: bool
    +file_time
    +file_time
    +info
    +wheel_time
    +extract
    +pathname
    +msg
    +msg
    +extensions
    +pathname
    +pathname
    +name_ver
    +info_dir
    +wheel_metadata_name
    +record_name
    +wrapper
    +wf
    +records
    +p
    +arcname
    +u_arcname: arcname
    +u_arcname
    +p
    +row
    +data
    +version: NoneType
    +path: NoneType
    +key
    +key
    +path
    +version
    +updated: NoneType
    +i
    +updated
    +parts
    +updated
    +md
    +legacy
    +pathname
    +name_ver
    +info_dir
    +record_name
    +path_map
    +arcname
    +u_arcname: arcname
    +u_arcname
    +path
    +modified
    +newpath
    +archive_paths
    +distinfo
    +info
    --
    -__init__(filename, sign, verify)
    +filename()
    +exists()
    +tags()
    +metadata()
    +get_wheel_metadata(zf)
    +info()
    +process_shebang(data)
    +get_hash(data, hash_kind)
    +write_record(records, record_path, archive_record_path)
    +write_records(info, libdir, archive_paths)
    +build_zip(pathname, archive_paths)
    +build(paths, tags, wheel_version)
    +sorter()
    +skip_entry(arcname)
    +install(paths, maker)
    -_get_dylib_cache()
    -_get_extensions()
    +is_compatible()
    +is_mountable()
    +mount(append)
    +unmount()
    +verify()
    +update(modifier, dest_dir)
    +get_version(info_dir)
    +update_version(path)
  }

  class _Version {
    -__init__(major, minor)
    -__str__()
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.distro" {
  class VersionDict {
    +major: str
    +minor: str
    +build_number: str
  }

  class InfoDict {
    +id: str
    +version: str
    +version_parts: VersionDict
    +like: str
    +codename: str
  }

  class cached_property {
    +ret
    --
    -__init__(f)
    -__get__(obj, owner): Any
  }

  class LinuxDistribution {
    +etc_dir_os_release_file
    +usr_lib_os_release_file
    +is_root_dir_defined
    +distro_id
    +distro_id
    +distro_id
    +distro_id
    +distro_id
    +name
    +name
    +name
    +version
    +name
    +versions
    +version: str
    +version: v
    +version: v
    +version
    +version_str
    +version_regex
    +matches
    +props
    +lexer
    +tokens
    +match
    +release_codename
    +cmd
    +stdout
    +content
    +props
    +kv
    +cmd
    +stdout
    +content
    +stdout
    +props
    +match
    +encoding
    +distro_info
    +basename
    +match
    +basenames
    +basenames: _DISTRO_RELEASE_BASENAMES
    +match
    +filepath
    +distro_info
    +matches
    +distro_info
    --
    -__init__(include_lsb, os_release_file, distro_release_file, include_uname, root_dir, include_oslevel)
    -__repr__(): str
    +linux_distribution(full_distribution_name)
    +id(): str
    +normalize(table): str
    +name(pretty): str
    +version(pretty, best): str
    +version_parts(best)
    +major_version(best): str
    +minor_version(best): str
    +build_number(best): str
    +like(): str
    +codename(): str
    +info(pretty, best): InfoDict
    +os_release_info()
    +lsb_release_info()
    +distro_release_info()
    +uname_info()
    +oslevel_info(): str
    +os_release_attr(attribute): str
    +lsb_release_attr(attribute): str
    +distro_release_attr(attribute): str
    +uname_attr(attribute): str
    -_os_release_info()
    -{static} _parse_os_release_content()
    -_lsb_release_info()
    -{static} _parse_lsb_release_content()
    -_uname_info()
    -_oslevel_info(): str
    -_debian_version(): str
    -{static} _parse_uname_content()
    -{static} _to_str(): str
    -_distro_release_info()
    -_parse_distro_release_file(filepath)
    -{static} _parse_distro_release_content()
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.cachecontrol" {
  class Serializer {
    +serde_version: str
    +response_headers
    +body
    +data
    +varied_headers
    +header
    +header_value
    +header_value
    +data
    +body_raw
    +headers
    +body
    +body
    +body: body_file
    +body
    +cached
    --
    +dumps(request, response, body): bytes
    +serialize(data): bytes
    +loads(request, data, body_file)
    +prepare_response(request, cached, body_file)
    -_loads_v4(request, data, body_file)
  }

  class CacheController {
    +scheme
    +authority
    +path: str
    +request_uri
    +defrag_uri
    +known_directives
    +cc_headers
    +retval
    +parts
    +directive
    +cache_url
    +cache_data
    +body_file
    +body_file: NoneType
    +result
    +cache_url
    +cc
    +resp
    +msg: str
    +headers
    +now
    +time_tuple
    +date
    +current_age
    +resp_cc
    +freshness_lifetime: int
    +max_age
    +freshness_lifetime: max_age
    +expires
    +expire_time
    +freshness_lifetime
    +max_age
    +freshness_lifetime: max_age
    +min_fresh
    +resp
    +new_headers
    +headers
    +response
    +response: response_or_ref
    +cacheable_status_codes
    +response_headers
    +time_tuple
    +date
    +date: int
    +cc_req
    +cc
    +cache_url
    +no_store: bool
    +no_store: bool
    +no_store: bool
    +expires_time: int
    +expires
    +expires_time
    +expires_time
    +time_tuple
    +date
    +max_age
    +expires_time: max_age
    +expires
    +expires_time
    +expires_time: NoneType
    +cache_url
    +cached_response
    +excluded_headers
    --
    -__init__(cache, cache_etags, serializer, status_codes)
    -{class} _urlnorm(uri): str
    +{class} cache_url(uri): str
    +parse_cache_control(headers)
    -_load_from_cache(request)
    +cached_request(request)
    +conditional_headers(request)
    -_cache_set(cache_url, request, response, body, expires_time)
    +cache_response(request, response_or_ref, body, status_codes)
    +update_cached_response(request, response): HTTPResponse
  }

  class CallbackFileWrapper {
    +fp
    +closed: bool
    +result: bytes
    +result
    +data: bytes
    +data: bytes
    --
    -__init__(fp, callback)
    -__getattr__(name): Any
    -__is_fp_closed(): bool
    -_close()
    +read(amt): bytes
    -_safe_read(amt): bytes
  }

  class BaseHeuristic {
    +updated_headers
    +warning_header_value
    --
    +warning(response)
    +update_headers(response)
    +apply(response): HTTPResponse
  }

  class OneDayCache {
    +headers
    +date
    +expires
    --
    +update_headers(response)
  }

  class ExpiresAfter {
    +expires
    +tmpl: str
    --
    -__init__()
    +update_headers(response)
    +warning(response)
  }

  class LastModified {
    +cacheable_by_default_statuses
    +headers
    +time_tuple
    +date
    +last_modified
    +now
    +current_age
    +delta
    +freshness_lifetime
    +expires
    --
    +update_headers(resp)
    +warning(resp)
  }

  class CacheControlAdapter {
    +invalidating_methods
    +controller_factory
    +cacheable
    +cached_response
    +cached_response: NoneType
    +resp
    +cacheable
    +response
    +cached_response
    +from_cache: bool
    +response: cached_response
    +super_update_chunk_length
    +self
    +resp: Response
    +cache_url
    --
    -__init__(cache, cache_etags, controller_class, serializer, heuristic, cacheable_methods)
    +send(request, stream, timeout, verify, cert, proxies, cacheable_methods): Response
    +build_response(request, response, from_cache, cacheable_methods): Response
    -_update_chunk_length()
    +close()
  }

  class BaseCache {
    +get(key)
    +set(key, value, expires)
    +delete(key)
    +close()
  }

  class DictCache {
    -__init__(init_dict)
    +get(key)
    +set(key, value, expires)
    +delete(key)
  }

  class SeparateBodyBaseCache {
    +set_body(key, body)
    +get_body(key)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.cachecontrol.caches" {
  class _FileCacheMixin {
    +lock_class: FileLock
    +notice
    +hashed
    +parts
    +name
    +name
    +dirname
    +name
    --
    -__init__(directory, forever, filemode, dirmode, lock_class)
    +{static} encode(): str
    -_fn(name): str
    +get(key)
    +set(key, value, expires)
    -_write(path, data)
    -_delete(key, suffix)
  }

  class FileCache {
    +delete(key)
  }

  class SeparateBodyFileCache {
    +name
    +name
    --
    +get_body(key)
    +set_body(key, body)
    +delete(key)
  }

  class RedisCache {
    +now_utc
    +now_utc
    +delta
    --
    -__init__(conn)
    +get(key)
    +set(key, value, expires)
    +delete(key)
    +clear()
    +close()
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.idna" {
  class IDNAError {
  }

  class IDNABidiError {
  }

  class InvalidCodepoint {
  }

  class InvalidCodepointContext {
  }

  class Codec {
    +encode(data, errors)
    +decode(data, errors)
  }

  class IncrementalEncoder {
    +labels
    +trailing_dot: bytes
    +trailing_dot: bytes
    +trailing_dot: bytes
    +result
    +size: int
    +result_bytes
    --
    -_buffer_encode(data, errors, final)
  }

  class IncrementalDecoder {
    +data
    +labels
    +trailing_dot: str
    +trailing_dot: str
    +trailing_dot: str
    +result
    +size: int
    +result_str
    --
    -_buffer_decode(data, errors, final)
  }

  class StreamWriter {
  }

  class StreamReader {
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.requests" {
  class MockRequest {
    +host
    +parsed
    --
    -__init__(request)
    +get_type()
    +get_host()
    +get_origin_req_host()
    +get_full_url()
    +is_unverifiable()
    +has_header(name)
    +get_header(name, default)
    +add_header(key, val)
    +add_unredirected_header(name, value)
    +get_new_headers()
    +unverifiable()
    +origin_req_host()
    +host()
  }

  class MockResponse {
    -__init__(headers)
    +info()
    +getheaders(name)
  }

  class CookieConflictError {
  }

  class RequestsCookieJar {
    +c
    +c
    +domains
    +paths
    +domains
    +dictionary
    +toReturn: NoneType
    +toReturn
    +state
    +new_cj
    --
    +get(name, default, domain, path)
    +set(name, value)
    +iterkeys()
    +keys()
    +itervalues()
    +values()
    +iteritems()
    +items()
    +list_domains()
    +list_paths()
    +multiple_domains()
    +get_dict(domain, path)
    -__contains__(name)
    -__getitem__(name)
    -__setitem__(name, value)
    -__delitem__(name)
    +set_cookie(cookie)
    +update(other)
    -_find(name, domain, path)
    -_find_no_duplicates(name, domain, path)
    -__getstate__()
    -__setstate__(state)
    +copy()
    +get_policy()
  }

  class AuthBase {
    -__call__(r)
  }

  class HTTPBasicAuth {
    -__init__(username, password)
    -__eq__(other)
    -__ne__(other)
    -__call__(r)
  }

  class HTTPProxyAuth {
    -__call__(r)
  }

  class HTTPDigestAuth {
    +realm
    +nonce
    +qop
    +algorithm
    +opaque
    +hash_utf8: NoneType
    +x
    +hash_utf8: md5_utf8
    +x
    +hash_utf8: sha_utf8
    +x
    +hash_utf8: sha256_utf8
    +x
    +hash_utf8: sha512_utf8
    +KD
    +entdig: NoneType
    +p_parsed
    +path
    +A1
    +A2
    +HA1
    +HA2
    +ncvalue
    +s
    +cnonce
    +HA1
    +respdig
    +noncebit
    +respdig
    +base
    +s_auth
    +pat
    +prep
    --
    -__init__(username, password)
    +init_per_thread_state()
    +build_digest_header(method, url)
    +md5_utf8()
    +sha_utf8()
    +sha256_utf8()
    +sha512_utf8()
    +handle_redirect(r)
    +handle_401(r)
    -__call__(r)
    -__eq__(other)
    -__ne__(other)
  }

  class SessionRedirectMixin {
    +location
    +location
    +old_parsed
    +new_parsed
    +changed_port
    +changed_scheme
    +default_port
    +hist
    +url
    +previous_fragment
    +prepared_request
    +parsed_rurl
    +url
    +parsed
    +parsed
    +previous_fragment
    +url
    +url
    +url
    +purged_headers
    +headers
    +proxies
    +rewindable
    +req: prepared_request
    +resp
    +url
    +headers
    +url
    +new_auth
    +headers
    +scheme
    +new_proxies
    +method
    +method: str
    +method: str
    +method: str
    --
    +get_redirect_target(resp)
    +should_strip_auth(old_url, new_url)
    +resolve_redirects(resp, req, stream, timeout, verify, cert, proxies, yield_requests)
    +rebuild_auth(prepared_request, response)
    +rebuild_proxies(prepared_request, proxies)
    +rebuild_method(prepared_request, response)
  }

  class Session {
    +cookies
    +cookies
    +merged_cookies
    +auth
    +auth
    +p
    +req
    +prep
    +proxies
    +settings
    +send_kwargs
    +resp
    +allow_redirects
    +stream
    +hooks
    +adapter
    +start
    +r
    +elapsed
    +r
    +gen
    +history
    +history
    +r
    +no_proxy
    +env_proxies
    +verify
    +proxies
    +stream
    +verify
    +cert
    +keys_to_move
    +state
    --
    -__init__()
    -__enter__()
    -__exit__()
    +prepare_request(request)
    +request(method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)
    +get(url)
    +options(url)
    +head(url)
    +post(url, data, json)
    +put(url, data)
    +patch(url, data)
    +delete(url)
    +send(request)
    +merge_environment_settings(url, proxies, stream, verify, cert)
    +get_adapter(url)
    +close()
    +mount(prefix, adapter)
    -__getstate__()
    -__setstate__(state)
  }

  class RequestEncodingMixin {
    +url
    +p
    +path
    +path: str
    +query
    +result
    +vs
    +new_fields
    +fields
    +files
    +val
    +v
    +ft: NoneType
    +fh: NoneType
    +fn
    +fp: v
    +fdata: fp
    +fdata
    +fdata: fp
    +rf
    --
    +path_url()
    -{static} _encode_params()
    -{static} _encode_files(data)
  }

  class RequestHooksMixin {
    +register_hook(event, hook)
    +deregister_hook(event, hook)
  }

  class Request {
    +data
    +files
    +headers
    +params
    +hooks
    +p
    --
    -__init__(method, url, headers, files, data, params, auth, cookies, hooks, json)
    -__repr__()
    +prepare()
  }

  class PreparedRequest {
    +p
    +host
    +url
    +url
    +url
    +host
    +netloc
    +path: str
    +params
    +enc_params
    +query
    +query: enc_params
    +url
    +body: NoneType
    +content_type: NoneType
    +content_type: str
    +body
    +body
    +is_stream
    +length
    +length: NoneType
    +body: data
    +body
    +content_type: NoneType
    +content_type: str
    +length
    +url_auth
    +auth
    +auth
    +r
    +cookie_header
    +hooks
    --
    -__init__()
    +prepare(method, url, headers, files, data, params, auth, cookies, hooks, json)
    -__repr__()
    +copy()
    +prepare_method(method)
    -{static} _get_idna_encoded_host()
    +prepare_url(url, params)
    +prepare_headers(headers)
    +prepare_body(data, files, json)
    +prepare_content_length(body)
    +prepare_auth(auth, url)
    +prepare_cookies(cookies)
    +prepare_hooks(hooks)
  }

  class Response {
    +chunk
    +reused_chunks
    +stream_chunks
    +chunks
    +chunks
    +pending: NoneType
    +chunk
    +lines
    +lines
    +pending
    +pending: NoneType
    +content: NoneType
    +encoding
    +encoding
    +content
    +content
    +encoding
    +header
    +resolved_links
    +links
    +key
    +http_error_msg: str
    +reason
    +reason
    +reason
    +http_error_msg
    +http_error_msg
    +release_conn
    --
    -__init__()
    -__enter__()
    -__exit__()
    -__getstate__()
    -__setstate__(state)
    -__repr__()
    -__bool__()
    -__nonzero__()
    -__iter__()
    +ok()
    +is_redirect()
    +is_permanent_redirect()
    +next()
    +apparent_encoding()
    +iter_content(chunk_size, decode_unicode)
    +generate()
    +iter_lines(chunk_size, decode_unicode, delimiter)
    +content()
    +text()
    +json()
    +links()
    +raise_for_status()
    +close()
  }

  class RequestException {
    +response
    --
    -__init__()
  }

  class InvalidJSONError {
  }

  class JSONDecodeError {
    -__init__()
    -__reduce__()
  }

  class HTTPError {
  }

  class ConnectionError {
  }

  class ProxyError {
  }

  class SSLError {
  }

  class Timeout {
  }

  class ConnectTimeout {
  }

  class ReadTimeout {
  }

  class URLRequired {
  }

  class TooManyRedirects {
  }

  class MissingSchema {
  }

  class InvalidSchema {
  }

  class InvalidURL {
  }

  class InvalidHeader {
  }

  class InvalidProxyURL {
  }

  class ChunkedEncodingError {
  }

  class ContentDecodingError {
  }

  class StreamConsumedError {
  }

  class RetryError {
  }

  class UnrewindableBodyError {
  }

  class RequestsWarning {
  }

  class FileModeWarning {
  }

  class RequestsDependencyWarning {
  }

  class CaseInsensitiveDict {
    +data
    +other
    --
    -__init__(data)
    -__setitem__(key, value)
    -__getitem__(key)
    -__delitem__(key)
    -__iter__()
    -__len__()
    +lower_items()
    -__eq__(other)
    +copy()
    -__repr__()
  }

  class LookupDict {
    -__init__(name)
    -__repr__()
    -__getitem__(key)
    +get(key, default)
  }

  class BaseAdapter {
    -__init__()
    +send(request, stream, timeout, verify, cert, proxies)
    +close()
  }

  class HTTPAdapter {
    +manager
    +manager
    +proxy_headers
    +manager
    +cert_loc: verify
    +response
    +proxy
    +proxy
    +proxy_url
    +proxy_manager
    +conn
    +conn
    +proxy
    +proxy
    +proxy_url
    +proxy_manager
    +conn
    +parsed
    +url
    +conn
    +proxy
    +scheme
    +is_proxied_http_request
    +using_socks_proxy: bool
    +proxy_scheme
    +using_socks_proxy
    +url
    +url
    +url
    +headers
    +conn
    +url
    +chunked
    +timeout
    +timeout
    +resp
    --
    -__init__(pool_connections, pool_maxsize, max_retries, pool_block)
    -__getstate__()
    -__setstate__(state)
    +init_poolmanager(connections, maxsize, block)
    +proxy_manager_for(proxy)
    +cert_verify(conn, url, verify, cert)
    +build_response(req, resp)
    +build_connection_pool_key_attributes(request, verify, cert)
    +get_connection_with_tls_context(request, verify, proxies, cert)
    +get_connection(url, proxies)
    +close()
    +request_url(request, proxies)
    +add_headers(request)
    +proxy_headers(proxy)
    +send(request, stream, timeout, verify, cert, proxies)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.tomli" {
  class DEPRECATED_DEFAULT {
  }

  class TOMLDecodeError {
    +args
    +args
    +args
    +lineno
    +colno
    +colno
    +coord_repr: str
    +coord_repr
    +errmsg
    --
    -__init__(msg, doc, pos)
  }

  class Flags {
    +FROZEN: Final
    +EXPLICIT_NEST: Final
    +cont
    +cont
    +cont
    +cont
    +cont
    +inner_cont
    +cont
    +key_stem
    +inner_cont
    --
    -__init__()
    +add_pending(key, flag)
    +finalize_pending()
    +unset_all(key)
    +set(key, flag)
    +is_(key, flag): bool
  }

  class NestedDict {
    +cont: Any
    +cont
    +cont
    +cont
    +last_key
    +list_
    --
    -__init__()
    +get_or_create_nest(key): dict
    +append_nest_to_list(key)
  }

  class Output {
    +data: NestedDict
    +flags: Flags
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.pyproject_hooks" {
  class SubprocessRunner {
    -__call__(cmd, cwd, extra_environ)
  }

  class BackendUnavailable {
    -__init__(traceback, message, backend_name, backend_path)
  }

  class HookMissing {
    -__init__(hook_name)
  }

  class UnsupportedOperation {
    -__init__(traceback)
  }

  class BuildBackendHookCaller {
    +runner: default_subprocess_runner
    +backend_path
    +python_executable
    +prev
    +metadata_directory
    +metadata_directory
    +extra_environ
    +backend_path
    +hook_input
    +python
    +data
    --
    -__init__(source_dir, build_backend, backend_path, runner, python_executable)
    +subprocess_runner(runner)
    -_supported_features()
    +get_requires_for_build_wheel(config_settings)
    +prepare_metadata_for_build_wheel(metadata_directory, config_settings, _allow_fallback): str
    +build_wheel(wheel_directory, config_settings, metadata_directory): str
    +get_requires_for_build_editable(config_settings)
    +prepare_metadata_for_build_editable(metadata_directory, config_settings, _allow_fallback)
    +build_editable(wheel_directory, config_settings, metadata_directory): str
    +get_requires_for_build_sdist(config_settings)
    +build_sdist(sdist_directory, config_settings): str
    -_call_hook(hook_name, kwargs): Any
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.pyproject_hooks._in_process" {
  class BackendUnavailable {
    -__init__(message, traceback)
  }

  class HookMissing {
    -__init__(hook_name)
  }

  class _BackendPathFinder {
    +spec
    +msg
    +context
    --
    -__init__(backend_path, backend_module)
    +find_spec(fullname, _path, _target)
    +find_distributions(context)
  }

  class _DummyException {
  }

  class GotUnsupportedOperation {
    -__init__(traceback)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.rich" {
  class Screen {
    +renderable
    +style
    +render_options
    +lines
    +lines
    +new_line
    --
    -__init__()
    -__rich_console__(console, options)
  }

  class RichHandler {
    +KEYWORDS
    +HIGHLIGHTER_CLASS
    +level_name
    +level_text
    +message
    +traceback: NoneType
    +traceback
    +message
    +formatter
    +message
    +message_renderable
    +log_renderable
    +use_markup
    +message_text
    +highlighter
    +message_text
    +path
    +level
    +time_format
    +log_time
    +log_renderable
    --
    -__init__(level, console)
    +get_level_text(record): Text
    +emit(record)
    +render_message(record, message)
    +render()
  }

  class Measurement {
    +minimum: int
    +maximum: int
    +minimum
    +width
    +measurement: self
    +measurement
    +measurement
    +renderable
    +renderable
    +get_console_width
    +render_width
    --
    +span(): int
    +normalize()
    +with_maximum(width)
    +with_minimum(width)
    +clamp(min_width, max_width)
    +{class} get(console, options, renderable)
  }

  class Tree {
    +ASCII_GUIDES
    +TREE_GUIDES
    +node
    +stack
    +pop
    +push
    +new_line
    +get_style
    +null_style
    +guide_style
    +line
    +guide
    +line
    +levels
    +guide_style_stack
    +style_stack
    +remove_guide_styles
    +depth: int
    +stack_node
    +guide_style
    +guide_style
    +style
    +prefix
    +renderable_lines
    +stack
    +pop
    +push
    +minimum: int
    +maximum: int
    +measure
    +level: int
    +iter_tree
    +tree
    +indent
    +minimum
    +maximum
    --
    -__init__(label)
    +add(label)
    -__rich_console__(console, options)
    +make_guide(style): Segment
    -__rich_measure__(console, options)
  }

  class NoChange {
  }

  class ConsoleDimensions {
    +width: int
    +height: int
  }

  class ConsoleOptions {
    +size: ConsoleDimensions
    +legacy_windows: bool
    +min_width: int
    +max_width: int
    +is_terminal: bool
    +encoding: str
    +max_height: int
    +justify
    +overflow
    +no_wrap
    +highlight
    +markup
    +height
    +options: ConsoleOptions
    +options
    +options
    +options
    +options
    +options
    --
    +ascii_only(): bool
    +copy()
    +update()
    +update_width(width)
    +update_height(height)
    +reset_height()
    +update_dimensions(width, height)
  }

  class RichCast {
    -__rich__()
  }

  class ConsoleRenderable {
    -__rich_console__(console, options)
  }

  class CaptureError {
  }

  class NewLine {
    -__init__(count)
    -__rich_console__(console, options)
  }

  class ScreenUpdate {
    +x
    +move_to
    --
    -__init__(lines, x, y)
    -__rich_console__(console, options): RenderResult
  }

  class Capture {
    -__init__(console)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    +get(): str
  }

  class ThemeContext {
    -__init__(console, theme, inherit)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class PagerContext {
    +buffer
    +segments
    +segments
    +segments
    +content
    --
    -__init__(console, pager, styles, links)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class ScreenContext {
    -__init__(console, hide_cursor, style)
    +update()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class Group {
    -__init__()
    +renderables()
    -__rich_measure__(console, options)
    -__rich_console__(console, options): RenderResult
  }

  class ConsoleThreadLocals {
    +theme_stack: ThemeStack
    +buffer
    +buffer_index: int
  }

  class RenderHook {
    +process_renderables(renderables)
  }

  class Console {
    -_environ
    +jupyter_columns
    +width
    +width: JUPYTER_DEFAULT_COLUMNS
    +jupyter_lines
    +height
    +height: JUPYTER_DEFAULT_LINES
    +columns
    +width
    +lines
    +height
    +file
    +file
    +file: NULL_FILE
    +windows_console_features
    +color_term
    +term
    +color_system
    +render_result
    +environ
    +tty_compatible
    +force_color
    +isatty
    +is_dumb
    +width
    +height
    +streams
    +columns
    +width
    +lines
    +height
    +width
    +height
    +capture
    +status_renderable
    +changed: bool
    +changed: bool
    +measurement
    +render_iterable: RenderResult
    +renderable
    +render_iterable
    +text_renderable
    +render_iterable
    +iter_render
    +render_options
    +render_height
    +render_height
    +lines
    +extra_lines
    +pad_line
    +emoji_enabled
    +markup_enabled
    +highlight_enabled
    +rich_text
    +rich_text
    +highlight_text
    +style
    +style
    +renderables
    +text
    +append_text
    +append: _append
    +append: align_append
    -_highlighter: HighlighterType
    +sep_text
    +renderable
    +style
    +renderables
    +rule
    +raw_output: str
    +objects
    +soft_wrap
    +no_wrap: bool
    +overflow: str
    +crop: bool
    +render_hooks
    +renderables
    +renderables
    +render_options
    +new_segments
    +extend
    +render
    +buffer_extend
    +json_renderable
    +json_renderable
    +render_options
    +x: int
    +y: int
    +render_options
    +render_options
    +lines
    +screen_update
    +segments
    +traceback
    +frame
    +frame
    +frame_info
    +objects
    +render_hooks
    +renderables
    +renderables
    +link_path
    +path
    +locals_map
    +renderables
    +renderables
    +new_segments
    +extend
    +render
    +render_options
    +buffer_extend
    +devnull
    +use_legacy_windows_render: bool
    +fileno
    +use_legacy_windows_render
    +buffer
    +buffer
    +text
    +write
    +MAX_WRITE
    +batch
    +batch_append
    +size: int
    +size: int
    +text
    +output
    +append
    +color_system
    +legacy_windows
    +not_terminal
    +buffer
    +rendered
    +result
    +result
    +result
    +text
    +text
    +text
    +fragments
    +append
    +stylesheet: str
    +render_code_format
    +text
    +rule
    +text
    +text
    +styles
    +text
    +rule
    +style_number
    +text
    +text
    +stylesheet_rules
    +stylesheet_append
    +stylesheet
    +rendered_code
    +html
    +style_cache
    +css_rules
    +color
    +bgcolor
    +color
    +css
    +width
    +char_height: int
    +char_width
    +line_height
    +margin_top: int
    +margin_right: int
    +margin_bottom: int
    +margin_left: int
    +padding_top: int
    +padding_right: int
    +padding_bottom: int
    +padding_left: int
    +padding_width
    +padding_height
    +margin_width
    +margin_height
    +text_backgrounds
    +text_group
    +classes
    +style_no: int
    +tag_attribs
    +segments
    +unique_id
    +y: int
    +x: int
    +style
    +rules
    +class_name
    +has_background: bool
    +background
    +bgcolor
    +has_background
    +background
    +text_length
    +line_offsets
    +lines
    +styles
    +backgrounds
    +matrix
    +terminal_width
    +terminal_height
    +chrome
    +title_color
    +svg
    +svg
    --
    -__init__()
    -__repr__(): str
    +file()
    +file(new_file)
    -_buffer()
    -_buffer_index(): int
    -_buffer_index(value)
    -_theme_stack(): ThemeStack
    -_detect_color_system()
    -_enter_buffer()
    -_exit_buffer()
    +set_live(live)
    +clear_live()
    +push_render_hook(hook)
    +pop_render_hook()
    -__enter__()
    -__exit__(exc_type, exc_value, traceback)
    +begin_capture()
    +end_capture(): str
    +push_theme(theme)
    +pop_theme()
    +use_theme(theme): ThemeContext
    +color_system()
    +encoding(): str
    +is_terminal(): bool
    +is_dumb_terminal(): bool
    +options(): ConsoleOptions
    +size(): ConsoleDimensions
    +size(new_size)
    +width(): int
    +width(width)
    +height(): int
    +height(height)
    +bell()
    +capture(): Capture
    +pager(pager, styles, links): PagerContext
    +line(count)
    +clear(home)
    +status(status)
    +show_cursor(show): bool
    +set_alt_screen(enable): bool
    +is_alt_screen(): bool
    +set_window_title(title): bool
    +screen(hide_cursor, style)
    +measure(renderable): Measurement
    +render(renderable, options)
    +render_lines(renderable, options)
    +render_str(text)
    +get_style(name): Style
    -_collect_renderables(objects, sep, end)
    +align_append()
    +check_text()
    +rule(title)
    +control()
    +out()
    +print()
    +print_json(json)
    +update_screen(renderable)
    +update_screen_lines(lines, x, y)
    +print_exception()
    -{static} _caller_frame_info(currentframe)
    +log()
    +on_broken_pipe()
    -_check_buffer()
    -_write_buffer()
    -_render_buffer(buffer): str
    +input(prompt): str
    +export_text(): str
    +save_text(path)
    +export_html(): str
    +save_html(path)
    +export_svg(): str
    +get_svg_style(): str
    +escape_text(): str
    +make_tag(content): str
    +stringify(): str
    +save_svg(path)
  }

  class LiveRender {
    +renderable
    +style
    +lines
    +shape
    +lines
    +shape
    +lines
    +overflow_text
    +shape
    +new_line
    --
    -__init__(renderable, style, vertical_overflow)
    +set_renderable(renderable)
    +position_cursor(): Control
    +restore_cursor(): Control
    -__rich_console__(console, options): RenderResult
  }

  class Box {
    +box: self
    +box
    +box: ASCII
    +parts
    +append
    +left
    +horizontal
    +cross
    +right
    +left
    +horizontal
    +cross
    +right
    +left
    +horizontal: str
    +cross
    +right
    +left
    +horizontal
    +cross
    +right
    +parts
    +append
    +parts
    +append
    --
    -__init__(box)
    -__repr__(): str
    -__str__(): str
    +substitute(options, safe)
    +get_plain_headed_box()
    +get_top(widths): str
    +get_row(widths, level, edge): str
    +get_bottom(widths): str
  }

  class ColorSystem {
    +STANDARD: int
    +EIGHT_BIT: int
    +TRUECOLOR: int
    +WINDOWS: int
    --
    -__repr__(): str
    -__str__(): str
  }

  class ColorType {
    +DEFAULT: int
    +STANDARD: int
    +EIGHT_BIT: int
    +TRUECOLOR: int
    +WINDOWS: int
    --
    -__repr__(): str
  }

  class ColorParseError {
  }

  class Color {
    +name: str
    +type: ColorType
    +number
    +triplet
    +theme: DEFAULT_TERMINAL_THEME
    +original_color: color
    +color
    +color_number
    +color_match
    +triplet
    +number
    +components
    +triplet
    +number
    +number
    +gray
    +color_number: int
    +color_number: int
    +color_number
    +six_red
    +six_green
    +six_blue
    +color_number
    +triplet
    +triplet
    +color_number
    +triplet
    +triplet
    +color_number
    --
    -__rich__()
    -__rich_repr__(): Result
    +system(): ColorSystem
    +is_system_defined(): bool
    +is_default(): bool
    +get_truecolor(theme, foreground): ColorTriplet
    +{class} from_ansi(number)
    +{class} from_triplet(triplet)
    +{class} from_rgb(red, green, blue)
    +{class} default()
    +{class} parse(color)
    +get_ansi_codes(foreground)
    +downgrade(system)
  }

  class Align {
    +align
    +width
    +rendered
    +lines
    +lines
    +new_line
    +excess_space
    +style
    +pad
    +left
    +pad
    +pad_right
    +pad
    +blank_line
    +vertical_height
    +iter_segments
    +bottom_space
    +iter_segments
    +top_space
    +bottom_space
    +iter_segments
    +top_space
    +iter_segments
    +iter_segments
    +style
    +iter_segments
    +measurement
    --
    -__init__(renderable, align, style)
    -__repr__(): str
    +{class} left(renderable, style)
    +{class} center(renderable, style)
    +{class} right(renderable, style)
    -__rich_console__(console, options)
    +generate_segments()
    +blank_lines()
    -__rich_measure__(console, options): Measurement
  }

  class VerticalCenter {
    +style
    +lines
    +new_line
    +height
    +top_space
    +bottom_space
    +blank_line
    +measurement
    --
    -__init__(renderable, style)
    -__repr__(): str
    -__rich_console__(console, options)
    +blank_lines()
    -__rich_measure__(console, options): Measurement
  }

  class Theme {
    +styles
    +config
    +config
    +styles
    +theme
    --
    -__init__(styles, inherit)
    +config(): str
    +{class} from_file(config_file, source, inherit)
    +{class} read(path, inherit, encoding)
  }

  class ThemeStackError {
  }

  class ThemeStack {
    +styles
    +styles
    --
    -__init__(theme)
    +push_theme(theme, inherit)
    +pop_theme()
  }

  class _Bit {
    -__init__(bit_no)
    -__get__(obj, objtype)
  }

  class Style {
    -_color
    -_bgcolor
    -_attributes: int
    -_set_attributes: int
    -_hash
    -_null: bool
    -_meta
    +STYLE_ATTRIBUTES
    +style: Style
    +style: Style
    +meta
    +bold
    +dim
    +italic
    +underline
    +blink
    +blink2
    +reverse
    +conceal
    +strike
    +underline2
    +frame
    +encircle
    +overline
    +attributes
    +append
    +bits
    +sgr
    +append
    +attributes
    +style: Style
    +STYLE_ATTRIBUTES
    +color
    +bgcolor
    +attributes
    +link
    +words
    +word
    +word
    +bgcolor: word
    +word
    +attribute
    +word
    +link: word
    +color: word
    +style
    +theme
    +css
    +append
    +color
    +bgcolor
    +foreground_color
    +color
    +theme_color
    +theme_color
    +iter_styles
    +iter_styles
    +style: Style
    +style: Style
    +style: Style
    +attrs
    +rendered
    +rendered
    +text
    +new_style: Style
    +combined_style
    --
    -__init__()
    -_make_color(): Color
    +{class} null()
    +{class} from_color(color, bgcolor)
    +{class} from_meta(meta)
    +{class} on(meta)
    +link_id(): str
    -__str__(): str
    -__bool__(): bool
    -_make_ansi_codes(color_system): str
    +{class} normalize(style): str
    +{class} pick_first(): StyleType
    -__rich_repr__(): Result
    -__eq__(other): bool
    -__ne__(other): bool
    -__hash__(): int
    +color()
    +bgcolor()
    +link()
    +transparent_background(): bool
    +background_style()
    +meta()
    +without_color()
    +{class} parse(style_definition)
    +get_html_style(theme): str
    +{class} combine(styles)
    +{class} chain()
    +copy()
    +clear_meta_and_links()
    +update_link(link)
    +render(text): str
    +test(text)
    -_add(style)
    -__add__(style)
  }

  class StyleStack {
    -__init__(default_style)
    -__repr__(): str
    +current(): Style
    +push(style)
    +pop(): Style
  }

  class LogRender {
    +output
    +row
    +log_time
    +time_format
    +log_time_display
    +log_time_display
    +path_text
    --
    -__init__(show_time, show_level, show_path, time_format, omit_repeated_times, level_width)
    -__call__(console, renderables, log_time, time_format, level, path, line_no, link_path)
  }

  class NoEmoji {
  }

  class Emoji {
    +VARIANTS
    --
    -__init__(name, style, variant)
    +{class} replace(text): str
    -__repr__(): str
    -__str__(): str
    -__rich_console__(console, options)
  }

  class LayoutRender {
    +region: Region
    +render
  }

  class LayoutError {
  }

  class NoSplitter {
  }

  class _Placeholder {
    +highlighter
    +width
    +height
    +layout
    +title
    --
    -__init__(layout, style)
    -__rich_console__(console, options): RenderResult
  }

  class Splitter {
    +name: str
    --
    +get_tree_icon(): str
    +divide(children, region)
  }

  class RowSplitter {
    +name: str
    +render_widths
    +offset: int
    --
    +get_tree_icon(): str
    +divide(children, region)
  }

  class ColumnSplitter {
    +name: str
    +render_heights
    +offset: int
    --
    +get_tree_icon(): str
    +divide(children, region)
  }

  class Layout {
    +splitters
    +named_layout
    +layout
    +icon
    +table
    +text: RenderableType
    +layout: self
    +tree
    +layout
    +lines
    +stack
    +push
    +pop
    +layout_regions
    +append_layout_region
    +children
    +region_map
    +render_width
    +render_height
    +region_map
    +layout_regions
    +render_map
    +render_lines
    +update_dimensions
    +lines
    +width
    +height
    +render_map
    +layout_lines
    +new_line
    --
    -__init__(renderable)
    -__rich_repr__(): Result
    +renderable(): RenderableType
    +children()
    +map(): RenderMap
    +get(name)
    -__getitem__(name)
    +tree()
    +summary(): Table
    +recurse(layout)
    +split()
    +add_split()
    +split_row()
    +split_column()
    +unsplit()
    +update(renderable)
    +refresh_screen(console, layout_name)
    -_make_region_map(width, height): RegionMap
    +render(console, options): RenderMap
    -__rich_console__(console, options): RenderResult
  }

  class Renderables {
    +dimensions
    --
    -__init__(renderables)
    -__rich_console__(console, options)
    -__rich_measure__(console, options)
    +append(renderable)
    -__iter__()
  }

  class Lines {
    +words
    +words_size
    +num_spaces
    +spaces
    +index: int
    +index
    +tokens
    +style
    +next_style
    +space_style
    --
    -__init__(lines)
    -__repr__(): str
    -__iter__()
    -__getitem__(index)
    -__getitem__(index)
    -__getitem__(index)
    -__setitem__(index, value)
    -__len__(): int
    -__rich_console__(console, options)
    +append(line)
    +extend(lines)
    +pop(index)
    +justify(console, width, justify, overflow)
  }

  class Frame {
    +filename: str
    +lineno: int
    +name: str
    +line: str
    +locals
    +last_instruction
  }

  class _SyntaxError {
    +offset: int
    +filename: str
    +line: str
    +lineno: int
    +msg: str
    +notes
  }

  class Stack {
    +top(): T
    +push(item)
  }

  class Trace {
    +stacks
  }

  class PathHighlighter {
    +highlights
  }

  class Traceback {
    +LEXERS
    +trace
    +path
    +path: suppress_entity
    +path
    +rich_traceback
    +stacks
    +is_cause: bool
    +notes
    +stack
    +append
    +filename
    +last_instruction
    +last_instruction: NoneType
    +instruction_index
    +instruction_position
    +last_instruction
    +filename
    +frame
    +cause
    +exc_type
    +exc_value: cause
    +traceback
    +is_cause: bool
    +cause
    +exc_type
    +exc_value: cause
    +traceback
    +is_cause: bool
    +trace
    +theme
    +background_style
    +token_style
    +traceback_theme
    +highlighter
    +stack_renderable: ConsoleRenderable
    +stack_renderable
    +grouped_exceptions
    +highlighter
    +path_highlighter
    +text
    +syntax_error_text
    +offset
    +ext
    +new_line_index
    +first_line
    +path_highlighter
    +theme
    +exclude_frames
    +exclude_frames
    +excluded: bool
    +excluded: bool
    +excluded: bool
    +first
    +frame_filename
    +suppressed
    +text
    +text
    +code_lines
    +code
    +lexer_name
    +syntax
    +line
    +column1
    +column2
    --
    -__init__(trace)
    +{class} from_exception(exc_type, exc_value, traceback)
    +{class} extract(exc_type, exc_value, traceback): Trace
    +safe_str(): str
    +get_locals()
    -__rich_console__(console, options): RenderResult
    +render_stack(last): RenderResult
    -_render_syntax_error(syntax_error): RenderResult
    -{class} _guess_lexer(filename, code): str
    -_render_stack(stack): RenderResult
    +render_locals()
  }

  class Region {
    +x: int
    +y: int
    +width: int
    +height: int
  }

  class Control {
    +control_codes
    +rendered_codes
    +control: ControlType
    +control
    --
    -__init__()
    +{class} bell()
    +{class} home()
    +{class} move(x, y)
    +get_codes()
    +{class} move_to_column(x, y)
    +{class} move_to(x, y)
    +{class} clear()
    +{class} show_cursor(show)
    +{class} alt_screen(enable)
    +{class} title(title)
    -__str__(): str
    -__rich_console__(console, options)
  }

  class NullFile {
    +close()
    +isatty(): bool
    +read(__n): str
    +readable(): bool
    +readline(__limit): str
    +readlines(__hint)
    +seek(__offset, __whence): int
    +seekable(): bool
    +tell(): int
    +truncate(__size): int
    +writable(): bool
    +writelines(__lines)
    -__next__(): str
    -__iter__()
    -__enter__()
    -__exit__(__t, __value, __traceback)
    +write(text): int
    +flush()
    +fileno(): int
  }

  class FileProxy {
    +buffer
    +lines
    +console
    +output
    +output
    --
    -__init__(console, file)
    +rich_proxied_file()
    -__getattr__(name): Any
    +write(text): int
    +flush()
    +fileno(): int
  }

  class Palette {
    +table
    +get_color
    +red_mean
    +red
    +green
    +blue
    +min_index
    --
    -__init__(colors)
    -__getitem__(number): ColorTriplet
    -__rich__()
    +match(color): int
    +get_color_distance(): float
  }

  class ColorBox {
    +h
    +l
    +bgcolor
    +color
    --
    -__rich_console__(console, options): RenderResult
    -__rich_measure__(console, options): Measurement
  }

  class Tag {
    +name: str
    +parameters
    --
    -__str__(): str
    +markup(): str
  }

  class Edge {
    +size
    +ratio: int
    +minimum_size: int
  }

  class E {
    +size
    +ratio: int
    +minimum_size: int
  }

  class ReprError {
  }

  class Foo {
  }

  class Constrain {
    +child_options
    +options
    +measurement
    --
    -__init__(renderable, width)
    -__rich_console__(console, options)
    -__rich_measure__(console, options)
  }

  class RichFormatter {
    +pprint: bool
    --
    -__call__(value): Any
  }

  class Pretty {
    +pretty_str
    +pretty_text
    +pretty_text
    +pretty_text
    +pretty_str
    +text_width
    --
    -__init__(_object, highlighter)
    -__rich_console__(console, options)
    -__rich_measure__(console, options)
  }

  class Node {
    +key_repr: str
    +value_repr: str
    +open_brace: str
    +close_brace: str
    +empty: str
    +last: bool
    +is_tuple: bool
    +is_namedtuple: bool
    +children
    +key_separator: str
    +separator: str
    +total_length: start_length
    +repr_text
    +lines
    +line_no: int
    +line
    +repr_str
    --
    +iter_tokens()
    +check_length(start_length, max_length): bool
    -__str__(): str
    +render(max_width, indent_size, expand_all): str
  }

  class _Line {
    +parent
    +is_root: bool
    +node
    +text: str
    +suffix: str
    +whitespace: str
    +expanded: bool
    +last: bool
    +start_length
    +node
    +whitespace
    +new_line
    +new_line
    +child_whitespace
    +tuple_of_one
    +separator
    +line
    --
    +expandable(): bool
    +check_length(max_length): bool
    +expand(indent_size)
    -__str__(): str
  }

  class BrokenRepr {
    -__repr__(): str
  }

  class StockKeepingUnit {
    +name: str
    +description: str
    +price: float
    +category: str
    +reviews
  }

  class Thing {
    -__repr__(): str
  }

  class Columns {
    +render_str
    +renderables
    +width_padding
    +max_width
    +widths
    +column_count
    +get_measurement
    +renderable_widths
    +renderable_widths
    +item_count
    +width_renderables
    +column_lengths
    +row_count
    +cells
    +row: int
    +col: int
    +row: int
    +table
    +column_count
    +column_no: int
    +total_width
    +column_count
    +column_no
    +get_renderable
    +align
    +right_to_left
    +add_row
    +row
    +row
    --
    -__init__(renderables, padding)
    +add_renderable(renderable)
    -__rich_console__(console, options): RenderResult
    +iter_renderables()
  }

  class Rule {
    +width
    +characters
    +chars_len
    +title_text
    +title_text
    +required_space
    +truncate_width
    +rule_text
    +side_width
    +left
    +right_length
    +right
    +rule_text
    --
    -__init__(title)
    -__repr__(): str
    -__rich_console__(console, options): RenderResult
    -_rule_line(chars_len, width): Text
    -__rich_measure__(console, options): Measurement
  }

  class Inspect {
    +methods: bool
    +private: bool
    +dunder: bool
    +title_str
    +title_text
    +source_filename
    +source_filename
    +callable_name
    +signature_text
    +qualname
    +prefix: str
    +prefix: str
    +prefix: str
    +qual_signature
    +obj
    +keys
    +total_items
    +keys
    +keys
    +not_shown_count
    +items
    +items_table
    +add_row
    +highlighter
    +signature
    +doc_text
    +doc_text
    +key_text
    +warning
    +docs
    +doc
    +docs
    +docs
    +docs
    --
    -__init__(obj)
    -_make_title(obj): Text
    -__rich__(): Panel
    -_get_signature(name, obj)
    -_render()
    +sort_items()
    +safe_getattr()
    -_get_formatted_doc(object_)
  }

  class Pager {
    +show(content)
  }

  class SystemPager {
    -_pager(content): Any
    +show(content)
  }

  class Span {
    +start: int
    +end: int
    +style
    +span1
    +span2
    --
    -__repr__(): str
    -__bool__(): bool
    +split(offset)
    +move(offset)
    +right_crop(offset)
    +extend(cells)
  }

  class Text {
    +sanitized_text
    +result
    +text
    +lines
    +output
    +plain
    +markup_spans
    +position: int
    +append
    +position: offset
    +markup
    +rendered_text
    +joiner
    +decoder
    +result
    +styled_text
    +text
    +append
    +sanitized_text
    +old_length
    +copy_self
    +copy_self
    +length
    +start
    +end: length
    +end
    +length
    +start
    +end: length
    +end
    +style
    +meta
    +offset
    +get_style
    +style
    +spans
    +new_spaces
    +end_offset
    +count: int
    +append_span
    +plain
    +re_highlight
    +get_span
    +match_style
    +re_words
    +add_span
    +count: int
    +text_length
    +excess
    +whitespace_match
    +whitespace_count
    +length
    +tab_size: int
    +justify
    +overflow
    +lines
    +all_lines
    +text
    +lines
    +max_text_width
    +words
    +min_text_width
    +text
    +get_style
    +enumerated_spans
    +style_map
    +spans
    +stack
    +stack_append
    +stack_pop
    +style_cache
    +style_cache_get
    +combine
    +styles
    +cached_style
    +current_style
    +new_text
    +extend_text
    +append_span
    +extend_spans
    +offset: int
    +tab_size
    +tab_size: int
    +new_text
    +append
    +cell_position: int
    +parts
    +tab_remainder
    +spaces
    +result
    +length
    +spaces
    +max_offset
    +pad_characters
    +excess_space
    +left
    +sanitized_text
    +offset
    +text_length
    +text_length
    +text_length
    +append_text
    +append_span
    +offset
    +content
    +text
    +lines
    +lines
    +text
    +text_length
    +divide_offsets
    +line_ranges
    +style
    +justify
    +overflow
    +new_lines
    +line_count
    +lower_bound: int
    +upper_bound: line_count
    +start_line_no
    +upper_bound
    +lower_bound
    +start_line_no
    +end_line_no: start_line_no
    +end_line_no: start_line_no
    +lower_bound: start_line_no
    +upper_bound: line_count
    +upper_bound
    +lower_bound
    +end_line_no
    +new_start
    +new_end
    +max_offset
    +wrap_justify
    +wrap_overflow
    +no_wrap
    +lines
    +new_lines
    +offsets
    +new_lines
    +lines: Lines
    +append
    +indentation
    +indentation: int
    +text
    +indent_line
    +re_indent
    +new_lines
    +add_line
    +blank_lines: int
    +match
    +indent
    +new_indent
    +blank_lines: int
    +new_text
    --
    -__init__(text, style)
    -__len__(): int
    -__bool__(): bool
    -__str__(): str
    -__repr__(): str
    -__add__(other)
    -__eq__(other): bool
    -__contains__(other): bool
    -__getitem__(slice)
    +get_text_at()
    +cell_len(): int
    +markup(): str
    +{class} from_markup(text)
    +{class} from_ansi(text)
    +{class} styled(text, style)
    +{class} assemble()
    +plain(): str
    +plain(new_text)
    +spans()
    +spans(spans)
    +blank_copy(plain)
    +copy()
    +stylize(style, start, end)
    +stylize_before(style, start, end)
    +apply_meta(meta, start, end)
    +on(meta)
    +remove_suffix(suffix)
    +get_style_at_offset(console, offset): Style
    +extend_style(spaces)
    +highlight_regex(re_highlight, style): int
    +highlight_words(words, style): int
    +rstrip()
    +rstrip_end(size)
    +set_length(new_length)
    -__rich_console__(console, options)
    -__rich_measure__(console, options): Measurement
    +render(console, end)
    +get_current_style(): Style
    +join(lines)
    +iter_text()
    +expand_tabs(tab_size)
    +truncate(max_width)
    -_trim_spans()
    +pad(count, character)
    +pad_left(count, character)
    +pad_right(count, character)
    +align(align, width, character)
    +append(text, style)
    +append_text(text)
    +append_tokens(tokens)
    +copy_styles(text)
    +split(separator): Lines
    +flatten_spans()
    +divide(offsets): Lines
    +right_crop(amount)
    +wrap(console, width): Lines
    +fit(width): Lines
    +detect_indentation(): int
    +with_indent_guides(indent_size)
  }

  class Highlighter {
    +highlight_text
    +highlight_text
    --
    -__call__(text): Text
    +highlight(text)
  }

  class NullHighlighter {
    +highlight(text)
  }

  class RegexHighlighter {
    +highlights
    +base_style: str
    +highlight_regex
    --
    +highlight(text)
  }

  class ReprHighlighter {
    +base_style: str
    +highlights
  }

  class JSONHighlighter {
    +JSON_STR: str
    +JSON_WHITESPACE
    +base_style: str
    +highlights
    +plain
    +append
    +whitespace
    +cursor: end
    +char
    --
    +highlight(text)
  }

  class ISO8601Highlighter {
    +base_style: str
    +highlights
  }

  class TerminalTheme {
    -__init__(background, foreground, normal, bright)
  }

  class Bar {
    +width
    +prefix_complete_eights
    +prefix_bar_count
    +prefix_eights_count
    +body_complete_eights
    +body_bar_count
    +body_eights_count
    +prefix
    +body
    +suffix
    --
    -__init__(size, begin, end)
    -__repr__(): str
    -__rich_console__(console, options): RenderResult
    -__rich_measure__(console, options): Measurement
  }

  class _RefreshThread {
    -__init__(live, refresh_per_second)
    +stop()
    +run()
  }

  class Live {
    +renderable
    +renderable
    +renderable
    +reset
    +renderables
    +renderables
    --
    -__init__(renderable)
    +is_started(): bool
    +get_renderable(): RenderableType
    +start(refresh)
    +stop()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    -_enable_redirect_io()
    -_disable_redirect_io()
    +renderable(): RenderableType
    +update(renderable)
    +refresh()
    +process_renderables(renderables)
  }

  class SyntaxTheme {
    +get_style_for_token(token_type): Style
    +get_background_style(): Style
  }

  class PygmentsSyntaxTheme {
    +pygments_style
    +style
    +color
    +bgcolor
    +style
    --
    -__init__(theme)
    +get_style_for_token(token_type): Style
    +get_background_style(): Style
  }

  class ANSISyntaxTheme {
    +get_style
    +token
    +style
    +style: _style
    +token
    --
    -__init__(style_map)
    +get_style_for_token(token_type): Style
    +get_background_style(): Style
  }

  class _SyntaxHighlightRange {
    +style: StyleType
    +start: SyntaxPosition
    +end: SyntaxPosition
    +style_before: bool
  }

  class Syntax {
    -_pygments_style_class
    -_theme: SyntaxTheme
    +theme: SyntaxTheme
    +theme
    +theme
    +code
    +lexer
    +lexer
    +lexer_name: str
    +lexer
    +extension
    +lexer
    +lexer_name
    +lexer_name
    +default_style
    +style
    +base_style
    +justify: JustifyMethod
    +text
    +lexer
    +tokens
    +line_no: int
    +background_style
    +background_color
    +foreground_color
    +new_color
    +column_width: int
    +column_width
    +background_style
    +number_style
    +highlight_number_style
    +number_style
    +highlight_number_style
    +padding
    +width
    +lines
    +width
    +segments
    +transparent_background
    +code_width
    +text
    +style
    +text
    +syntax_lines
    +line_offset: int
    +line_offset
    +lines
    +lines
    +style
    +lines
    +numbers_column_width
    +render_options
    +highlight_line
    +new_line
    +line_pointer
    +wrapped_lines
    +segments
    +wrapped_lines
    +wrapped_lines
    +wrapped_line_left_pad
    +line_column
    +code
    +newlines_offsets
    +start
    +end
    +ends_on_nl
    +processed_code
    +processed_code
    +processed_code
    --
    +{class} get_theme(name): SyntaxTheme
    -__init__(code, lexer)
    +{class} from_path(path, encoding, lexer, theme, dedent, line_numbers, line_range, start_line, highlight_lines, code_width, tab_size, word_wrap, background_color, indent_guides, padding)
    +{class} guess_lexer(path, code): str
    -_get_base_style(): Style
    -_get_token_color(token_type)
    +lexer()
    +default_lexer(): Lexer
    +highlight(code, line_range): Text
    +line_tokenize()
    +tokens_to_spans()
    +stylize_range(style, start, end, style_before)
    -_get_line_numbers_color(blend): Color
    -_numbers_column_width(): int
    -_get_number_styles(console)
    -__rich_measure__(console, options)
    -__rich_console__(console, options): RenderResult
    -_get_syntax(console, options)
    -_apply_stylized_ranges(text)
    -_process_code(code)
  }

  class Column {
    +header
    +footer
    +header_style: StyleType
    +footer_style: StyleType
    +style: StyleType
    +justify
    +vertical
    +overflow
    +width
    +min_width
    +max_width
    +ratio
    +no_wrap: bool
    +highlight: bool
    -_index: int
    -_cells
    --
    +copy()
    +cells()
    +flexible(): bool
  }

  class Row {
    +style
    +end_section: bool
  }

  class _Cell {
    +style: StyleType
    +renderable
    +vertical: VerticalAlignMethod
  }

  class Table {
    +columns
    +rows
    +append_column
    +width: int
    +style
    +row_style
    +max_width
    +max_width
    +extra_width
    +max_width
    +measurements
    +minimum_width
    +maximum_width
    +measurement
    +measurement
    +column
    +cell_renderables
    +columns
    +cell_renderables
    +column
    +column
    +max_width
    +max_width
    +extra_width
    +widths
    +table_width
    +render_options
    +render_text
    +max_width
    +columns
    +width_ranges
    +widths
    +get_padding_width
    +extra_width
    +ratios
    +fixed_widths
    +flex_minimum
    +flexible_width
    +flex_widths
    +iter_flex_widths
    +table_width
    +widths
    +table_width
    +excess_width
    +widths
    +table_width
    +width_ranges
    +widths
    +pad_widths
    +widths
    +total_width
    +excess_width
    +max_column
    +second_max_column
    +column_difference
    +ratios
    +max_reduce
    +widths
    +total_width
    +excess_width
    +collapse_padding
    +pad_edge
    +padding
    +any_padding
    +first_column
    +last_column
    -_padding_cache
    +cached
    +left
    +bottom
    +left: int
    +right: int
    +top: int
    +bottom: int
    +raw_cells
    +get_style
    +header_style
    +cell_style
    +footer_style
    +pad_left
    +max_width
    +padding_width
    +min_widths
    +max_widths
    +append_min
    +append_max
    +get_render_width
    +measurement
    +measurement
    +table_style
    +border_style
    +row_cells
    +new_line
    +columns
    +show_header
    +show_footer
    +show_edge
    +show_lines
    +leading
    +box_segments
    +box_segments
    +get_row_style
    +get_style
    +header_row
    +footer_row
    +row
    +max_height: int
    +cells
    +row_style
    +row_style
    +render_options
    +lines
    +max_height
    +row_height
    +vertical: str
    +vertical: str
    +divider
    +end_section
    --
    -__init__()
    +{class} grid()
    +expand(): bool
    +expand(expand)
    -_extra_width(): int
    +row_count(): int
    +get_row_style(console, index): StyleType
    -__rich_measure__(console, options): Measurement
    +padding()
    +padding(padding)
    +add_column(header, footer)
    +add_row()
    +add_cell(renderable)
    +add_section()
    -__rich_console__(console, options)
    +render_annotation(style, justify)
    -_calculate_column_widths(console, options)
    -{class} _collapse_widths(widths, wrapable, max_width)
    -_get_cells(console, column_index, column)
    +get_padding(last_row)
    -_get_padding_width(column_index): int
    -_measure_column(console, options, column): Measurement
    -_render(console, options, widths)
    +align_cell(vertical, width, style)
  }

  class ProgressBar {
    +completed
    +completed
    +bar
    +segments
    +append
    +fore_color
    +back_color
    +cos
    +pi
    +from_triplet
    +position
    +fade
    +color
    +fore_style
    +back_style
    +pulse_segments
    +segment_count
    +current_time
    +segments
    +offset
    +segments
    +width
    +ascii
    +should_pulse
    +completed
    +bar
    +half_bar_right
    +half_bar_left
    +complete_halves
    +bar_count
    +half_bar_count
    +style
    +is_finished
    +complete_style
    +remaining_bars
    --
    -__init__(total, completed, width, pulse, style, complete_style, finished_style, pulse_style, animation_time)
    -__repr__(): str
    +percentage_completed()
    -_get_pulse_segments(fore_style, back_style, color_system, no_color, ascii)
    +update(completed, total)
    -_render_pulse(console, width, ascii)
    -__rich_console__(console, options): RenderResult
    -__rich_measure__(console, options): Measurement
  }

  class ConsoleError {
  }

  class StyleError {
  }

  class StyleSyntaxError {
  }

  class MissingStyle {
  }

  class StyleStackError {
  }

  class NotRenderableError {
  }

  class MarkupError {
  }

  class LiveError {
  }

  class NoAltScreen {
  }

  class PromptError {
  }

  class InvalidResponse {
    -__init__(message)
    -__rich__(): TextType
  }

  class PromptBase {
    +response_type: type
    +validate_error_message: str
    +illegal_choice_message: str
    +prompt_suffix: str
    +choices
    +prompt
    +choices
    +value
    +return_value: PromptType
    +return_value
    +prompt
    +value
    +return_value
    --
    -__init__(prompt)
    +{class} ask(prompt)
    +{class} ask(prompt): PromptType
    +{class} ask(prompt): Any
    +render_default(default): Text
    +make_prompt(default): Text
    +{class} get_input(console, prompt, password, stream): str
    +check_choice(value): bool
    +process_response(value): PromptType
    +on_validate_error(value, error)
    +pre_prompt()
    -__call__(): PromptType
    -__call__()
    -__call__(): Any
  }

  class Prompt {
    +response_type: str
  }

  class IntPrompt {
    +response_type: int
    +validate_error_message: str
  }

  class FloatPrompt {
    +response_type: float
    +validate_error_message: str
  }

  class Confirm {
    +response_type: bool
    +validate_error_message: str
    +choices
    +value
    --
    +render_default(default): Text
    +process_response(value): bool
  }

  class ControlType {
    +BELL: int
    +CARRIAGE_RETURN: int
    +HOME: int
    +CLEAR: int
    +SHOW_CURSOR: int
    +HIDE_CURSOR: int
    +ENABLE_ALT_SCREEN: int
    +DISABLE_ALT_SCREEN: int
    +CURSOR_UP: int
    +CURSOR_DOWN: int
    +CURSOR_FORWARD: int
    +CURSOR_BACKWARD: int
    +CURSOR_MOVE_TO_COLUMN: int
    +CURSOR_MOVE_TO: int
    +ERASE_IN_LINE: int
    +SET_WINDOW_TITLE: int
  }

  class Segment {
    +text: str
    +style
    +control
    +cell_length
    +cell_size: get_character_cell_size
    +pos
    +before
    +cell_pos
    +out_by
    +result_segments: segments
    +apply
    +result_segments
    +result_segments
    +line
    +append
    +line
    +append
    +line
    +append
    +adjust_line_length
    +new_line_segment
    +cropped_line
    +line_length
    +new_line
    +new_line
    +new_line
    +new_line
    +append
    +line_length: int
    +segment_length
    +text
    +new_line
    +get_line_length
    +max_width
    +blank
    +adjust_line_length
    +shaped_lines
    +extra_lines
    +lines
    +blank
    +lines
    +extra_lines
    +lines
    +blank
    +lines
    +extra_lines
    +lines
    +blank
    +top_lines
    +bottom_lines
    +lines
    +iter_segments
    +last_segment
    +last_segment
    +last_segment: segment
    +cache
    +colorless_style
    +colorless_style
    +split_segments
    +add_segment
    +iter_cuts
    +cut
    +pos: int
    +segments_clear
    +segments_copy
    +end_pos
    +pos: end_pos
    +pos: end_pos
    +cut
    +pos: cut
    +cut
    --
    +cell_length(): int
    -__rich_repr__(): Result
    -__bool__(): bool
    +is_control(): bool
    -{class} _split_cells(segment, cut)
    +split_cells(cut)
    +{class} line()
    +{class} apply_style(segments, style, post_style)
    +{class} filter_control(segments, is_control)
    +{class} split_lines(segments)
    +{class} split_and_crop_lines(segments, length, style, pad, include_new_lines)
    +{class} adjust_line_length(line, length, style, pad)
    +{class} get_line_length(line): int
    +{class} get_shape(lines)
    +{class} set_shape(lines, width, height, style, new_lines)
    +{class} align_top(lines, width, height, style, new_lines)
    +{class} align_bottom(lines, width, height, style, new_lines)
    +{class} align_middle(lines, width, height, style, new_lines)
    +{class} simplify(segments)
    +{class} strip_links(segments)
    +{class} strip_styles(segments)
    +{class} remove_color(segments)
    +{class} divide(segments, cuts)
  }

  class Segments {
    +line
    --
    -__init__(segments, new_lines)
    -__rich_console__(console, options)
  }

  class SegmentLines {
    +new_line
    --
    -__init__(lines, new_lines)
    -__rich_console__(console, options)
  }

  class _AnsiToken {
    +plain: str
    +sgr
    +osc
  }

  class AnsiDecoder {
    +from_ansi
    +from_rgb
    +text
    +append
    +line
    +codes
    +iter_codes
    +color_type
    +color_type
    --
    -__init__()
    +decode(terminal_text)
    +decode_line(line): Text
  }

  class _TrackThread {
    +task_id
    +advance
    +update_period
    +last_completed: int
    +wait
    +completed
    +last_completed: completed
    --
    -__init__(progress, task_id, update_period)
    +run()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class _Reader {
    +line
    +block
    +n
    +line
    +lines
    +pos
    --
    -__init__(handle, progress, task, close_handle)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    -__iter__(): BinaryIO
    -__next__(): bytes
    +closed(): bool
    +fileno(): int
    +isatty(): bool
    +mode(): str
    +name(): str
    +readable(): bool
    +seekable(): bool
    +writable(): bool
    +read(size): bytes
    +readinto(b)
    +readline(size): bytes
    +readlines(hint)
    +close()
    +seek(offset, whence): int
    +tell(): int
    +write(s): int
    +writelines(lines)
  }

  class _ReadContext {
    -__init__(progress, reader)
    -__enter__(): _I
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class ProgressColumn {
    +max_refresh
    +current_time
    +renderable
    --
    -__init__(table_column)
    +get_table_column(): Column
    -__call__(task): RenderableType
    +render(task): RenderableType
  }

  class RenderableColumn {
    -__init__(renderable)
    +render(task): RenderableType
  }

  class SpinnerColumn {
    +text
    --
    -__init__(spinner_name, style, speed, finished_text, table_column)
    +set_spinner(spinner_name, spinner_style, speed)
    +render(task): RenderableType
  }

  class TextColumn {
    +text
    +text
    --
    -__init__(text_format, style, justify, markup, highlighter, table_column)
    +render(task): Text
  }

  class BarColumn {
    -__init__(bar_width, style, complete_style, finished_style, pulse_style, table_column)
    +render(task): ProgressBar
  }

  class TimeElapsedColumn {
    +elapsed
    +delta
    --
    +render(task): Text
  }

  class TaskProgressColumn {
    +data_speed
    +text_format
    +text
    +text
    --
    -__init__(text_format, text_format_no_percentage, style, justify, markup, highlighter, table_column, show_speed)
    +{class} render_speed(speed): Text
    +render(task): Text
  }

  class TimeRemainingColumn {
    +max_refresh: float
    +task_time
    +style: str
    +task_time
    +style: str
    +formatted
    +formatted
    --
    -__init__(compact, elapsed_when_finished, table_column)
    +render(task): Text
  }

  class FileSizeColumn {
    +data_size
    --
    +render(task): Text
  }

  class TotalFileSizeColumn {
    +data_size
    --
    +render(task): Text
  }

  class MofNCompleteColumn {
    +completed
    +total
    +total_width
    --
    -__init__(separator, table_column)
    +render(task): Text
  }

  class DownloadColumn {
    +completed
    +unit_and_suffix_calculation_base
    +precision
    +completed_ratio
    +completed_str
    +total
    +total_ratio
    +total_str
    +total_str: str
    +download_status
    +download_text
    --
    -__init__(binary_units, table_column)
    +render(task): Text
  }

  class TransferSpeedColumn {
    +speed
    +data_speed
    --
    +render(task): Text
  }

  class ProgressSample {
    +timestamp: float
    +completed: float
  }

  class Task {
    +id: TaskID
    +description: str
    +total
    +completed: float
    -_get_time: GetTimeCallable
    +finished_time
    +visible: bool
    +fields
    +start_time
    +stop_time
    +finished_speed
    -_progress
    -_lock: RLock
    +completed
    +completed
    +progress
    +total_time
    +iter_progress
    +total_completed
    +speed
    +speed
    +remaining
    +estimate
    --
    +get_time(): float
    +started(): bool
    +remaining()
    +elapsed()
    +finished(): bool
    +percentage(): float
    +speed()
    +time_remaining()
    -_reset()
  }

  class Progress {
    +total
    +task_id
    +advance
    +refresh
    +total_bytes
    +total_bytes: total
    +total_bytes
    +task_id
    +line_buffering
    +buffering
    +buffering
    +total
    +task_id
    +handle
    +reader
    +task
    +task
    +current_time
    +task
    +completed_start
    +update_completed
    +current_time
    +old_sample_time
    +popleft
    +current_time
    +task
    +current_time
    +task
    +completed_start
    +update_completed
    +old_sample_time
    +popleft
    +renderable
    +table
    +table_columns
    +table
    +task
    +new_task_index
    --
    -__init__()
    +{class} get_default_columns()
    +console(): Console
    +tasks()
    +task_ids()
    +finished(): bool
    +start()
    +stop()
    -__enter__(): Self
    -__exit__(exc_type, exc_val, exc_tb)
    +track(sequence, total, completed, task_id, description, update_period)
    +wrap_file(file, total): BinaryIO
    +open(file, mode, buffering, encoding, errors, newline): BinaryIO
    +open(file, mode, buffering, encoding, errors, newline): TextIO
    +open(file, mode, buffering, encoding, errors, newline)
    +start_task(task_id)
    +stop_task(task_id)
    +update(task_id)
    +reset(task_id)
    +advance(task_id, advance)
    +refresh()
    +get_renderable(): RenderableType
    +get_renderables()
    +make_tasks_table(tasks): Table
    -__rich__(): RenderableType
    +add_task(description, start, total, completed, visible): TaskID
    +remove_task(task_id)
  }

  class WindowsConsoleFeatures {
    +vt: bool
    +truecolor: bool
  }

  class LegacyWindowsError {
  }

  class WindowsCoordinates {
    +row: int
    +col: int
    --
    +{class} from_param(value): COORD
  }

  class CONSOLE_SCREEN_BUFFER_INFO {
  }

  class CONSOLE_CURSOR_INFO {
  }

  class LegacyWindowsTerm {
    +BRIGHT_BIT: int
    +ANSI_TO_WINDOWS
    +handle
    +default_text
    +coord: COORD
    +screen_size: COORD
    +color
    +bgcolor
    +fore
    +fore
    +fore
    +fore
    +fore
    +fore
    +back
    +back
    +back
    +back
    +screen_size
    +cursor_position
    +cells_to_erase
    +start_coordinates
    +cursor_position
    +cells_to_erase
    +start
    +cursor_position
    +cursor_position
    +col: int
    +col
    +current_cursor_size
    +invisible_cursor
    +current_cursor_size
    +visible_cursor
    +cursor_info
    --
    -__init__(file)
    +cursor_position(): WindowsCoordinates
    +screen_size(): WindowsCoordinates
    +write_text(text)
    +write_styled(text, style)
    +move_cursor_to(new_position)
    +erase_line()
    +erase_end_of_line()
    +erase_start_of_line()
    +move_cursor_up()
    +move_cursor_down()
    +move_cursor_forward()
    +move_cursor_to_column(column)
    +move_cursor_backward()
    +hide_cursor()
    +show_cursor()
    +set_title(title)
    -_get_cursor_size(): int
  }

  class Panel {
    +title_text
    +subtitle_text
    +renderable
    +style
    +partial_border_style
    +border_style
    +width
    +safe_box: bool
    +box
    +text
    +excess_space
    +left
    +title_text
    +child_width
    +child_height
    +child_width
    +width
    +child_options
    +lines
    +line_start
    +line_end
    +new_line
    +title_text
    +subtitle_text
    +subtitle_text
    +padding
    +renderables
    +width
    +width
    --
    -__init__(renderable, box)
    +{class} fit(renderable, box)
    -_title()
    -_subtitle()
    -__rich_console__(console, options)
    +align_text(width, align, character, style): Text
    -__rich_measure__(console, options)
  }

  class Styled {
    +style
    +rendered_segments
    +segments
    --
    -__init__(renderable, style)
    -__rich_console__(console, options)
    -__rich_measure__(console, options): Measurement
  }

  class Spinner {
    +spinner
    +text
    +frame_no
    +frame
    +table
    --
    -__init__(name, text)
    -__rich_console__(console, options)
    -__rich_measure__(console, options): Measurement
    +render(time)
    +update()
  }

  class JSON {
    +data
    +json
    +highlighter
    +json_instance
    +json
    +highlighter
    --
    -__init__(json, indent, highlight, skip_keys, ensure_ascii, check_circular, allow_nan, default, sort_keys)
    +{class} from_data(data, indent, highlight, skip_keys, ensure_ascii, check_circular, allow_nan, default, sort_keys)
    -__rich__(): Text
  }

  class Padding {
    +style
    +width
    +width
    +render_options
    +render_options
    +lines
    +left
    +right
    +blank_line
    +blank_line
    +blank_line
    +max_width
    +extra_width
    +measurement
    +measurement
    --
    -__init__(renderable, pad)
    +{class} indent(renderable, level)
    +{static} unpack()
    -__repr__(): str
    -__rich_console__(console, options)
    -__rich_measure__(console, options)
  }

  class Status {
    -__init__(status)
    +renderable(): Spinner
    +console()
    +update(status)
    +start()
    +stop()
    -__rich__(): RenderableType
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class RichRenderable {
    -{class} __subclasshook__(other): bool
  }

  class JupyterRenderable {
    +data
    +data
    +data
    --
    -__init__(html, text)
    -_repr_mimebundle_(include, exclude)
  }

  class JupyterMixin {
    +console
    +segments
    +html
    +text
    +data
    +data
    +data
    --
    -_repr_mimebundle_(include, exclude)
  }

  class ColorTriplet {
    +red: int
    +green: int
    +blue: int
    --
    +hex(): str
    +rgb(): str
    +normalized()
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.tomli_w" {
  class Context {
    -__init__(allow_multiline, indent)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.urllib3" {
  class RequestField {
    +content_type
    +filename: NoneType
    +content_type: NoneType
    +data: value
    +request_param
    +parts
    +iterable: header_parts
    +iterable
    +lines
    +sort_keys
    --
    -__init__(name, data, filename, headers, header_formatter)
    +{class} from_tuples(fieldname, value, header_formatter)
    -_render_part(name, value)
    -_render_parts(header_parts)
    +render_headers()
    +make_multipart(content_disposition, content_type, content_location)
  }

  class RequestMethods {
    +method
    +headers
    +extra_kw
    +headers
    +extra_kw
    --
    -__init__(headers)
    +urlopen(method, url, body, headers, encode_multipart, multipart_boundary)
    +request(method, url, fields, headers)
    +request_encode_url(method, url, fields, headers)
    +request_encode_body(method, url, fields, headers, encode_multipart, multipart_boundary)
  }

  class RequestModule {
    -__call__()
  }

  class PoolManager {
    +proxy: NoneType
    +proxy_config: NoneType
    +pool_cls
    +request_context
    +request_context
    +port
    +scheme
    +pool_key_constructor
    +pool_key
    +pool
    +scheme
    +host
    +port
    +pool
    +u
    +base_pool_kwargs
    +u
    +conn
    +response
    +response
    +redirect_location
    +redirect_location
    +method: str
    +retries
    +retries
    +headers
    +retries
    --
    -__init__(num_pools, headers)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    -_new_pool(scheme, host, port, request_context)
    +clear()
    +connection_from_host(host, port, scheme, pool_kwargs)
    +connection_from_context(request_context)
    +connection_from_pool_key(pool_key, request_context)
    +connection_from_url(url, pool_kwargs)
    -_merge_pool_kwargs(override)
    -_proxy_requires_url_absolute_form(parsed_url)
    -_validate_proxy_scheme_url_selection(url_scheme)
    +urlopen(method, url, redirect)
  }

  class ProxyManager {
    +proxy_url
    +proxy
    +port
    +proxy
    +headers_
    +netloc
    +u
    +headers
    --
    -__init__(proxy_url, num_pools, headers, proxy_headers, proxy_ssl_context, use_forwarding_for_https)
    +connection_from_host(host, port, scheme, pool_kwargs)
    -_set_proxy_headers(url, headers)
    +urlopen(method, url, redirect)
  }

  class DeflateDecoder {
    +decompressed
    --
    -__init__()
    -__getattr__(name)
    +decompress(data)
  }

  class GzipDecoderState {
    +FIRST_MEMBER: int
    +OTHER_MEMBERS: int
    +SWALLOW_DATA: int
  }

  class GzipDecoder {
    +ret
    +previous_state
    +data
    --
    -__init__()
    -__getattr__(name)
    +decompress(data)
  }

  class BrotliDecoder {
    -__init__()
    +flush()
  }

  class MultiDecoder {
    +data
    --
    -__init__(modes)
    +flush()
    +decompress(data)
  }

  class HTTPResponse {
    +CONTENT_DECODERS
    +REDIRECT_STATUSES
    +tr_enc
    +encodings
    +length
    +lengths
    +length
    +length: NoneType
    +length: NoneType
    +status
    +status: int
    +length: int
    +content_encoding
    +encodings
    +DECODER_ERROR_CLASSES
    +data
    +content_encoding
    +buf
    +clean_exit: bool
    +clean_exit: bool
    +c_int_max
    +buffer
    +max_chunk_amt
    +chunk_amt
    +chunk_amt: max_chunk_amt
    +data
    +decode_content
    +flush_decoder: bool
    +fp_closed
    +data
    +flush_decoder: bool
    +cache_content: bool
    +flush_decoder: bool
    +data
    +data
    +headers
    +headers
    +headers
    +strict
    +resp
    +temp
    +line
    +line
    +returned_chunk: NoneType
    +chunk
    +returned_chunk: chunk
    +value
    +returned_chunk: value
    +value
    +returned_chunk: value
    +returned_chunk
    +chunk
    +decoded
    +decoded
    +line
    +buffer
    +chunk
    +buffer
    +buffer
    --
    -__init__(body, headers, status, version, reason, strict, preload_content, decode_content, original_response, pool, connection, msg, retries, enforce_content_length, request_method, request_url, auto_close)
    +get_redirect_location()
    +release_conn()
    +drain_conn()
    +data()
    +connection()
    +isclosed()
    +tell()
    -_init_length(request_method)
    -_init_decoder()
    -_decode(data, decode_content, flush_decoder)
    -_flush_decoder()
    -_error_catcher()
    -_fp_read(amt)
    +read(amt, decode_content, cache_content)
    +stream(amt, decode_content)
    +{class} from_httplib(r)
    +getheaders()
    +getheader(name, default)
    +info()
    +close()
    +closed()
    +fileno()
    +flush()
    +readable()
    +readinto(b)
    +supports_chunked_reads()
    -_update_chunk_length()
    -_handle_chunk(amt)
    +read_chunked(amt, decode_content)
    +geturl()
    -__iter__()
  }

  class BaseSSLError {
  }

  class ConnectionError {
  }

  class BrokenPipeError {
  }

  class HTTPConnection {
    +default_port
    +default_socket_options
    +is_verified: bool
    +proxy_is_verified: NoneType
    +extra_kw
    +conn
    +conn
    +match
    +headers
    +headers
    +headers
    +header_keys
    +skip_accept_encoding
    +skip_host
    +stringish_types
    +body
    +chunk
    +len_str
    +to_send
    --
    -__init__()
    +host()
    +host(value)
    -_new_conn()
    -_is_using_tunnel()
    -_prepare_conn(conn)
    +connect()
    +putrequest(method, url)
    +putheader(header)
    +request(method, url, body, headers)
    +request_chunked(method, url, body, headers)
  }

  class HTTPSConnection {
    +default_port
    +cert_reqs: NoneType
    +ca_certs: NoneType
    +ca_cert_dir: NoneType
    +ca_cert_data: NoneType
    +ssl_version: NoneType
    +assert_fingerprint: NoneType
    +tls_in_tls_required: bool
    +cert_reqs
    +cert_reqs
    +conn
    +hostname
    +tls_in_tls: bool
    +conn
    +tls_in_tls: bool
    +hostname
    +server_hostname: hostname
    +server_hostname
    +is_time_off
    +default_ssl_context: bool
    +default_ssl_context: bool
    +context
    +cert
    +proxy_config
    +ssl_context
    +ssl_context
    +socket
    +cert
    --
    -__init__(host, port, key_file, cert_file, key_password, strict, timeout, ssl_context, server_hostname)
    +set_cert(key_file, cert_file, cert_reqs, key_password, ca_certs, assert_hostname, assert_fingerprint, ca_cert_dir, ca_cert_data)
    +connect()
    -_connect_tls_proxy(hostname, conn)
  }

  class DummyConnection {
  }

  class RLock {
    -__enter__()
    -__exit__(exc_type, exc_value, traceback)
  }

  class RecentlyUsedContainer {
    +ContainerCls: OrderedDict
    +item
    +evicted_value: _Null
    +evicted_value
    +value
    +values
    --
    -__init__(maxsize, dispose_func)
    -__getitem__(key)
    -__setitem__(key, value)
    -__delitem__(key)
    -__len__()
    -__iter__()
    +clear()
    +keys()
  }

  class HTTPHeaderDict {
    +val
    +other
    +iterkeys
    +itervalues
    +value
    +key_lower
    +new_vals
    +vals
    +other
    +vals
    +content_specific_headers
    +getheaders: getlist
    +getallmatchingheaders: getlist
    +iget: getlist
    +get_all: getlist
    +val
    +val
    +clone
    +vals
    +val
    +obs_fold_continued_leaders
    +headers
    --
    -__init__(headers)
    -__setitem__(key, val)
    -__getitem__(key)
    -__delitem__(key)
    -__contains__(key)
    -__eq__(other)
    -__ne__(other)
    -__len__()
    -__iter__()
    +pop(key, default)
    +discard(key)
    +add(key, val)
    +extend()
    +getlist(key, default)
    -_prepare_for_method_change()
    -__repr__()
    -_copy_from(other)
    +copy()
    +iteritems()
    +itermerged()
    +items()
    +{class} from_httplib(message)
  }

  class HTTPError {
  }

  class HTTPWarning {
  }

  class PoolError {
    -__init__(pool, message)
    -__reduce__()
  }

  class RequestError {
    -__init__(pool, url, message)
    -__reduce__()
  }

  class SSLError {
  }

  class ProxyError {
    -__init__(message, error)
  }

  class DecodeError {
  }

  class ProtocolError {
  }

  class MaxRetryError {
    +message
    --
    -__init__(pool, url, reason)
  }

  class HostChangedError {
    +message
    --
    -__init__(pool, url, retries)
  }

  class TimeoutStateError {
  }

  class TimeoutError {
  }

  class ReadTimeoutError {
  }

  class ConnectTimeoutError {
  }

  class NewConnectionError {
  }

  class EmptyPoolError {
  }

  class ClosedPoolError {
  }

  class LocationValueError {
  }

  class LocationParseError {
    +message
    --
    -__init__(location)
  }

  class URLSchemeUnknown {
    +message
    --
    -__init__(scheme)
  }

  class ResponseError {
    +GENERIC_ERROR: str
    +SPECIFIC_ERROR: str
  }

  class SecurityWarning {
  }

  class SubjectAltNameWarning {
  }

  class InsecureRequestWarning {
  }

  class SystemTimeWarning {
  }

  class InsecurePlatformWarning {
  }

  class SNIMissingWarning {
  }

  class DependencyWarning {
  }

  class ResponseNotChunked {
  }

  class BodyNotHttplibCompatible {
  }

  class IncompleteRead {
    -__init__(partial, expected)
    -__repr__()
  }

  class InvalidChunkLength {
    -__init__(response, length)
    -__repr__()
  }

  class InvalidHeader {
  }

  class ProxySchemeUnknown {
    +scheme: NoneType
    +message: str
    +message
    --
    -__init__(scheme)
  }

  class ProxySchemeUnsupported {
  }

  class HeaderParsingError {
    +message
    --
    -__init__(defects, unparsed_data)
  }

  class UnrewindableBodyError {
  }

  class ConnectionPool {
    +scheme: NoneType
    +QueueCls: LifoQueue
    --
    -__init__(host, port)
    -__str__()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    +close()
  }

  class HTTPConnectionPool {
    +scheme: str
    +ConnectionCls: HTTPConnection
    +ResponseCls: HTTPResponse
    +timeout
    +retries
    +pool
    +conn
    +conn: NoneType
    +conn
    +conn: NoneType
    +timeout_obj
    +read_timeout
    +httplib_response
    +httplib_response
    +http_version
    +host
    +port
    +port: NoneType
    +parsed_url
    +destination_scheme
    +headers
    +retries
    +release_conn
    +url
    +url
    +conn: NoneType
    +release_this_conn: release_conn
    +http_tunnel_required
    +headers
    +err: NoneType
    +clean_exit: bool
    +body_pos
    +timeout_obj
    +conn
    +is_new_proxy_conn
    +httplib_response
    +response_conn
    +response
    +clean_exit: bool
    +clean_exit: bool
    +release_this_conn: bool
    +clean_exit: bool
    +message
    +e
    +e
    +e
    +e
    +retries
    +err: e
    +conn
    +release_this_conn: bool
    +redirect_location
    +method: str
    +body: NoneType
    +headers
    +retries
    +has_retry_after
    +retries
    --
    -__init__(host, port, strict, timeout, maxsize, block, headers, retries, _proxy, _proxy_headers, _proxy_config)
    -_new_conn()
    -_get_conn(timeout)
    -_put_conn(conn)
    -_validate_conn(conn)
    -_prepare_proxy(conn)
    -_get_timeout(timeout)
    -_raise_timeout(err, url, timeout_value)
    -_make_request(conn, method, url, timeout, chunked)
    -_absolute_url(path)
    +close()
    +is_same_host(url)
    +urlopen(method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos)
    -_is_ssl_error_message_from_http_proxy()
  }

  class HTTPSConnectionPool {
    +scheme: str
    +ConnectionCls: HTTPSConnection
    +actual_host
    +actual_port
    +actual_host
    +actual_port
    +conn
    --
    -__init__(host, port, strict, timeout, maxsize, block, headers, retries, _proxy, _proxy_headers, key_file, cert_file, cert_reqs, key_password, ca_certs, ssl_version, assert_hostname, assert_fingerprint, ca_cert_dir)
    -_prepare_conn(conn)
    -_prepare_proxy(conn)
    -_new_conn()
    -_validate_conn(conn)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.urllib3.util" {
  class LifoQueue {
    -_init(_)
    -_qsize(len)
    -_put(item)
    -_get()
  }

  class SSLTransport {
    +nbytes
    +nbytes: int
    +count: int
    +amount
    +v
    +response
    +writing
    +reading
    +binary
    +rawmode: str
    +raw
    +buffering
    +buffering
    +buffer
    +buffer
    +buffer
    +text
    +should_loop: bool
    +ret: NoneType
    +errno: NoneType
    +ret
    +errno
    +buf
    +should_loop: bool
    +buf
    --
    -{static} _validate_ssl_context_for_tls_in_tls()
    -__init__(socket, ssl_context, server_hostname, suppress_ragged_eofs)
    -__enter__()
    -__exit__()
    +fileno()
    +read(len, buffer)
    +recv(len, flags)
    +recv_into(buffer, nbytes, flags)
    +sendall(data, flags)
    +send(data, flags)
    +makefile(mode, buffering, encoding, errors, newline)
    +unwrap()
    +close()
    +getpeercert(binary_form)
    +version()
    +cipher()
    +selected_alpn_protocol()
    +selected_npn_protocol()
    +shared_ciphers()
    +compression()
    +settimeout(value)
    +gettimeout()
    -_decref_socketios()
    -_wrap_ssl_read(len, buffer)
    -_ssl_io_loop(func)
  }

  class NoWayToWaitForSocketError {
  }

  class Timeout {
    +DEFAULT_TIMEOUT: _GLOBAL_DEFAULT_TIMEOUT
    --
    -__init__(total, connect, read)
    -__repr__()
    +{class} resolve_default_timeout(timeout)
    -{class} _validate_timeout(value, name)
    +{class} from_float(timeout)
    +clone()
    +start_connect()
    +get_connect_duration()
    +connect_timeout()
    +read_timeout()
  }

  class SSLContext {
    +kwargs
    --
    -__init__(protocol_version)
    +load_cert_chain(certfile, keyfile)
    +load_verify_locations(cafile, capath, cadata)
    +set_ciphers(cipher_suite)
    +wrap_socket(socket, server_hostname, server_side)
  }

  class _RetryMeta {
    +DEFAULT_METHOD_WHITELIST()
    +DEFAULT_METHOD_WHITELIST(value)
    +DEFAULT_REDIRECT_HEADERS_BLACKLIST()
    +DEFAULT_REDIRECT_HEADERS_BLACKLIST(value)
    +BACKOFF_MAX()
    +BACKOFF_MAX(value)
  }

  class Retry {
    +DEFAULT_ALLOWED_METHODS
    +RETRY_AFTER_STATUS_CODES
    +DEFAULT_REMOVE_HEADERS_ON_REDIRECT
    +DEFAULT_BACKOFF_MAX: int
    +allowed_methods: method_whitelist
    +allowed_methods
    +remove_headers_on_redirect
    +redirect: int
    +raise_on_redirect: bool
    +params
    +retries
    +redirect
    +new_retries
    +consecutive_errors_len
    +backoff_value
    +seconds
    +retry_date_tuple
    +retry_date_tuple
    +retry_date
    +seconds
    +seconds: int
    +retry_after
    +retry_after
    +backoff
    +slept
    +err
    +allowed_methods
    +allowed_methods
    +retry_counts
    +retry_counts
    +total
    +connect
    +read
    +redirect
    +status_count
    +other
    +cause: str
    +status: NoneType
    +redirect_location: NoneType
    +cause: str
    +redirect_location
    +status
    +cause
    +cause
    +status
    +history
    +new_retry
    --
    -__init__(total, connect, read, redirect, status, other, allowed_methods, status_forcelist, backoff_factor, raise_on_redirect, raise_on_status, history, respect_retry_after_header, remove_headers_on_redirect, method_whitelist)
    +new()
    +{class} from_int(retries, redirect, default)
    +get_backoff_time()
    +parse_retry_after(retry_after)
    +get_retry_after(response)
    +sleep_for_retry(response)
    -_sleep_backoff()
    +sleep(response)
    -_is_connection_error(err)
    -_is_read_error(err)
    -_is_method_retryable(method)
    +is_retry(method, status_code, has_retry_after)
    +is_exhausted()
    +increment(method, url, response, error, _pool, _stacktrace)
    -__repr__()
    -__getattr__(item)
  }

  class Url {
    +path
    +scheme
    +uri
    +url: str
    --
    -__new__(scheme, auth, host, port, path, query, fragment)
    +hostname()
    +request_uri()
    +netloc()
    +url()
    -__str__()
  }

  class CertificateError {
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.urllib3.contrib" {
  class WrappedSocket {
    +data
    +total_sent: int
    +sent
    +x509
    --
    -__init__(connection, socket, suppress_ragged_eofs)
    +fileno()
    -_decref_socketios()
    +recv()
    +recv_into()
    +settimeout(timeout)
    -_send_until_done(data)
    +sendall(data)
    +shutdown()
    +close()
    +getpeercert(binary_form)
    +version()
    -_reuse()
    -_drop()
  }

  class SecureTransportContext {
    +wrapped_socket
    --
    -__init__(protocol)
    +check_hostname()
    +check_hostname(value)
    +options()
    +options(value)
    +verify_mode()
    +verify_mode(value)
    +set_default_verify_paths()
    +load_default_certs()
    +set_ciphers(ciphers)
    +load_verify_locations(cafile, capath, cadata)
    +load_cert_chain(certfile, keyfile, password)
    +set_alpn_protocols(protocols)
    +wrap_socket(sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname)
  }

  class SOCKSConnection {
    +extra_kw
    +conn
    +error
    --
    -__init__()
    -_new_conn()
  }

  class SOCKSHTTPSConnection {
  }

  class SOCKSHTTPConnectionPool {
    +ConnectionCls: SOCKSConnection
  }

  class SOCKSHTTPSConnectionPool {
    +ConnectionCls: SOCKSHTTPSConnection
  }

  class SOCKSProxyManager {
    +pool_classes_by_scheme
    +parsed
    +split
    +socks_version
    +rdns: bool
    +socks_version
    +rdns: bool
    +socks_version
    +rdns: bool
    +socks_version
    +rdns: bool
    +socks_options
    --
    -__init__(proxy_url, username, password, num_pools, headers)
  }

  class UnsupportedExtension {
  }

  class PyOpenSSLContext {
    +ciphers
    +cafile
    +capath
    +password
    +protocols
    +cnx
    +server_hostname
    --
    -__init__(protocol)
    +options()
    +options(value)
    +verify_mode()
    +verify_mode(value)
    +set_default_verify_paths()
    +set_ciphers(ciphers)
    +load_verify_locations(cafile, capath, cadata)
    +load_cert_chain(certfile, keyfile, password)
    +set_alpn_protocols(protocols)
    +wrap_socket(sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname)
  }

  class AppEnginePlatformWarning {
  }

  class AppEnginePlatformError {
  }

  class AppEngineManager {
    +retries
    +follow_redirects
    +response
    +http_response
    +redirect_location
    +method: str
    +retries
    +redirect_url
    +has_retry_after
    +retries
    +content_encoding
    +transfer_encoding
    +encodings
    +original_response
    +retries
    --
    -__init__(headers, retries, validate_certificate, urlfetch_retries)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    +urlopen(method, url, body, headers, retries, redirect, timeout)
    -_urlfetch_response_to_http_response(urlfetch_resp)
    -_get_absolute_timeout(timeout)
    -_get_retries(retries, redirect)
  }

  class NTLMConnectionPool {
    +scheme: str
    +user_parts
    +headers
    +req_header: str
    +resp_header: str
    +conn
    +res
    +reshdr
    +auth_header_values
    +auth_header_value: NoneType
    +auth_header_value
    +auth_msg
    +res
    +headers
    --
    -__init__(user, pw, authurl)
    -_new_conn()
    +urlopen(method, url, body, headers, retries, redirect, assert_same_host)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.urllib3.contrib._securetransport" {
  class CFConst {
    +kCFStringEncodingUTF8
  }

  class SecurityConst {
    +kSSLSessionOptionBreakOnServerAuth: int
    +kSSLProtocol2: int
    +kSSLProtocol3: int
    +kTLSProtocol1: int
    +kTLSProtocol11: int
    +kTLSProtocol12: int
    +kTLSProtocol13: int
    +kTLSProtocolMaxSupported: int
    +kSSLClientSide: int
    +kSSLStreamType: int
    +kSecFormatPEMSequence: int
    +kSecTrustResultInvalid: int
    +kSecTrustResultProceed: int
    +kSecTrustResultDeny: int
    +kSecTrustResultUnspecified: int
    +kSecTrustResultRecoverableTrustFailure: int
    +kSecTrustResultFatalTrustFailure: int
    +kSecTrustResultOtherError: int
    +errSSLProtocol
    +errSSLWouldBlock
    +errSSLClosedGraceful
    +errSSLClosedNoNotify
    +errSSLClosedAbort
    +errSSLXCertChainInvalid
    +errSSLCrypto
    +errSSLInternal
    +errSSLCertExpired
    +errSSLCertNotYetValid
    +errSSLUnknownRootCert
    +errSSLNoRootCert
    +errSSLHostNameMismatch
    +errSSLPeerHandshakeFail
    +errSSLPeerUserCancelled
    +errSSLWeakPeerEphemeralDHKey
    +errSSLServerAuthCompleted
    +errSSLRecordOverflow
    +errSecVerifyFailed
    +errSecNoTrustSettings
    +errSecItemNotFound
    +errSecInvalidTrustSettings
    +TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: int
    +TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: int
    +TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: int
    +TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: int
    +TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: int
    +TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: int
    +TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: int
    +TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: int
    +TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: int
    +TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: int
    +TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: int
    +TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: int
    +TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: int
    +TLS_DHE_RSA_WITH_AES_256_CBC_SHA: int
    +TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: int
    +TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: int
    +TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: int
    +TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: int
    +TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: int
    +TLS_DHE_RSA_WITH_AES_128_CBC_SHA: int
    +TLS_RSA_WITH_AES_256_GCM_SHA384: int
    +TLS_RSA_WITH_AES_128_GCM_SHA256: int
    +TLS_RSA_WITH_AES_256_CBC_SHA256: int
    +TLS_RSA_WITH_AES_128_CBC_SHA256: int
    +TLS_RSA_WITH_AES_256_CBC_SHA: int
    +TLS_RSA_WITH_AES_128_CBC_SHA: int
    +TLS_AES_128_GCM_SHA256: int
    +TLS_AES_256_GCM_SHA384: int
    +TLS_AES_128_CCM_8_SHA256: int
    +TLS_AES_128_CCM_SHA256: int
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.urllib3.packages" {
  class X {
    -__len__()
  }

  class _LazyDescr {
    +result
    --
    -__init__(name)
    -__get__(obj, tp)
  }

  class MovedModule {
    +new: name
    +value
    --
    -__init__(name, old, new)
    -_resolve()
    -__getattr__(attr)
  }

  class _LazyModule {
    +attrs
    --
    -__init__(name)
    -__dir__()
  }

  class MovedAttribute {
    +new_mod: name
    +new_attr: name
    +new_attr: old_attr
    +old_attr: name
    +module
    --
    -__init__(name, old_mod, new_mod, old_attr, new_attr)
    -_resolve()
  }

  class _SixMetaPathImporter {
    +mod
    +mod
    +get_source: get_code
    --
    -__init__(six_module_name)
    -_add_module(mod)
    -_get_module(fullname)
    +find_module(fullname, path)
    +find_spec(fullname, path, target)
    -__get_module(fullname)
    +load_module(fullname)
    +is_package(fullname)
    +get_code(fullname)
    +create_module(spec)
    +exec_module(module)
  }

  class _MovedItems {
  }

  class Module_six_moves_urllib_parse {
  }

  class Module_six_moves_urllib_error {
  }

  class Module_six_moves_urllib_request {
  }

  class Module_six_moves_urllib_response {
  }

  class Module_six_moves_urllib_robotparser {
  }

  class Module_six_moves_urllib {
    +parse
    +error
    +request
    +response
    +robotparser
    --
    -__dir__()
  }

  class Iterator {
    +next()
  }

  class metaclass {
    +resolved_bases
    +resolved_bases: bases
    --
    -__new__(name, this_bases, d)
    -{class} __prepare__(name, this_bases)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.urllib3.packages.backports" {
  class weakref_finalize {
  }

  class _Info {
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.pkg_resources" {
  class _LoaderProtocol {
    +load_module(): types.ModuleType
  }

  class _ZipLoaderModule {
    -__loader__: zipimport.zipimporter
  }

  class PEP440Warning {
  }

  class ResolutionError {
    -__repr__()
  }

  class VersionConflict {
    +args
    --
    +dist(): Distribution
    +req(): Requirement
    +report()
    +with_context(required_by)
  }

  class ContextualVersionConflict {
    +required_by()
  }

  class DistributionNotFound {
    +req(): Requirement
    +requirers()
    +requirers_str()
    +report()
    -__str__()
  }

  class UnknownExtra {
  }

  class IMetadataProvider {
    +has_metadata(name): bool
    +get_metadata(name): str
    +get_metadata_lines(name)
    +metadata_isdir(name): bool
    +metadata_listdir(name)
    +run_script(script_name, namespace)
  }

  class IResourceProvider {
    +get_resource_filename(manager, resource_name): str
    +get_resource_stream(manager, resource_name): _ResourceStream
    +get_resource_string(manager, resource_name): bytes
    +has_resource(resource_name): bool
    +resource_isdir(resource_name): bool
    +resource_listdir(resource_name)
  }

  class WorkingSet {
    +entries
    +ws
    +ws
    +reqs
    +dists
    +dist
    +canonical_key
    +dist
    +ns
    +name
    +seen
    +entry
    +keys
    +keys2
    +normalized_name
    +requirements
    +processed
    +best
    +to_activate
    +req_extras
    +required_by
    +req
    +dist
    +new_requirements
    +dist
    +dist
    +ws: self
    +env
    +env
    +ws
    +dist
    +requirers
    +dependent_req
    +plugin_projects
    +error_info
    +distributions
    +env
    +env
    +shadow_set
    +req
    +resolvees
    +sorted_distributions
    +needed
    --
    -__init__(entries)
    -{class} _build_master()
    -{class} _build_from_requirements(req_spec)
    +add_entry(entry)
    -__contains__(dist): bool
    +find(req)
    +iter_entry_points(group, name)
    +run_script(requires, script_name)
    -__iter__()
    +add(dist, entry, insert, replace)
    +resolve(requirements, env, installer, replace_conflicting, extras)
    +resolve(requirements, env)
    +resolve(requirements, env, installer, replace_conflicting, extras)
    +resolve(requirements, env, installer, replace_conflicting, extras)
    -_resolve_dist(req, best, replace_conflicting, env, installer, required_by, to_activate): Distribution
    +find_plugins(plugin_env, full_env, installer, fallback)
    +find_plugins(plugin_env, full_env)
    +find_plugins(plugin_env, full_env, installer, fallback)
    +find_plugins(plugin_env, full_env, installer, fallback)
    +require()
    +subscribe(callback, existing)
    -_added_new(dist)
    -__getstate__()
    -__setstate__(e_k_b_n_c)
  }

  class _ReqExtras {
    +extra_evals
    --
    +markers_pass(req, extras)
  }

  class Environment {
    +py_compat
    +search_path
    +distribution_key
    +dists
    +dist
    +dist: NoneType
    +new
    --
    -__init__(search_path, platform, python)
    +can_add(dist)
    +remove(dist)
    +scan(search_path)
    -__getitem__(project_name)
    +add(dist)
    +best_match(req, working_set, installer, replace_conflicting): _DistributionT
    +best_match(req, working_set, installer, replace_conflicting)
    +best_match(req, working_set, installer, replace_conflicting)
    +obtain(requirement, installer): _DistributionT
    +obtain(requirement, installer)
    +obtain(requirement, installer)
    +obtain(requirement, installer)
    -__iter__()
    -__iadd__(other)
    -__add__(other)
  }

  class ExtractionError {
    +manager: ResourceManager
    +cache_path: str
    +original_error
  }

  class ResourceManager {
    +extraction_path
    +old_exc
    +cache_path
    +tmpl
    +err
    +extract_path
    +target_path
    +mode
    +msg
    +mode
    --
    -__init__()
    +resource_exists(package_or_requirement, resource_name)
    +resource_isdir(package_or_requirement, resource_name)
    +resource_filename(package_or_requirement, resource_name)
    +resource_stream(package_or_requirement, resource_name)
    +resource_string(package_or_requirement, resource_name): bytes
    +resource_listdir(package_or_requirement, resource_name)
    +extraction_error(): NoReturn
    +get_cache_path(archive_name, names)
    -{static} _warn_unsafe_extraction_path()
    +postprocess(tempname, filename)
    +set_extraction_path(path)
    +cleanup_resources(force)
  }

  class NullProvider {
    +egg_name
    +egg_info
    +loader
    +path
    +path
    +value
    +script
    +script_text
    +script_text
    +script_filename
    +source
    +code
    +script_code
    +invalid
    +msg: str
    --
    -__init__(module)
    +get_resource_filename(manager, resource_name)
    +get_resource_stream(manager, resource_name)
    +get_resource_string(manager, resource_name): bytes
    +has_resource(resource_name)
    -_get_metadata_path(name)
    +has_metadata(name): bool
    +get_metadata(name)
    +get_metadata_lines(name)
    +resource_isdir(resource_name)
    +metadata_isdir(name): bool
    +resource_listdir(resource_name)
    +metadata_listdir(name)
    +run_script(script_name, namespace)
    -_has(path): bool
    -_isdir(path): bool
    -_listdir(path)
    -_fn(base, resource_name)
    -{static} _validate_resource_path()
    -_get(path): bytes
  }

  class EggProvider {
    +eggs
    +egg
    --
    -__init__(module)
    -_setup_prefix()
    -_set_egg(path)
  }

  class DefaultProvider {
    +loader_names
    +loader_cls
    --
    -_has(path): bool
    -_isdir(path): bool
    -_listdir(path)
    +get_resource_stream(manager, resource_name)
    -_get(path): bytes
    -{class} _register()
  }

  class EmptyProvider {
    +module_path
    --
    -_get(path): bytes
    -_listdir(path)
    -__init__()
  }

  class ZipManifests {
    +items
    +load: build
    --
    +{class} build(path)
  }

  class MemoizedZipManifests {
  }

  class manifest_mod {
    +manifest
    +mtime: float
  }

  class ZipProvider {
    +eagers
    +loader: zipimport.zipimporter
    +fspath
    +fspath
    +zip_path
    +eagers
    +size
    +date_time
    +timestamp
    +last
    +real_path
    +stat
    +zip_contents
    +file_contents
    +eagers
    +ind
    +parts
    +parent
    +zip_path
    --
    -__init__(module)
    -_zipinfo_name(fspath)
    -_parts(zip_path)
    +zipinfo()
    +get_resource_filename(manager, resource_name)
    -{static} _get_date_and_size()
    -_extract_resource(manager, zip_path): str
    -_is_current(file_path, zip_path)
    -_get_eager_resources()
    -_index()
    -_has(fspath): bool
    -_isdir(fspath): bool
    -_listdir(fspath)
    -_eager_to_zip(resource_name)
    -_resource_to_zip(resource_name)
  }

  class FileMetadata {
    +metadata
    +replacement_char: str
    +tmpl: str
    +msg
    --
    -__init__(path)
    -_get_metadata_path(name)
    +has_metadata(name): bool
    +get_metadata(name)
    -_warn_on_replacement(metadata)
    +get_metadata_lines(name)
  }

  class PathMetadata {
    -__init__(path, egg_info)
  }

  class EggMetadata {
    -__init__(importer)
  }

  class NoDists {
    -__bool__()
    -__call__(fullpath)
  }

  class EntryPoint {
    +s
    +module
    +error_cls
    +reqs
    +items
    +pattern
    +m
    +msg: str
    +res
    +extras
    +attrs
    +req
    +this
    +ep
    -_data
    +maps
    +group
    --
    -__init__(name, module_name, attrs, extras, dist)
    -__str__()
    -__repr__()
    +load(require, env, installer): _ResolvedEntryPoint
    +load(require): _ResolvedEntryPoint
    +load(require): _ResolvedEntryPoint
    +resolve(): _ResolvedEntryPoint
    +require(env, installer)
    +{class} parse(src, dist)
    -{class} _parse_extras(extras_spec)
    +{class} parse_group(group, lines, dist)
    +{class} parse_map(data, dist)
  }

  class Distribution {
    +PKG_INFO: str
    +cls
    +match
    +key
    +info
    +notes
    +msg
    +version
    +path
    +msg
    +new_extra
    +reqs
    +fails_marker
    +reqs
    +new_extra
    +dm
    +dm
    +deps
    +path
    +lines
    +path
    +filename
    +version
    +version: NoneType
    +version
    +spec
    +spec
    +ep
    +loc
    +nloc
    +bdir
    +npath
    +np
    +p: np
    +nsp
    +loc
    +fn
    +names: str
    --
    -__init__(location, metadata, project_name, version, py_version, platform, precedence)
    +{class} from_location(location, basename, metadata): Distribution
    -_reload_version()
    +hashcmp()
    -__hash__()
    -__lt__(other)
    -__le__(other)
    -__gt__(other)
    -__ge__(other)
    -__eq__(other)
    -__ne__(other)
    +key()
    +parsed_version()
    -_forgiving_parsed_version()
    +version()
    -_dep_map()
    -{static} _filter_extras()
    -_build_dep_map()
    +requires(extras)
    -_get_metadata_path_for_display(name)
    -_get_metadata(name)
    -_get_version()
    +activate(path, replace)
    +egg_name()
    -__repr__()
    -__str__()
    -__getattr__(attr)
    -__dir__()
    +{class} from_filename(filename, metadata)
    +as_requirement()
    +load_entry_point(group, name): _ResolvedEntryPoint
    +get_entry_map(group)
    +get_entry_map(group)
    +get_entry_map(group)
    +get_entry_info(group, name)
    +insert_on(path, loc, replace)
    +check_version_conflict()
    +has_version()
    +clone()
    +extras()
  }

  class EggInfoDistribution {
    +md_version
    --
    -_reload_version()
  }

  class DistInfoDistribution {
    +PKG_INFO: str
    +EQEQ
    +metadata
    +reqs
    +common
    +s_extra
    --
    -_parsed_pkg_info()
    -_dep_map()
    -_compute_dependencies()
    +reqs_for_extra()
  }

  class RequirementParseError {
  }

  class Requirement {
    +project_name
    +item
    --
    -__init__(requirement_string)
    -__eq__(other)
    -__ne__(other)
    -__contains__(item): bool
    -__hash__()
    -__repr__()
    +{static} parse()
  }

  class PkgResourcesDeprecationWarning {
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.resolvelib" {
  class Preference {
    -__lt__(__other): bool
  }

  class AbstractProvider {
    +identify(requirement_or_candidate): KT
    +get_preference(identifier, resolutions, candidates, information, backtrack_causes): Preference
    +find_matches(identifier, requirements, incompatibilities)
    +is_satisfied_by(requirement, candidate): bool
    +get_dependencies(candidate)
    +narrow_requirement_selection(identifiers, resolutions, candidates, information, backtrack_causes)
  }

  class RequirementInformation {
    +requirement: RT
    +parent
  }

  class State {
    +mapping
    +criteria
    +backtrack_causes
  }

  class DirectedGraph {
    +other
    --
    -__init__()
    -__iter__()
    -__len__(): int
    -__contains__(key): bool
    +copy()
    +add(key)
    +remove(key)
    +connected(f, t): bool
    +connect(f, t)
    +iter_edges()
    +iter_children(key)
    +iter_parents(key)
  }

  class IteratorMapping {
    +v
    +more
    +more
    --
    -__init__(mapping, accessor, appends)
    -__repr__(): str
    -__bool__(): bool
    -__contains__(key): bool
    -__getitem__(k)
    -__iter__()
    -__len__(): int
  }

  class _FactoryIterableView {
    +iterable
    --
    -__init__(factory)
    -__repr__(): str
    -__bool__(): bool
    -__iter__()
  }

  class _SequenceIterableView {
    -__init__(sequence)
    -__repr__(): str
    -__bool__(): bool
    -__iter__()
  }

  class BaseReporter {
    +starting()
    +starting_round(index)
    +ending_round(index, state)
    +ending(state)
    +adding_requirement(requirement, parent)
    +resolving_conflicts(causes)
    +rejecting_candidate(criterion, candidate)
    +pinning(candidate)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.resolvelib.resolvers" {
  class Result {
    +mapping
    +graph
    +criteria
  }

  class AbstractResolver {
    +base_exception: Exception
    --
    -__init__(provider, reporter)
    +resolve(requirements)
  }

  class ResolverException {
  }

  class RequirementsConflicted {
    -__init__(criterion)
    -__str__(): str
  }

  class InconsistentCandidate {
    -__init__(candidate, criterion)
    -__str__(): str
  }

  class ResolutionError {
  }

  class ResolutionImpossible {
    -__init__(causes)
  }

  class ResolutionTooDeep {
    -__init__(round_count)
  }

  class Criterion {
    +requirements
    --
    -__init__(candidates, information, incompatibilities)
    -__repr__(): str
    +iter_requirement()
    +iter_parent()
  }

  class Resolution {
    +base
    +state
    +identifier
    +criterion
    +incompatibilities
    +incompatibilities
    +matches
    +information
    +information
    +criterion
    +current_pin
    +criteria
    +criterion
    +causes
    +criteria
    +satisfied
    +criterion
    +matches
    +candidates
    +incompatible_reqs
    +incompatible_deps
    +broken_state
    +broken_state
    +current_dependencies
    +incompatibilities_from_broken
    +success
    +unsatisfied_names
    +satisfied_names
    +narrowed_unstatisfied_names
    +narrowed_unstatisfied_names: unsatisfied_names
    +name
    +name
    +failure_criterion
    +causes
    +success
    +newly_unsatisfied_names
    --
    -__init__(provider, reporter)
    +state()
    -_push_new_state()
    -_add_to_criteria(criteria, requirement, parent)
    -_remove_information_from_criteria(criteria, parents)
    -_get_preference(name): Preference
    -_is_current_pin_satisfying(name, criterion): bool
    -_get_updated_criteria(candidate)
    -_attempt_to_pin_criterion(name)
    -_patch_criteria(incompatibilities_from_broken): bool
    -_backjump(causes): bool
    -_extract_causes(criteron)
    +resolve(requirements, max_rounds)
  }

  class Resolver {
    +base_exception: ResolverException
    +resolution
    +state
    --
    +resolve(requirements, max_rounds)
  }

}

package "venv2.lib.python3.12.site-packages.pip._vendor.platformdirs" {
  class MacOS {
    +is_homebrew
    +path_list
    +is_homebrew
    +path_list
    --
    +user_data_dir(): str
    +site_data_dir(): str
    +site_data_path(): Path
    +user_config_dir(): str
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +site_cache_path(): Path
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
  }

  class Unix {
    +path
    +path
    +path
    +path
    +dirs
    +path
    +path
    +path
    +path: str
    +dirs
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path: str
    +path: str
    --
    +user_data_dir(): str
    -_site_data_dirs()
    +site_data_dir(): str
    +user_config_dir(): str
    -_site_config_dirs()
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
    +site_data_path(): Path
    +site_config_path(): Path
    +site_cache_path(): Path
    +iter_config_dirs()
    +iter_data_dirs()
  }

  class PlatformDirsABC {
    +params
    +path
    +directory
    --
    -__init__(appname, appauthor, version, roaming, multipath, opinion, ensure_exists)
    -_append_app_name_and_version(): str
    -_optionally_create_directory(path)
    -_first_item_as_path_if_multipath(directory): Path
    +user_data_dir(): str
    +site_data_dir(): str
    +user_config_dir(): str
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
    +user_data_path(): Path
    +site_data_path(): Path
    +user_config_path(): Path
    +site_config_path(): Path
    +user_cache_path(): Path
    +site_cache_path(): Path
    +user_state_path(): Path
    +user_log_path(): Path
    +user_documents_path(): Path
    +user_downloads_path(): Path
    +user_pictures_path(): Path
    +user_videos_path(): Path
    +user_music_path(): Path
    +user_desktop_path(): Path
    +user_runtime_path(): Path
    +site_runtime_path(): Path
    +iter_config_dirs()
    +iter_data_dirs()
    +iter_cache_dirs()
    +iter_runtime_dirs()
    +iter_config_paths()
    +iter_data_paths()
    +iter_cache_paths()
    +iter_runtime_paths()
  }

  class Android {
    +path
    +path
    +path
    +path
    --
    +user_data_dir(): str
    +site_data_dir(): str
    +user_config_dir(): str
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
  }

  class Windows {
    +const
    +path
    +params
    +author
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    --
    +user_data_dir(): str
    -_append_parts(path): str
    +site_data_dir(): str
    +user_config_dir(): str
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
  }

}

package "venv2.lib.python3.12.site-packages.flask_limiter" {
  class ConfigVars {
    +ENABLED: str
    +KEY_FUNC: str
    +KEY_PREFIX: str
    +FAIL_ON_FIRST_BREACH: str
    +ON_BREACH: str
    +SWALLOW_ERRORS: str
    +APPLICATION_LIMITS: str
    +APPLICATION_LIMITS_PER_METHOD: str
    +APPLICATION_LIMITS_EXEMPT_WHEN: str
    +APPLICATION_LIMITS_DEDUCT_WHEN: str
    +APPLICATION_LIMITS_COST: str
    +DEFAULT_LIMITS: str
    +DEFAULT_LIMITS_PER_METHOD: str
    +DEFAULT_LIMITS_EXEMPT_WHEN: str
    +DEFAULT_LIMITS_DEDUCT_WHEN: str
    +DEFAULT_LIMITS_COST: str
    +REQUEST_IDENTIFIER: str
    +STRATEGY: str
    +STORAGE_URI: str
    +STORAGE_OPTIONS: str
    +HEADERS_ENABLED: str
    +HEADER_LIMIT: str
    +HEADER_REMAINING: str
    +HEADER_RESET: str
    +HEADER_RETRY_AFTER: str
    +HEADER_RETRY_AFTER_VALUE: str
    +IN_MEMORY_FALLBACK: str
    +IN_MEMORY_FALLBACK_ENABLED: str
    +META_LIMITS: str
    +ON_META_BREACH: str
  }

  class HeaderNames {
    +RESET: str
    +REMAINING: str
    +LIMIT: str
    +RETRY_AFTER: str
  }

  class ExemptionScope {
    +NONE: int
    +APPLICATION
    +DEFAULT
    +DESCENDENTS
    +ANCESTORS
  }

  class RequestLimit {
    +limit: RateLimitItem
    +key: str
    +breached: bool
    +shared: bool
    --
    -__init__(extension, limit, request_args, breached, shared)
    +limiter(): RateLimiter
    +window()
    +reset_at(): int
    +remaining(): int
  }

  class Limit {
    +limit: RateLimitItem
    +key_func
    -_scope
    +per_method: bool
    +methods
    +error_message
    +exempt_when
    +override_defaults
    +deduct_when
    +on_breach
    -_cost
    +shared: bool
    +limit_scope
    +scope: limit_scope
    +scope
    +scope: endpoint
    --
    -__post_init__()
    +is_exempt(): bool
    +scope()
    +cost(): int
    +method_exempt(): bool
    +scope_for(endpoint, method): str
  }

  class LimitGroup {
    +limit_provider
    +key_function
    +scope
    +methods
    +error_message
    +exempt_when
    +override_defaults
    +deduct_when
    +on_breach
    +per_method: bool
    +cost
    +shared: bool
    +limit_str
    +limit_items
    --
    -__iter__()
  }

  class LimiterContext {
    +view_rate_limit
    +view_rate_limits
    +conditional_deductions
    +seen_limits
    --
    +reset()
  }

  class Limiter {
    +config
    +storage_uri_from_config
    +storage_uri_from_config: str
    +app_limits
    +app_limits
    +conf_limits
    +default_limit_groups
    +meta_limits
    +ctx
    +config
    +fallback_enabled
    +fallback_limits
    +limiter
    +limiter
    +header_limit
    +reset_at
    +existing_retry_after_header
    +retry_after
    +retry_after
    +retry_after
    +reset_at
    +response
    +name: callable_name
    +view_func
    +name
    +marked_for_limiting
    +fallback_limits
    +fallback_limits
    +limits
    +failed_limits
    +limit_for_header
    +view_limits
    +meta_limits
    +args
    +breached_meta_limit
    +meta_breach_response: NoneType
    +cb_response
    +meta_breach_response: cb_response
    +limit_scope
    +limit_key
    +args
    +kwargs
    +args
    +method
    +method
    +request_limit
    +limit_for_header
    +explicit
    +limit_for_header
    +on_breach_response: NoneType
    +request_limit
    +cb_response
    +on_breach_response: cb_response
    +limit_scope
    +limit_key
    +args
    +endpoint
    +all_limits
    --
    -__init__(key_func)
    +init_app(app)
    +context(): LimiterContext
    +limit(limit_value): LimitDecorator
    +shared_limit(limit_value, scope): LimitDecorator
    +exempt(obj): flask.Blueprint
    +exempt(obj)
    +exempt()
    +exempt(obj)
    +wrapper(): _WO
    +request_filter(fn)
    -__configure_fallbacks(app, strategy)
    -__should_check_backend(): bool
    +check()
    +reset()
    +storage(): Storage
    +limiter(): RateLimiter
    +current_limit()
    +current_limits()
    +identify_request(): str
    -__check_conditional_deductions(response)
    -__inject_headers(response): flask.wrappers.Response
    -__check_all_limits_exempt(endpoint): bool
    -__filter_limits(endpoint, blueprint, callable_name, in_middleware)
    -__evaluate_limits(endpoint, limits)
    -_check_request_limit(callable_name, in_middleware)
    -__release_context(_)
  }

  class LimitDecorator {
    +tb
    +qualified_location
    +name
    +name
    +identity
    +view_func
    --
    -__init__(limiter, limit_value, key_func, shared, scope, per_method, methods, error_message, exempt_when, override_defaults, deduct_when, on_breach, cost)
    +limit_group(): LimitGroup
    -__enter__()
    -__exit__(exc_type, exc_value, traceback)
    -__call__(obj)
    -__call__(obj)
    -__call__(obj)
    -__inner(): R
  }

  class RateLimitExceeded {
    +description
    +description
    --
    -__init__(limit, response)
  }

  class LimitManager {
    +before_request_context
    +decorated_limits
    +hinted_limits
    +view_func
    +name
    +name: callable_name
    +exemption_scope
    +all_limits
    +explicit_limits_exempt
    +combined_defaults
    +hinted_limits_request_defaults
    +view_func
    +name
    +route_exemption_scope
    +blueprint_instance
    +limits
    +limits
    +blueprint_instance
    +blueprint_name
    +blueprint_ancestory
    +blueprint_self_limits
    +blueprint_limits
    +name
    +exemption
    +ancestory
    +ancestor_exemption
    --
    -__init__(application_limits, default_limits, decorated_limits, blueprint_limits, route_exemptions, blueprint_exemptions)
    +application_limits()
    +default_limits()
    +set_application_limits(limits)
    +set_default_limits(limits)
    +add_decorated_limit(route, limit, override)
    +add_blueprint_limit(blueprint, limit)
    +add_route_exemption(route, scope)
    +add_blueprint_exemption(blueprint, scope)
    +add_endpoint_hint(endpoint, callable)
    +has_hints(endpoint): bool
    +resolve_limits(app, endpoint, blueprint, callable_name, in_middleware, marked_for_limiting)
    +exemption_scope(app, endpoint, blueprint): ExemptionScope
    +decorated_limits(callable_name)
    +blueprint_limits(app, blueprint)
    -_blueprint_exemption_scope(app, blueprint_name)
  }

}

package "venv2.lib.python3.12.site-packages.flask_jwt_extended" {
  class _Config {
    +locations
    +locations
    +name
    +delta
    +delta
    +err: str
    +delta
    +delta
    +err: str
    +algorithms
    +key
    +key
    +key
    +key
    --
    +is_asymmetric(): bool
    +encode_key(): str
    +decode_key(): str
    +token_location()
    +jwt_in_cookies(): bool
    +jwt_in_headers(): bool
    +jwt_in_query_string(): bool
    +jwt_in_json(): bool
    +header_name(): str
    +header_type(): str
    +query_string_name(): str
    +query_string_value_prefix(): str
    +access_cookie_name(): str
    +refresh_cookie_name(): str
    +access_cookie_path(): str
    +refresh_cookie_path(): str
    +cookie_secure(): bool
    +cookie_domain(): str
    +session_cookie(): bool
    +cookie_samesite(): str
    +json_key(): str
    +refresh_json_key(): str
    +csrf_protect(): bool
    +csrf_request_methods()
    +csrf_in_cookies(): bool
    +access_csrf_cookie_name(): str
    +refresh_csrf_cookie_name(): str
    +access_csrf_cookie_path(): str
    +refresh_csrf_cookie_path(): str
    +access_csrf_header_name(): str
    +refresh_csrf_header_name(): str
    +csrf_check_form(): bool
    +access_csrf_field_name(): str
    +refresh_csrf_field_name(): str
    +access_expires(): ExpiresDelta
    +refresh_expires(): ExpiresDelta
    +algorithm(): str
    +decode_algorithms()
    -_secret_key(): str
    -_public_key(): str
    -_private_key(): str
    +cookie_max_age()
    +identity_claim_key(): str
    +exempt_methods()
    +error_msg_key(): str
    +json_encoder()
    +decode_audience()
    +encode_audience()
    +encode_issuer(): str
    +decode_issuer(): str
    +leeway(): int
    +encode_nbf(): bool
  }

  class JWTManager {
    +header_overrides
    +claim_overrides
    +expires_delta
    +expires_delta
    +unverified_claims
    +unverified_headers
    +secret
    +kwargs
    --
    -__init__(app, add_context_processor)
    +init_app(app, add_context_processor)
    -_set_error_handler_callbacks(app)
    +handle_csrf_error()
    +handle_decode_error()
    +handle_expired_error()
    +handle_fresh_token_required()
    +handle_missing_required_claim_error()
    +handle_invalid_audience_error()
    +handle_invalid_issuer_error()
    +handle_invalid_header_error()
    +handle_invalid_token_error()
    +handle_jwt_decode_error()
    +handle_auth_error()
    +handle_invalid_query_param_error()
    +handle_revoked_token_error()
    +handle_failed_token_verification()
    +handler_user_lookup_error()
    +handle_wrong_token_error()
    -{static} _set_default_configuration_options()
    +additional_claims_loader(callback): Callable
    +additional_headers_loader(callback): Callable
    +decode_key_loader(callback): Callable
    +encode_key_loader(callback): Callable
    +expired_token_loader(callback): Callable
    +invalid_token_loader(callback): Callable
    +needs_fresh_token_loader(callback): Callable
    +revoked_token_loader(callback): Callable
    +token_in_blocklist_loader(callback): Callable
    +token_verification_failed_loader(callback): Callable
    +token_verification_loader(callback): Callable
    +unauthorized_loader(callback): Callable
    +user_identity_loader(callback): Callable
    +user_lookup_loader(callback): Callable
    +user_lookup_error_loader(callback): Callable
    -_encode_jwt_from_config(identity, token_type, claims, fresh, expires_delta, headers): str
    -_decode_jwt_from_config(encoded_token, csrf_value, allow_expired): dict
  }

  class JSONEncoder {
    +default
    --
    +default(o): Any
  }

  class JWTExtendedException {
  }

  class JWTDecodeError {
  }

  class InvalidHeaderError {
  }

  class InvalidQueryParamError {
  }

  class NoAuthorizationError {
  }

  class CSRFError {
  }

  class WrongTokenError {
  }

  class RevokedTokenError {
    -__init__(jwt_header, jwt_data)
  }

  class FreshTokenRequired {
    -__init__(message, jwt_header, jwt_data)
  }

  class UserLookupError {
    -__init__(message, jwt_header, jwt_data)
  }

  class UserClaimsVerificationError {
    -__init__(message, jwt_header, jwt_data)
  }

}

package "venv2.lib.python3.12.site-packages.mypy" {
  class EraseTypeVisitor {
    +args
    +any_type
    +erased_items
    --
    +visit_unbound_type(t): ProperType
    +visit_any(t): ProperType
    +visit_none_type(t): ProperType
    +visit_uninhabited_type(t): ProperType
    +visit_erased_type(t): ProperType
    +visit_partial_type(t): ProperType
    +visit_deleted_type(t): ProperType
    +visit_instance(t): ProperType
    +visit_type_var(t): ProperType
    +visit_param_spec(t): ProperType
    +visit_parameters(t): ProperType
    +visit_type_var_tuple(t): ProperType
    +visit_unpack_type(t): ProperType
    +visit_callable_type(t): ProperType
    +visit_overloaded(t): ProperType
    +visit_tuple_type(t): ProperType
    +visit_typeddict_type(t): ProperType
    +visit_literal_type(t): ProperType
    +visit_union_type(t): ProperType
    +visit_type_type(t): ProperType
    +visit_type_alias_type(t): ProperType
  }

  class TypeVarEraser {
    +result
    +arg
    +unpacked
    +result
    +item
    +unpacked
    --
    -__init__(erase_id, replacement)
    +visit_type_var(t): Type
    +visit_instance(t): Type
    +visit_tuple_type(t): Type
    +visit_type_var_tuple(t): Type
    +visit_param_spec(t): Type
    +visit_type_alias_type(t): Type
  }

  class LastKnownValueEraser {
    +new
    +instances
    +instances_by_name
    +p_new_items
    +merged
    +orig_item: item
    +item
    +types
    --
    +visit_instance(t): Type
    +visit_type_alias_type(t): Type
    +visit_union_type(t): Type
  }

  class ASTConverter {
    +typeobj
    +visitor
    +method
    +visitor
    +res
    +exp
    +ignores
    +joined_ignores
    +block
    +stack
    +res
    +node
    +can_strip: bool
    +visitor
    +can_strip: bool
    +yield_visitor
    +can_strip: bool
    +lineno
    +op_map
    +op_name
    +comp_op_map
    +op_name
    +new_first
    +b: NoneType
    +b
    +b
    +ret
    +current_overload
    +current_overload_name
    +seen_unconditional_func_def: bool
    +last_if_stmt
    +last_if_overload
    +last_if_stmt_overload_name
    +last_if_unknown_truth_value
    +skipped_if_stmts
    +if_overload_name
    +if_block_with_overload
    +if_unknown_truth_value
    +if_overload_name
    +last_if_unknown_truth_value: NoneType
    +seen_unconditional_func_def: bool
    +last_if_stmt_overload_name: current_overload_name
    +last_if_unknown_truth_value: NoneType
    +popped
    +skipped_if_stmts
    +seen_unconditional_func_def: bool
    +current_overload
    +current_overload_name
    +current_overload
    +current_overload_name: if_overload_name
    +last_if_stmt: stmt
    +last_if_stmt_overload_name: NoneType
    +last_if_overload
    +last_if_unknown_truth_value: if_unknown_truth_value
    +current_overload
    +current_overload_name: NoneType
    +overload_name
    +parsed
    +body
    +no_type_check
    +lineno
    +args
    +arg_kinds
    +arg_names
    +arg_types
    +arg_types
    +return_type: NoneType
    +func_type_ast
    +arg_types
    +translated_args
    +arg_types
    +return_type
    +in_method_scope
    +stripped_type
    +err_msg
    +arg_types
    +return_type
    +arg_types
    +return_type
    +func_type: NoneType
    +func_type
    +end_line
    +end_column
    +body
    +func_def
    +deco_line
    +var
    +deco
    +first
    +retval
    +retval: func_def
    +optional
    +new_args
    +names
    +posonlyargs
    +args_args
    +args_defaults
    +num_no_defaults
    +pos_only
    +pos_only
    +arg_type: NoneType
    +annotation
    +type_comment
    +arg_type: NoneType
    +arg_type
    +arg_type
    +pos_only: bool
    +argument
    +keywords
    +cdef
    +node
    +tup
    +node
    +node
    +lvalues
    +rvalue
    +typ
    +s
    +line
    +rvalue: Expression
    +rvalue
    +typ
    +s
    +s
    +target_type
    +node
    +target_type
    +node
    +node
    +node
    +target_type
    +node
    +target_type
    +s
    +node
    +vs
    +types
    +handlers
    +node
    +vs
    +types
    +handlers
    +node
    +node
    +names
    +name
    +asname
    +asname
    +i
    +mod
    +i: ImportBase
    +i
    +g
    +d
    +value
    +node
    +s
    +s
    +s
    +s
    +op_node
    +op: str
    +op: str
    +e
    +e
    +op
    +e
    +op: NoneType
    +op: str
    +op: str
    +op: str
    +op: str
    +e
    +body
    +e
    +e
    +e
    +e
    +e
    +e
    +targets
    +iters
    +ifs_list
    +is_async
    +e
    +targets
    +iters
    +ifs_list
    +is_async
    +e
    +v
    +e
    +e
    +e
    +operators
    +operands
    +e
    +args
    +keywords
    +keyword_names
    +arg_types
    +arg_kinds
    +e
    +val
    +e: Any
    +e
    +e
    +e
    +e
    +e
    +e
    +e
    +e
    +empty_string
    +strs_to_join
    +last
    +join_method
    +result_expression
    +val_exp
    +conv_str
    +format_string
    +format_spec_exp
    +format_method
    +result_expression
    +value
    +member_expr
    +obj
    +e
    +e: member_expr
    +e
    +is_py38_or_earlier
    +e
    +e
    +expr_list
    +e
    +e
    +e
    +value
    +node
    +node
    +node
    +patterns
    +stars
    +node
    +node
    +name
    +node
    +keys
    +values
    +rest: NoneType
    +rest
    +node
    +class_ref
    +positionals
    +keyword_keys
    +keyword_values
    +node
    +name: NoneType
    +name
    +name
    +node
    +node
    +node
    --
    -__init__(options, is_stub, errors)
    +note(msg, line, column)
    +fail(msg, line, column, blocker)
    +fail_merge_overload(node)
    +visit(node): Any
    +set_line(node, n): N
    +translate_opt_expr_list(l)
    +translate_expr_list(l)
    +get_lineno(node): int
    +translate_stmt_list(stmts)
    +translate_type_comment(n, type_comment)
    +from_operator(op): str
    +from_comp_operator(op): str
    +set_block_lines(b, stmts)
    +as_block(stmts)
    +as_required_block(stmts): Block
    +fix_function_overloads(stmts)
    -_check_ifstmt_for_overloads(stmt, current_overload_name)
    -_get_executable_if_block_with_overloads(stmt)
    -_strip_contents_from_if_stmt(stmt)
    -_is_stripped_if_stmt(stmt): bool
    +translate_module_id(id): str
    +visit_Module(mod): MypyFile
    +visit_FunctionDef(n)
    +visit_AsyncFunctionDef(n)
    +do_func_def(n, is_coroutine)
    +set_type_optional(type, initializer)
    +transform_args(args, line, no_type_check)
    +make_argument(arg, default, kind, no_type_check, pos_only): Argument
    +fail_arg(msg, arg)
    +visit_ClassDef(n): ClassDef
    +visit_Return(n): ReturnStmt
    +visit_Delete(n): DelStmt
    +visit_Assign(n): AssignmentStmt
    +visit_AnnAssign(n): AssignmentStmt
    +visit_AugAssign(n): OperatorAssignmentStmt
    +visit_For(n): ForStmt
    +visit_AsyncFor(n): ForStmt
    +visit_While(n): WhileStmt
    +visit_If(n): IfStmt
    +visit_With(n): WithStmt
    +visit_AsyncWith(n): WithStmt
    +visit_Raise(n): RaiseStmt
    +visit_Try(n): TryStmt
    +visit_TryStar(n): TryStmt
    +visit_Assert(n): AssertStmt
    +visit_Import(n): Import
    +visit_ImportFrom(n): ImportBase
    +visit_Global(n): GlobalDecl
    +visit_Nonlocal(n): NonlocalDecl
    +visit_Expr(n): ExpressionStmt
    +visit_Pass(n): PassStmt
    +visit_Break(n): BreakStmt
    +visit_Continue(n): ContinueStmt
    +visit_NamedExpr(n): AssignmentExpr
    +visit_BoolOp(n): OpExpr
    +group(op, vals, n): OpExpr
    +visit_BinOp(n): OpExpr
    +visit_UnaryOp(n): UnaryExpr
    +visit_Lambda(n): LambdaExpr
    +visit_IfExp(n): ConditionalExpr
    +visit_Dict(n): DictExpr
    +visit_Set(n): SetExpr
    +visit_ListComp(n): ListComprehension
    +visit_SetComp(n): SetComprehension
    +visit_DictComp(n): DictionaryComprehension
    +visit_GeneratorExp(n): GeneratorExpr
    +visit_Await(n): AwaitExpr
    +visit_Yield(n): YieldExpr
    +visit_YieldFrom(n): YieldFromExpr
    +visit_Compare(n): ComparisonExpr
    +visit_Call(n): CallExpr
    +visit_Constant(n): Any
    +visit_JoinedStr(n): Expression
    +visit_FormattedValue(n): Expression
    +visit_Attribute(n)
    +visit_Subscript(n): IndexExpr
    +visit_Starred(n): StarExpr
    +visit_Name(n): NameExpr
    +visit_List(n)
    +visit_Tuple(n): TupleExpr
    +visit_Slice(n): SliceExpr
    +visit_ExtSlice(n): TupleExpr
    +visit_Index(n): Node
    +visit_Match(n): MatchStmt
    +visit_MatchValue(n): ValuePattern
    +visit_MatchSingleton(n): SingletonPattern
    +visit_MatchSequence(n): SequencePattern
    +visit_MatchStar(n): StarredPattern
    +visit_MatchMapping(n): MappingPattern
    +visit_MatchClass(n): ClassPattern
    +visit_MatchAs(n): AsPattern
    +visit_MatchOr(n): OrPattern
    +visit_TypeAlias(n): AssignmentStmt
  }

  class TypeConverter {
    +method
    +visitor
    +typ
    +f
    +constructor
    +note: NoneType
    +note
    +name
    +default_type
    +typ: Type
    +converted
    +typ: converted
    +name
    +value
    +name
    +converted
    +typ: converted
    +left
    +right
    +val
    +contents
    +typ
    +numeric_value
    +type_name: str
    +numeric_value: NoneType
    +type_name
    +value
    +sliceval: Any
    +sliceval: Any
    +sliceval
    +dims
    +sliceval
    +empty_tuple_index: bool
    +params
    +empty_tuple_index: bool
    +params
    +value
    +before_dot
    +result
    --
    -__init__(errors, line, override_column, is_evaluated)
    +convert_column(column): int
    +invalid_type(node, note): RawExpressionType
    +visit(node): ProperType
    +visit(node)
    +visit(node)
    +parent()
    +fail(msg, line, column)
    +note(msg, line, column)
    +translate_expr_list(l)
    +visit_Call(e): Type
    +translate_argument_list(l): TypeList
    -_extract_argument_name(n)
    +visit_Name(n): Type
    +visit_BinOp(n): Type
    +visit_Constant(n): Type
    +visit_UnaryOp(n): Type
    +numeric_type(value, n): Type
    +visit_Index(n): Type
    +visit_Slice(n): Type
    +visit_Subscript(n): Type
    +visit_Tuple(n): Type
    +visit_Attribute(n): Type
    +visit_Starred(n): Type
    +visit_List(n): Type
  }

  class FindAttributeAssign {
    -__init__()
    +visit_assignment_stmt(s)
    +visit_with_stmt(s)
    +visit_for_stmt(s)
    +visit_expression_stmt(s)
    +visit_call_expr(e)
    +visit_index_expr(e)
    +visit_member_expr(e)
  }

  class FindYield {
    -__init__()
    +visit_yield_expr(e)
    +visit_yield_from_expr(e)
  }

  class _NodeEvaluator {
    +operand
    +items
    +items
    +items
    +items
    --
    +visit_int_expr(o): int
    +visit_str_expr(o): str
    +visit_bytes_expr(o): object
    +visit_float_expr(o): float
    +visit_complex_expr(o): object
    +visit_ellipsis(o): object
    +visit_star_expr(o): object
    +visit_name_expr(o): object
    +visit_member_expr(o): object
    +visit_yield_from_expr(o): object
    +visit_yield_expr(o): object
    +visit_call_expr(o): object
    +visit_op_expr(o): object
    +visit_comparison_expr(o): object
    +visit_cast_expr(o): object
    +visit_assert_type_expr(o): object
    +visit_reveal_expr(o): object
    +visit_super_expr(o): object
    +visit_unary_expr(o): object
    +visit_assignment_expr(o): object
    +visit_list_expr(o): object
    +visit_dict_expr(o): object
    +visit_tuple_expr(o): object
    +visit_set_expr(o): object
    +visit_index_expr(o): object
    +visit_type_application(o): object
    +visit_lambda_expr(o): object
    +visit_list_comprehension(o): object
    +visit_set_comprehension(o): object
    +visit_dictionary_comprehension(o): object
    +visit_generator_expr(o): object
    +visit_slice_expr(o): object
    +visit_conditional_expr(o): object
    +visit_type_var_expr(o): object
    +visit_paramspec_expr(o): object
    +visit_type_var_tuple_expr(o): object
    +visit_type_alias_expr(o): object
    +visit_namedtuple_expr(o): object
    +visit_enum_call_expr(o): object
    +visit_typeddict_expr(o): object
    +visit_newtype_expr(o): object
    +visit__promote_expr(o): object
    +visit_await_expr(o): object
    +visit_temp_node(o): object
  }

  class BuildResult {
    -__init__(manager, graph)
  }

  class CacheMeta {
    +id: str
    +path: str
    +mtime: int
    +size: int
    +hash: str
    +dependencies
    +data_mtime: int
    +data_json: str
    +suppressed
    +options
    +dep_prios
    +dep_lines
    +interface_hash: str
    +version_id: str
    +ignore_all: bool
    +plugin_data: Any
  }

  class FgDepMeta {
    +path: str
    +mtime: int
  }

  class BuildManager {
    +plugin
    +has_reporters
    +path
    +path
    +previously_checked
    +shadow_file
    +file_id
    +rel
    +file_id
    +new_id
    +res
    +pri
    +ancestor_pri
    +ancestor_parts
    +ancestors
    +cur_id
    +all_are_submodules: bool
    +pri
    +sub_id
    +all_are_submodules: bool
    +pri
    +pri
    +t0
    +tree
    +t0
    +deps
    +deps
    +val
    --
    -__init__(data_dir, search_paths, ignore_prefix, source_set, reports, options, version_id, plugin, plugins_snapshot, errors, flush_errors, fscache, stdout, stderr)
    +dump_stats()
    +use_fine_grained_cache(): bool
    +maybe_swap_for_shadow_path(path): str
    +get_stat(path): os.stat_result
    +getmtime(path): int
    +all_imported_modules_in_file(file)
    +correct_rel_imp(): str
    +is_module(id): bool
    +parse_file(id, path, source, ignore_errors, options): MypyFile
    +load_fine_grained_deps(id)
    +report_file(file, type_map, options)
    +verbosity(): int
    +log()
    +log_fine_grained()
    +trace()
    +add_stats()
    +stats_summary()
  }

  class ModuleNotFound {
  }

  class State {
    +manager: BuildManager
    +order_counter
    +order: int
    +id: str
    +path
    +abspath
    +xpath: str
    +source
    +source_hash
    +meta_source_hash
    +meta
    +data
    +tree
    +dependencies
    +dependencies_set
    +suppressed
    +suppressed_set
    +priorities
    +dep_line_map
    +ancestors
    +import_context
    +caller_state
    +caller_line: int
    +externally_same: bool
    +interface_hash: str
    +options: Options
    +ignore_all: bool
    +transitive_error: bool
    +early_errors
    -_type_checker
    +fine_grained_deps_loaded: bool
    +time_spent_us: int
    +per_line_checking_time_ns
    +source: str
    +t0
    +all_deps
    +ancestors
    +parent
    +save_import_context
    +data
    +t0
    +t1
    +manager
    +cached
    +modules
    +t0
    +source
    +path
    +source
    +err
    +err
    +source: str
    +flags
    +options
    +t0
    +analyzer
    +manager
    +dep_entries
    +t0
    +manager
    +t0
    +result
    +manager
    +manager
    +t0
    +options
    +expr_types
    +symbol_types
    +valid
    +encountered
    +extra
    +options
    +valid_refs
    +is_errors
    +dep_prios
    +dep_lines
    +manager
    +all_deps
    +dependencies
    +all_deps
    +options
    +line
    +state
    +ancestor
    --
    -__init__(id, path, source, manager, caller_state, caller_line, ancestor_for, root_source, temporary)
    +xmeta(): CacheMeta
    +add_ancestors()
    +is_fresh(): bool
    +is_interface_fresh(): bool
    +mark_as_rechecked()
    +mark_interface_stale()
    +check_blockers()
    +wrap_context(check_blockers)
    +load_fine_grained_deps()
    +load_tree(temporary)
    +fix_cross_refs()
    +parse_file()
    +parse_inline_configuration(source)
    +semantic_analysis_pass1()
    +add_dependency(dep)
    +suppress_dependency(dep)
    +compute_dependencies()
    +type_check_first_pass()
    +type_checker(): TypeChecker
    +type_map()
    +type_check_second_pass(): bool
    +detect_possibly_undefined_vars()
    +finish_passes()
    +free_state()
    -_patch_indirect_dependencies(module_refs, types)
    +compute_fine_grained_deps()
    +update_fine_grained_deps(deps)
    +valid_references()
    +write_cache()
    +verify_dependencies(suppressed_only)
    +dependency_priorities()
    +dependency_lines()
    +generate_unused_ignore_notes()
    +generate_ignore_without_code_notes()
  }

  class NodeInfo {
    +total_size
    --
    -__init__(index, scc)
    +dumps(): str
  }

  class BuildType {
    +STANDARD: Final
    +MODULE: Final
    +PROGRAM_TEXT: Final
  }

  class Options {
    -__init__(pyversion, no_import, inspect, doc_dir, search_path, interpreter, parse_only, ignore_errors, include_private, output_dir, modules, packages, files, verbose, quiet, export_less, include_docstrings)
  }

  class ModuleProperties {
    -__init__(name, file, path, all, is_c_module, subpackages)
  }

  class InspectError {
  }

  class ModuleInspect {
    +res
    +max_iter: int
    +n: int
    --
    -__init__()
    -_start()
    +close()
    +get_package_properties(package_id): ModuleProperties
    -_get_from_queue()
    -__enter__(): ModuleInspect
    -__exit__()
  }

  class ErrorMessage {
    +value: str
    +code
    --
    +format(): ErrorMessage
    +with_additional_msg(info): ErrorMessage
  }

  class HasGenericCallable {
    -__init__()
    +visit_callable_type(t): bool
  }

  class FreshenCallableVisitor {
    +result
    --
    +visit_callable_type(t): Type
    +visit_type_alias_type(t): Type
  }

  class ExpandTypeVisitor {
    +variables
    +args
    +arg
    +unpacked
    +args
    +t
    +repl
    +repl
    +repl
    +repl
    +star_index
    +prefix
    +suffix
    +var_arg_type
    +expanded_tuple
    +expanded_items
    +fallback
    +fallback
    +expanded_items
    +new_unpack
    +param_spec
    +repl
    +prefix
    +clean_repl
    +var_arg
    +needs_normalization: bool
    +needs_normalization: bool
    +arg_types
    +arg_types
    +expanded
    +items
    +new_item
    +items
    +items
    +item
    +unpacked
    +fallback
    +fallback
    +expanded
    +simplified
    +item
    +args
    +a
    --
    -__init__(variables)
    +visit_unbound_type(t): Type
    +visit_any(t): Type
    +visit_none_type(t): Type
    +visit_uninhabited_type(t): Type
    +visit_deleted_type(t): Type
    +visit_erased_type(t): Type
    +visit_instance(t): Type
    +visit_type_var(t): Type
    +visit_param_spec(t): Type
    +visit_type_var_tuple(t): Type
    +visit_unpack_type(t): Type
    +expand_unpack(t)
    +visit_parameters(t): Type
    +interpolate_args_for_unpack(t, var_arg)
    +visit_callable_type(t): CallableType
    +visit_overloaded(t): Type
    +expand_types_with_unpack(typs)
    +visit_tuple_type(t): Type
    +visit_typeddict_type(t): Type
    +visit_literal_type(t): Type
    +visit_union_type(t): Type
    +visit_partial_type(t): Type
    +visit_type_type(t): Type
    +visit_type_alias_type(t): Type
    +expand_types(types)
  }

  class StubSource {
    -__init__(module, path, runtime_all)
    -__repr__(): str
    +module(): str
    +path()
  }

  class AliasPrinter {
    +callee
    +args
    +node: Expression
    +trailer: str
    +trailer
    +node
    +base
    +index
    +index
    +dict_items
    --
    -__init__(stubgen)
    +visit_call_expr(node): str
    +visit_name_expr(node): str
    +visit_member_expr(o): str
    +visit_str_expr(node): str
    +visit_index_expr(node): str
    +visit_tuple_expr(node): str
    +visit_list_expr(node): str
    +visit_dict_expr(o): str
    +visit_ellipsis(node): str
    +visit_op_expr(o): str
  }

  class DefinitionFinder {
    -__init__()
    +visit_class_def(o)
    +visit_func_def(o)
  }

  class ReferenceFinder {
    +fullname
    --
    -__init__()
    +visit_block(block)
    +visit_name_expr(e)
    +visit_instance(t)
    +visit_unbound_type(t)
    +visit_tuple_type(t)
    +visit_callable_type(t)
    +add_ref(fullname)
  }

  class ASTStubGenerator {
    +overload_chain: bool
    +overload_chain: bool
    +args
    +retname
    +args
    +var
    +kind
    +name
    +annotated_type
    +is_self_arg
    +is_cls_arg
    +typename
    +typename
    +typename
    +name
    +name
    +new_args
    +args: new_args
    +is_dataclass_generated
    +new_name
    +retname
    +generator_name
    +yield_name: str
    +send_name: str
    +return_name: str
    +yield_name
    +send_name
    +yield_name
    +send_name
    +return_name
    +expr
    +is_dataclass_generated
    +self_inits
    +init_code
    +self_var
    +self_var: str
    +class_info
    +class_info: NoneType
    +ctx
    +default_sig
    +sigs
    +qualname
    +fullname
    +abc_module
    +builtin_decorator_replacement
    +name
    +real_module
    +real_short
    +real_module: str
    +real_module
    +resolved_name
    +sep
    +sep
    +decorators
    +base_types
    +meta
    +bases
    +docstring
    +n
    +base_types
    +p
    +nt_fields
    +typename
    +fields_str
    +namedtuple_name
    +decorators
    +p
    +expr
    +foundl
    +items
    +annotations
    +annotations
    +items
    +annotations
    +sep: bool
    +found: bool
    +init
    +found: bool
    +init
    +sep: bool
    +fields_arg
    +field_names
    +field_names
    +incomplete
    +fields_arg
    +fields
    +p
    +fields
    +bases
    +class_def
    +items
    +total
    +total
    +total: arg
    +p
    +bases
    +class_def
    +incomplete
    +indices
    +indices
    +indices
    +indices
    +p
    +expr
    +exported_names
    +import_names
    +full_module: module
    +full_module: module
    +as_name: name
    +names
    +target_name
    +target_name: as_id
    +typename
    +final_arg
    +typename
    +initializer
    +parts
    +rvalue
    +math_ops
    +expr
    +expr
    +is_private
    --
    -__init__(_all_, include_private, analyzed, export_less, include_docstrings)
    +visit_mypy_file(o)
    +visit_overloaded_func_def(o)
    +get_default_function_sig(func_def, ctx): FunctionSig
    -_get_func_args(o, ctx)
    -_get_func_return(o, ctx)
    -_get_func_docstring(node)
    +visit_func_def(o)
    +visit_decorator(o)
    +process_decorator(o)
    +get_fullname(expr): str
    +visit_class_def(o)
    +get_base_types(cdef)
    +get_class_decorators(cdef)
    +is_dataclass(expr): bool
    +visit_block(o)
    +visit_assignment_stmt(o)
    +is_namedtuple(expr): bool
    +is_typed_namedtuple(expr): bool
    -_get_namedtuple_fields(call)
    +process_namedtuple(lvalue, rvalue)
    +is_typeddict(expr): bool
    +process_typeddict(lvalue, rvalue)
    +annotate_as_incomplete(lvalue)
    +is_alias_expression(expr, top_level): bool
    +process_typealias(lvalue, rvalue)
    +visit_if_stmt(o)
    +visit_import_all(o)
    +visit_import_from(o)
    +visit_import(o)
    +get_init(lvalue, rvalue, annotation)
    +get_assign_initializer(rvalue): str
    +add_decorator(name, require_name)
    +clear_decorators()
    +is_private_member(fullname): bool
    +get_str_type_of_node(rvalue, can_infer_optional, can_be_any): str
    +maybe_unwrap_unary_expr(expr): Expression
    +should_reexport(name, full_module, name_is_alias): bool
  }

  class SelfTraverser {
    +lvalue
    --
    -__init__()
    +visit_assignment_stmt(o)
  }

  class PyAnnotateSignature {
    +return_type: str
    +arg_types
  }

  class Callsite {
    +path: str
    +line: int
    +arg_kinds
    +callee_arg_names
    +arg_names
    +arg_types
  }

  class SuggestionPlugin {
    +target
    --
    -__init__(target)
    +get_function_hook(fullname)
    +get_method_hook(fullname)
    +log(ctx): Type
  }

  class ReturnFinder {
    -__init__(typemap)
    +visit_return_stmt(o)
    +visit_func_def(o)
  }

  class ArgUseFinder {
    +typ
    +formal_to_actual
    +arg
    --
    -__init__(func, typemap)
    +visit_call_expr(o)
  }

  class SuggestionFailure {
  }

  class SuggestionEngine {
    +suggestion
    +old
    +types
    +all_arg_types
    +all_use_types
    +default
    +arg_types
    +options
    +product
    +new_type
    +collector_plugin
    +errors
    +errors
    +best
    +pnode
    +typ
    +graph
    +uses
    +is_method
    +guesses
    +guesses
    +returns
    +ret_types
    +ret_types
    +guesses
    +guesses
    +args
    +arg
    +arg
    +arg
    +arg
    +node
    +line_number
    +tail
    +target
    +node
    +node
    +tree
    +names: SymbolTable
    +components
    +node
    +names
    +funcname
    +key
    +tree
    +node
    +closest_line
    +sym_line
    +closest_line: sym_line
    +node
    +typ: NoneType
    +typ
    +typ
    +old
    +res
    +func_name
    +path
    +obj
    +start
    +t
    --
    -__init__(fgmanager)
    +suggest(function): str
    +suggest_callsites(function): str
    +restore_after(module)
    +with_export_types()
    +get_trivial_type(fdef): CallableType
    +get_starting_type(fdef): CallableType
    +get_args(is_method, base, defaults, callsites, uses)
    +get_default_arg_types(fdef)
    +get_guesses(is_method, base, defaults, callsites, uses)
    +get_callsites(func)
    +filter_options(guesses, is_method, ignore_return)
    +find_best(func, guesses)
    +get_guesses_from_parent(node)
    +get_suggestion(mod, node): PyAnnotateSignature
    +format_args(arg_kinds, arg_names, arg_types): str
    +find_node(key)
    +find_node_by_module_and_name(modname, tail)
    +find_node_by_file_and_line(file, line)
    +extract_from_decorator(node)
    +try_type(func, typ)
    +reload(state)
    +ensure_loaded(state, force): MypyFile
    +named_type(s): Instance
    +json_suggestion(mod, func_name, node, suggestion): str
    +pyannotate_signature(cur_module, is_method, typ): PyAnnotateSignature
    +format_signature(sig): str
    +format_type(cur_module, typ): str
    +score_type(t, arg_pos): int
    +score_callable(t): int
  }

  class TypeFormatter {
    +s
    +s
    +mod_obj
    +parts
    +tree
    +mod
    +delim
    +fallback_name
    +s
    +arg_str: str
    +args
    +arg_str
    --
    -__init__(module, graph, options)
    +visit_any(t): str
    +visit_instance(t): str
    +visit_tuple_type(t): str
    +visit_uninhabited_type(t): str
    +visit_typeddict_type(t): str
    +visit_union_type(t): str
    +visit_callable_type(t): str
  }

  class MakeSuggestionAny {
    +visit_any(t): Type
    +visit_type_alias_type(t): Type
  }

  class TypeTranslationError {
  }

  class Pattern {
    +accept(visitor): T
  }

  class AsPattern {
    +pattern
    +name
    --
    -__init__(pattern, name)
    +accept(visitor): T
  }

  class OrPattern {
    +patterns
    --
    -__init__(patterns)
    +accept(visitor): T
  }

  class ValuePattern {
    +expr: Expression
    --
    -__init__(expr)
    +accept(visitor): T
  }

  class SingletonPattern {
    +value
    --
    -__init__(value)
    +accept(visitor): T
  }

  class SequencePattern {
    +patterns
    --
    -__init__(patterns)
    +accept(visitor): T
  }

  class StarredPattern {
    +capture
    --
    -__init__(capture)
    +accept(visitor): T
  }

  class MappingPattern {
    +keys
    +values
    +rest
    --
    -__init__(keys, values, rest)
    +accept(visitor): T
  }

  class ClassPattern {
    +class_ref: RefExpr
    +positionals
    +keyword_keys
    +keyword_values
    --
    -__init__(class_ref, positionals, keyword_keys, keyword_values)
    +accept(visitor): T
  }

  class ErrorCode {
    -__init__(code, description, category, default_enabled, sub_code_of)
    -__str__(): str
    -__eq__(other): bool
    -__hash__(): int
  }

  class ConfigTOMLValueError {
  }

  class NamedTupleAnalyzer {
    +result
    +existing_info: NoneType
    +existing_info
    +info
    +items
    +types
    +default_items
    +statements
    +name
    +analyzed
    +call: node
    +callee
    +fullname
    +is_typed: bool
    +is_typed: bool
    +result
    +name: var_name
    +name
    +var_name
    +info
    +name: var_name
    +name: typename
    +default_items
    +default_items
    +existing_info: NoneType
    +existing_info
    +info
    +type_name
    +args
    +defaults
    +arg
    +defaults
    +typename
    +types
    +tvar_defs
    +str_expr
    +items
    +listexpr
    +items
    +type_exprs
    +tvar_defs
    +result
    +types
    +underscore
    +defaults
    +items
    +types
    +type
    +analyzed
    +analyzed
    +strtype
    +implicit_any
    +basetuple_type
    +dictype
    +ordereddictype
    +fallback
    +iterable_type
    +function_type
    +literals
    +match_args_type
    +info
    +tuple_base
    +fields
    +vars
    +tuple_of_strings
    +tvd
    +selftype: tvd
    +first
    +first
    +args
    +types
    +items
    +arg_kinds
    +signature
    +func
    +v
    +dec
    +sym
    +sym
    +default
    +kind
    +self_tvar_expr
    +nt_names
    +ctx
    +sym
    +r_key
    --
    -__init__(options, api)
    +analyze_namedtuple_classdef(defn, is_stub_file, is_func_scope)
    +check_namedtuple_classdef(defn, is_stub_file)
    +check_namedtuple(node, var_name, is_func_scope)
    +store_namedtuple_info(info, name, call, is_typed)
    +parse_namedtuple_args(call, fullname)
    +parse_namedtuple_fields_with_types(nodes, context)
    +build_namedtuple_typeinfo(name, items, types, default_items, line, existing_info): TypeInfo
    +add_field(is_initialized_in_class, is_property)
    +add_method(ret, args, is_classmethod, is_new)
    +make_init_arg(): Argument
    +save_namedtuple_body(named_tuple_info)
    +fail(msg, ctx)
  }

  class MemberContext {
    +mx
    --
    -__init__(is_lvalue, is_super, is_operator, original_type, context, msg, chk, self_type, module_symbol_table, no_deferral, is_self)
    +named_type(name): Instance
    +not_ready_callback(name, context)
    +copy_modified(): MemberContext
  }

  class FreezeTypeVarsVisitor {
    +visit_callable_type(t)
  }

  class RefInfoVisitor {
    +fullname: NoneType
    +fullname
    +typ
    +sym: NoneType
    +sym
    +tfn
    +fullname
    +fullname
    --
    -__init__(type_map)
    +visit_name_expr(expr)
    +visit_member_expr(expr)
    +visit_func_def(func)
    +record_ref_expr(expr)
  }

  class SearchPaths {
    +python_path
    +mypy_path
    +package_path
    +typeshed_path
  }

  class ModuleNotFoundReason {
    +NOT_FOUND: int
    +FOUND_WITHOUT_TYPE_HINTS: int
    +WRONG_WORKING_DIRECTORY: int
    +APPROVED_STUBS_NOT_INSTALLED: int
    +doc_link: str
    +msg: str
    +notes
    +msg: str
    +notes
    +msg: str
    +notes
    +msg: str
    +notes
    --
    +error_message_templates(daemon)
  }

  class BuildSource {
    -__init__(path, module, text, base_dir, followed)
    -__repr__(): str
  }

  class BuildSourceSet {
    -__init__(sources)
    +is_source(file): bool
  }

  class FindModuleCache {
    +custom_typeshed_dir: NoneType
    +custom_typeshed_dir
    +p
    +d
    +d
    +idx
    +parent
    +components
    +dir_chain
    +dirs
    +dir
    +components
    +contents
    +contents
    +name
    +top_level
    +use_typeshed: bool
    +use_typeshed
    +use_typeshed
    +version
    +plausible_match: bool
    +dir_path: pkg_dir
    +dir_path
    +plausible_match: bool
    +pkg_id
    +path
    +working_dir
    +parent_search
    +working_dir
    +fscache
    +p
    +components
    +dir_chain
    +third_party_inline_dirs: PackageDirs
    +third_party_stubs_dirs: PackageDirs
    +found_possible_third_party_missing_type_hints: bool
    +need_installed_stubs: bool
    +stub_name
    +stub_dir
    +stub_typed_file
    +stub_components
    +path
    +runtime_path
    +non_stub_match
    +found_possible_third_party_missing_type_hints: bool
    +need_installed_stubs: bool
    +found_possible_third_party_missing_type_hints: bool
    +python_mypy_path
    +candidate_base_dirs
    +seplast
    +sepinit
    +near_misses
    +base_path
    +has_init: bool
    +dir_prefix: base_dir
    +dir_prefix
    +path
    +path_stubs
    +has_init: bool
    +path
    +levels
    +index
    +ancestor
    +metadata_fnam
    +metadata
    +module_path
    +sources
    +package_path: NoneType
    +package_path
    +package_path: module_path
    +seen
    +names
    +subpath
    --
    -__init__(search_paths, fscache, options, stdlib_py_versions, source_set)
    +clear()
    +find_module_via_source_set(id)
    +find_lib_path_dirs(id, lib_path): PackageDirs
    +get_toplevel_possibilities(lib_path, id)
    +find_module(id): ModuleSearchResult
    -_typeshed_has_version(module): bool
    -_find_module_non_stub_helper(components, pkg_dir)
    -_update_ns_ancestors(components, match)
    -_can_find_module_in_parent_dir(id): bool
    -_find_module(id, use_typeshed): ModuleSearchResult
    -_is_compatible_stub_package(stub_dir): bool
    +find_modules_recursive(module)
  }

  class SplitNamespace {
    -__init__(standard_namespace, alt_namespace, alt_prefix)
    -_get()
    -__setattr__(name, value)
    -__getattr__(name): Any
  }

  class IPCException {
  }

  class IPCBase {
    +connection: _IPCHandle
    +space_pos
    +bdata
    +bdata
    +bdata
    +timeout
    +res
    +more
    +bdata
    +bdata
    +more
    +encoded_data
    +timeout
    +res
    --
    -__init__(name, timeout)
    +frame_from_buffer()
    +read(size): str
    +write(data)
    +close()
  }

  class IPCClient {
    +timeout
    --
    -__init__(name, timeout)
    -__enter__(): IPCClient
    -__exit__(exc_ty, exc_val, exc_tb)
  }

  class IPCServer {
    +BUFFER_SIZE: Final
    +name
    +name
    +err
    +sockfile
    +ov
    +timeout
    +res
    +name
    --
    -__init__(name, timeout)
    -__enter__(): IPCServer
    -__exit__(exc_ty, exc_val, exc_tb)
    +cleanup()
    +connection_name(): str
  }

  class DecodeError {
  }

  class IdMapper {
    -__init__()
    +id(o): int
  }

  class FancyFormatter {
    +winver
    +kernel32
    +ENABLE_PROCESSED_OUTPUT: int
    +ENABLE_WRAP_AT_EOL_OUTPUT: int
    +ENABLE_VIRTUAL_TERMINAL_PROCESSING: int
    +STD_OUTPUT_HANDLE
    +fd
    +bold
    +under
    +set_color
    +set_eseq
    +normal
    +start
    +start: str
    +width
    +new_messages
    +msg
    +error
    +marker_line
    +marker_column
    +column
    +marker: str
    +marker
    +max_len
    +new_marker_line
    +new_marker_line
    +codepos
    +code
    +msg
    +code: str
    +formatted
    +parts
    +out: str
    +match
    +start
    +end
    +msg
    +msg
    --
    -__init__(f_out, f_err, hide_error_codes)
    +initialize_vt100_colors(): bool
    +initialize_win_colors(): bool
    +initialize_unix_colors(): bool
    +style(text, color, bold, underline, dim): str
    +fit_in_terminal(messages, fixed_terminal_width)
    +colorize(error): str
    +highlight_quote_groups(msg): str
    +underline_link(note): str
    +format_success(n_sources, use_color): str
    +format_error(n_errors, n_files, n_sources): str
  }

  class TypeVisitor {
    +visit_unbound_type(t): T
    +visit_any(t): T
    +visit_none_type(t): T
    +visit_uninhabited_type(t): T
    +visit_erased_type(t): T
    +visit_deleted_type(t): T
    +visit_type_var(t): T
    +visit_param_spec(t): T
    +visit_parameters(t): T
    +visit_type_var_tuple(t): T
    +visit_instance(t): T
    +visit_callable_type(t): T
    +visit_overloaded(t): T
    +visit_tuple_type(t): T
    +visit_typeddict_type(t): T
    +visit_literal_type(t): T
    +visit_union_type(t): T
    +visit_partial_type(t): T
    +visit_type_type(t): T
    +visit_type_alias_type(t): T
    +visit_unpack_type(t): T
  }

  class SyntheticTypeVisitor {
    +visit_type_list(t): T
    +visit_callable_argument(t): T
    +visit_ellipsis_type(t): T
    +visit_raw_expression_type(t): T
    +visit_placeholder_type(t): T
  }

  class TypeTranslator {
    +last_known_value
    +raw_last_known_value
    +last_known_value: raw_last_known_value
    +items
    +fallback
    +items
    +new
    --
    +visit_unbound_type(t): Type
    +visit_any(t): Type
    +visit_none_type(t): Type
    +visit_uninhabited_type(t): Type
    +visit_erased_type(t): Type
    +visit_deleted_type(t): Type
    +visit_instance(t): Type
    +visit_type_var(t): Type
    +visit_param_spec(t): Type
    +visit_parameters(t): Type
    +visit_type_var_tuple(t): Type
    +visit_partial_type(t): Type
    +visit_unpack_type(t): Type
    +visit_callable_type(t): Type
    +visit_tuple_type(t): Type
    +visit_typeddict_type(t): Type
    +visit_literal_type(t): Type
    +visit_union_type(t): Type
    +translate_types(types)
    +translate_variables(variables)
    +visit_overloaded(t): Type
    +visit_type_type(t): Type
    +visit_type_alias_type(t): Type
  }

  class TypeQuery {
    -__init__(strategy)
    +visit_unbound_type(t): T
    +visit_type_list(t): T
    +visit_callable_argument(t): T
    +visit_any(t): T
    +visit_uninhabited_type(t): T
    +visit_none_type(t): T
    +visit_erased_type(t): T
    +visit_deleted_type(t): T
    +visit_type_var(t): T
    +visit_param_spec(t): T
    +visit_type_var_tuple(t): T
    +visit_unpack_type(t): T
    +visit_parameters(t): T
    +visit_partial_type(t): T
    +visit_instance(t): T
    +visit_callable_type(t): T
    +visit_tuple_type(t): T
    +visit_typeddict_type(t): T
    +visit_raw_expression_type(t): T
    +visit_literal_type(t): T
    +visit_union_type(t): T
    +visit_overloaded(t): T
    +visit_type_type(t): T
    +visit_ellipsis_type(t): T
    +visit_placeholder_type(t): T
    +visit_type_alias_type(t): T
    +query_types(types): T
  }

  class BoolTypeQuery {
    +args
    +ret
    --
    -__init__(strategy)
    +reset()
    +visit_unbound_type(t): bool
    +visit_type_list(t): bool
    +visit_callable_argument(t): bool
    +visit_any(t): bool
    +visit_uninhabited_type(t): bool
    +visit_none_type(t): bool
    +visit_erased_type(t): bool
    +visit_deleted_type(t): bool
    +visit_type_var(t): bool
    +visit_param_spec(t): bool
    +visit_type_var_tuple(t): bool
    +visit_unpack_type(t): bool
    +visit_parameters(t): bool
    +visit_partial_type(t): bool
    +visit_instance(t): bool
    +visit_callable_type(t): bool
    +visit_tuple_type(t): bool
    +visit_typeddict_type(t): bool
    +visit_raw_expression_type(t): bool
    +visit_literal_type(t): bool
    +visit_union_type(t): bool
    +visit_overloaded(t): bool
    +visit_type_type(t): bool
    +visit_ellipsis_type(t): bool
    +visit_placeholder_type(t): bool
    +visit_type_alias_type(t): bool
    +query_types(types): bool
  }

  class MroError {
  }

  class FileData {
    +st_mtime: float
    +st_size: int
    +hash: str
  }

  class FileSystemWatcher {
    +st
    +hash_digest
    +changed
    +old
    +st
    +new_hash
    --
    -__init__(fs)
    +dump_file_data()
    +set_file_data(path, data)
    +add_watched_paths(paths)
    +remove_watched_paths(paths)
    -_update(path)
    -_find_changed(paths)
    +find_changed()
    +update_changed(remove, update)
  }

  class ConversionSpecifier {
    +m_dict
    --
    -__init__(match, start_pos, non_standard_format_spec)
    +has_key(): bool
    +has_star(): bool
  }

  class StringFormatterChecker {
    +chk: mypy.checker.TypeChecker
    +msg: MessageBuilder
    +exprchk: mypy.checkexpr.ExpressionChecker
    +conv_specs
    +replacements
    +repl
    +actual_type
    +expected_type
    +format_str
    +format_str
    +expected_type
    +actual_type
    +a_type
    +actual_items
    +c_typ
    +c_typ
    +numeric_types
    +result
    +used
    +expr
    +expr
    +expr
    +expr
    +total_explicit
    +pos_args
    +star_args
    +star_arg
    +varargs_type
    +iter_info
    +named_args
    +star_args_2
    +star_arg_2
    +kwargs_type
    +any_type
    +mapping_info
    +some_defined
    +all_defined
    +next_index: int
    +str_index
    +temp_errors
    +dummy
    +temp_ast: Node
    +temp_ast
    +temp_ast
    +node
    +node
    +specifiers
    +has_mapping_keys
    +has_star
    +has_key
    +all_have_keys
    +checkers
    +rhs_type
    +rep_types
    +rep_types
    +unpack_index
    +extras
    +unpacked
    +unpacked
    +unpacked
    +unpack_items
    +rep_types
    +rep_types
    +temp_node
    +rep_types
    +mapping
    +key_str
    +rep_type
    +expected_type
    +rep_type
    +dict_type
    +any_type
    +bytes_type
    +str_type
    +checkers
    +checker
    +checkers
    +c
    +c
    +expected
    +expected
    +type
    +expected_type
    +ret
    +ret
    +type
    +expected_type
    +err_msg: str
    +err_msg: str
    +type
    +NUMERIC_TYPES
    +INT_TYPES
    +numeric_types
    +numeric_types
    --
    -__init__(exprchk, chk, msg)
    +check_str_format_call(call, format_value)
    +check_specs_in_format_call(call, specs, format_value)
    +perform_special_format_checks(spec, call, repl, actual_type, expected_type)
    +find_replacements_in_call(call, keys)
    +get_expr_by_position(pos, call)
    +get_expr_by_name(key, call)
    +auto_generate_keys(all_specs, ctx): bool
    +apply_field_accessors(spec, repl, ctx): Expression
    +validate_and_transform_accessors(temp_ast, original_repl, spec, ctx): bool
    +check_str_interpolation(expr, replacements): Type
    +analyze_conversion_specifiers(specifiers, context)
    +check_simple_str_interpolation(specifiers, replacements, expr)
    +check_mapping_str_interpolation(specifiers, replacements, expr)
    +build_dict_type(expr): Type
    +build_replacement_checkers(specifiers, context, expr)
    +replacement_checkers(specifier, context, expr)
    +checkers_for_star(context): Checkers
    +check_type(): bool
    +check_expr()
    +check_placeholder_type(typ, expected_type, context): bool
    +checkers_for_regular_type(conv_type, context, expr)
    +check_type(): bool
    +check_expr()
    +check_s_special_cases(expr, typ, context): bool
    +checkers_for_c_type(type, context, format_expr)
    +check_type(): bool
    +check_expr()
    +conversion_type(p, context, expr, format_call)
    +named_type(name): Instance
    +accept(expr, context): Type
  }

  class SearchVisitor {
    -__init__(line, column, end_line, end_column)
    +visit(o): bool
  }

  class SearchAllVisitor {
    -__init__(line, column)
    +visit(o): bool
  }

  class InspectionEngine {
    +old
    +expr_type
    +type_str
    +builtins
    +object_node
    +attrs
    +all_attrs
    +attrs
    +mro
    +mro
    +intersection
    +combined_attrs
    +sorted_bases
    +result
    +cls_name
    +attrs
    +expr_type
    +expr_type
    +instances
    +instances
    +attrs_dict
    +node
    +names
    +mod_dict
    +mod_dict
    +template
    +class_dict
    +class_dict
    +base_attrs
    +node
    +nodes
    +base_type
    +base_type
    +instances
    +nodes
    +node
    +instances
    +node
    +nodes
    +modules
    +reload_needed: bool
    +module
    +module
    +nodes
    +nodes
    +result
    +alt_suggestion: str
    +alt_suggestion: str
    +prefixes
    +prefix
    +prefix: str
    +expression
    +span
    +expressions
    +position
    +inspection_strs
    +status: int
    +status: int
    +inspection_strs
    +abs_path
    +state
    +result
    --
    -__init__(fg_manager)
    +reload_module(state)
    +expr_type(expression)
    +object_type(): Instance
    +collect_attrs(instances)
    +item_attrs()
    +cmp_types(y): int
    -_fill_from_dict(attrs_strs, attrs_dict)
    +expr_attrs(expression)
    +format_node(module, node): str
    +collect_nodes(expression)
    +modules_for_nodes(nodes, expression)
    +expression_def(expression)
    +missing_type(expression): str
    +missing_node(expression): str
    +add_prefixes(result, expression): str
    +run_inspection_by_exact_location(tree, line, column, end_line, end_column, method)
    +run_inspection_by_position(tree, line, column, method)
    +find_module(file)
    +run_inspection(location, method)
    +get_type(location)
    +get_attrs(location)
    +get_definition(location)
  }

  class TransformVisitor {
    +ignored_lines
    +new
    +arg
    +init
    +new
    +result
    +new
    +items
    +new
    +new_type
    +new
    +func
    +new
    +new
    +new
    +new
    +new
    +new
    +class_ref
    +new
    +member
    +target
    +target
    +target
    +target
    +new
    +new
    +call
    +new
    +new
    +new
    +generator
    +generator
    +res
    +new
    +new
    +new
    +new
    +new
    +new
    +result
    --
    -__init__()
    +visit_mypy_file(node): MypyFile
    +visit_import(node): Import
    +visit_import_from(node): ImportFrom
    +visit_import_all(node): ImportAll
    +copy_argument(argument): Argument
    +visit_func_def(node): FuncDef
    +visit_lambda_expr(node): LambdaExpr
    +copy_function_attributes(new, original)
    +visit_overloaded_func_def(node): OverloadedFuncDef
    +visit_class_def(node): ClassDef
    +visit_global_decl(node): GlobalDecl
    +visit_nonlocal_decl(node): NonlocalDecl
    +visit_block(node): Block
    +visit_decorator(node): Decorator
    +visit_var(node): Var
    +visit_expression_stmt(node): ExpressionStmt
    +visit_assignment_stmt(node): AssignmentStmt
    +duplicate_assignment(node): AssignmentStmt
    +visit_operator_assignment_stmt(node): OperatorAssignmentStmt
    +visit_while_stmt(node): WhileStmt
    +visit_for_stmt(node): ForStmt
    +visit_return_stmt(node): ReturnStmt
    +visit_assert_stmt(node): AssertStmt
    +visit_del_stmt(node): DelStmt
    +visit_if_stmt(node): IfStmt
    +visit_break_stmt(node): BreakStmt
    +visit_continue_stmt(node): ContinueStmt
    +visit_pass_stmt(node): PassStmt
    +visit_raise_stmt(node): RaiseStmt
    +visit_try_stmt(node): TryStmt
    +visit_with_stmt(node): WithStmt
    +visit_as_pattern(p): AsPattern
    +visit_or_pattern(p): OrPattern
    +visit_value_pattern(p): ValuePattern
    +visit_singleton_pattern(p): SingletonPattern
    +visit_sequence_pattern(p): SequencePattern
    +visit_starred_pattern(p): StarredPattern
    +visit_mapping_pattern(p): MappingPattern
    +visit_class_pattern(p): ClassPattern
    +visit_match_stmt(o): MatchStmt
    +visit_star_expr(node): StarExpr
    +visit_int_expr(node): IntExpr
    +visit_str_expr(node): StrExpr
    +visit_bytes_expr(node): BytesExpr
    +visit_float_expr(node): FloatExpr
    +visit_complex_expr(node): ComplexExpr
    +visit_ellipsis(node): EllipsisExpr
    +visit_name_expr(node): NameExpr
    +duplicate_name(node): NameExpr
    +visit_member_expr(node): MemberExpr
    +copy_ref(new, original)
    +visit_yield_from_expr(node): YieldFromExpr
    +visit_yield_expr(node): YieldExpr
    +visit_await_expr(node): AwaitExpr
    +visit_call_expr(node): CallExpr
    +visit_op_expr(node): OpExpr
    +visit_comparison_expr(node): ComparisonExpr
    +visit_cast_expr(node): CastExpr
    +visit_assert_type_expr(node): AssertTypeExpr
    +visit_reveal_expr(node): RevealExpr
    +visit_super_expr(node): SuperExpr
    +visit_assignment_expr(node): AssignmentExpr
    +visit_unary_expr(node): UnaryExpr
    +visit_list_expr(node): ListExpr
    +visit_dict_expr(node): DictExpr
    +visit_tuple_expr(node): TupleExpr
    +visit_set_expr(node): SetExpr
    +visit_index_expr(node): IndexExpr
    +visit_type_application(node): TypeApplication
    +visit_list_comprehension(node): ListComprehension
    +visit_set_comprehension(node): SetComprehension
    +visit_dictionary_comprehension(node): DictionaryComprehension
    +visit_generator_expr(node): GeneratorExpr
    +duplicate_generator(node): GeneratorExpr
    +visit_slice_expr(node): SliceExpr
    +visit_conditional_expr(node): ConditionalExpr
    +visit_type_var_expr(node): TypeVarExpr
    +visit_paramspec_expr(node): ParamSpecExpr
    +visit_type_var_tuple_expr(node): TypeVarTupleExpr
    +visit_type_alias_expr(node): TypeAliasExpr
    +visit_newtype_expr(node): NewTypeExpr
    +visit_namedtuple_expr(node): NamedTupleExpr
    +visit_enum_call_expr(node): EnumCallExpr
    +visit_typeddict_expr(node): Node
    +visit__promote_expr(node): PromoteExpr
    +visit_temp_node(node): TempNode
    +node(node): Node
    +mypyfile(node): MypyFile
    +expr(expr): Expression
    +stmt(stmt): Statement
    +pattern(pattern): Pattern
    +optional_expr(expr)
    +block(block): Block
    +optional_block(block)
    +statements(statements)
    +expressions(expressions)
    +optional_expressions(expressions)
    +blocks(blocks)
    +names(names)
    +optional_names(names)
    +type(type): Type
    +optional_type(type)
    +types(types)
  }

  class FuncMapInitializer {
    -__init__(transformer)
    +visit_func_def(node)
  }

  class TypeIndirectionVisitor {
    +typs
    +output
    +modules
    +modules
    +out
    +out
    --
    -__init__()
    +find_modules(typs)
    -_visit(typ_or_typs)
    +visit_unbound_type(t)
    +visit_any(t)
    +visit_none_type(t)
    +visit_uninhabited_type(t)
    +visit_erased_type(t)
    +visit_deleted_type(t)
    +visit_type_var(t)
    +visit_param_spec(t)
    +visit_type_var_tuple(t)
    +visit_unpack_type(t)
    +visit_parameters(t)
    +visit_instance(t)
    +visit_callable_type(t)
    +visit_overloaded(t)
    +visit_tuple_type(t)
    +visit_typeddict_type(t)
    +visit_literal_type(t)
    +visit_union_type(t)
    +visit_partial_type(t)
    +visit_type_type(t)
    +visit_type_alias_type(t)
  }

  class TypeMeetVisitor {
    +meets
    +meets
    +args
    +s
    +prefix
    +suffix
    +tvt
    +fallback
    +s_args
    +t_args
    +t_args
    +s_args
    +meet
    +meet
    +alt_promote
    +alt_promote
    +call
    +result
    +res
    +call
    +s
    +call
    +s_unpack_index
    +t_unpack_index
    +items
    +unpack_index: s_unpack_index
    +s_unpack
    +s_unpacked
    +t_unpack
    +t_unpacked
    +meet
    +m_prefix
    +m_suffix
    +variadic: s
    +unpack_index: s_unpack_index
    +fixed: t
    +variadic: t
    +unpack_index: t_unpack_index
    +fixed: s
    +unpack
    +unpacked
    +prefix_len: unpack_index
    +suffix_len
    +items
    +items
    +item_list
    +items
    +fallback
    +required_keys
    +typ
    +typ
    --
    -__init__(s)
    +visit_unbound_type(t): ProperType
    +visit_any(t): ProperType
    +visit_union_type(t): ProperType
    +visit_none_type(t): ProperType
    +visit_uninhabited_type(t): ProperType
    +visit_deleted_type(t): ProperType
    +visit_erased_type(t): ProperType
    +visit_type_var(t): ProperType
    +visit_param_spec(t): ProperType
    +visit_type_var_tuple(t): ProperType
    +visit_unpack_type(t): ProperType
    +visit_parameters(t): ProperType
    +visit_instance(t): ProperType
    +visit_callable_type(t): ProperType
    +visit_overloaded(t): ProperType
    +meet_tuples(s, t)
    +visit_tuple_type(t): ProperType
    +visit_typeddict_type(t): ProperType
    +visit_literal_type(t): ProperType
    +visit_partial_type(t): ProperType
    +visit_type_type(t): ProperType
    +visit_type_alias_type(t): ProperType
    +meet(s, t): ProperType
    +default(typ): ProperType
  }

  class NewTypeAnalyzer {
    +name: var_name
    +fullname
    +placeholder
    +old_type
    +newtype_class_info
    +newtype_class_info
    +message: str
    +old_type
    +object_type
    +newtype_class_info
    +name
    +names
    +existing
    +call
    +has_failed: bool
    +has_failed: bool
    +msg: str
    +has_failed: bool
    +msg: str
    +unanalyzed_type
    +old_type
    +should_defer: bool
    +old_type: NoneType
    +should_defer: bool
    +info
    +args
    +signature
    +init_func
    +updated: bool
    +previous_sym
    +updated
    --
    -__init__(options, api, msg)
    +process_newtype_declaration(s): bool
    +analyze_newtype_declaration(s)
    +check_newtype_args(name, call, context)
    +build_newtype_typeinfo(name, old_type, base_type, line, existing_info): TypeInfo
    +make_argument(name, type): Argument
    +fail(msg, ctx)
  }

  class TypeOfAny {
    +unannotated: Final
    +explicit: Final
    +from_unimported_type: Final
    +from_omitted_generics: Final
    +from_error: Final
    +special_form: Final
    +from_another_any: Final
    +implementation_artifact: Final
    +suggestion_engine: Final
  }

  class Type {
    -__init__(line, column)
    +can_be_true(): bool
    +can_be_true(v)
    +can_be_false(): bool
    +can_be_false(v)
    +can_be_true_default(): bool
    +can_be_false_default(): bool
    +accept(visitor): T
    -__repr__(): str
    +str_with_options(options): str
    +serialize()
    +{class} deserialize(data): Type
    +is_singleton_type(): bool
  }

  class TypeAliasType {
    +mapping
    +prefix
    +suffix
    +tvar
    +mapping
    +new_tp
    +unroller
    +alias
    +alias: self
    +unrolled
    +is_recursive
    +is_recursive
    +data: JsonDict
    +args
    +args_list
    +args
    +alias
    --
    -__init__(alias, args, line, column)
    -_expand_once(): Type
    -_partial_expansion(nothing_args)
    +expand_all_if_possible(nothing_args)
    +is_recursive(): bool
    +can_be_true_default(): bool
    +can_be_false_default(): bool
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): TypeAliasType
    +copy_modified(): TypeAliasType
  }

  class TypeGuardedType {
    -__init__(type_guard)
    -__repr__(): str
  }

  class RequiredType {
    -__init__(item)
    -__repr__(): str
    +accept(visitor): T
  }

  class ProperType {
  }

  class TypeVarId {
    +raw_id: int
    +meta_level: int
    +next_raw_id
    +namespace: str
    +raw_id
    --
    -__init__(raw_id, meta_level)
    +{static} new(): TypeVarId
    -__repr__(): str
    -__eq__(other): bool
    -__ne__(other): bool
    -__hash__(): int
    +is_meta_var(): bool
  }

  class TypeVarLikeType {
    +name: str
    +fullname: str
    +id: TypeVarId
    +upper_bound: Type
    +default: Type
    +id
    +new_id
    +t
    --
    -__init__(name, fullname, id, upper_bound, default, line, column)
    +serialize(): JsonDict
    +{class} deserialize(data): TypeVarLikeType
    +copy_modified(): Self
    +{class} new_unification_variable(old): Self
    +has_default(): bool
  }

  class TypeVarType {
    +values
    +variance: int
    --
    -__init__(name, fullname, id, values, upper_bound, default, variance, line, column)
    +copy_modified(): TypeVarType
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): TypeVarType
  }

  class ParamSpecFlavor {
    +BARE: Final
    +ARGS: Final
    +KWARGS: Final
  }

  class ParamSpecType {
    +flavor: int
    +prefix: Parameters
    +n
    --
    -__init__(name, fullname, id, flavor, upper_bound, default)
    +with_flavor(flavor): ParamSpecType
    +copy_modified(): ParamSpecType
    +accept(visitor): T
    +name_with_suffix(): str
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): ParamSpecType
  }

  class TypeVarTupleType {
    -__init__(name, fullname, id, upper_bound, tuple_fallback, default)
    +serialize(): JsonDict
    +{class} deserialize(data): TypeVarTupleType
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +copy_modified(): TypeVarTupleType
  }

  class UnboundType {
    +args
    +args
    --
    -__init__(name, args, line, column, optional, empty_tuple_index, original_str_expr, original_str_fallback)
    +copy_modified(args): UnboundType
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): UnboundType
  }

  class CallableArgument {
    +typ: Type
    +name
    +constructor
    +ret: T
    --
    -__init__(typ, name, constructor, line, column)
    +accept(visitor): T
    +serialize(): JsonDict
  }

  class TypeList {
    +items
    +ret: T
    --
    -__init__(items, line, column)
    +accept(visitor): T
    +serialize(): JsonDict
    -__hash__(): int
    -__eq__(other): bool
  }

  class UnpackType {
    +typ
    --
    -__init__(typ, line, column, from_star_syntax)
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): UnpackType
    -__hash__(): int
    -__eq__(other): bool
  }

  class AnyType {
    +type_of_any
    +original_any
    +source
    --
    -__init__(type_of_any, source_any, missing_import_name, line, column)
    +is_from_error(): bool
    +accept(visitor): T
    +copy_modified(type_of_any, original_any): AnyType
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): AnyType
  }

  class UninhabitedType {
    +is_noreturn: bool
    +ambiguous: bool
    --
    -__init__(is_noreturn, line, column)
    +can_be_true_default(): bool
    +can_be_false_default(): bool
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): UninhabitedType
  }

  class NoneType {
    -__init__(line, column)
    +can_be_true_default(): bool
    -__hash__(): int
    -__eq__(other): bool
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): NoneType
    +is_singleton_type(): bool
  }

  class ErasedType {
    +accept(visitor): T
  }

  class DeletedType {
    +source
    --
    -__init__(source, line, column)
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): DeletedType
  }

  class ExtraAttrs {
    +immutable
    --
    -__init__(attrs, immutable, mod_name)
    -__hash__(): int
    -__eq__(other): bool
    +copy(): ExtraAttrs
    -__repr__(): str
  }

  class Instance {
    +type_ref
    +data: JsonDict
    +inst
    +args
    +args_list
    +args
    +inst
    +new
    +existing_attrs
    +existing_attrs
    +new
    --
    -__init__(typ, args, line, column)
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize()
    +{class} deserialize(data): Instance
    +copy_modified(): Instance
    +copy_with_extra_attr(name, typ): Instance
    +is_singleton_type(): bool
    +get_enum_values()
  }

  class FunctionLike {
    +fallback: Instance
    --
    -__init__(line, column)
    +is_type_obj(): bool
    +type_object(): mypy.nodes.TypeInfo
    +items()
    +with_name(name): FunctionLike
    +get_name()
  }

  class FormalArgument {
    +name
    +pos
    +typ: Type
    +required: bool
  }

  class Parameters {
    +args
    +done_with_positional: bool
    +kind
    +done_with_positional: bool
    +required
    +pos
    +arg
    +seen_star: bool
    +seen_star: bool
    +position
    +kw_arg
    +var_arg
    --
    -__init__(arg_types, arg_kinds, arg_names)
    +copy_modified(arg_types, arg_kinds, arg_names): Parameters
    +var_arg()
    +kw_arg()
    +formal_arguments(include_star_args)
    +argument_by_name(name)
    +argument_by_position(position)
    +try_synthesizing_arg_from_kwarg(name)
    +try_synthesizing_arg_from_vararg(position)
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): Parameters
    -__hash__(): int
    -__eq__(other): bool
  }

  class CallableType {
    +variables
    +bound_args
    +first_arg
    +first_arg
    +first_arg
    +modified
    +ret
    +ret
    +ret
    +ret
    +args
    +done_with_positional: bool
    +kind
    +done_with_positional: bool
    +required
    +pos
    +arg
    +seen_star: bool
    +seen_star: bool
    +position
    +kw_arg
    +var_arg
    +a
    +arg_type
    +prefix
    +last_type
    +extra_kinds
    +new_arg_kinds
    +new_arg_names
    +new_arg_types
    +var_arg
    +unpacked
    +unpack_index
    +var_arg_index
    +types_prefix
    +kinds_prefix
    +names_prefix
    +types_suffix
    +kinds_suffix
    +names_suffix
    +no_name
    +types_middle
    +kinds_middle
    +names_middle
    +nested_unpack
    +nested_unpacked
    +new_unpack
    +new_unpack: nested_unpack
    +new_unpack
    +types_middle
    +kinds_middle
    +names_middle
    +is_type_obj: int
    +is_type_obj
    --
    -__init__(arg_types, arg_kinds, arg_names, ret_type, fallback, name, definition, variables, line, column, is_ellipsis_args, implicit, special_sig, from_type_type, bound_args, def_extras, type_guard, from_concatenate, imprecise_arg_kinds, unpack_kwargs)
    +copy_modified(arg_types, arg_kinds, arg_names, ret_type, fallback, name, definition, variables, line, column, is_ellipsis_args, implicit, special_sig, from_type_type, bound_args, def_extras, type_guard, from_concatenate, imprecise_arg_kinds, unpack_kwargs): CT
    +var_arg()
    +kw_arg()
    +is_var_arg(): bool
    +is_kw_arg(): bool
    +is_type_obj(): bool
    +type_object(): mypy.nodes.TypeInfo
    +accept(visitor): T
    +with_name(name): CallableType
    +get_name()
    +max_possible_positional_args(): int
    +formal_arguments(include_star_args)
    +argument_by_name(name)
    +argument_by_position(position)
    +try_synthesizing_arg_from_kwarg(name)
    +try_synthesizing_arg_from_vararg(position)
    +items()
    +is_generic(): bool
    +type_var_ids()
    +param_spec()
    +with_unpacked_kwargs(): NormalizedCallableType
    +with_normalized_var_args(): Self
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): CallableType
  }

  class Overloaded {
    -_items
    +ni
    --
    -__init__(items)
    +items()
    +name()
    +is_type_obj(): bool
    +type_object(): mypy.nodes.TypeInfo
    +with_name(name): Overloaded
    +get_name()
    +with_unpacked_kwargs(): Overloaded
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): Overloaded
  }

  class TupleType {
    +items
    +partial_fallback: Instance
    +implicit: bool
    +item
    +fallback
    +items
    +fallback
    +total
    +unpack_index
    +slice_items
    +slice_items
    +slice_items
    +slice_items
    +slice_items
    +slice_items
    +slice_items
    --
    -__init__(items, fallback, line, column, implicit)
    +can_be_true_default(): bool
    +can_be_false_default(): bool
    +can_be_any_bool(): bool
    +length(): int
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): TupleType
    +copy_modified(): TupleType
    +slice(begin, end, stride)
  }

  class TypedDictType {
    +items
    +required_keys
    +fallback: Instance
    +fallback
    +items
    +items
    +required_keys
    +items
    +anonymous
    +left: self
    +right_item_type
    +left: self
    +right_item_type
    --
    -__init__(items, required_keys, fallback, line, column)
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): TypedDictType
    +is_final(): bool
    +is_anonymous(): bool
    +as_anonymous(): TypedDictType
    +copy_modified(): TypedDictType
    +create_anonymous_fallback(): Instance
    +names_are_wider_than(other): bool
    +zip(right)
    +zipall(right)
  }

  class RawExpressionType {
    +ret: T
    --
    -__init__(literal_value, base_type_name, line, column, note)
    +simple_name(): str
    +accept(visitor): T
    +serialize(): JsonDict
    -__hash__(): int
    -__eq__(other): bool
  }

  class LiteralType {
    +raw
    +fallback_name
    --
    -__init__(value, fallback, line, column)
    +can_be_false_default(): bool
    +can_be_true_default(): bool
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +is_enum_literal(): bool
    +value_repr(): str
    +serialize()
    +{class} deserialize(data): LiteralType
    +is_singleton_type(): bool
  }

  class UnionType {
    -__init__(items, line, column, is_evaluated, uses_pep604_syntax)
    +can_be_true_default(): bool
    +can_be_false_default(): bool
    -__hash__(): int
    -__eq__(other): bool
    +{static} make_union(line, column): ProperType
    +{static} make_union(line, column): Type
    +{static} make_union(line, column): Type
    +length(): int
    +accept(visitor): T
    +relevant_items()
    +serialize(): JsonDict
    +{class} deserialize(data): UnionType
  }

  class PartialType {
    +type
    +var: mypy.nodes.Var
    +value_type
    --
    -__init__(type, var, value_type)
    +accept(visitor): T
  }

  class EllipsisType {
    +ret: T
    --
    +accept(visitor): T
    +serialize(): JsonDict
  }

  class TypeType {
    +item: ProperType
    +item
    --
    -__init__(item)
    +{static} make_normalized(): ProperType
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): JsonDict
    +{class} deserialize(data): Type
  }

  class PlaceholderType {
    +ret: T
    --
    -__init__(fullname, args, line)
    +accept(visitor): T
    -__hash__(): int
    -__eq__(other): bool
    +serialize(): str
  }

  class TypeStrVisitor {
    +s
    +typ
    +s
    +s
    +s
    +s
    +s: str
    +s: str
    +bare_asterisk: bool
    +bare_asterisk: bool
    +name
    +r
    +s
    +s
    +param_spec
    +num_skip: int
    +num_skip: int
    +s: str
    +asterisk: bool
    +asterisk: bool
    +asterisk: bool
    +name
    +type_str
    +type_str
    +n
    +s
    +vs
    +vals
    +s
    +a
    +s
    +tuple_name
    +fallback_name
    +s
    +prefix: str
    +prefix
    +s
    +type_str
    +res
    --
    -__init__(id_mapper)
    +visit_unbound_type(t): str
    +visit_type_list(t): str
    +visit_callable_argument(t): str
    +visit_any(t): str
    +visit_none_type(t): str
    +visit_uninhabited_type(t): str
    +visit_erased_type(t): str
    +visit_deleted_type(t): str
    +visit_instance(t): str
    +visit_type_var(t): str
    +visit_param_spec(t): str
    +visit_parameters(t): str
    +visit_type_var_tuple(t): str
    +visit_callable_type(t): str
    +visit_overloaded(t): str
    +visit_tuple_type(t): str
    +visit_typeddict_type(t): str
    +item_str(typ): str
    +visit_raw_expression_type(t): str
    +visit_literal_type(t): str
    +visit_union_type(t): str
    +visit_partial_type(t): str
    +visit_ellipsis_type(t): str
    +visit_type_type(t): str
    +visit_placeholder_type(t): str
    +visit_type_alias_type(t): str
    +visit_unpack_type(t): str
    +list_str(a): str
  }

  class TrivialSyntheticTypeTranslator {
    +visit_placeholder_type(t): Type
    +visit_callable_argument(t): Type
    +visit_ellipsis_type(t): Type
    +visit_raw_expression_type(t): Type
    +visit_type_list(t): Type
  }

  class UnrollAliasVisitor {
    +subvisitor
    +result
    --
    -__init__(initial_aliases)
    +visit_type_alias_type(t): Type
  }

  class LocationSetter {
    -__init__(line, column)
    +visit_instance(typ)
  }

  class HasTypeVars {
    -__init__()
    +visit_type_var(t): bool
    +visit_type_var_tuple(t): bool
    +visit_param_spec(t): bool
  }

  class HasRecursiveType {
    -__init__()
    +visit_type_alias_type(t): bool
  }

  class InstantiateAliasVisitor {
    +visit_union_type(t): Type
  }

  class _Hasher {
    +rest
    +rest
    +rest
    --
    +visit_int_expr(e): Key
    +visit_str_expr(e): Key
    +visit_bytes_expr(e): Key
    +visit_float_expr(e): Key
    +visit_complex_expr(e): Key
    +visit_star_expr(e): Key
    +visit_name_expr(e): Key
    +visit_member_expr(e): Key
    +visit_op_expr(e): Key
    +visit_comparison_expr(e): Key
    +visit_unary_expr(e): Key
    +seq_expr(e, name)
    +visit_list_expr(e)
    +visit_dict_expr(e)
    +visit_tuple_expr(e)
    +visit_set_expr(e)
    +visit_index_expr(e)
    +visit_assignment_expr(e)
    +visit_call_expr(e)
    +visit_slice_expr(e)
    +visit_cast_expr(e)
    +visit_assert_type_expr(e)
    +visit_conditional_expr(e)
    +visit_ellipsis(e)
    +visit_yield_from_expr(e)
    +visit_yield_expr(e)
    +visit_reveal_expr(e)
    +visit_super_expr(e)
    +visit_type_application(e)
    +visit_lambda_expr(e)
    +visit_list_comprehension(e)
    +visit_set_comprehension(e)
    +visit_dictionary_comprehension(e)
    +visit_generator_expr(e)
    +visit_type_var_expr(e)
    +visit_paramspec_expr(e)
    +visit_type_var_tuple_expr(e)
    +visit_type_alias_expr(e)
    +visit_namedtuple_expr(e)
    +visit_enum_call_expr(e)
    +visit_typeddict_expr(e)
    +visit_newtype_expr(e)
    +visit__promote_expr(e)
    +visit_await_expr(e)
    +visit_temp_node(e)
  }

  class InstanceJoiner {
    +args
    +prefix
    +suffix
    +tvt
    +fallback
    +s_args
    +t_args
    +t_args
    +s_args
    +ta_proper
    +sa_proper
    +new_type
    +new_type
    +new_type
    +new_type
    +new_type
    +new_type
    +new_type
    +new_type
    +result: ProperType
    +result
    +result
    +best
    +mapped
    +res
    +best: res
    +res
    +best: res
    --
    -__init__()
    +join_instances(t, s): ProperType
    +join_instances_via_supertype(t, s): ProperType
  }

  class TypeJoinVisitor {
    +nominal
    +structural
    +structural: t
    +structural
    +call
    +result
    +call
    +result
    +s
    +call
    +s_unpack_index
    +t_unpack_index
    +items
    +s_unpack
    +s_unpacked
    +t_unpack
    +t_unpacked
    +prefix_len: t_unpack_index
    +suffix_len
    +items
    +joined
    +tuple_instance: t_unpacked
    +tuple_instance
    +mid_joined
    +t_other
    +s_other
    +other_joined
    +mid_joined
    +variadic: s
    +unpack_index: s_unpack_index
    +fixed: t
    +variadic: t
    +unpack_index: t_unpack_index
    +fixed: s
    +unpack
    +unpacked
    +prefix_len: unpack_index
    +suffix_len
    +items
    +mid_joined
    +mid_joined
    +fallback
    +items
    +items
    +fallback
    +required_keys
    +typ
    --
    -__init__(s, instance_joiner)
    +visit_unbound_type(t): ProperType
    +visit_union_type(t): ProperType
    +visit_any(t): ProperType
    +visit_none_type(t): ProperType
    +visit_uninhabited_type(t): ProperType
    +visit_deleted_type(t): ProperType
    +visit_erased_type(t): ProperType
    +visit_type_var(t): ProperType
    +visit_param_spec(t): ProperType
    +visit_type_var_tuple(t): ProperType
    +visit_unpack_type(t): UnpackType
    +visit_parameters(t): ProperType
    +visit_instance(t): ProperType
    +visit_callable_type(t): ProperType
    +visit_overloaded(t): ProperType
    +join_tuples(s, t)
    +visit_tuple_type(t): ProperType
    +visit_typeddict_type(t): ProperType
    +visit_literal_type(t): ProperType
    +visit_partial_type(t): ProperType
    +visit_type_type(t): ProperType
    +visit_type_alias_type(t): ProperType
    +default(typ): ProperType
  }

  class TypeVarLikeScope {
    +it
    +it
    +i
    +namespace
    +i
    +namespace: str
    +tvar_def: TypeVarLikeType
    +tvar_def
    +tvar_def
    +fullname
    +me
    --
    -__init__(parent, is_class_scope, prohibited, namespace)
    +get_function_scope()
    +allow_binding(fullname): bool
    +method_frame(): TypeVarLikeScope
    +class_frame(namespace): TypeVarLikeScope
    +new_unique_func_id(): int
    +bind_new(name, tvar_expr): TypeVarLikeType
    +bind_existing(tvar_def)
    +get_binding(item)
    -__str__(): str
  }

  class SemanticAnalyzerPreAnalysis {
    +old_global_scope
    +file_node
    +old_global_scope
    --
    +visit_file(file, fnam, mod_id, options)
    +visit_func_def(node)
    +visit_class_def(node)
    +visit_import_from(node)
    +visit_import_all(node)
    +visit_import(node)
    +visit_if_stmt(s)
    +visit_block(b)
    +visit_match_stmt(s)
    +visit_assignment_stmt(s)
    +visit_expression_stmt(s)
    +visit_return_stmt(s)
    +visit_for_stmt(s)
  }

  class TypeAnalyser {
    +in_dynamic_func: bool
    +global_scope: bool
    +allowed_alias_tvars
    +typ
    +sym
    +node
    +fullname
    +hook
    +tvar_def
    +special
    +an_args
    +an_args
    +disallow_any
    +res
    +res
    +count
    +first_wrong
    +first
    +ps
    +sym
    +args
    +pre
    +names
    +pre
    +sym
    +any_type
    +instance
    +items
    +item
    +any_type
    +type_str
    +item
    +item
    +result
    +disallow_any
    +fallback
    +instance
    +tup
    +td
    +name
    +name
    +typ
    +unbound_tvar
    +value
    +base_enum_short_name
    +msg
    +t
    +notes
    +message: str
    +message: str
    +message: str
    +message: str
    +short
    +message: str
    +params
    +result
    +unpacked_kwargs: bool
    +variables
    +special
    +arg_kinds
    +arg_types
    +unpacked
    +unpacked_kwargs: bool
    +arg_types
    +star_index: NoneType
    +star_index
    +star2_index: NoneType
    +star2_index
    +arg_types
    +at
    +p_at
    +at: p_at
    +unpacked_kwargs: bool
    +arg_types
    +arg_kinds
    +arg_names
    +ret
    +sym
    +components
    +tvar_name
    +sym
    +tvar_def
    +make_paramspec: paramspec_args
    +make_paramspec: paramspec_kwargs
    +any_type
    +fallback
    +items
    +msg
    +msg
    +msg: str
    +any_type
    +n
    +sym
    +tvar_def
    +sym
    +tvar_def
    +sym
    +prefix
    +fallback
    +any_type
    +ret
    +callable_args
    +ret_type
    +analyzed_args
    +ret
    +ret
    +variables
    +maybe_ret
    +maybe_ret
    +ret: maybe_ret
    +sym
    +args
    +kinds
    +names
    +seen_unpack: bool
    +unpack_types
    +invalid_unpacks
    +second_unpack_last: bool
    +found
    +kind
    +second_unpack_last: bool
    +seen_unpack: bool
    +first
    +first
    +output
    +analyzed_types
    +arg
    +arg
    +name
    +msg
    +msg: str
    +fallback
    +out
    +union_result
    +old_scope
    +names
    +tvars
    +has_self_type: bool
    +defs
    +has_self_type: bool
    +var_node
    +var_expr
    +binding
    +typevars
    +has_self_type
    +typevars
    +defs
    +binding
    +tvar_node
    +old_allow_param_spec_literals
    +res
    +old_allow_required
    +old_allow_ellipsis
    +old_allow_unpack
    +analyzed
    +analyzed
    +analyzed
    +node
    +any_type
    +args
    +new_items
    +num_unpacks: int
    +final_unpack: NoneType
    +final_unpack: item
    +any_type
    --
    -__init__(api, tvar_scope, plugin, options, is_typeshed_stub)
    +lookup_qualified(name, ctx, suppress_errors)
    +lookup_fully_qualified(name): SymbolTableNode
    +visit_unbound_type(t, defining_literal): Type
    +visit_unbound_type_nonoptional(t, defining_literal): Type
    +pack_paramspec_args(an_args)
    +cannot_resolve_type(t)
    +apply_concatenate_operator(t): Type
    +try_analyze_special_unbound_type(t, fullname)
    +get_omitted_any(typ, fullname): AnyType
    +analyze_type_with_type_info(info, args, ctx, empty_tuple_index): Type
    +analyze_unbound_type_without_type_info(t, sym, defining_literal): Type
    +visit_any(t): Type
    +visit_none_type(t): Type
    +visit_uninhabited_type(t): Type
    +visit_erased_type(t): Type
    +visit_deleted_type(t): Type
    +visit_type_list(t): Type
    +visit_callable_argument(t): Type
    +visit_instance(t): Type
    +visit_type_alias_type(t): Type
    +visit_type_var(t): Type
    +visit_param_spec(t): Type
    +visit_type_var_tuple(t): Type
    +visit_unpack_type(t): Type
    +visit_parameters(t): Type
    +visit_callable_type(t, nested): Type
    +anal_type_guard(t)
    +anal_type_guard_arg(t, fullname)
    +anal_star_arg_type(t, kind, nested): Type
    +visit_overloaded(t): Type
    +visit_tuple_type(t): Type
    +visit_typeddict_type(t): Type
    +visit_raw_expression_type(t): Type
    +visit_literal_type(t): Type
    +visit_union_type(t): Type
    +visit_partial_type(t): Type
    +visit_ellipsis_type(t): Type
    +visit_type_type(t): Type
    +visit_placeholder_type(t): Type
    +analyze_callable_args_for_paramspec(callable_args, ret_type, fallback)
    +analyze_callable_args_for_concatenate(callable_args, ret_type, fallback)
    +analyze_callable_type(t): Type
    +refers_to_full_names(arg, names): bool
    +analyze_callable_args(arglist)
    +analyze_literal_type(t): Type
    +analyze_literal_param(idx, arg, ctx)
    +analyze_type(t): Type
    +fail(msg, ctx)
    +note(msg, ctx)
    +tvar_scope_frame()
    +find_type_var_likes(t, include_callables): TypeVarLikeList
    +infer_type_variables(type)
    +bind_function_type_variables(fun_type, defn)
    +is_defined_type_var(tvar, context): bool
    +anal_array(a, nested)
    +anal_type(t, nested): Type
    +anal_var_def(var_def): TypeVarLikeType
    +anal_var_defs(var_defs)
    +named_type(fully_qualified_name, args, line, column): Instance
    +check_unpacks_in_list(items)
    +tuple_type(items, line, column): TupleType
  }

  class MsgCallback {
    -__call__(__msg, __ctx)
  }

  class TypeVarLikeQuery {
    +name
    +node: NoneType
    +base
    +n
    +node: n
    +name: base
    +node
    --
    -__init__(api, scope)
    -_seems_like_callable(type): bool
    +visit_unbound_type(t): TypeVarLikeList
    +visit_callable_type(t): TypeVarLikeList
  }

  class DivergingAliasDetector {
    +new_nodes
    +visitor
    --
    -__init__(seen_nodes, lookup, scope)
    +visit_type_alias_type(t): Type
  }

  class HasExplicitAny {
    -__init__()
    +visit_any(t): bool
    +visit_typeddict_type(t): bool
  }

  class HasAnyFromUnimportedType {
    -__init__()
    +visit_any(t): bool
    +visit_typeddict_type(t): bool
  }

  class CollectAllInnerTypesQuery {
    -__init__()
    +query_types(types)
    +{class} combine_lists_strategy(it)
  }

  class HasSelfType {
    +sym
    --
    -__init__(lookup)
    +visit_unbound_type(t): bool
  }

  class ExternalSignatureGenerator {
    +all_sigs
    +all_class_sigs
    +sigs
    +class_sigs
    +inferred
    --
    -__init__(func_sigs, class_sigs)
    +{class} from_doc_dir(doc_dir): ExternalSignatureGenerator
    +get_function_sig(default_sig, ctx)
    +get_property_type(default_type, ctx)
  }

  class DocstringSignatureGenerator {
    +inferred
    +inferred
    +inferred
    +inferred
    +inferred
    +inferred
    --
    +get_function_sig(default_sig, ctx)
    +get_property_type(default_type, ctx)
  }

  class CFunctionStub {
    -__init__(name, doc, is_abstract)
    -{class} _from_sig(sig, is_abstract): CFunctionStub
    -{class} _from_sigs(sigs, is_abstract): CFunctionStub
    -__get__()
  }

  class InspectionStubGenerator {
    +argspec: NoneType
    +argspec
    +args
    +defaults
    +varargs
    +kwargs
    +annotations
    +argtype
    +arglist
    +default_value
    +argtype
    +argtype
    +incomplete
    +argtype
    +new_args
    +arglist: new_args
    +ret_type
    +sig_generators
    +local_modules
    +parsed_type
    +module
    +all_items
    +all_items
    +items
    +module_name
    +rel_module
    +obj_module_name
    +functions
    +types
    +variables
    +output
    +functions: output
    +types: output
    +variables: output
    +obj_dict
    +results
    +value
    +docstring: Any
    +docstring: NoneType
    +ctx
    +default_sig
    +inferred
    +decorators
    +item_type
    +item_type
    +obj
    +docstring
    +fget
    +alt_docstr
    +docstring: alt_docstr
    +ctx
    +static
    +readonly
    +ret_type
    +default_sig
    +ret_type
    +inferred_type
    +inferred_type
    +classvar
    +trailing_comment
    +inferred_type
    +sig
    +inferred_type
    +typename
    +module_name
    +typename
    +all_bases
    +all_bases
    +bases
    +raw_lookup
    +items
    +items
    +names
    +methods
    +types
    +static_properties
    +rw_properties
    +ro_properties
    +attrs
    +class_info
    +raw_value
    +attr: str
    +prop_type_name
    +classvar
    +bases
    +bases_str
    +bases_str: str
    +type_str
    --
    -__init__(module_name, known_modules, doc_dir, _all_, include_private, export_less, include_docstrings, module)
    +get_default_function_sig(func, ctx): FunctionSig
    +get_annotation()
    +get_sig_generators()
    +strip_or_import(type_name): str
    +get_obj_module(obj)
    +is_defined_in_module(obj): bool
    +generate_module()
    +is_skipped_attribute(attr): bool
    +get_members(obj)
    +get_type_annotation(obj): str
    +is_function(obj): bool
    +is_method(class_info, name, obj): bool
    +is_classmethod(class_info, name, obj): bool
    +is_staticmethod(class_info, name, obj): bool
    +{static} is_abstract_method(): bool
    +{static} is_property(name, obj): bool
    +{static} is_property_readonly(): bool
    +is_static_property(obj): bool
    +process_inferred_sigs(inferred)
    +generate_function_stub(name, obj)
    -_fix_iter(ctx, inferred, output)
    +generate_property_stub(name, raw_obj, obj, static_properties, rw_properties, ro_properties, class_info)
    +get_type_fullname(typ): str
    +get_base_types(obj)
    +generate_class_stub(class_name, cls, output)
    +generate_variable_stub(name, obj, output)
  }

  class TypedDictAnalyzer {
    +possible: bool
    +base_expr
    +possible: bool
    +err
    +existing_info: NoneType
    +existing_info
    +info
    +typeddict_bases
    +typeddict_bases_set
    +keys
    +types
    +required_keys
    +info
    +info
    +base_args
    +info
    +args
    +base_args: args
    +base_typed_dict
    +base_items
    +valid_items
    +tvars
    +any_kind
    +any_kind
    +base_args
    +valid_items
    +base_args
    +args
    +args
    +type
    +analyzed
    +mapped_items
    +type_in_base
    +fields
    +types
    +statements
    +name
    +analyzed
    +total
    +total
    +required_keys
    +types
    +call: node
    +callee
    +fullname
    +res
    +name: var_name
    +name
    +var_name
    +info
    +required_keys
    +types
    +existing_info: NoneType
    +existing_info
    +info
    +args
    +total
    +total
    +dictexpr
    +tvar_defs
    +res
    +seen_keys
    +items
    +types
    +key
    +name_context
    +type
    +analyzed
    +fallback
    +info
    +typeddict_type
    --
    -__init__(options, api, msg)
    +analyze_typeddict_classdef(defn)
    +add_keys_and_types_from_base(base, keys, types, required_keys, ctx)
    +analyze_base_args(base, ctx)
    +map_items_to_base(valid_items, tvars, base_args)
    +analyze_typeddict_classdef_fields(defn, oldfields)
    +check_typeddict(node, var_name, is_func_scope)
    +parse_typeddict_args(call)
    +parse_typeddict_fields_with_types(dict_items, context)
    +fail_typeddict_arg(message, context)
    +build_typeddict_typeinfo(name, items, types, required_keys, line, existing_info): TypeInfo
    +is_typeddict(expr): bool
    +fail(msg, ctx)
    +note(msg, ctx)
  }

  class EnumCallAnalyzer {
    +lvalue
    +name
    +enum_call
    +call: node
    +callee
    +fullname
    +info
    +name
    +info
    +base
    +info
    +var
    +args
    +valid_name
    +value: arg
    +names: arg
    +value
    +names
    +items
    +values
    +fields
    +seq_items
    +items
    +proper_type
    +fields
    +fields
    +values
    --
    -__init__(options, api)
    +process_enum_call(s, is_func_scope): bool
    +check_enum_call(node, var_name, is_func_scope)
    +build_enum_call_typeinfo(name, items, fullname, line): TypeInfo
    +parse_enum_call_args(call, class_name)
    +fail_enum_call_arg(message, context)
    +fail(msg, ctx)
  }

  class BranchState {
    +may_be_defined
    +must_be_defined
    --
    -__init__(must_be_defined, may_be_defined, skipped)
    +copy(): BranchState
  }

  class BranchStatement {
    +initial_state
    +result
    +current_branch
    +branch
    +all_vars
    +non_skipped_branches
    +must_be_defined
    +must_be_defined
    +may_be_defined
    --
    -__init__(initial_state)
    +copy(): BranchStatement
    +next_branch()
    +record_definition(name)
    +delete_var(name)
    +record_nested_branch(state)
    +skip_branch()
    +is_possibly_undefined(name): bool
    +is_undefined(name): bool
    +is_defined_in_a_branch(name): bool
    +done(): BranchState
  }

  class ScopeType {
    +Global: int
    +Class: int
    +Func: int
    +Generator: int
  }

  class Scope {
    +fullname
    +cls
    --
    -__init__()
    +current_module_id(): str
    +current_target(): str
    +current_full_target(): str
    +current_type_name()
    +current_function_name()
    +module_scope(prefix)
    +function_scope(fdef)
    +outer_functions()
    +enter_class(info)
    +leave_class()
    +class_scope(info)
    +save(): SavedScope
    +saved_scope(saved)
  }

  class DefinedVariableTracker {
    +result
    +initial_state: NoneType
    +initial_state
    +result
    +stmt
    --
    -__init__()
    +copy(): DefinedVariableTracker
    -_scope(): Scope
    +enter_scope(scope_type)
    +exit_scope()
    +in_scope(scope_type): bool
    +start_branch_statement()
    +next_branch()
    +end_branch_statement()
    +skip_branch()
    +record_definition(name)
    +delete_var(name)
    +record_undefined_ref(o)
    +pop_undefined_ref(name)
    +is_possibly_undefined(name): bool
    +is_defined_in_different_branch(name): bool
    +is_undefined(name): bool
  }

  class Loop {
    -__init__()
  }

  class PossiblyUndefinedVariableVisitor {
    +builtins_mod
    +refs
    +pattern
    +guard
    +is_catchall
    +args
    +loop
    +has_break
    +old_tracker
    +exc_type
    +var
    +loop
    +has_break
    +names
    +name: alias
    +name: mod
    --
    -__init__(msg, type_map, options, names)
    +var_used_before_def(name, context)
    +variable_may_be_undefined(name, context)
    +process_definition(name)
    +visit_global_decl(o)
    +visit_nonlocal_decl(o)
    +process_lvalue(lvalue)
    +visit_assignment_stmt(o)
    +visit_assignment_expr(o)
    +visit_if_stmt(o)
    +visit_match_stmt(o)
    +visit_func_def(o)
    +visit_func(o)
    +visit_generator_expr(o)
    +visit_dictionary_comprehension(o)
    +visit_for_stmt(o)
    +visit_return_stmt(o)
    +visit_lambda_expr(o)
    +visit_assert_stmt(o)
    +visit_raise_stmt(o)
    +visit_continue_stmt(o)
    +visit_break_stmt(o)
    +visit_expression_stmt(o)
    +visit_try_stmt(o)
    +process_try_stmt(o)
    +visit_while_stmt(o)
    +visit_as_pattern(o)
    +visit_starred_pattern(o)
    +visit_name_expr(o)
    +visit_with_stmt(o)
    +visit_class_def(o)
    +visit_import(o)
    +visit_import_from(o)
  }

  class ExpressionVisitor {
    +visit_int_expr(o): T
    +visit_str_expr(o): T
    +visit_bytes_expr(o): T
    +visit_float_expr(o): T
    +visit_complex_expr(o): T
    +visit_ellipsis(o): T
    +visit_star_expr(o): T
    +visit_name_expr(o): T
    +visit_member_expr(o): T
    +visit_yield_from_expr(o): T
    +visit_yield_expr(o): T
    +visit_call_expr(o): T
    +visit_op_expr(o): T
    +visit_comparison_expr(o): T
    +visit_cast_expr(o): T
    +visit_assert_type_expr(o): T
    +visit_reveal_expr(o): T
    +visit_super_expr(o): T
    +visit_unary_expr(o): T
    +visit_assignment_expr(o): T
    +visit_list_expr(o): T
    +visit_dict_expr(o): T
    +visit_tuple_expr(o): T
    +visit_set_expr(o): T
    +visit_index_expr(o): T
    +visit_type_application(o): T
    +visit_lambda_expr(o): T
    +visit_list_comprehension(o): T
    +visit_set_comprehension(o): T
    +visit_dictionary_comprehension(o): T
    +visit_generator_expr(o): T
    +visit_slice_expr(o): T
    +visit_conditional_expr(o): T
    +visit_type_var_expr(o): T
    +visit_paramspec_expr(o): T
    +visit_type_var_tuple_expr(o): T
    +visit_type_alias_expr(o): T
    +visit_namedtuple_expr(o): T
    +visit_enum_call_expr(o): T
    +visit_typeddict_expr(o): T
    +visit_newtype_expr(o): T
    +visit__promote_expr(o): T
    +visit_await_expr(o): T
    +visit_temp_node(o): T
  }

  class StatementVisitor {
    +visit_assignment_stmt(o): T
    +visit_for_stmt(o): T
    +visit_with_stmt(o): T
    +visit_del_stmt(o): T
    +visit_func_def(o): T
    +visit_overloaded_func_def(o): T
    +visit_class_def(o): T
    +visit_global_decl(o): T
    +visit_nonlocal_decl(o): T
    +visit_decorator(o): T
    +visit_import(o): T
    +visit_import_from(o): T
    +visit_import_all(o): T
    +visit_block(o): T
    +visit_expression_stmt(o): T
    +visit_operator_assignment_stmt(o): T
    +visit_while_stmt(o): T
    +visit_return_stmt(o): T
    +visit_assert_stmt(o): T
    +visit_if_stmt(o): T
    +visit_break_stmt(o): T
    +visit_continue_stmt(o): T
    +visit_pass_stmt(o): T
    +visit_raise_stmt(o): T
    +visit_try_stmt(o): T
    +visit_match_stmt(o): T
  }

  class PatternVisitor {
    +visit_as_pattern(o): T
    +visit_or_pattern(o): T
    +visit_value_pattern(o): T
    +visit_singleton_pattern(o): T
    +visit_sequence_pattern(o): T
    +visit_starred_pattern(o): T
    +visit_mapping_pattern(o): T
    +visit_class_pattern(o): T
  }

  class NodeVisitor {
    +visit_mypy_file(o): T
    +visit_var(o): T
    +visit_import(o): T
    +visit_import_from(o): T
    +visit_import_all(o): T
    +visit_func_def(o): T
    +visit_overloaded_func_def(o): T
    +visit_class_def(o): T
    +visit_global_decl(o): T
    +visit_nonlocal_decl(o): T
    +visit_decorator(o): T
    +visit_type_alias(o): T
    +visit_placeholder_node(o): T
    +visit_block(o): T
    +visit_expression_stmt(o): T
    +visit_assignment_stmt(o): T
    +visit_operator_assignment_stmt(o): T
    +visit_while_stmt(o): T
    +visit_for_stmt(o): T
    +visit_return_stmt(o): T
    +visit_assert_stmt(o): T
    +visit_del_stmt(o): T
    +visit_if_stmt(o): T
    +visit_break_stmt(o): T
    +visit_continue_stmt(o): T
    +visit_pass_stmt(o): T
    +visit_raise_stmt(o): T
    +visit_try_stmt(o): T
    +visit_with_stmt(o): T
    +visit_match_stmt(o): T
    +visit_int_expr(o): T
    +visit_str_expr(o): T
    +visit_bytes_expr(o): T
    +visit_float_expr(o): T
    +visit_complex_expr(o): T
    +visit_ellipsis(o): T
    +visit_star_expr(o): T
    +visit_name_expr(o): T
    +visit_member_expr(o): T
    +visit_yield_from_expr(o): T
    +visit_yield_expr(o): T
    +visit_call_expr(o): T
    +visit_op_expr(o): T
    +visit_comparison_expr(o): T
    +visit_cast_expr(o): T
    +visit_assert_type_expr(o): T
    +visit_reveal_expr(o): T
    +visit_super_expr(o): T
    +visit_assignment_expr(o): T
    +visit_unary_expr(o): T
    +visit_list_expr(o): T
    +visit_dict_expr(o): T
    +visit_tuple_expr(o): T
    +visit_set_expr(o): T
    +visit_index_expr(o): T
    +visit_type_application(o): T
    +visit_lambda_expr(o): T
    +visit_list_comprehension(o): T
    +visit_set_comprehension(o): T
    +visit_dictionary_comprehension(o): T
    +visit_generator_expr(o): T
    +visit_slice_expr(o): T
    +visit_conditional_expr(o): T
    +visit_type_var_expr(o): T
    +visit_paramspec_expr(o): T
    +visit_type_var_tuple_expr(o): T
    +visit_type_alias_expr(o): T
    +visit_namedtuple_expr(o): T
    +visit_enum_call_expr(o): T
    +visit_typeddict_expr(o): T
    +visit_newtype_expr(o): T
    +visit__promote_expr(o): T
    +visit_await_expr(o): T
    +visit_temp_node(o): T
    +visit_as_pattern(o): T
    +visit_or_pattern(o): T
    +visit_value_pattern(o): T
    +visit_singleton_pattern(o): T
    +visit_sequence_pattern(o): T
    +visit_starred_pattern(o): T
    +visit_mapping_pattern(o): T
    +visit_class_pattern(o): T
  }

  class GcLogger {
    +end_time
    +result
    --
    -__enter__(): GcLogger
    +gc_callback(phase, info)
    -__exit__()
    +get_stats()
  }

  class MarkImportsUnreachableVisitor {
    +visit_import(node)
    +visit_import_from(node)
    +visit_import_all(node)
  }

  class MarkImportsMypyOnlyVisitor {
    +visit_import(node)
    +visit_import_from(node)
    +visit_import_all(node)
    +visit_func_def(node)
  }

  class TypeShallowCopier {
    +dup
    +dup
    +dup
    +dup
    +dup
    +dup
    --
    +visit_unbound_type(t): ProperType
    +visit_any(t): ProperType
    +visit_none_type(t): ProperType
    +visit_uninhabited_type(t): ProperType
    +visit_erased_type(t): ProperType
    +visit_deleted_type(t): ProperType
    +visit_instance(t): ProperType
    +visit_type_var(t): ProperType
    +visit_param_spec(t): ProperType
    +visit_parameters(t): ProperType
    +visit_type_var_tuple(t): ProperType
    +visit_unpack_type(t): ProperType
    +visit_partial_type(t): ProperType
    +visit_callable_type(t): ProperType
    +visit_tuple_type(t): ProperType
    +visit_typeddict_type(t): ProperType
    +visit_literal_type(t): ProperType
    +visit_union_type(t): ProperType
    +visit_overloaded(t): ProperType
    +visit_type_type(t): ProperType
    +visit_type_alias_type(t): ProperType
    +copy_common(t, t2): ProperType
  }

  class WriteToConn {
    +resp
    --
    -__init__(server, output_key)
    +write(output): int
    +writelines(lines)
  }

  class TypeVarExtractor {
    +out
    --
    -__init__(include_all)
    -_merge(iter)
    +visit_type_var(t)
    +visit_param_spec(t)
    +visit_type_var_tuple(t)
  }

  class StatisticsVisitor {
    +kind: TYPE_PRECISE
    +kind: TYPE_ANY
    +kind: TYPE_PRECISE
    +kind: TYPE_ANY
    +sig
    +arg_types
    +arg_types
    +items
    +items
    +callee_type
    +typemap
    +actual_to_formal
    +formal
    +kind: TYPE_UNANALYZED
    +kind: TYPE_PRECISE
    +kind: TYPE_ANY
    +t
    +typ
    --
    -__init__(inferred, filename, modules, typemap, all_nodes, visit_untyped_defs)
    +visit_mypy_file(o)
    +visit_import_from(imp)
    +visit_import_all(imp)
    +process_import(imp)
    +visit_import(imp)
    +visit_func_def(o)
    +enter_scope(o)
    +is_checked_scope(): bool
    +visit_class_def(o)
    +visit_type_application(o)
    +visit_assignment_stmt(o)
    +visit_expression_stmt(o)
    +visit_pass_stmt(o)
    +visit_break_stmt(o)
    +visit_continue_stmt(o)
    +visit_name_expr(o)
    +visit_yield_from_expr(o)
    +visit_call_expr(o)
    +record_call_target_precision(o)
    +record_callable_target_precision(o, callee)
    +visit_member_expr(o)
    +visit_op_expr(o)
    +visit_comparison_expr(o)
    +visit_index_expr(o)
    +visit_assignment_expr(o)
    +visit_unary_expr(o)
    +visit_str_expr(o)
    +visit_bytes_expr(o)
    +visit_int_expr(o)
    +visit_float_expr(o)
    +visit_complex_expr(o)
    +visit_ellipsis(o)
    +process_node(node)
    +record_precise_if_checked_scope(node)
    +type(t)
    +log(string)
    +record_line(line, precision)
  }

  class HasAnyQuery {
    -__init__()
    +visit_any(t): bool
  }

  class HasAnyQuery2 {
    +visit_callable_type(t): bool
  }

  class Server {
    +py_version
    +command: NoneType
    +server
    +orig_stdout
    +orig_stderr
    +data
    +resp
    +resp
    +command
    +resp
    +command
    +resp
    +tb
    +resp
    +exc_info
    +key
    +method
    +ret
    +res
    +data
    +s
    +stderr
    +stdout
    +manager
    +start_plugins_snapshot
    +sources
    +t0
    +sources
    +removals
    +sources
    +known
    +added
    +added_sources
    +sources
    +t1
    +manager
    +old_export_types
    +messages
    +messages
    +res
    +old_export_types
    +res
    +messages
    +messages
    +res
    +manager
    +t0
    +t1
    +result
    +output
    +messages
    +original_sources_len
    +sources
    +t2
    +meta
    +t3
    +messages
    +messages
    +t4
    +status
    +messages
    +manager
    +t0
    +t1
    +messages
    +t2
    +t0
    +fine_grained_manager
    +graph
    +manager
    +orig_modules
    +changed_paths
    +t1
    +seen
    +messages
    +worklist
    +module
    +sources2
    +sources2
    +messages
    +t2
    +new_messages
    +messages: new_messages
    +t3
    +new_unsuppressed
    +new_files
    +messages
    +new_messages
    +messages: new_messages
    +t4
    +to_delete
    +module_path
    +messages
    +t5
    +changed
    +new_files
    +worklist
    +nxt
    +state
    +state
    +all_suppressed
    +all_suppressed
    +packages
    +packages
    +finder
    +found
    +top_level_pkg
    +result
    +status
    +messages
    +use_color
    +fit_width
    +messages
    +summary
    +summary
    +summary
    +messages
    +messages
    +paths
    +paths
    +changed_paths
    +changed_paths
    +changed
    +modules
    +omitted
    +removed
    +path
    +previous_modules
    +changed_set
    +last
    +engine
    +old_inspections
    +result
    +result
    +result
    +engine
    +out
    +out
    +out: str
    --
    -__init__(options, status_file, timeout)
    -_response_metadata()
    +serve()
    +run_command(command, data)
    +cmd_status(fswatcher_dump_file)
    +cmd_stop()
    +cmd_run(version, args, export_types, is_tty, terminal_width)
    +cmd_check(files, export_types, is_tty, terminal_width)
    +cmd_recheck(is_tty, terminal_width, export_types, remove, update)
    +check(sources, export_types, is_tty, terminal_width)
    +flush_caches()
    +update_stats(res)
    +following_imports(): bool
    +initialize_fine_grained(sources, is_tty, terminal_width)
    +fine_grained_increment(sources, remove, update, explicit_export_types)
    +fine_grained_increment_follow_imports(sources, explicit_export_types)
    +refresh_file(path)
    +find_reachable_changed_modules(roots, graph, seen, changed_paths)
    +direct_imports(module, graph)
    +find_added_suppressed(graph, seen, search_paths)
    +increment_output(messages, sources, is_tty, terminal_width)
    +pretty_messages(messages, n_sources, is_tty, terminal_width)
    +update_sources(sources)
    +update_changed(sources, remove, update): ChangesAndRemovals
    +find_changed(sources): ChangesAndRemovals
    -_find_changed(sources, changed_paths): ChangesAndRemovals
    +cmd_inspect(show, location, verbosity, limit, include_span, include_kind, include_object_attrs, union_attrs, force_reload)
    +cmd_suggest(function, callsites)
    +cmd_hang()
  }

  class MessageBuilder {
    +errors: Errors
    +modules
    -_disable_type_names
    +origin_span
    +origin_span
    +origin_span
    +origin_span: NoneType
    +origin_span
    +original_type
    +typ
    +extra: str
    +extra: str
    +extra: str
    +failed: bool
    +failed: bool
    +alternatives
    +matches
    +matches
    +failed: bool
    +typ_format: str
    +bound
    +original_type_fmt
    +left_str: str
    +left_str: left_type
    +left_str
    +right_str: str
    +right_str: right_type
    +right_str
    +msg
    +msg
    +msg
    +msg
    +name
    +arg_type
    +target: str
    +callee_name
    +name: callee_name
    +base
    +base
    +info
    +error_msg
    +target
    +msg: str
    +code
    +notes
    +name
    +msg
    +code
    +name
    +key_type_str
    +expected_key_type_str
    +value_type_str
    +expected_value_type_str
    +msg
    +code
    +msg
    +code
    +msg
    +msg
    +msg
    +msg
    +msg: str
    +expected_type
    +expected_type
    +arg_type_str
    +arg_type_str
    +arg_label
    +arg_name
    +arg_label
    +arg_name
    +arg_label
    +msg
    +msg
    +expected_type
    +expected_types
    +expected_types
    +notes
    +notes
    +object_type
    +code
    +code
    +item
    +call
    +names
    +missing_arguments
    +msg: str
    +num_positional_args
    +arguments_left
    +diff
    +msg: str
    +msg: str
    +callee_name
    +args
    +msg
    +msg
    +msg
    +msg: str
    +msg
    +msg
    +msg: str
    +msg
    +first_arg
    +msg
    +matching_type_args
    +not_matching_type_args
    +callee_arg_name
    +matches
    +matches
    +module
    +fname
    +fname: str
    +callee_type
    +callee_name
    +name
    +message
    +s: str
    +s
    +s: str
    +s
    +code
    +name
    +name_str
    +name_str: str
    +arg_types_str
    +num_args
    +target
    +note_template: str
    +code
    +target
    +INCLUDE_DECORATOR: bool
    +ALLOW_DUPS: bool
    +ALIGN_OFFSET: int
    +OFFSET: int
    +decorator
    +target
    +arg_type_in_supertype_f
    +multiline_msg
    +target
    +original
    +override
    +target
    +target
    +callee_name
    +typ
    +actual
    +type_str: str
    +type_str
    +type
    +kind
    +arg_type
    +sig_type
    +attrs
    +attrs_with_none
    +note
    +note
    +kind
    +left_str
    +right_str
    +message: str
    +text
    +visitor
    +sorted_locals
    +visitor
    +hint: str
    +pep604_supported
    +recommended_type: NoneType
    +type_dec: str
    +recommended_type
    +recommended_type
    +alias
    +alias
    +type_dec
    +recommended_type
    +hint
    +actual_set
    +expected_set
    +missing
    +extra
    +found
    +expected
    +found
    +err_code
    +matches
    +formatted_types
    +msg: str
    +typ
    +message: str
    +message
    +message
    +typ
    +msg
    +attrs
    +template: str
    +OFFSET: int
    +MAX_ITEMS: int
    +exclusions
    +class_obj: bool
    +is_module: bool
    +skip
    +subtype
    +subtype
    +class_obj: bool
    +subtype
    +ret_type
    +ret_type
    +class_obj: bool
    +subtype: ret_type
    +subtype
    +skip
    +is_module: bool
    +missing
    +conflict_types
    +type_name
    +exp
    +got
    +conflict_flags
    +decorator
    +lhs_type
    +lhs_types
    +msg
    +item_cnt
    +error_cnt: int
    +notes
    +info
    +msg
    --
    -__init__(errors, modules)
    +filter_errors(): ErrorWatcher
    +add_errors(errors)
    +disable_type_names()
    +are_type_names_disabled(): bool
    +prefer_simple_messages(): bool
    +report(msg, context, severity)
    +span_from_context()
    +fail(msg, context)
    +note(msg, context, file, origin, offset, allow_dups)
    +note_multiline(messages, context, file, offset, allow_dups, code)
    +has_no_attr(original_type, typ, member, context, module_symbol_table)
    +unsupported_operand_types(op, left_type, right_type, context)
    +unsupported_left_operand(op, typ, context)
    +not_callable(typ, context): Type
    +untyped_function_call(callee, context): Type
    +incompatible_argument(n, m, callee, arg_type, arg_kind, object_type, context, outer_context)
    +incompatible_argument_note(original_caller_type, callee_type, context, code)
    +maybe_note_concatenate_pos_args(original_caller_type, callee_type, context, code)
    +invalid_index_type(index_type, expected_type, base_str, context)
    +too_few_arguments(callee, context, argument_names)
    +missing_named_argument(callee, context, name)
    +too_many_arguments(callee, context)
    +too_many_arguments_from_typed_dict(callee, arg_type, context)
    +too_many_positional_arguments(callee, context)
    +maybe_note_about_special_args(callee, context)
    +unexpected_keyword_argument(callee, name, arg_type, context)
    +duplicate_argument_value(callee, index, context)
    +does_not_return_value(callee_type, context)
    +deleted_as_rvalue(typ, context)
    +deleted_as_lvalue(typ, context)
    +no_variant_matches_arguments(overload, arg_types, context)
    +wrong_number_values_to_unpack(provided, expected, context)
    +unpacking_strings_disallowed(context)
    +type_not_iterable(type, context)
    +possible_missing_await(context, code)
    +incompatible_operator_assignment(op, context)
    +overload_signature_incompatible_with_supertype(name, name_in_super, supertype, context)
    +signature_incompatible_with_supertype(name, name_in_super, supertype, context)
    +pretty_callable_or_overload(tp, context)
    +argument_incompatible_with_supertype(arg_num, name, type_name, name_in_supertype, arg_type_in_supertype, supertype, context, secondary_context)
    +comparison_method_example_msg(class_name): str
    +return_type_incompatible_with_supertype(name, name_in_supertype, supertype, original, override, context)
    +override_target(name, name_in_super, supertype): str
    +incompatible_type_application(expected_arg_count, actual_arg_count, context)
    +could_not_infer_type_arguments(callee_type, n, context)
    +invalid_var_arg(typ, context)
    +invalid_keyword_var_arg(typ, is_mapping, context)
    +undefined_in_superclass(member, context)
    +variable_may_be_undefined(name, context)
    +var_used_before_def(name, context)
    +first_argument_for_super_must_be_type(actual, context)
    +unsafe_super(method, cls, ctx)
    +too_few_string_formatting_arguments(context)
    +too_many_string_formatting_arguments(context)
    +unsupported_placeholder(placeholder, context)
    +string_interpolation_with_star_and_key(context)
    +requires_int_or_single_byte(context, format_call)
    +requires_int_or_char(context, format_call)
    +key_not_in_mapping(key, context)
    +string_interpolation_mixing_key_and_non_keys(context)
    +cannot_determine_type(name, context)
    +cannot_determine_type_in_base(name, base, context)
    +no_formal_self(name, item, context)
    +incompatible_self_argument(name, arg, sig, is_classmethod, context)
    +incompatible_conditional_function_def(defn, old_type, new_type)
    +cannot_instantiate_abstract_class(class_name, abstract_attributes, context)
    +base_class_definitions_incompatible(name, base1, base2, context)
    +cant_assign_to_method(context)
    +cant_assign_to_classvar(name, context)
    +no_overridable_method(name, context)
    +explicit_override_decorator_missing(name, base_name, context)
    +final_cant_override_writable(name, ctx)
    +cant_override_final(name, base_name, ctx)
    +cant_assign_to_final(name, attr_assign, ctx)
    +protocol_members_cant_be_final(ctx)
    +final_without_value(ctx)
    +read_only_property(name, type, context)
    +incompatible_typevar_value(callee, typ, typevar_name, context)
    +dangerous_comparison(left, right, kind, ctx)
    +overload_inconsistently_applies_decorator(decorator, context)
    +overloaded_signatures_overlap(index1, index2, context)
    +overloaded_signature_will_never_match(index1, index2, context)
    +overloaded_signatures_typevar_specific(index, context)
    +overloaded_signatures_arg_specific(index, context)
    +overloaded_signatures_ret_specific(index, context)
    +warn_both_operands_are_from_unions(context)
    +warn_operand_was_from_union(side, original, context)
    +operator_method_signatures_overlap(reverse_class, reverse_method, forward_class, forward_method, context)
    +forward_operator_not_callable(forward_method, context)
    +signatures_incompatible(method, other_method, context)
    +yield_from_invalid_operand_type(expr, context): Type
    +invalid_signature(func_type, context)
    +invalid_signature_for_special_method(func_type, context, method_name)
    +reveal_type(typ, context)
    +reveal_locals(type_map, context)
    +unsupported_type_type(item, context)
    +redundant_cast(typ, context)
    +assert_type_fail(source_type, target_type, context)
    +unimported_type_becomes_any(prefix, typ, ctx)
    +need_annotation_for_var(node, context, python_version)
    +explicit_any(ctx)
    +unsupported_target_for_star_typeddict(typ, ctx)
    +non_required_keys_absent_with_star(keys, ctx)
    +unexpected_typeddict_keys(typ, expected_keys, actual_keys, context)
    +typeddict_key_must_be_string_literal(typ, context)
    +typeddict_key_not_found(typ, item_name, context, setitem)
    +typeddict_context_ambiguous(types, context)
    +typeddict_key_cannot_be_deleted(typ, item_name, context)
    +typeddict_setdefault_arguments_inconsistent(default, expected, context)
    +type_arguments_not_allowed(context)
    +disallowed_any_type(typ, context)
    +incorrectly_returning_any(typ, context)
    +incorrect__exit__return(context)
    +untyped_decorated_function(typ, context)
    +typed_function_untyped_decorator(func_name, context)
    +bad_proto_variance(actual, tvar_name, expected, context)
    +concrete_only_assign(typ, context)
    +concrete_only_call(typ, context)
    +cannot_use_function_with_type(method_name, type_name, context)
    +report_non_method_protocol(tp, members, context)
    +note_call(subtype, call, context)
    +unreachable_statement(context)
    +redundant_left_operand(op_name, context)
    +unreachable_right_operand(op_name, context)
    +redundant_condition_in_comprehension(truthiness, context)
    +redundant_condition_in_if(truthiness, context)
    +redundant_expr(description, truthiness, context)
    +impossible_intersection(formatted_base_class_list, reason, context)
    +report_protocol_problems(subtype, supertype, context)
    +pretty_overload(tp, context, offset)
    +print_more(conflicts, context, offset, max_items)
    +try_report_long_tuple_assignment_error(subtype, supertype, context, msg, subtype_label, supertype_label): bool
    +format_long_tuple_type(typ): str
    +generate_incompatible_tuple_error(lhs_types, rhs_types, context, msg)
    +add_fixture_note(fullname, ctx)
    +annotation_in_unchecked_function(context)
  }

  class CollectAllInstancesQuery {
    -__init__()
    +visit_instance(t)
    +visit_type_alias_type(t)
  }

  class TypeArgumentAnalyzer {
    +is_error
    +star_index
    +star_type
    +p_type
    +info
    +arg
    +unpacked
    +prefix
    +tvt
    +args
    +is_error: bool
    +is_error: bool
    +arg_values
    +is_error: bool
    +arg_values
    +is_error: bool
    +upper_bound
    +object_upper_bound
    +is_error: bool
    +proper_type
    +is_error: bool
    +is_error: bool
    +class_name
    +actual_type_name
    --
    -__init__(errors, options, is_typeshed_file, named_type)
    +visit_mypy_file(o)
    +visit_func(defn)
    +visit_class_def(defn)
    +visit_block(o)
    +visit_type_alias_type(t)
    +visit_tuple_type(t)
    +visit_callable_type(t)
    +visit_instance(t)
    +validate_args(name, args, type_vars, ctx): bool
    +visit_unpack_type(typ)
    +check_type_var_values(name, actuals, arg_name, valids, context): bool
    +fail(msg, context)
    +note(msg, context)
  }

  class ArgSig {
    -__init__(name, type, default)
    +is_star_arg(): bool
    +is_star_kwarg(): bool
    -__repr__(): str
    -__eq__(other): bool
  }

  class FunctionSig {
    +name: str
    +args
    +ret_type
    +args
    +args
    +args
    +arg_def
    +arg_def
    +arg_type
    +arg_type
    +retfield: str
    +ret_type
    +retfield
    +prefix
    +sig
    +suffix
    +suffix: str
    --
    +is_special_method(): bool
    +has_catchall_args(): bool
    +is_catchall_signature(): bool
    +format_sig(indent, is_async, any_val, docstring): str
  }

  class DocStringParser {
    -__init__(function_name)
    +add_token(token)
    +reset()
    +get_signatures()
    +has_arg(signature): bool
    +args_kwargs(): bool
  }

  class TypeAnalyzerPluginInterface {
    +options: Options
    --
    +fail(msg, ctx)
    +named_type(name, args): Instance
    +analyze_type(typ): Type
    +analyze_callable_args(arglist)
  }

  class AnalyzeTypeContext {
    +type: UnboundType
    +context: Context
    +api: TypeAnalyzerPluginInterface
  }

  class CommonPluginApi {
    +options: Options
    --
    +lookup_fully_qualified(fullname)
  }

  class CheckerPluginInterface {
    +msg: MessageBuilder
    +options: Options
    +path: str
    --
    +type_context()
    +fail(msg, ctx)
    +named_generic_type(name, args): Instance
    +get_expression_type(node, type_context): Type
  }

  class SemanticAnalyzerPluginInterface {
    +modules
    +options: Options
    +cur_mod_id: str
    +msg: MessageBuilder
    --
    +named_type(fullname, args): Instance
    +builtin_type(fully_qualified_name): Instance
    +named_type_or_none(fullname, args)
    +basic_new_typeinfo(name, basetype_or_fallback, line): TypeInfo
    +parse_bool(expr)
    +parse_str_literal(expr)
    +fail(msg, ctx, serious)
    +anal_type(t)
    +class_type(self_type): Type
    +lookup_fully_qualified(name): SymbolTableNode
    +lookup_fully_qualified_or_none(name)
    +lookup_qualified(name, ctx, suppress_errors)
    +add_plugin_dependency(trigger, target)
    +add_symbol_table_node(name, stnode): Any
    +qualified_name(n): str
    +defer()
    +final_iteration(): bool
    +is_stub_file(): bool
    +analyze_simple_literal_type(rvalue, is_final)
  }

  class ReportConfigContext {
    +id: str
    +path: str
    +is_check: bool
  }

  class FunctionSigContext {
    +args
    +default_signature: CallableType
    +context: Context
    +api: CheckerPluginInterface
  }

  class FunctionContext {
    -__init__(module_name, name, docstring, is_abstract, class_info)
    +fullname(): str
  }

  class MethodSigContext {
    +type: ProperType
    +args
    +default_signature: CallableType
    +context: Context
    +api: CheckerPluginInterface
  }

  class MethodContext {
    +type: ProperType
    +arg_types
    +arg_kinds
    +callee_arg_names
    +arg_names
    +default_return_type: Type
    +args
    +context: Context
    +api: CheckerPluginInterface
  }

  class AttributeContext {
    +type: ProperType
    +default_attr_type: Type
    +context: Context
    +api: CheckerPluginInterface
  }

  class ClassDefContext {
    +cls: ClassDef
    +reason: Expression
    +api: SemanticAnalyzerPluginInterface
  }

  class DynamicClassDefContext {
    +call: CallExpr
    +name: str
    +api: SemanticAnalyzerPluginInterface
  }

  class Plugin {
    -__init__(options)
    +set_modules(modules)
    +lookup_fully_qualified(fullname)
    +report_config_data(ctx): Any
    +get_additional_deps(file)
    +get_type_analyze_hook(fullname)
    +get_function_signature_hook(fullname)
    +get_function_hook(fullname)
    +get_method_signature_hook(fullname)
    +get_method_hook(fullname)
    +get_attribute_hook(fullname)
    +get_class_attribute_hook(fullname)
    +get_class_decorator_hook(fullname)
    +get_class_decorator_hook_2(fullname)
    +get_metaclass_hook(fullname)
    +get_base_class_hook(fullname)
    +get_customize_class_mro_hook(fullname)
    +get_dynamic_class_hook(fullname)
  }

  class ChainedPlugin {
    +config_data
    +deps
    +hook
    --
    -__init__(options, plugins)
    +set_modules(modules)
    +report_config_data(ctx): Any
    +get_additional_deps(file)
    +get_type_analyze_hook(fullname)
    +get_function_signature_hook(fullname)
    +get_function_hook(fullname)
    +get_method_signature_hook(fullname)
    +get_method_hook(fullname)
    +get_attribute_hook(fullname)
    +get_class_attribute_hook(fullname)
    +get_class_decorator_hook(fullname)
    +get_class_decorator_hook_2(fullname)
    +get_metaclass_hook(fullname)
    +get_base_class_hook(fullname)
    +get_customize_class_mro_hook(fullname)
    +get_dynamic_class_hook(fullname)
    -_find_hook(lookup)
  }

  class ArgumentInferContext {
    +mapping_type: Instance
    +iterable_type: Instance
  }

  class TraverserVisitor {
    +init
    +tp
    +targ
    +guard
    --
    -__init__()
    +visit_mypy_file(o)
    +visit_block(block)
    +visit_func(o)
    +visit_func_def(o)
    +visit_overloaded_func_def(o)
    +visit_class_def(o)
    +visit_decorator(o)
    +visit_expression_stmt(o)
    +visit_assignment_stmt(o)
    +visit_operator_assignment_stmt(o)
    +visit_while_stmt(o)
    +visit_for_stmt(o)
    +visit_return_stmt(o)
    +visit_assert_stmt(o)
    +visit_del_stmt(o)
    +visit_if_stmt(o)
    +visit_raise_stmt(o)
    +visit_try_stmt(o)
    +visit_with_stmt(o)
    +visit_match_stmt(o)
    +visit_member_expr(o)
    +visit_yield_from_expr(o)
    +visit_yield_expr(o)
    +visit_call_expr(o)
    +visit_op_expr(o)
    +visit_comparison_expr(o)
    +visit_slice_expr(o)
    +visit_cast_expr(o)
    +visit_assert_type_expr(o)
    +visit_reveal_expr(o)
    +visit_assignment_expr(o)
    +visit_unary_expr(o)
    +visit_list_expr(o)
    +visit_tuple_expr(o)
    +visit_dict_expr(o)
    +visit_set_expr(o)
    +visit_index_expr(o)
    +visit_generator_expr(o)
    +visit_dictionary_comprehension(o)
    +visit_list_comprehension(o)
    +visit_set_comprehension(o)
    +visit_conditional_expr(o)
    +visit_type_application(o)
    +visit_lambda_expr(o)
    +visit_star_expr(o)
    +visit_await_expr(o)
    +visit_super_expr(o)
    +visit_as_pattern(o)
    +visit_or_pattern(o)
    +visit_value_pattern(o)
    +visit_sequence_pattern(o)
    +visit_starred_pattern(o)
    +visit_mapping_pattern(o)
    +visit_class_pattern(o)
    +visit_import(o)
    +visit_import_from(o)
  }

  class ExtendedTraverserVisitor {
    +visit(o): bool
    +visit_mypy_file(o)
    +visit_import(o)
    +visit_import_from(o)
    +visit_import_all(o)
    +visit_func_def(o)
    +visit_overloaded_func_def(o)
    +visit_class_def(o)
    +visit_global_decl(o)
    +visit_nonlocal_decl(o)
    +visit_decorator(o)
    +visit_type_alias(o)
    +visit_block(block)
    +visit_expression_stmt(o)
    +visit_assignment_stmt(o)
    +visit_operator_assignment_stmt(o)
    +visit_while_stmt(o)
    +visit_for_stmt(o)
    +visit_return_stmt(o)
    +visit_assert_stmt(o)
    +visit_del_stmt(o)
    +visit_if_stmt(o)
    +visit_break_stmt(o)
    +visit_continue_stmt(o)
    +visit_pass_stmt(o)
    +visit_raise_stmt(o)
    +visit_try_stmt(o)
    +visit_with_stmt(o)
    +visit_match_stmt(o)
    +visit_int_expr(o)
    +visit_str_expr(o)
    +visit_bytes_expr(o)
    +visit_float_expr(o)
    +visit_complex_expr(o)
    +visit_ellipsis(o)
    +visit_star_expr(o)
    +visit_name_expr(o)
    +visit_member_expr(o)
    +visit_yield_from_expr(o)
    +visit_yield_expr(o)
    +visit_call_expr(o)
    +visit_op_expr(o)
    +visit_comparison_expr(o)
    +visit_cast_expr(o)
    +visit_assert_type_expr(o)
    +visit_reveal_expr(o)
    +visit_super_expr(o)
    +visit_assignment_expr(o)
    +visit_unary_expr(o)
    +visit_list_expr(o)
    +visit_dict_expr(o)
    +visit_tuple_expr(o)
    +visit_set_expr(o)
    +visit_index_expr(o)
    +visit_type_application(o)
    +visit_lambda_expr(o)
    +visit_list_comprehension(o)
    +visit_set_comprehension(o)
    +visit_dictionary_comprehension(o)
    +visit_generator_expr(o)
    +visit_slice_expr(o)
    +visit_conditional_expr(o)
    +visit_type_var_expr(o)
    +visit_paramspec_expr(o)
    +visit_type_var_tuple_expr(o)
    +visit_type_alias_expr(o)
    +visit_namedtuple_expr(o)
    +visit_enum_call_expr(o)
    +visit_typeddict_expr(o)
    +visit_newtype_expr(o)
    +visit_await_expr(o)
    +visit_as_pattern(o)
    +visit_or_pattern(o)
    +visit_value_pattern(o)
    +visit_singleton_pattern(o)
    +visit_sequence_pattern(o)
    +visit_starred_pattern(o)
    +visit_mapping_pattern(o)
    +visit_class_pattern(o)
  }

  class ReturnSeeker {
    -__init__()
    +visit_return_stmt(o)
  }

  class FuncCollectorBase {
    -__init__()
    +visit_func_def(defn)
  }

  class YieldSeeker {
    -__init__()
    +visit_yield_expr(o)
  }

  class YieldFromSeeker {
    -__init__()
    +visit_yield_from_expr(o)
  }

  class AwaitSeeker {
    -__init__()
    +visit_await_expr(o)
  }

  class ReturnCollector {
    -__init__()
    +visit_return_stmt(stmt)
  }

  class YieldCollector {
    -__init__()
    +visit_assignment_stmt(stmt)
    +visit_yield_expr(expr)
  }

  class YieldFromCollector {
    -__init__()
    +visit_assignment_stmt(stmt)
    +visit_yield_from_expr(expr)
  }

  class TypeTraverserVisitor {
    +visit_any(t)
    +visit_uninhabited_type(t)
    +visit_none_type(t)
    +visit_erased_type(t)
    +visit_deleted_type(t)
    +visit_type_var(t)
    +visit_param_spec(t)
    +visit_parameters(t)
    +visit_type_var_tuple(t)
    +visit_literal_type(t)
    +visit_instance(t)
    +visit_callable_type(t)
    +visit_tuple_type(t)
    +visit_typeddict_type(t)
    +visit_union_type(t)
    +visit_overloaded(t)
    +visit_type_type(t)
    +visit_callable_argument(t)
    +visit_unbound_type(t)
    +visit_type_list(t)
    +visit_ellipsis_type(t)
    +visit_placeholder_type(t)
    +visit_partial_type(t)
    +visit_raw_expression_type(t)
    +visit_type_alias_type(t)
    +visit_unpack_type(t)
    +traverse_types(types)
  }

  class VariableRenameVisitor {
    +name
    +can_be_redefined
    +guard
    +name
    +is_new
    +name
    +names
    +name
    +names
    +name
    +names
    +num_reads
    +is_func
    +to_rename
    +to_rename
    +var_blocks
    +var_blocks
    +can_be_redefined: bool
    +block
    +var_blocks
    --
    -__init__()
    +visit_mypy_file(file_node)
    +visit_func_def(fdef)
    +visit_class_def(cdef)
    +visit_block(block)
    +visit_while_stmt(stmt)
    +visit_for_stmt(stmt)
    +visit_break_stmt(stmt)
    +visit_continue_stmt(stmt)
    +visit_try_stmt(stmt)
    +visit_with_stmt(stmt)
    +visit_import(imp)
    +visit_import_from(imp)
    +visit_assignment_stmt(s)
    +visit_match_stmt(s)
    +visit_capture_pattern(p)
    +analyze_lvalue(lvalue, is_nested)
    +visit_name_expr(expr)
    +handle_arg(name)
    +handle_def(expr)
    +handle_refine(expr)
    +handle_ref(expr)
    +flush_refs()
    +clear()
    +enter_block()
    +enter_try()
    +enter_loop()
    +current_block(): int
    +enter_scope(kind)
    +is_nested(): int
    +reject_redefinition_of_vars_in_scope()
    +reject_redefinition_of_vars_in_loop()
    +record_assignment(name, can_be_redefined): bool
  }

  class LimitedVariableRenameVisitor {
    +old_len
    +name
    +var_info
    +name
    +ref_dict
    +skipped
    +to_rename
    --
    -__init__()
    +visit_mypy_file(file_node)
    +visit_func_def(fdef)
    +visit_class_def(cdef)
    +visit_with_stmt(stmt)
    +analyze_lvalue(lvalue)
    +visit_import(imp)
    +visit_import_from(imp)
    +visit_import_all(imp)
    +visit_name_expr(expr)
    +enter_scope()
    +reject_redefinition_of_vars_in_scope()
    +record_skipped(name)
    +flush_refs()
  }

  class Constraint {
    +type_var: TypeVarId
    +op: int
    +target: Type
    +op_str: str
    +op_str: str
    --
    -__init__(type_var, op, target)
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
  }

  class CompleteTypeVisitor {
    -__init__()
    +visit_uninhabited_type(t): bool
  }

  class ConstraintBuilderVisitor {
    +actual: ProperType
    +original_actual
    +actual
    +res
    +call
    +subres
    +ret_type
    +ret_type
    +subtype: template
    +subtype: ret_type
    +actual
    +subtype: template
    +subtype
    +a_item
    +a_item
    +actual
    +actual
    +actual
    +instance: actual
    +erased
    +mapped
    +tvars
    +prefix_len
    +suffix_len
    +tvt
    +fallback
    +instance_args
    +mapped_args
    +mapped_args
    +instance_args
    +prefix
    +suffix: Type
    +suffix
    +mapped
    +tvars
    +prefix_len
    +suffix_len
    +tvt
    +fallback
    +template_args
    +mapped_args
    +mapped_args
    +template_args
    +prefix
    +suffix
    +suffix
    +unpacked
    +item
    +cb
    +res
    +inst
    +temp
    +template
    +extra_tvars: bool
    +res
    +cactual
    +param_spec
    +template_ret_type
    +cactual_ret_type
    +extra_tvars: bool
    +unpack_present
    +unpack
    +tuple_type
    +template_types
    +actual_types
    +unpack_constraints
    +prefix
    +prefix_len
    +cactual_ps
    +extra_tvars: bool
    +cactual_prefix
    +param_spec_target
    +skip_imprecise
    +max_prefix_len
    +prefix_len
    +param_spec_target
    +param_spec_target
    +param_spec
    +any_type
    +res
    +res
    +call
    +item
    +actual
    +unpack_index
    +is_varlength_tuple
    +res
    +unpack_type
    +unpacked_type
    +res
    +res
    +unpack_constraints
    +actual_items
    +template_items
    +a_unpack_index
    +a_unpack
    +a_unpacked
    +a_prefix_len: a_unpack_index
    +a_suffix_len
    +actual_items
    +template_items
    +actual_items
    +template_items
    +actual_items
    +template_items
    +actual
    +res
    +res
    +unpacked
    +items
    +items
    +res
    --
    -__init__(actual, direction, skip_neg_op)
    +visit_unbound_type(template)
    +visit_any(template)
    +visit_none_type(template)
    +visit_uninhabited_type(template)
    +visit_erased_type(template)
    +visit_deleted_type(template)
    +visit_literal_type(template)
    +visit_partial_type(template)
    +visit_type_var(template)
    +visit_param_spec(template)
    +visit_type_var_tuple(template)
    +visit_unpack_type(template)
    +visit_parameters(template)
    +visit_instance(template)
    +infer_constraints_from_protocol_members(instance, template, subtype, protocol, class_obj)
    +visit_callable_type(template)
    +infer_against_overloaded(overloaded, template)
    +visit_tuple_type(template)
    +visit_typeddict_type(template)
    +visit_union_type(template)
    +visit_type_alias_type(template)
    +infer_against_any(types, any_type)
    +visit_overloaded(template)
    +visit_type_type(template)
  }

  class Frame {
    -__init__(id, conditional_frame)
    -__repr__(): str
  }

  class ConditionalTypeBinder {
    +type_assignments
    +value: key
    +f
    +key
    +key
    +key
    +frames
    +changed: bool
    +keys
    +current_value
    +resulting_values
    +type
    +declaration_type
    +type
    +type
    +type
    +simplified
    +type: simplified
    +changed: bool
    +result
    +options
    +old_assignments: NoneType
    +old_assignments
    +type
    +p_declared
    +p_type
    +enclosing_type
    +new_items
    +key
    +type
    +key
    +enclosers
    +frame
    +new_frame
    --
    -__init__()
    -_get_id(): int
    -_add_dependencies(key, value)
    +push_frame(conditional_frame): Frame
    -_put(key, type, index)
    -_get(key, index)
    +put(expr, typ)
    +unreachable()
    +suppress_unreachable_warnings()
    +get(expr)
    +is_unreachable(): bool
    +is_unreachable_warning_suppressed(): bool
    +cleanse(expr)
    -_cleanse_key(key)
    +update_from_options(frames): bool
    +pop_frame(can_skip, fall_through): Frame
    +accumulate_type_assignments()
    +assign_type(expr, type, declared_type, restrict_any)
    +invalidate_dependencies(expr)
    +most_recent_enclosing_type(expr, type)
    +allow_jump(index)
    +handle_break()
    +handle_continue()
    +frame_context()
    +top_frame_context()
  }

  class ErrorInfo {
    +import_ctx
    +file: str
    +module
    +type
    +function_or_member
    +line: int
    +column: int
    +end_line: int
    +end_column: int
    +severity: str
    +message: str
    +code
    +blocker: bool
    +only_once: bool
    +allow_dups: bool
    +origin
    +target
    +hidden: bool
    --
    -__init__(import_ctx)
  }

  class ErrorWatcher {
    +last
    +should_filter
    +should_filter
    --
    -__init__(errors)
    -__enter__(): ErrorWatcher
    -__exit__(exc_type, exc_val, exc_tb)
    +on_error(file, info): bool
    +has_new_errors(): bool
    +filtered_errors()
  }

  class Errors {
    +error_info_map
    +has_blockers
    +flushed_files
    +import_ctx
    +ignore_prefix
    +file: str
    +ignored_lines
    +skipped_lines
    +used_ignored_lines
    +ignored_files
    +only_once_messages
    +show_error_context: bool
    +show_column_numbers: bool
    +show_error_end: bool
    +show_absolute_path: bool
    +target_module
    +scope
    +seen_import_error: bool
    -_watchers
    +prefix
    +file
    +type
    +type: NoneType
    +function
    +type: NoneType
    +function: NoneType
    +column
    +end_column
    +end_column
    +file
    +message
    +origin_span
    +end_line: line
    +code
    +info
    +i
    +w
    +ignored_codes
    +msg
    +old_code
    +msg
    +note
    +message
    +info
    +message
    +new_info
    +current_mod_disabled
    +current_mod_enabled
    +current_mod_disabled
    +current_mod_enabled
    +new_errors
    +has_blocker: bool
    +ignored_lines
    +used_ignored_lines
    +used_ignored_codes
    +unused_ignored_codes
    +unused_codes_message: str
    +unused_codes_message
    +message
    +narrower
    +info
    +used_ignored_lines
    +codes_hint: str
    +ignored_codes
    +codes_hint
    +message
    +info
    +a
    +error_info
    +errors
    +errors
    +s: str
    +srcloc
    +srcloc
    +srcloc: file
    +s
    +s: message
    +s
    +source_line
    +source_line_expanded
    +column
    +column
    +end_column
    +marker: str
    +marker
    +source_lines: NoneType
    +source_lines
    +msgs
    +result
    +prev_import_context
    +prev_function_or_member
    +prev_type
    +last
    +i: last
    +fmt: str
    +fmt: str
    +path
    +file
    +prev_import_context
    +prev_function_or_member
    +prev_type
    +result
    +i: int
    +i0: i
    +a
    +a
    +result
    +i: int
    +i0: i
    +a
    +res
    +i: int
    +dup: bool
    +conflicts_notes: bool
    +j
    +conflicts_notes: bool
    +j
    +dup: bool
    --
    -__init__(options)
    +initialize()
    +reset()
    +set_ignore_prefix(prefix)
    +simplify_path(file): str
    +set_file(file, module, options, scope)
    +set_file_ignored_lines(file, ignored_lines, ignore_all)
    +set_skipped_lines(file, skipped_lines)
    +current_target()
    +current_module()
    +import_context()
    +set_import_context(ctx)
    +report(line, column, message, code)
    -_add_error_info(file, info)
    -_filter_error(file, info): bool
    +add_error_info(info)
    +has_many_errors(): bool
    +report_hidden_errors(info)
    +is_ignored_error(line, info, ignores): bool
    +is_error_code_enabled(error_code): bool
    +clear_errors_in_targets(path, targets)
    +generate_unused_ignore_errors(file)
    +generate_ignore_without_code_errors(file, is_warning_unused_ignores)
    +num_messages(): int
    +is_errors(): bool
    +is_blockers(): bool
    +blocker_module()
    +is_errors_for_file(file): bool
    +prefer_simple_messages(): bool
    +raise_error(use_stdout): NoReturn
    +format_messages(error_info, source_lines)
    +file_messages(path)
    +new_messages()
    +targets()
    +render_messages(errors)
    +sort_messages(errors)
    +sort_within_context(errors)
    +remove_duplicates(errors)
  }

  class CompileError {
    +messages
    +use_stdout: bool
    +module_with_blocker
    --
    -__init__(messages, use_stdout, module_with_blocker)
  }

  class CantImport {
    -__init__(module, message)
  }

  class AnnotationPrinter {
    +s
    +s
    +s
    +arg_module: module_name
    +arg_module
    +s: str
    +types
    +res
    +arg_str
    --
    -__init__(stubgen, known_modules, local_modules)
    +visit_any(t): str
    +visit_unbound_type(t): str
    +visit_none_type(t): str
    +visit_type_list(t): str
    +visit_union_type(t): str
    +args_str(args): str
  }

  class ClassInfo {
    -__init__(name, self_var, docstring, cls)
  }

  class SignatureGenerator {
    +remove_self_type(inferred, self_var)
    +get_function_sig(default_sig, ctx)
    +get_property_type(default_type, ctx)
  }

  class ImportTracker {
    +name: module
    +name
    +name
    +result
    +module_map
    +m
    +name
    +name
    +source
    --
    -__init__()
    +add_import_from(module, names, require)
    +add_import(module, alias, require)
    +require_name(name)
    +reexport(name)
    +import_lines()
  }

  class BaseStubGenerator {
    +IGNORED_DUNDERS: Final
    +TYPING_MODULE_NAMES: Final
    +EXTRA_EXPORTED: Final
    +alias
    +imports: str
    +imports
    +known_imports
    +undefined_names
    +inferred
    +inferred
    +lines
    +decorators
    +printer
    +is_private
    +top_level
    +self_top_level
    --
    -__init__(_all_, include_private, export_less, include_docstrings)
    +get_sig_generators()
    +refers_to_fullname(name, fullname): bool
    +add_name(fullname, require): str
    +add_import_line(line)
    +get_imports(): str
    +output(): str
    +add(string)
    +is_top_level(): bool
    +indent()
    +dedent()
    +record_name(name)
    +is_recorded_name(name): bool
    +set_defined_names(defined_names)
    +check_undefined_names()
    +get_signatures(default_signature, sig_generators, func_ctx)
    +get_property_type(default_type, sig_generators, func_ctx)
    +format_func_def(sigs, is_coroutine, decorators, docstring)
    +print_annotation(t, known_modules, local_modules): str
    +is_not_in_all(name): bool
    +is_private_name(name, fullname): bool
    +should_reexport(name, full_module, name_is_alias): bool
  }

  class MetadataStore {
    +getmtime(name): float
    +read(name): str
    +write(name, data, mtime): bool
    +remove(name)
    +commit()
    +list_all()
  }

  class FilesystemMetadataStore {
    +path
    +tmp_filename
    +dir
    --
    -__init__(cache_dir_prefix)
    +getmtime(name): float
    +read(name): str
    +write(name, data, mtime): bool
    +remove(name)
    +commit()
    +list_all()
  }

  class SqliteMetadataStore {
    +cur
    +results
    +mtime
    +data
    +mtime
    --
    -__init__(cache_dir_prefix)
    -_query(name, field): Any
    +getmtime(name): float
    +read(name): str
    +write(name, data, mtime): bool
    +remove(name)
    +commit()
    +list_all()
  }

  class TreeFreer {
    +visit_block(block)
  }

  class Context {
    -__init__(line, column)
    +set_line(target, column, end_line, end_column)
  }

  class Node {
    +ans
    +ans
    --
    -__str__(): str
    +str_with_options(options): str
    +accept(visitor): T
  }

  class Statement {
    +accept(visitor): T
  }

  class Expression {
    +accept(visitor): T
  }

  class FakeExpression {
  }

  class SymbolNode {
    +classname
    +method
    --
    +name(): str
    +fullname(): str
    +serialize(): JsonDict
    +{class} deserialize(data): SymbolNode
  }

  class MypyFile {
    -_fullname: str
    +path: str
    +defs
    +alias_deps
    +is_bom: bool
    +names: SymbolTable
    +imports
    +ignored_lines
    +skipped_lines
    +is_stub: bool
    +is_cache_skeleton: bool
    +is_partial_stub_package: bool
    +plugin_deps
    +future_import_flags
    -_is_typeshed_file
    +tree
    --
    -__init__(defs, imports, is_bom, ignored_lines)
    +local_definitions()
    +name(): str
    +fullname(): str
    +accept(visitor): T
    +is_package_init_file(): bool
    +is_future_flag_set(flag): bool
    +is_typeshed_file(options): bool
    +serialize(): JsonDict
    +{class} deserialize(data): MypyFile
  }

  class ImportBase {
    +is_unreachable: bool
    +is_top_level: bool
    +is_mypy_only: bool
    +assignments
    --
    -__init__()
  }

  class Import {
    +ids
    --
    -__init__(ids)
    +accept(visitor): T
  }

  class ImportFrom {
    +id: str
    +relative: int
    +names
    --
    -__init__(id, relative, names)
    +accept(visitor): T
  }

  class ImportAll {
    +id: str
    +relative: int
    --
    -__init__(id, relative)
    +accept(visitor): T
  }

  class FuncBase {
    -__init__()
    +name(): str
    +fullname(): str
  }

  class OverloadedFuncDef {
    +items
    +unanalyzed_items
    +impl
    +res
    +typ
    --
    -__init__(items)
    +name(): str
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): OverloadedFuncDef
  }

  class Argument {
    -__init__(variable, type_annotation, initializer, kind, pos_only)
    +set_line(target, column, end_line, end_column)
  }

  class FuncItem {
    -__init__(arguments, body, typ)
    +max_fixed_argc(): int
    +is_dynamic(): bool
  }

  class FuncDef {
    +body
    +ret
    --
    -__init__(name, arguments, body, typ)
    +name(): str
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): FuncDef
  }

  class Decorator {
    +func: FuncDef
    +decorators
    +original_decorators
    +var: Var
    +is_overload: bool
    +dec
    --
    -__init__(func, decorators, var)
    +name(): str
    +fullname(): str
    +is_final(): bool
    +info(): TypeInfo
    +type()
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): Decorator
  }

  class Var {
    +data: JsonDict
    +name
    +type
    +v
    --
    -__init__(name, type)
    +name(): str
    +fullname(): str
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): Var
  }

  class ClassDef {
    +name: str
    -_fullname: str
    +defs: Block
    +type_vars
    +base_type_exprs
    +removed_base_type_exprs
    +info: TypeInfo
    +metaclass
    +decorators
    +keywords
    +analyzed
    +has_incompatible_baseclass: bool
    +removed_statements
    +res
    --
    -__init__(name, defs, type_vars, base_type_exprs, metaclass, keywords)
    +fullname(): str
    +fullname(v)
    +accept(visitor): T
    +is_generic(): bool
    +serialize(): JsonDict
    +{class} deserialize(data): ClassDef
  }

  class GlobalDecl {
    +names
    --
    -__init__(names)
    +accept(visitor): T
  }

  class NonlocalDecl {
    +names
    --
    -__init__(names)
    +accept(visitor): T
  }

  class Block {
    -__init__(body)
    +accept(visitor): T
  }

  class ExpressionStmt {
    +expr: Expression
    --
    -__init__(expr)
    +accept(visitor): T
  }

  class AssignmentStmt {
    +lvalues
    +rvalue: Expression
    +type
    +unanalyzed_type
    +new_syntax: bool
    +is_alias_def: bool
    +is_final_def: bool
    +invalid_recursive_alias: bool
    --
    -__init__(lvalues, rvalue, type, new_syntax)
    +accept(visitor): T
  }

  class OperatorAssignmentStmt {
    +op: str
    +lvalue: Lvalue
    +rvalue: Expression
    --
    -__init__(op, lvalue, rvalue)
    +accept(visitor): T
  }

  class WhileStmt {
    +expr: Expression
    +body: Block
    +else_body
    --
    -__init__(expr, body, else_body)
    +accept(visitor): T
  }

  class ForStmt {
    +index: Lvalue
    +index_type
    +unanalyzed_index_type
    +inferred_item_type
    +inferred_iterator_type
    +expr: Expression
    +body: Block
    +else_body
    +is_async: bool
    --
    -__init__(index, expr, body, else_body, index_type)
    +accept(visitor): T
  }

  class ReturnStmt {
    +expr
    --
    -__init__(expr)
    +accept(visitor): T
  }

  class AssertStmt {
    +expr: Expression
    +msg
    --
    -__init__(expr, msg)
    +accept(visitor): T
  }

  class DelStmt {
    +expr: Lvalue
    --
    -__init__(expr)
    +accept(visitor): T
  }

  class BreakStmt {
    +accept(visitor): T
  }

  class ContinueStmt {
    +accept(visitor): T
  }

  class PassStmt {
    +accept(visitor): T
  }

  class IfStmt {
    +expr
    +body
    +else_body
    --
    -__init__(expr, body, else_body)
    +accept(visitor): T
  }

  class RaiseStmt {
    +expr
    +from_expr
    --
    -__init__(expr, from_expr)
    +accept(visitor): T
  }

  class TryStmt {
    +body: Block
    +types
    +vars
    +handlers
    +else_body
    +finally_body
    +is_star: bool
    --
    -__init__(body, vars, types, handlers, else_body, finally_body)
    +accept(visitor): T
  }

  class WithStmt {
    +expr
    +target
    +unanalyzed_type
    +analyzed_types
    +body: Block
    +is_async: bool
    --
    -__init__(expr, target, body, target_type)
    +accept(visitor): T
  }

  class MatchStmt {
    +subject: Expression
    +patterns
    +guards
    +bodies
    --
    -__init__(subject, patterns, guards, bodies)
    +accept(visitor): T
  }

  class IntExpr {
    +value: int
    --
    -__init__(value)
    +accept(visitor): T
  }

  class StrExpr {
    +value: str
    --
    -__init__(value)
    +accept(visitor): T
  }

  class BytesExpr {
    +value: str
    --
    -__init__(value)
    +accept(visitor): T
  }

  class FloatExpr {
    +value: float
    --
    -__init__(value)
    +accept(visitor): T
  }

  class ComplexExpr {
    +value: complex
    --
    -__init__(value)
    +accept(visitor): T
  }

  class EllipsisExpr {
    +accept(visitor): T
  }

  class StarExpr {
    +expr: Expression
    +valid: bool
    --
    -__init__(expr)
    +accept(visitor): T
  }

  class RefExpr {
    -__init__()
    +fullname(): str
    +fullname(v)
  }

  class NameExpr {
    -__init__(name)
    +accept(visitor): T
    +serialize(): JsonDict
  }

  class MemberExpr {
    -__init__(expr, name)
    +accept(visitor): T
  }

  class ArgKind {
    +ARG_POS: int
    +ARG_OPT: int
    +ARG_STAR: int
    +ARG_NAMED: int
    +ARG_STAR2: int
    +ARG_NAMED_OPT: int
    --
    +is_positional(star): bool
    +is_named(star): bool
    +is_required(): bool
    +is_optional(): bool
    +is_star(): bool
  }

  class CallExpr {
    +arg_names
    --
    -__init__(callee, args, arg_kinds, arg_names, analyzed)
    +accept(visitor): T
  }

  class YieldFromExpr {
    +expr: Expression
    --
    -__init__(expr)
    +accept(visitor): T
  }

  class YieldExpr {
    +expr
    --
    -__init__(expr)
    +accept(visitor): T
  }

  class IndexExpr {
    +base: Expression
    +index: Expression
    +method_type
    +analyzed
    --
    -__init__(base, index)
    +accept(visitor): T
  }

  class UnaryExpr {
    +op: str
    +expr: Expression
    +method_type
    --
    -__init__(op, expr)
    +accept(visitor): T
  }

  class AssignmentExpr {
    -__init__(target, value)
    +accept(visitor): T
  }

  class OpExpr {
    +op: str
    +left: Expression
    +right: Expression
    +method_type
    +right_always: bool
    +right_unreachable: bool
    +analyzed
    --
    -__init__(op, left, right, analyzed)
    +accept(visitor): T
  }

  class ComparisonExpr {
    +operators
    +operands
    +method_types
    --
    -__init__(operators, operands)
    +pairwise()
    +accept(visitor): T
  }

  class SliceExpr {
    +begin_index
    +end_index
    +stride
    --
    -__init__(begin_index, end_index, stride)
    +accept(visitor): T
  }

  class CastExpr {
    +expr: Expression
    +type: mypy.types.Type
    --
    -__init__(expr, typ)
    +accept(visitor): T
  }

  class AssertTypeExpr {
    +expr: Expression
    +type: mypy.types.Type
    --
    -__init__(expr, typ)
    +accept(visitor): T
  }

  class RevealExpr {
    +expr
    +kind: int
    +local_nodes
    --
    -__init__(kind, expr, local_nodes, is_imported)
    +accept(visitor): T
  }

  class SuperExpr {
    +name: str
    +info
    +call: CallExpr
    --
    -__init__(name, call)
    +accept(visitor): T
  }

  class LambdaExpr {
    +ret
    +expr
    --
    +name(): str
    +expr(): Expression
    +accept(visitor): T
    +is_dynamic(): bool
  }

  class ListExpr {
    +items
    --
    -__init__(items)
    +accept(visitor): T
  }

  class DictExpr {
    +items
    --
    -__init__(items)
    +accept(visitor): T
  }

  class TupleExpr {
    +items
    --
    -__init__(items)
    +accept(visitor): T
  }

  class SetExpr {
    +items
    --
    -__init__(items)
    +accept(visitor): T
  }

  class GeneratorExpr {
    +left_expr: Expression
    +sequences
    +condlists
    +is_async
    +indices
    --
    -__init__(left_expr, indices, sequences, condlists, is_async)
    +accept(visitor): T
  }

  class ListComprehension {
    +generator: GeneratorExpr
    --
    -__init__(generator)
    +accept(visitor): T
  }

  class SetComprehension {
    +generator: GeneratorExpr
    --
    -__init__(generator)
    +accept(visitor): T
  }

  class DictionaryComprehension {
    +key: Expression
    +value: Expression
    +sequences
    +condlists
    +is_async
    +indices
    --
    -__init__(key, value, indices, sequences, condlists, is_async)
    +accept(visitor): T
  }

  class ConditionalExpr {
    +cond: Expression
    +if_expr: Expression
    +else_expr: Expression
    --
    -__init__(cond, if_expr, else_expr)
    +accept(visitor): T
  }

  class TypeApplication {
    +expr: Expression
    +types
    --
    -__init__(expr, types)
    +accept(visitor): T
  }

  class TypeVarLikeExpr {
    -_name: str
    -_fullname: str
    +upper_bound: mypy.types.Type
    +default: mypy.types.Type
    +variance: int
    --
    -__init__(name, fullname, upper_bound, default, variance)
    +name(): str
    +fullname(): str
  }

  class TypeVarExpr {
    +values
    --
    -__init__(name, fullname, values, upper_bound, default, variance)
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): TypeVarExpr
  }

  class ParamSpecExpr {
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): ParamSpecExpr
  }

  class TypeVarTupleExpr {
    +tuple_fallback: mypy.types.Instance
    --
    -__init__(name, fullname, upper_bound, tuple_fallback, default, variance)
    +accept(visitor): T
    +serialize(): JsonDict
    +{class} deserialize(data): TypeVarTupleExpr
  }

  class TypeAliasExpr {
    +node: TypeAlias
    --
    -__init__(node)
    +accept(visitor): T
  }

  class NamedTupleExpr {
    +info: TypeInfo
    +is_typed: bool
    --
    -__init__(info, is_typed)
    +accept(visitor): T
  }

  class TypedDictExpr {
    +info: TypeInfo
    --
    -__init__(info)
    +accept(visitor): T
  }

  class EnumCallExpr {
    +info: TypeInfo
    +items
    +values
    --
    -__init__(info, items, values)
    +accept(visitor): T
  }

  class PromoteExpr {
    +type: mypy.types.ProperType
    --
    -__init__(type)
    +accept(visitor): T
  }

  class NewTypeExpr {
    +name: str
    +old_type
    +info
    --
    -__init__(name, old_type, line, column)
    +accept(visitor): T
  }

  class AwaitExpr {
    +expr: Expression
    --
    -__init__(expr)
    +accept(visitor): T
  }

  class TempNode {
    +type: mypy.types.Type
    +no_rhs: bool
    --
    -__init__(typ, no_rhs)
    -__repr__(): str
    +accept(visitor): T
  }

  class TypeInfo {
    -_fullname: str
    +module_name: str
    +defn: ClassDef
    +mro
    -_mro_refs
    +bad_mro: bool
    +is_final: bool
    +declared_metaclass
    +metaclass_type
    +names: SymbolTable
    +is_abstract: bool
    +is_protocol: bool
    +runtime_protocol: bool
    +abstract_attributes
    +deletable_attributes
    +slots
    +assuming
    +assuming_proper
    +inferring
    +is_enum: bool
    +fallback_to_any: bool
    +meta_fallback_to_any: bool
    +type_vars
    +has_param_spec_type: bool
    +bases
    -_promote
    +alt_promote
    +tuple_type
    +is_named_tuple: bool
    +typeddict_type
    +is_newtype: bool
    +is_intersection: bool
    +metadata
    +special_alias
    +self_type
    +dataclass_transform_spec
    +FLAGS: Final
    +n
    +members
    +n
    +node
    +declared
    +candidates
    +alias
    +alias
    +options
    +base: str
    +head
    +base
    +mro
    +names
    +description
    +node
    +items
    +data
    +names
    +defn
    +module_name
    +ti
    +t
    +st
    --
    -__init__(names, defn, module_name)
    +add_type_vars()
    +name(): str
    +fullname(): str
    +is_generic(): bool
    +get(name)
    +get_containing_type_info(name)
    +protocol_members()
    -__getitem__(name): SymbolTableNode
    -__repr__(): str
    -__bool__(): bool
    +has_readable_member(name): bool
    +get_method(name)
    +calculate_metaclass_type()
    +is_metaclass(): bool
    +has_base(fullname): bool
    +direct_base_classes()
    +update_tuple_type(typ)
    +update_typeddict_type(typ)
    -__str__(): str
    +dump(str_conv, type_str_conv): str
    +type_str(): str
    +serialize(): JsonDict
    +{class} deserialize(data): TypeInfo
  }

  class FakeInfo {
    -__init__(msg)
    -__getattribute__(attr): type
  }

  class TypeAlias {
    +alias_tvars
    +data: JsonDict
    +fullname
    +alias_tvars
    +target
    +no_args
    +normalized
    +line
    +column
    --
    -__init__(target, fullname, line, column)
    +{class} from_tuple_type(info): TypeAlias
    +{class} from_typeddict_type(info): TypeAlias
    +name(): str
    +fullname(): str
    +has_param_spec_type(): bool
    +serialize(): JsonDict
    +accept(visitor): T
    +{class} deserialize(data): TypeAlias
  }

  class PlaceholderNode {
    -__init__(fullname, node, line)
    +name(): str
    +fullname(): str
    +serialize(): JsonDict
    +accept(visitor): T
  }

  class SymbolTableNode {
    +node
    +new
    +s
    +data: JsonDict
    +fullname
    +kind
    +stnode
    +node
    +stnode
    --
    -__init__(kind, node, module_public, implicit, module_hidden)
    +fullname()
    +type()
    +copy(): SymbolTableNode
    -__str__(): str
    +serialize(prefix, name): JsonDict
    +{class} deserialize(data): SymbolTableNode
  }

  class SymbolTable {
    +a
    +a
    +data: JsonDict
    +st
    --
    -__str__(): str
    +copy(): SymbolTable
    +serialize(fullname): JsonDict
    +{class} deserialize(data): SymbolTable
  }

  class DataclassTransformSpec {
    -__init__()
    +serialize(): JsonDict
    +{class} deserialize(data): DataclassTransformSpec
  }

  class AugmentedHelpFormatter {
    -__init__(prog)
    -_fill_text(text, width, indent): str
  }

  class PythonExecutableInferenceError {
  }

  class CapturableArgumentParser {
    +file
    +file
    +file
    +args
    --
    -__init__()
    +print_usage(file)
    +print_help(file)
    -_print_message(message, file)
    +exit(status, message): NoReturn
    +error(message): NoReturn
  }

  class CapturableVersionAction {
    +formatter
    --
    -__init__(option_strings, version, dest, default, help, stdout)
    -__call__(parser, namespace, values, option_string): NoReturn
  }

  class TooManyUnions {
  }

  class Finished {
  }

  class UseReverse {
    +DEFAULT: int
    +ALWAYS: int
    +NEVER: int
  }

  class ExpressionChecker {
    +chk: mypy.checker.TypeChecker
    +msg: MessageBuilder
    +type_context
    +resolved_type
    +strfrm_checker: StringFormatterChecker
    +plugin: Plugin
    +result
    +result
    +node
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +var_type
    +result
    +result
    +module_attrs
    +immutable
    +typ
    +typeddict_callable
    +typeddict_type
    +node: NoneType
    +node
    +type_context: NoneType
    +formal_to_actual
    +arg_types
    +type_context
    +callee_type
    +object_type: NoneType
    +member: NoneType
    +fullname: NoneType
    +fullname
    +target
    +fullname
    +member
    +object_type
    +fullname
    +ret_type
    +ret_type
    +ret_type
    +format_value: NoneType
    +format_value
    +base_typ
    +format_value
    +object_type
    +object_type
    +object_type
    +type_name: NoneType
    +type_name
    +info
    +type_name
    +type_name
    +typ
    +info
    +ret_type
    +info
    +sym
    +typ
    +sym
    +tp
    +tp
    +attr_members
    +kwargs
    +result
    +unique_arg
    +result
    +always_present_keys
    +last_star_found: NoneType
    +key_type
    +values
    +literal_value: NoneType
    +literal_value
    +key_context
    +last_star_found: item_arg
    +absent_keys
    +inferred
    +possible_tds
    +possible_tds
    +all_keys
    +arg
    +first
    +mapped
    +result
    +result
    +target
    +expected_types
    +kinds
    +names
    +actual_keys
    +orig_callee
    +infer_callee: orig_callee
    +infer_callee
    +infer_callee
    +ret_type
    +ret_type: callee
    +item_values
    +info
    +sym
    +item_args
    +container_args
    +callee
    +ret
    +typ
    +base
    +index
    +ret
    +partial_type
    +value_type
    +key_type
    +typename
    +var
    +var
    +partial_types
    +partial_type
    +typename
    +typename
    +item_type
    +arg_type
    +arg_typename
    +num_formals
    +formal_arg_types
    +formal_arg_exprs
    +formal_arg_names
    +formal_arg_kinds
    +callback
    +method_callback
    +object_type
    +num_formals
    +formal_to_actual
    +formal_arg_exprs
    +items
    +adjusted
    +pobject_type
    +callee
    +method_sig_hook
    +function_sig_hook
    +arg_type
    +result
    +inferred_args
    +arg
    +p_item_result
    +p_inferred_arg
    +callable_name
    +object_type
    +callee_type
    +proper_callee
    +res
    +item
    +narrowed
    +callable_name
    +item_object_type
    +callee
    +overloaded
    +overloaded_result
    +call_function
    +callable_name
    +call_function
    +result
    +item
    +callee
    +callable_name
    +ret_type
    +callable_name
    +type
    +abstract_attributes
    +var_arg
    +seen_unpack: bool
    +arg_type
    +seen_unpack: bool
    +formal_to_actual
    +ret_type
    +fresh_ret_type
    +callee
    +need_refresh
    +callee
    +callee
    +formal_to_actual
    +callee
    +formal_to_actual
    +param_spec
    +arg1
    +arg2
    +arg_types
    +callee
    +new_ret_type
    +callee
    +symnode
    +node
    +node
    +node
    +res
    +res
    +expanded
    +expanded
    +callee
    +callee
    +callee
    +callee
    +res
    +arg_type
    +old
    +res
    +arg_type
    +old
    +ctx
    +erased_ctx
    +ret_type
    +ret_type
    +erased_ctx
    +args
    +new_args
    +arg_types
    +arg_pass_nums
    +pass1_args
    +first_arg
    +formal_to_actual
    +poly_callee_type
    +applied
    +unknown
    +inferred_args
    +inferred_args
    +inferred_args
    +callee_type
    +formal_to_actual
    +arg_types
    +res
    +skip_param_spec: bool
    +p_formal
    +p_actual
    +call_method
    +p_actual
    +skip_param_spec: bool
    +inferred_args
    +context
    +all_actuals
    +argname
    +ok: bool
    +ok: bool
    +ok: bool
    +is_unexpected_arg_error: bool
    +ok: bool
    +ok: bool
    +act_name
    +act_type
    +is_unexpected_arg_error: bool
    +actual_type
    +is_unexpected_arg_error: bool
    +ok: bool
    +node
    +check_arg
    +mapper
    +orig_callee_arg_type
    +expanded_tuple: bool
    +actual_kinds
    +p_actual_type
    +actual_types
    +p_callee_type
    +callee_arg_types
    +callee_arg_kinds
    +expanded_tuple: bool
    +actual_types
    +unpacked_type
    +inner_unpack_index
    +callee_arg_types
    +callee_arg_kinds
    +inner_unpack
    +inner_unpacked_type
    +callee_arg_types
    +callee_arg_kinds
    +callee_arg_types
    +callee_arg_kinds
    +callee_arg_types
    +callee_arg_kinds
    +callee_arg_types
    +callee_arg_kinds
    +callee_arg_types
    +callee_arg_kinds
    +is_mapping
    +expanded_actual
    +caller_type
    +original_caller_type
    +callee_type
    +code
    +callee
    +arg_types
    +plausible_targets
    +erased_targets
    +unioned_result
    +none_type_var_overlap
    +union_interrupted: bool
    +unioned_return
    +union_interrupted: bool
    +unioned_result
    +inferred_result
    +erased_targets
    +target: Type
    +target
    +code: NoneType
    +code
    +result
    +typ
    +matches
    +star_matches
    +args_have_var_arg: bool
    +args_have_kw_arg: bool
    +args_have_var_arg: bool
    +args_have_kw_arg: bool
    +formal_to_actual
    +matches
    +return_types
    +inferred_types
    +args_contain_any
    +type_maps
    +is_match
    +p_infer_type
    +matches
    +has_optional_arg: bool
    +has_optional_arg: bool
    +min_prefix
    +res
    +direct
    +first_union
    +res_items
    +new_arg_types
    +sub_result
    +seen
    +result
    +typ
    +callables
    +new_args
    +new_kinds
    +new_returns
    +too_complex: bool
    +too_complex: bool
    +too_complex: bool
    +union_return
    +any
    +final_args
    +new_type
    +formal_to_actual
    +callee
    +results
    +result
    +original_type
    +base
    +module_symbol_table: NoneType
    +module_symbol_table
    +is_self
    +is_self: bool
    +member_type
    +typ
    +left_type
    +proper_left_type
    +left_add_method
    +proper_right_type
    +right_radd_method
    +right_radd_method
    +item_type
    +mapped
    +use_reverse: UseReverse
    +proper_right_type
    +use_reverse: USE_REVERSE_ALWAYS
    +proper_right_type
    +use_reverse: USE_REVERSE_NEVER
    +proper_right_type
    +method
    +result
    +sub_result: Type
    +left_type
    +right_type
    +right_type
    +right_type
    +item_types
    +item_types
    +sub_result
    +container_types
    +iterable_types
    +failed_out: bool
    +encountered_partial_type: bool
    +cont_type
    +encountered_partial_type: bool
    +failed_out: bool
    +method_type
    +failed_out: bool
    +iterable_type
    +container_type
    +method
    +right_type
    +left_type
    +right_type
    +right_type
    +sub_result
    +left_type
    +right_type
    +result: sub_result
    +result
    +result
    +seen_types
    +left
    +right
    +left
    +right
    +left_name
    +right_name
    +abstract_set
    +left
    +right
    +abstract_map
    +left
    +right
    +original_type
    +base_type
    +method_type
    +res
    +meth_res
    +callable_name
    +object_type
    +method_type
    +member
    +left_type
    +right_type
    +any_type
    +any_type
    +rev_op_name
    +left_op
    +right_op
    +variants_raw
    +variants_raw
    +variants_raw
    +variants
    +errors
    +results
    +result
    +any_type
    +result
    +error_any
    +result
    +left_variants
    +base_type
    +left_variants
    +right_type
    +all_results
    +all_inferred
    +results_final
    +inferred_final
    +right_variants
    +right_type
    +right_variants
    +all_results
    +all_inferred
    +err
    +recent_context
    +results_final
    +inferred_final
    +ctx
    +left_type
    +expanded_left_type
    +left_map: mypy.checker.TypeMap
    +right_map: mypy.checker.TypeMap
    +right_type
    +restricted_left_type
    +result_is_left
    +restricted_left_type
    +result_is_left
    +right_type
    +left_type
    +left_type
    +value
    +operand_type
    +op
    +result: Type
    +method
    +result
    +result
    +p_result
    +result
    +left_type
    +index
    +left_type
    +left_type
    +original_type
    +ns
    +out
    +item
    +min_len
    +unpack_index
    +unpack
    +unpack_index
    +unpack
    +unpacked
    +bound
    +middle
    +middle
    +extra_items
    +begin
    +end
    +stride
    +begin_raw
    +begin: begin_raw
    +end_raw
    +end: end_raw
    +stride_raw
    +stride: stride_raw
    +items
    +item
    +operand
    +typ
    +typ
    +out
    +union
    +items
    +unpacked_type
    +unpacked_type
    +key_names
    +typ
    +key_types
    +key_types
    +key_names
    +key_type
    +value_types
    +value_type
    +string_type: Type
    +source_type
    +target_type
    +options
    +source_type
    +target_type
    +proper_source_type
    +source_type
    +revealed_type
    +names_to_types
    +name: str
    +name: str
    +name: str
    +module
    +hint
    +item
    +item
    +tp
    +tp
    +tp
    +disallow_any
    +item
    +tp
    +vars
    +args
    +info
    +fake
    +args
    +prefix
    +suffix
    +tvt
    +tp
    +ctx
    +rt
    +values
    +vt
    +ct
    +t
    +tv
    +constructor
    +out
    +ctx_unpack_index
    +expr_star_index
    +type_context
    +type_context_items: NoneType
    +tuples_in_context
    +type_context
    +type_context_items
    +type_context_items
    +unpack_in_context: bool
    +unpack_in_context
    +seen_unpack_in_items: bool
    +allow_precise_tuples
    +items
    +j: int
    +item
    +ctx_item
    +ctx
    +ctx: NoneType
    +tt
    +tt
    +seen_unpack_in_items: bool
    +item_type
    +mapped
    +seen_unpack_in_items: bool
    +tt
    +tt
    +fallback_item
    +result: ProperType
    +result
    +ctx
    +rt
    +keys
    +values
    +stargs
    +st
    +stargs
    +kt
    +vt
    +dt
    +orig_ret_type
    +ret_type
    +typeddict_contexts
    +ret_type
    +dt
    +kt
    +vt
    +args
    +expected_types
    +tup
    +constructor
    +context
    +items
    +item_contexts
    +ret_type
    +fallback
    +ret_type
    +ctx
    +callables
    +ctx
    +extra_vars
    +meta_vars
    +callable_ctx
    +erased_ctx
    +callable_ctx: erased_ctx
    +callable_ctx
    +arg_kinds
    +callable_ctx
    +types
    +type_info
    +instance_info
    +mro
    +index: NoneType
    +index
    +method
    +mro
    +index
    +index
    +current_type
    +type_type: ProperType
    +method
    +instance_type: Type
    +type_type
    +instance_type
    +type_type
    +type_item
    +type_type
    +instance_type
    +instance_type
    +instance_item
    +instance_type
    +supports_index
    +supports_index
    +expected
    +t
    +typ: str
    +additional_args
    +typ: str
    +additional_args
    +additional_args
    +tv
    +tv_list
    +constructor
    +ktdef
    +vtdef
    +constructor
    +ctx
    +if_type
    +if_type_fallback
    +full_context_else_type
    +else_type: full_context_else_type
    +else_type_fallback
    +if_type
    +else_type: full_context_else_type
    +else_type
    +res: Type
    +res
    +record_time: bool
    +t0
    +record_time: bool
    +old_is_callee
    +typ
    +typ
    +typ
    +typ
    +typ
    +result: Type
    +result: typ
    +typ
    +typ
    +typ
    +typ
    +typ
    +result
    +item
    +item
    +item
    +return_type
    +expected_item_type
    +actual_item_type
    +expected_type
    +expected_type
    +actual_type
    +ret
    +generator
    +ret_type
    +ret_type
    +return_type
    +subexpr_type
    +iter_type: Type
    +any_type
    +generic_generator_type
    +iter_type
    +iter_type
    +expected_item_type
    +actual_item_type
    +iter_type
    +expr_type
    +actual_item_type
    +expr_type
    +expr_type
    +p_default
    +tuple_type
    +typ
    +var
    +restriction
    --
    -__init__(chk, msg, plugin, per_line_checking_time_ns)
    +reset()
    +visit_name_expr(e): Type
    +analyze_ref_expr(e, lvalue): Type
    +analyze_var_ref(var, context): Type
    +module_type(node): Instance
    +visit_call_expr(e, allow_none_return): Type
    +refers_to_typeddict(base): bool
    +visit_call_expr_inner(e, allow_none_return): Type
    +check_str_format_call(e)
    +method_fullname(object_type, method_name)
    +always_returns_none(node): bool
    +defn_returns_none(defn): bool
    +check_runtime_protocol_test(e)
    +check_protocol_issubclass(e)
    +check_typeddict_call(callee, arg_kinds, arg_names, args, context, orig_callee): Type
    +validate_typeddict_kwargs(kwargs, callee)
    +validate_star_typeddict_item(item_arg, callee, result, always_present_keys): bool
    +valid_unpack_fallback_item(typ): bool
    +match_typeddict_call_with_dict(callee, kwargs, context): bool
    +check_typeddict_call_with_dict(callee, kwargs, context, orig_callee): Type
    +typeddict_callable(info): CallableType
    +typeddict_callable_from_context(callee): CallableType
    +check_typeddict_call_with_kwargs(callee, kwargs, context, orig_callee, always_present_keys): Type
    +get_partial_self_var(expr)
    +try_infer_partial_type(e)
    +get_partial_var(ref)
    +try_infer_partial_value_type_from_call(e, methodname, var)
    +apply_function_plugin(callee, arg_kinds, arg_types, arg_names, formal_to_actual, args, fullname, object_type, context): Type
    +apply_signature_hook(callee, args, arg_kinds, arg_names, hook): FunctionLike
    +apply_function_signature_hook(callee, args, arg_kinds, context, arg_names, signature_hook): FunctionLike
    +apply_method_signature_hook(callee, args, arg_kinds, context, arg_names, object_type, signature_hook): FunctionLike
    +transform_callee_type(callable_name, callee, args, arg_kinds, context, arg_names, object_type): Type
    +is_generic_decorator_overload_call(callee_type, args)
    +handle_decorator_overload_call(callee_type, overloaded, ctx)
    +check_call_expr_with_callee_type(callee_type, e, callable_name, object_type, member): Type
    +check_union_call_expr(e, object_type, member): Type
    +check_call(callee, args, arg_kinds, context, arg_names, callable_node, callable_name, object_type, original_type)
    +check_callable_call(callee, args, arg_kinds, context, arg_names, callable_node, callable_name, object_type)
    +can_return_none(type, attr_name): bool
    +analyze_type_type_callee(item, context): Type
    +infer_arg_types_in_empty_context(args)
    +infer_more_unions_for_recursive_type(type_context): bool
    +infer_arg_types_in_context(callee, args, arg_kinds, formal_to_actual)
    +infer_function_type_arguments_using_context(callable, error_context): CallableType
    +infer_function_type_arguments(callee_type, args, arg_kinds, arg_names, formal_to_actual, need_refresh, context): CallableType
    +infer_function_type_arguments_pass2(callee_type, args, arg_kinds, arg_names, formal_to_actual, old_inferred_args, need_refresh, context)
    +argument_infer_context(): ArgumentInferContext
    +get_arg_infer_passes(callee, args, arg_types, formal_to_actual, num_actuals)
    +apply_inferred_arguments(callee_type, inferred_args, context): CallableType
    +check_argument_count(callee, actual_types, actual_kinds, actual_names, formal_to_actual, context, object_type, callable_name): bool
    +check_for_extra_actual_arguments(callee, actual_types, actual_kinds, actual_names, all_actuals, context)
    +missing_classvar_callable_note(object_type, callable_name, context)
    +check_argument_types(arg_types, arg_kinds, args, callee, formal_to_actual, context, check_arg, object_type)
    +check_arg(caller_type, original_caller_type, caller_kind, callee_type, n, m, callee, object_type, context, outer_context)
    +check_overload_call(callee, args, arg_kinds, arg_names, callable_name, object_type, context)
    +plausible_overload_call_targets(arg_types, arg_kinds, arg_names, overload)
    +has_shape(): bool
    +infer_overload_return_type(plausible_targets, args, arg_types, arg_kinds, arg_names, callable_name, object_type, context)
    +overload_erased_call_targets(plausible_targets, arg_types, arg_kinds, arg_names, args, context)
    +possible_none_type_var_overlap(arg_types, plausible_targets): bool
    +union_overload_result(plausible_targets, args, arg_types, arg_kinds, arg_names, callable_name, object_type, none_type_var_overlap, context, level)
    +real_union(typ): bool
    +type_overrides_set(exprs, overrides)
    +combine_function_signatures(types)
    +erased_signature_similarity(arg_types, arg_kinds, arg_names, args, callee, context): bool
    +check_arg(original_ccaller_type, caller_kind, callee_type, n, m, callee, object_type, context, outer_context)
    +apply_generic_arguments(callable, types, context, skip_unsatisfied): CallableType
    +check_any_type_call(args, callee)
    +check_union_call(callee, args, arg_kinds, arg_names, context)
    +visit_member_expr(e, is_lvalue): Type
    +analyze_ordinary_member_access(e, is_lvalue): Type
    +analyze_external_member_access(member, base_type, context): Type
    +is_literal_context(): bool
    +infer_literal_expr_type(value, fallback_name): Type
    +concat_tuples(left, right): TupleType
    +visit_int_expr(e): Type
    +visit_str_expr(e): Type
    +visit_bytes_expr(e): Type
    +visit_float_expr(e): Type
    +visit_complex_expr(e): Type
    +visit_ellipsis(e): Type
    +visit_op_expr(e): Type
    +visit_comparison_expr(e): Type
    +find_partial_type_ref_fast_path(expr)
    +dangerous_comparison(left, right): bool
    +check_method_call_by_name(method, base_type, args, arg_kinds, context, original_type)
    +check_union_method_call_by_name(method, base_type, args, arg_kinds, context, original_type)
    +check_method_call(method_name, base_type, method_type, args, arg_kinds, context)
    +check_op_reversible(op_name, left_type, left_expr, right_type, right_expr, context)
    +lookup_operator(base_type)
    +lookup_definer(attr_name)
    +check_op(method, base_type, arg, context, allow_reverse)
    +check_boolean_op(e, context): Type
    +check_list_multiply(e): Type
    +visit_assignment_expr(e): Type
    +visit_unary_expr(e): Type
    +visit_index_expr(e): Type
    +visit_index_expr_helper(e): Type
    +visit_index_with_type(left_type, e, original_type): Type
    +min_tuple_length(left): int
    +visit_tuple_index_helper(left, n)
    +visit_tuple_slice_helper(left_type, slic): Type
    +try_getting_int_literals(index)
    +nonliteral_tuple_index_helper(left_type, index): Type
    +union_tuple_fallback_item(left_type): Type
    +visit_typeddict_index_expr(td_type, index, setitem): Type
    +visit_enum_index_expr(enum_type, index, context): Type
    +visit_cast_expr(expr): Type
    +visit_assert_type_expr(expr): Type
    +visit_reveal_expr(expr): Type
    +check_reveal_imported(expr)
    +visit_type_application(tapp): Type
    +visit_type_alias_expr(alias): Type
    +alias_type_in_runtime_context(alias): Type
    +split_for_callable(t, args, ctx)
    +apply_type_arguments_to_callable(tp, args, ctx): Type
    +visit_list_expr(e): Type
    +visit_set_expr(e): Type
    +fast_container_type(e, container_fullname)
    +check_lst_expr(e, fullname, tag): Type
    +tuple_context_matches(expr, ctx): bool
    +visit_tuple_expr(e): Type
    +fast_dict_type(e)
    +check_typeddict_literal_in_context(e, typeddict_context): Type
    +visit_dict_expr(e): Type
    +find_typeddict_context(context, dict_expr)
    +visit_lambda_expr(e): Type
    +infer_lambda_type_using_context(e)
    +visit_super_expr(e): Type
    -_super_arg_types(e)
    +visit_slice_expr(e): Type
    +visit_list_comprehension(e): Type
    +visit_set_comprehension(e): Type
    +visit_generator_expr(e): Type
    +check_generator_or_comprehension(gen, type_name, id_for_messages, additional_args): Type
    +visit_dictionary_comprehension(e): Type
    +check_for_comp(e)
    +visit_conditional_expr(e, allow_none_return): Type
    +analyze_cond_branch(map, node, context, allow_none_return): Type
    +accept(node, type_context, allow_none_return, always_allow_any, is_callee): Type
    +named_type(name): Instance
    +is_valid_var_arg(typ): bool
    +is_valid_keyword_var_arg(typ): bool
    +has_member(typ, member): bool
    +not_ready_callback(name, context)
    +visit_yield_expr(e): Type
    +visit_await_expr(e, allow_none_return): Type
    +check_awaitable_expr(t, ctx, msg, ignore_binder): Type
    +visit_yield_from_expr(e, allow_none_return): Type
    +visit_temp_node(e): Type
    +visit_type_var_expr(e): Type
    +visit_paramspec_expr(e): Type
    +visit_type_var_tuple_expr(e): Type
    +visit_newtype_expr(e): Type
    +visit_namedtuple_expr(e): Type
    +visit_enum_call_expr(e): Type
    +visit_typeddict_expr(e): Type
    +visit__promote_expr(e): Type
    +visit_star_expr(e): Type
    +object_type(): Instance
    +bool_type(): Instance
    +narrow_type_from_binder(expr, known_type): Type
    +narrow_type_from_binder(expr, known_type, skip_non_overlapping)
    +narrow_type_from_binder(expr, known_type, skip_non_overlapping)
    +has_abstract_type_part(caller_type, callee_type): bool
    +has_abstract_type(caller_type, callee_type): bool
  }

  class HasAnyType {
    +default
    +default
    +default
    --
    -__init__(ignore_in_type_obj)
    +visit_any(t): bool
    +visit_callable_type(t): bool
    +visit_type_var(t): bool
    +visit_param_spec(t): bool
    +visit_type_var_tuple(t): bool
  }

  class PolyTranslationError {
  }

  class PolyTranslator {
    +found_vars
    +normalized: TypeVarLikeType
    +normalized: tv
    +found_vars
    +result
    +param_spec_index
    +p
    +found_vars
    +new_args
    +repl
    +call
    --
    -__init__(poly_tvars, bound_tvars, seen_aliases)
    +collect_vars(t)
    +visit_callable_type(t): Type
    +visit_type_var(t): Type
    +visit_param_spec(t): Type
    +visit_type_var_tuple(t): Type
    +visit_type_alias_type(t): Type
    +visit_instance(t): Type
  }

  class ArgInferSecondPassQuery {
    -__init__()
    +visit_callable_type(t): bool
  }

  class HasTypeVarQuery {
    -__init__()
    +visit_type_var(t): bool
    +visit_param_spec(t): bool
    +visit_type_var_tuple(t): bool
  }

  class HasErasedComponentsQuery {
    -__init__()
    +visit_erased_type(t): bool
  }

  class HasUninhabitedComponentsQuery {
    -__init__()
    +visit_uninhabited_type(t): bool
  }

  class SemanticAnalyzerCoreInterface {
    +lookup_qualified(name, ctx, suppress_errors)
    +lookup_fully_qualified(name): SymbolTableNode
    +lookup_fully_qualified_or_none(name)
    +fail(msg, ctx, serious)
    +note(msg, ctx)
    +incomplete_feature_enabled(feature, ctx): bool
    +record_incomplete_ref()
    +defer(debug_context, force_progress)
    +is_incomplete_namespace(fullname): bool
    +final_iteration(): bool
    +is_future_flag_set(flag): bool
    +is_stub_file(): bool
    +is_func_scope(): bool
    +type()
  }

  class SemanticAnalyzerInterface {
    +tvar_scope: TypeVarLikeScope
    --
    +lookup(name, ctx, suppress_errors)
    +named_type(fullname, args): Instance
    +named_type_or_none(fullname, args)
    +accept(node)
    +anal_type(t)
    +get_and_bind_all_tvars(type_exprs)
    +basic_new_typeinfo(name, basetype_or_fallback, line): TypeInfo
    +schedule_patch(priority, fn)
    +add_symbol_table_node(name, stnode): bool
    +current_symbol_table(): SymbolTable
    +add_symbol(name, node, context, module_public, module_hidden, can_defer): bool
    +add_symbol_skip_local(name, node)
    +parse_bool(expr)
    +qualified_name(n): str
    +is_typeshed_stub_file(): bool
    +process_placeholder(name, kind, ctx, force_progress)
  }

  class _NamedTypeCallback {
    -__call__(fully_qualified_name, args): Instance
  }

  class HasPlaceholders {
    -__init__()
    +visit_placeholder_type(t): bool
  }

  class TypeState {
    -_subtype_caches
    -_negative_subtype_caches
    +proto_deps
    -_attempted_protocols
    -_checked_against_members
    -_rechecked_types
    -_assuming
    -_assuming_proper
    +inferring
    +infer_unions: bool
    +infer_polymorphic: bool
    +info
    +cache
    +subcache
    +info
    +cache
    +subcache
    +cache
    +cache
    +subcache
    +deps
    +trigger
    +trigger
    +new_deps
    --
    -__init__()
    +is_assumed_subtype(left, right): bool
    +is_assumed_proper_subtype(left, right): bool
    +get_assumptions(is_proper)
    +reset_all_subtype_caches()
    +reset_subtype_caches_for(info)
    +reset_all_subtype_caches_for(info)
    +is_cached_subtype_check(kind, left, right): bool
    +is_cached_negative_subtype_check(kind, left, right): bool
    +record_subtype_cache_entry(kind, left, right)
    +record_negative_subtype_cache_entry(kind, left, right)
    +reset_protocol_deps()
    +record_protocol_subtype_check(left_type, right_type)
    -_snapshot_protocol_deps()
    +update_protocol_deps(second_map)
    +add_all_protocol_deps(deps)
  }

  class StrConv {
    +tag
    +args
    +extra
    +kind: mypy.nodes.ArgKind
    +a
    +a
    +a
    +a
    +a
    +arg_kinds
    +a: Any
    +a
    +lst: str
    +lst: str
    +a
    +a
    +a
    +a
    +a
    +a
    +a
    +a
    +a
    +s
    +pretty
    +n: name
    +id
    +id: str
    +pretty
    +args
    +extra
    +a
    +a
    +a
    +a
    +a
    +condlists
    +condlists
    +a
    +a
    +a
    --
    -__init__()
    +stringify_type(t): str
    +get_id(o)
    +format_id(o): str
    +dump(nodes, obj): str
    +func_helper(o)
    +visit_mypy_file(o): str
    +visit_import(o): str
    +visit_import_from(o): str
    +visit_import_all(o): str
    +visit_func_def(o): str
    +visit_overloaded_func_def(o): str
    +visit_class_def(o): str
    +visit_var(o): str
    +visit_global_decl(o): str
    +visit_nonlocal_decl(o): str
    +visit_decorator(o): str
    +visit_block(o): str
    +visit_expression_stmt(o): str
    +visit_assignment_stmt(o): str
    +visit_operator_assignment_stmt(o): str
    +visit_while_stmt(o): str
    +visit_for_stmt(o): str
    +visit_return_stmt(o): str
    +visit_if_stmt(o): str
    +visit_break_stmt(o): str
    +visit_continue_stmt(o): str
    +visit_pass_stmt(o): str
    +visit_raise_stmt(o): str
    +visit_assert_stmt(o): str
    +visit_await_expr(o): str
    +visit_del_stmt(o): str
    +visit_try_stmt(o): str
    +visit_with_stmt(o): str
    +visit_match_stmt(o): str
    +visit_int_expr(o): str
    +visit_str_expr(o): str
    +visit_bytes_expr(o): str
    +str_repr(s): str
    +visit_float_expr(o): str
    +visit_complex_expr(o): str
    +visit_ellipsis(o): str
    +visit_star_expr(o): str
    +visit_name_expr(o): str
    +pretty_name(name, kind, fullname, is_inferred_def, target_node): str
    +visit_member_expr(o): str
    +visit_yield_expr(o): str
    +visit_yield_from_expr(o): str
    +visit_call_expr(o): str
    +visit_op_expr(o): str
    +visit_comparison_expr(o): str
    +visit_cast_expr(o): str
    +visit_assert_type_expr(o): str
    +visit_reveal_expr(o): str
    +visit_assignment_expr(o): str
    +visit_unary_expr(o): str
    +visit_list_expr(o): str
    +visit_dict_expr(o): str
    +visit_set_expr(o): str
    +visit_tuple_expr(o): str
    +visit_index_expr(o): str
    +visit_super_expr(o): str
    +visit_type_application(o): str
    +visit_type_var_expr(o): str
    +visit_paramspec_expr(o): str
    +visit_type_var_tuple_expr(o): str
    +visit_type_alias_expr(o): str
    +visit_namedtuple_expr(o): str
    +visit_enum_call_expr(o): str
    +visit_typeddict_expr(o): str
    +visit__promote_expr(o): str
    +visit_newtype_expr(o): str
    +visit_lambda_expr(o): str
    +visit_generator_expr(o): str
    +visit_list_comprehension(o): str
    +visit_set_comprehension(o): str
    +visit_dictionary_comprehension(o): str
    +visit_conditional_expr(o): str
    +visit_slice_expr(o): str
    +visit_temp_node(o): str
    +visit_as_pattern(o): str
    +visit_or_pattern(o): str
    +visit_value_pattern(o): str
    +visit_singleton_pattern(o): str
    +visit_sequence_pattern(o): str
    +visit_starred_pattern(o): str
    +visit_mapping_pattern(o): str
    +visit_class_pattern(o): str
  }

  class Reports {
    +reporter
    --
    -__init__(data_dir, report_dirs)
    +add_report(report_type, report_dir): AbstractReporter
    +file(tree, modules, type_map, options)
    +finish()
  }

  class AbstractReporter {
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    +on_finish()
  }

  class FuncCounterVisitor {
    -__init__()
    +visit_func_def(defn)
  }

  class LineCountReporter {
    +physical_lines
    +physical_lines: int
    +func_counter
    +total_funcs
    +annotated_funcs: int
    +imputed_annotated_lines
    +counts
    +total_counts
    --
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    +on_finish()
  }

  class AnyExpressionsReporter {
    +visitor
    +num_unanalyzed_lines
    +num_any
    +num_total
    +row_len
    +min_column_distance: int
    +widths
    +header_str
    +separator
    +r
    +footer_str
    +total_any
    +total_expr
    +total_coverage: float
    +total_coverage
    +column_names
    +rows
    +coverage
    +coverage_str
    +total_row
    +total_counter
    +file_column_name: str
    +total_row_name: str
    +column_names
    +rows
    +total_row
    --
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    +on_finish()
    -_write_out_report(filename, header, rows, footer)
    -_report_any_exprs()
    -_report_types_of_anys()
  }

  class LineCoverageVisitor {
    +line
    +indent: int
    +indent
    +start_line
    +start_indent: NoneType
    +start_indent
    +cur_line
    +end_line: cur_line
    +cur_indent
    +end_line: cur_line
    +is_typed
    --
    -__init__(source)
    +indentation_level(line_number)
    +visit_func_def(defn)
  }

  class LineCoverageReporter {
    +tree_source
    +coverage_visitor
    +covered_lines
    --
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    +on_finish()
  }

  class FileInfo {
    -__init__(name, module)
    +total(): int
    +attrib()
  }

  class MemoryXmlReporter {
    +xsd_path
    +control_fixer: Final
    +path
    +visitor
    +root
    +doc
    +file_info
    +status
    +xslt_path
    +transform_pi
    +result: str
    +counter
    +output_files
    +root
    +doc
    +xslt_path
    +transform_pi
    --
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    -{static} _get_any_info_for_line(lineno): str
    +on_finish()
  }

  class CoberturaPackage {
    +package_element
    +classes_element
    +packages_element
    --
    -__init__(name)
    +as_xml(): Any
    +add_packages(parent_element)
  }

  class CoberturaXmlReporter {
    +path
    +visitor
    +class_name
    +file_info
    +class_element
    +lines_element
    +class_lines_covered: int
    +class_total_lines: int
    +status
    +hits: int
    +branch: bool
    +hits: int
    +branch: bool
    +line_element
    +parent_module
    +parent_module
    +current_package
    +packages_to_update
    +sources
    +source_element
    +out_path
    --
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    +on_finish()
  }

  class AbstractXmlReporter {
    +memory_reporter
    --
    -__init__(reports, output_dir)
  }

  class XmlReporter {
    +last_xml
    +path
    +out_path
    +last_xml
    +out_path
    +out_xslt
    +out_css
    --
    +on_file(tree, modules, type_map, options)
    +on_finish()
  }

  class XsltHtmlReporter {
    +last_xml
    +path
    +out_path
    +transformed_html
    +last_xml
    +out_path
    +out_css
    +transformed_html
    --
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    +on_finish()
  }

  class XsltTxtReporter {
    +last_xml
    +out_path
    +transformed_txt
    --
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    +on_finish()
  }

  class LinePrecisionReporter {
    +path
    +visitor
    +file_info
    +status
    +output_files
    +report_file
    +width
    +titles
    +widths
    +fmt
    +counts
    --
    -__init__(reports, output_dir)
    +on_file(tree, modules, type_map, options)
    +on_finish()
  }

  class NodeFixer {
    +current_info
    +save_info
    +instance
    +cross_ref
    +stnode
    --
    -__init__(modules, allow_missing)
    +visit_type_info(info)
    +visit_symbol_table(symtab, table_fullname)
    +visit_func_def(func)
    +visit_overloaded_func_def(o)
    +visit_decorator(d)
    +visit_class_def(c)
    +visit_type_var_expr(tv)
    +visit_paramspec_expr(p)
    +visit_type_var_tuple_expr(tv)
    +visit_var(v)
    +visit_type_alias(a)
  }

  class TypeFixer {
    +type_ref
    +type_ref
    --
    -__init__(modules, allow_missing)
    +visit_instance(inst)
    +visit_type_alias_type(t)
    +visit_any(o)
    +visit_callable_type(ct)
    +visit_overloaded(t)
    +visit_erased_type(o)
    +visit_deleted_type(o)
    +visit_none_type(o)
    +visit_uninhabited_type(o)
    +visit_partial_type(o)
    +visit_tuple_type(tt)
    +visit_typeddict_type(tdt)
    +visit_literal_type(lt)
    +visit_type_var(tvt)
    +visit_param_spec(p)
    +visit_type_var_tuple(t)
    +visit_unpack_type(u)
    +visit_parameters(p)
    +visit_unbound_type(o)
    +visit_union_type(ut)
    +visit_type_type(t)
  }

  class DeferredNode {
    +node: DeferredNodeType
    +active_typeinfo
  }

  class FineGrainedDeferredNode {
    +node: FineGrainedDeferredNodeType
    +active_typeinfo
  }

  class TypeRange {
    +item: Type
    +is_upper_bound: bool
  }

  class PartialTypeScope {
    +map
    +is_function: bool
    +is_local: bool
  }

  class TypeChecker {
    +is_stub: bool
    +errors: Errors
    +msg: MessageBuilder
    -_type_maps
    +binder: ConditionalTypeBinder
    +expr_checker: mypy.checkexpr.ExpressionChecker
    +pattern_checker: PatternChecker
    +tscope: Scope
    +scope: CheckerScope
    +return_types
    +dynamic_funcs
    +partial_types
    +partial_reported
    +globals: SymbolTable
    +modules
    +deferred_nodes
    +pass_num: int
    +last_pass: DEFAULT_LAST_PASS
    +current_node_deferred: bool
    +is_typeshed_stub: bool
    +options: Options
    +inferred_attribute_types
    +no_partial_types: bool
    +module_refs
    +var_decl_frames
    +plugin: Plugin
    +all_
    +all_node
    +seq_str
    +todo
    +done
    +node
    +enclosing_class
    +num_abstract: int
    +item_types
    +item_type
    +found_method_base_classes
    +inner_type
    +outer_type
    +outer_type: inner_type
    +inner_call
    +outer_type: inner_call
    +impl_type
    +inner_type
    +inner_type
    +impl_type
    +is_descriptor_get
    +sig1
    +sig2
    +current_class
    +type_vars
    +impl
    +impl: impl_type
    +impl
    +typ
    +at
    +any_type
    +gt
    +any_type
    +agt
    +return_type
    +ret_type
    +return_type
    +return_type
    +return_type
    +found_method_base_classes
    +new_type
    +old_type
    +orig_type
    +orig_def
    +var
    +var: orig_def
    +partial_types
    +name_expr
    +typ
    +typ
    +old_types
    +expanded
    +original_typ: typ
    +old_binder
    +fdef: item
    +ret_type
    +prefix
    +t
    +c
    +ty
    +tc
    +tr
    +tr
    +ret_type
    +typ
    +ref_type
    +arg_type
    +ref_type
    +erased
    +msg: NoneType
    +msg
    +msg
    +ctx: Context
    +ctx: typ
    +body_is_trivial
    +new_frame
    +key_var
    +new_frame
    +unreachable
    +return_type
    +return_type
    +return_type
    +return_type
    +allow_empty
    +show_error
    +show_error: bool
    +show_error: bool
    +show_error: bool
    +may_be_abstract
    +msg
    +msg
    +msg
    +msg
    +msg
    +outers
    +arg_type_visitor
    +upper_bound
    +name
    +msg: str
    +notes
    +notes: NoneType
    +has_explicit_annotation
    +show_untyped
    +check_incomplete_defs
    +ret_type
    +self_type
    +bound_type
    +method_type
    +ret_type
    +reverse_type
    +forward_name
    +forward_inst
    +forward_inst
    +forward_inst
    +forward_inst
    +item
    +opt_meta
    +forward_inst: opt_meta
    +forward_base
    +forward_type
    +forward_item
    +forward_base_erased: forward_base
    +forward_base_erased
    +forward_tweaked
    +reverse_tweaked
    +reverse_base_erased
    +reverse_base_erased
    +first: reverse_tweaked
    +second: forward_tweaked
    +first: forward_tweaked
    +second: reverse_tweaked
    +current_class
    +type_vars
    +method
    +typ
    +cls
    +other_method
    +instance
    +typ2
    +fail: bool
    +fail: bool
    +fail: bool
    +method_type
    +method_type
    +method_type
    +str_type
    +expected_type
    +typ
    +subst
    +tvars
    +result
    +mapping
    +found_method_base_classes
    +result
    +found_base_method: bool
    +name
    +base_attr
    +found_base_method: bool
    +method
    +base_attr
    +context: defn
    +context
    +typ: Type
    +override_class_or_static
    +override_class
    +typ
    +override_class_or_static
    +override_class
    +typ
    +typ
    +original_type
    +original_node
    +original_type
    +original_type
    +original_type
    +original_type
    +original_type
    +original_class_or_static
    +fdef
    +original_class_or_static
    +original_class_or_static: bool
    +original_type
    +original_type
    +typ
    +is_class_method
    +is_class_method
    +mapped_typ
    +active_self_type
    +filtered_items
    +item_arg
    +item_arg
    +mapped_typ
    +raw_items
    +items
    +fail: bool
    +op_method_wider_note: bool
    +fail: bool
    +original_domain
    +override_domain
    +fail: bool
    +op_method_wider_note: bool
    +fail: bool
    +fail: bool
    +fail: bool
    +emitted_msg: bool
    +override
    +original
    +override_ids
    +type_name: NoneType
    +type_name
    +arg_type_in_super
    +context: Context
    +context: node
    +emitted_msg: bool
    +emitted_msg: bool
    +order
    +emitted_msg: bool
    +ret_type
    +returns
    +typ
    +old_binder
    +sig: Type
    +dec
    +temp
    +fullname: NoneType
    +fullname
    +old_allow_abstract_call
    +node
    +name_expr
    +callee
    +args
    +arg_names
    +idx
    +arg_kinds
    +call_expr
    +enum_base
    +enum_base: base
    +new_method
    +has_new: bool
    +candidate: bool
    +candidate
    +candidate
    +has_new: bool
    +info
    +object_type
    +tvars
    +up_args
    +down_args
    +expected: COVARIANT
    +expected: CONTRAVARIANT
    +expected: INVARIANT
    +mro
    +non_overridden_attrs
    +first
    +second
    +first_type
    +second_type
    +call: NoneType
    +call
    +second_sig
    +ok
    +ok
    +first_sig
    +second_sig
    +ok
    +first_type
    +second_type
    +ok
    +second_node
    +second_type
    +ok
    +ok: bool
    +ok: bool
    +metaclasses
    +lvalue
    +lvalue_type
    +message
    +typ
    +rvalue
    +alias_type
    +name
    +signature: lvalue_type
    +signature
    +typ
    +typ
    +active_class
    +rvalue_type
    +var
    +partial_types
    +rvalue_type
    +inferred_type
    +lvalue_type
    +rvalue_type: lvalue_type
    +instance_type
    +decl_frame_map
    +has_if_ancestor: bool
    +has_if_ancestor
    +lvalue_type
    +rvalue_type
    +p_rvalue_type
    +p_lvalue_type
    +type_context
    +rvalue_type
    +rvalue_type
    +partial_type_augmented_ops: Final
    +type_contexts
    +candidate
    +candidate: other
    +var: NoneType
    +var
    +var
    +typ
    +partial_types
    +rvalue_type
    +rvalue_type
    +lvalue_node
    +tnode
    +direct_bases
    +last_immediate_base
    +base_type: NoneType
    +lvalue_node
    +compare_node: NoneType
    +compare_type: lvalue_type
    +compare_node
    +compare_type
    +compare_node
    +compare_node
    +base_type
    +compare_type
    +base_static
    +compare_static
    +compare_static
    +base_type
    +compare_type
    +expr_name
    +base_var
    +base_node
    +base_type
    +base_type
    +base_node
    +base_type
    +self_type
    +instance
    +instance: self_type
    +itype
    +base_type
    +base_type
    +base_type
    +base_type
    +writable: bool
    +writable
    +old_ctx
    +lvs
    +lvs
    +lvs
    +is_final_decl
    +lv
    +name
    +cls
    +sym
    +inst
    +definition
    +typ
    +new_rvalues
    +typ
    +unpacked
    +fallback
    +fallback: unpacked
    +rvalues
    +iterable_type
    +last_idx
    +typs
    +last_idx: idx_rval
    +iterable_type
    +iterable_start
    +iterable_end
    +typs
    +iterable_start: i
    +iterable_end: i
    +iterable_num
    +rvalue_needed
    +rvalues
    +star_index
    +left_lvs
    +star_lv
    +right_lvs
    +lr_pairs
    +rv_list
    +left_star_index
    +left_prefix: left_star_index
    +left_suffix
    +right_prefix: rvalue_unpack
    +right_suffix
    +rvalue_type
    +rvalue_type
    +relevant_items
    +rvalue_type
    +rvalue_type
    +lv
    +temp_node
    +transposed
    +union_types
    +expr
    +clean_items
    +res
    +lv
    +rvalue_unpack
    +star_index
    +left_lvs
    +star_lv
    +right_lvs
    +lvalue_type
    +reinferred_rvalue_type
    +relevant_items
    +reinferred_rvalue_type
    +rvalue_type: reinferred_rvalue_type
    +list_expr
    +star_index
    +left_lvs
    +star_lv
    +right_lvs
    +type_parameters
    +nr_right_of_star
    +right_index
    +left
    +star
    +right
    +type
    +type
    +rvalue_type
    +item_type
    +items_type
    +lvalue_type: NoneType
    +index_lvalue: NoneType
    +inferred: NoneType
    +inferred
    +inferred
    +index_lvalue: lvalue
    +lvalue_type
    +lvalue_type
    +types
    +lvalue_type
    +lvalue_type
    +node
    +init_type
    +init_type
    +partial_type
    +fullname
    +is_ref
    +partial_type
    +arg0
    +arg1
    +arg1
    +partial_type
    +arg
    +allowed
    +allowed
    +fallback
    +fallback
    +typ
    +always_allow_any
    +rvalue_type
    +alt_rvalue_type
    +rvalue_type: alt_rvalue_type
    +instance_type
    +attribute_type
    +rvalue_type
    +rvalue_type
    +mx
    +get_type
    +rvalue_type
    +dunder_set
    +bound_method
    +typ
    +dunder_set_type
    +callable_name
    +dunder_set_type
    +type_context: rvalue
    +inferred_dunder_set_type
    +type_context
    +set_type
    +rvalue_type
    +infer
    +basetype
    +method_type
    +res_type
    +var: NoneType
    +var
    +var
    +type_type
    +partial_types
    +typename
    +key_type
    +value_type
    +proper_type
    +expr_type
    +error_note_and_code
    +defn
    +return_type
    +return_type
    +return_type
    +return_type
    +is_lambda
    +declared_none_return
    +declared_any_return
    +allow_none_func_call
    +typ
    +t
    +if_stmt
    +lvalue_type
    +lvalue_type
    +expr
    +typ
    +exc_type
    +expected_type_items
    +typ
    +t
    +var
    +var
    +source
    +typ
    +all_types
    +test_types
    +item
    +exc_type
    +exc_type
    +new_all_types
    +any_type
    +arg
    +base: str
    +base: str
    +typ
    +echk
    +iterable
    +iterator
    +awaitable
    +item_type
    +int_type
    +echk
    +iterable: Type
    +iterable
    +iterator
    +iterable
    +native_int
    +ok: bool
    +argt
    +native_int: argt
    +ok: bool
    +typ
    +types
    +c_type
    +supertype
    +super_instance
    +e
    +m
    +c
    +sig: Type
    +dec
    +temp
    +fullname: NoneType
    +fullname
    +object_type
    +object_type
    +fullname
    +sig
    +found_method_base_classes
    +name
    +base_attr
    +exceptions_maybe_suppressed: bool
    +exit_ret_type
    +exit_ret_type
    +exit_ret_type
    +exceptions_maybe_suppressed: bool
    +echk
    +ctx
    +obj
    +obj
    +arg
    +echk
    +ctx
    +obj
    +arg
    +subject_type
    +pattern_types
    +type_maps
    +inferred_types
    +current_subject_type
    +pattern_type
    +else_map: TypeMap
    +gt
    +else_map
    +case_target
    +all_captures
    +node
    +inferred_types
    +already_exists: bool
    +types
    +already_exists: bool
    +new_type
    +node
    +cdef
    +info
    +curr_module
    +base_classes_
    +expanded
    +expanded
    +names_list
    +short_name
    +full_name_
    +base_classes
    +pretty_names_list
    +base_classes
    +cur_module
    +gen_name
    +short_name
    +func_def
    +fallback
    +callable_type
    +typ
    +callables
    +uncallables
    +uncallables
    +ityp: typ
    +ityp
    +method
    +fake
    +callable_map
    +uncallable_map
    +if_types
    +else_types
    +iterable_type
    +possible_iterable_types
    +possible_iterable_types
    +item_str_literals
    +t
    +typ
    +exprs_in_type_calls
    +type_being_compared
    +is_final: bool
    +expr
    +current_type
    +is_final
    +type_being_compared: current_type
    +if_maps
    +else_maps
    +result_map
    +if_map
    +else_map
    +else_map
    +new_if_map
    +new_else_map
    +expr
    +vartype
    +attr
    +called_type
    +name
    +idx
    +expr
    +operands
    +operand_types
    +narrowable_operand_index_to_hash
    +expr_type
    +h
    +simplified_operator_list
    +partial_type_maps
    +is_valid_target
    +coerce_only_in_literal_context: bool
    +should_narrow_by_identity: bool
    +is_valid_target: is_exactly_literal_type
    +coerce_only_in_literal_context: bool
    +expr_types
    +should_narrow_by_identity
    +if_map: TypeMap
    +else_map: TypeMap
    +item_type
    +iterable_type
    +collection_item_type
    +expr
    +if_map: NoneType
    +else_map: NoneType
    +if_map
    +else_map
    +if_map
    +else_map
    +yes_type
    +yes_type
    +no_type
    +no_type
    +if_map
    +else_map
    +original_vartype
    +vartype
    +if_type
    +else_type
    +if_map
    +else_map
    +output_map
    +new_mapping
    +output
    +parent_expr
    +parent_type
    +member_name
    +member_type
    +parent_expr
    +parent_type
    +index_type
    +str_literals
    +member_types
    +int_literals
    +member_types
    +parent_type
    +new_parent_types
    +member_type
    +expr: parent_expr
    +expr_type
    +should_coerce: bool
    +typ
    +should_coerce
    +target
    +possible_target_indices
    +expr_type
    +expr_type
    +target: expr_type
    +singleton_index
    +singleton_index: i
    +singleton_index
    +sum_type_name: NoneType
    +target
    +sum_type_name
    +target_type
    +partial_type_maps
    +expr
    +expr_type
    +expr_type
    +types
    +non_optional_types
    +typ
    +if_map
    +expr_type
    +expr
    +p_typ
    +expr_type
    +expr_type
    +proper_type
    +chained
    +last_group
    +left
    +right
    +last_group
    +type_maps
    +literal_values
    +tuples
    +lit
    +size
    +yes_map
    +no_map
    +op
    +r_size
    +yes_map
    +no_map
    +typ
    +yes_types
    +no_types
    +other_types
    +yes_type
    +yes_type: NoneType
    +no_type
    +no_type: NoneType
    +unpack_index
    +method
    +unpack
    +unpacked
    +min_len
    +prefix
    +suffix
    +unpack
    +min_len
    +arg
    +prefix
    +suffix
    +no_type
    +yes_items
    +base
    +arg
    +allow_precise
    +unpack
    +no_type
    +no_type: typ
    +items
    +yes_type
    +yes_type: typ
    +msg
    +orig_subtype: subtype
    +subtype
    +orig_supertype: supertype
    +supertype
    +extra_info
    +note_msg: str
    +notes
    +note_msg
    +notes
    +msg
    +call
    +call
    +aw_type
    +aw_type
    +sym
    +node
    +node
    +any_type
    +info
    +args
    +sym
    +node
    +t
    +temp_type_map
    +b
    +table
    +parts
    +n
    +sym
    +n
    +last
    +fullname
    +suggestion
    +suggestion: str
    +msg: str
    +is_local
    +permissive
    +allow_none
    +fixed
    +context
    +disallow_other_scopes
    +disallow_other_scopes: bool
    +scope_active
    +iterable
    +item_type
    +vartype
    +type
    +vartype
    +vartype
    +union_list
    +vartype
    +vartype
    +vartype
    +initial_types
    +yes_type
    +no_type
    +proper_type
    +possible_expr_types
    +possible_expr_types
    +possible_target_types
    +item
    +out
    +errors
    +intersection
    +new_yes_type
    +first_item
    +left
    +right
    +all_types
    +types
    +erased_type
    +object_type
    +parent_type
    +member_type
    +parent_type
    +member_type
    +orig_typ: typ
    +typ
    +any_type
    +result
    +fallback
    +fallback
    +source_type
    +yes_map
    +type_with_attr
    +with_attr
    +without_attr
    +p_typ
    +module_symbol_table
    +module_symbol_table: NoneType
    --
    -__init__(errors, modules, options, tree, path, plugin, per_line_checking_time_ns)
    +type_context()
    +reset()
    +check_first_pass()
    +check_second_pass(todo): bool
    +check_partial(node)
    +check_top_level(node)
    +defer_node(node, enclosing_class)
    +handle_cannot_determine_type(name, context)
    +accept(stmt)
    +accept_loop(body, else_body)
    +visit_overloaded_func_def(defn)
    -_visit_overloaded_func_def(defn)
    +extract_callable_type(inner_type, ctx)
    +check_overlapping_overloads(defn)
    +is_generator_return_type(typ, is_coroutine): bool
    +is_async_generator_return_type(typ): bool
    +get_generator_yield_type(return_type, is_coroutine): Type
    +get_generator_receive_type(return_type, is_coroutine): Type
    +get_coroutine_return_type(return_type): Type
    +get_generator_return_type(return_type, is_coroutine): Type
    +visit_func_def(defn)
    -_visit_func_def(defn)
    +check_func_item(defn, type_override, name, allow_empty)
    +enter_attribute_inference_context()
    +check_func_def(defn, typ, name, allow_empty)
    +is_var_redefined_in_outer_context(v, after_line): bool
    +check_unbound_return_typevar(typ)
    +check_default_args(item, body_is_trivial)
    +is_forward_op_method(method_name): bool
    +is_reverse_op_method(method_name): bool
    +check_for_missing_annotations(fdef)
    +is_unannotated_any(): bool
    +check___new___signature(fdef, typ)
    +check_reverse_op_method(defn, reverse_type, reverse_name, context)
    +has_readable_member(name): bool
    +check_overlapping_op_methods(reverse_type, reverse_name, reverse_class, forward_type, forward_name, forward_base, context)
    +is_unsafe_overlapping_op(forward_item, forward_base, reverse_type): bool
    +check_inplace_operator_method(defn)
    +check_getattr_method(typ, context, name)
    +check_setattr_method(typ, context)
    +check_slots_definition(typ, context)
    +check_match_args(var, typ, context)
    +expand_typevars(defn, typ)
    +check_explicit_override_decorator(defn, found_method_base_classes, context)
    +check_method_override(defn)
    +check_method_or_accessor_override_for_base(defn, base)
    +check_method_override_for_base_with_name(defn, name, base): bool
    +bind_and_map_method(sym, typ, sub_info, super_info): FunctionLike
    +get_op_other_domain(tp)
    +check_override(override, original, name, name_in_super, supertype, original_class_or_static, override_class_or_static, node)
    +erase_override(): Type
    +check__exit__return_type(defn)
    +visit_class_def(defn)
    +check_final_deletable(typ)
    +check_init_subclass(defn)
    +check_enum(defn)
    +check_final_enum(defn, base)
    +is_final_enum_value(sym): bool
    +check_enum_bases(defn)
    +check_enum_new(defn)
    +has_new_method(): bool
    +check_protocol_variance(defn)
    +check_multiple_inheritance(typ)
    +determine_type_of_member(sym)
    +check_compatibility(name, base1, base2, ctx)
    +check_metaclass_compatibility(typ)
    +visit_import_from(node)
    +visit_import_all(node)
    +visit_import(node)
    +check_import(node)
    +visit_block(b)
    +should_report_unreachable_issues(): bool
    +is_noop_for_reachability(s): bool
    +visit_assignment_stmt(s)
    +check_type_alias_rvalue(s)
    +check_assignment(lvalue, rvalue, infer_lvalue_type, new_syntax)
    +get_variable_type_context(inferred)
    +try_infer_partial_generic_type_from_assignment(lvalue, rvalue, op)
    +check_compatibility_all_supers(lvalue, lvalue_type, rvalue): bool
    +check_compatibility_super(lvalue, lvalue_type, rvalue, base, base_type, base_node): bool
    +lvalue_type_from_base(expr_node, base)
    +check_compatibility_classvar_super(node, base, base_node): bool
    +check_compatibility_final_super(node, base, base_node): bool
    +check_if_final_var_override_writable(name, base_node, ctx)
    +get_final_context(): bool
    +enter_final_context(is_final_def)
    +check_final(s)
    +check_assignment_to_slots(lvalue)
    +is_assignable_slot(lvalue, typ): bool
    +flatten_rvalues(rvalues)
    +check_assignment_to_multiple_lvalues(lvalues, rvalue, context, infer_lvalue_type)
    +check_rvalue_count_in_assignment(lvalues, rvalue_count, context, rvalue_unpack): bool
    +check_multi_assignment(lvalues, rvalue, context, infer_lvalue_type, rv_type, undefined_rvalue)
    +check_multi_assignment_from_union(lvalues, rvalue, rvalue_type, context, infer_lvalue_type)
    +flatten_lvalues(lvalues)
    +check_multi_assignment_from_tuple(lvalues, rvalue, rvalue_type, context, undefined_rvalue, infer_lvalue_type)
    +lvalue_type_for_inference(lvalues, rvalue_type): Type
    +append_types_for_inference(rv_types)
    +split_around_star(items, star_index, length)
    +type_is_iterable(type): bool
    +check_multi_assignment_from_iterable(lvalues, rvalue_type, context, infer_lvalue_type)
    +check_lvalue(lvalue)
    +is_definition(s): bool
    +infer_variable_type(name, lvalue, init_type, context)
    +infer_partial_type(name, lvalue, init_type): bool
    +is_valid_defaultdict_partial_value_type(t): bool
    +set_inferred_type(var, lvalue, type)
    +set_inference_error_fallback_type(var, lvalue, type)
    +inference_error_fallback_type(type): Type
    +simple_rvalue(rvalue): bool
    +check_simple_assignment(lvalue_type, rvalue, context, msg, lvalue_name, rvalue_name): Type
    +check_member_assignment(instance_type, attribute_type, rvalue, context)
    +check_indexed_assignment(lvalue, rvalue, context)
    +try_infer_partial_type_from_indexed_assignment(lvalue, rvalue)
    +type_requires_usage(typ)
    +visit_expression_stmt(s)
    +visit_return_stmt(s)
    +check_return_stmt(s)
    +visit_if_stmt(s)
    +visit_while_stmt(s)
    +visit_operator_assignment_stmt(s)
    +visit_assert_stmt(s)
    +visit_raise_stmt(s)
    +type_check_raise(e, s, optional)
    +visit_try_stmt(s)
    +visit_try_without_finally(s, try_frame)
    +check_except_handler_test(n, is_star): Type
    +default_exception_type(is_star): Type
    +wrap_exception_group(types): Type
    +get_types_from_except_handler(typ, n)
    +visit_for_stmt(s)
    +analyze_async_iterable_item_type(expr)
    +analyze_iterable_item_type(expr)
    +analyze_iterable_item_type_without_expression(type, context)
    +analyze_range_native_int_type(expr)
    +analyze_container_item_type(typ)
    +analyze_index_variables(index, item_type, infer_lvalue_type, context)
    +visit_del_stmt(s)
    +visit_decorator(e)
    +visit_decorator_inner(e, allow_empty)
    +check_for_untyped_decorator(func, dec_type, dec_expr)
    +check_incompatible_property_override(e)
    +visit_with_stmt(s)
    +check_untyped_after_decorator(typ, func)
    +check_async_with_item(expr, target, infer_lvalue_type): Type
    +check_with_item(expr, target, infer_lvalue_type): Type
    +visit_break_stmt(s)
    +visit_continue_stmt(s)
    +visit_match_stmt(s)
    +infer_variable_types_from_type_maps(type_maps)
    +remove_capture_conflicts(type_map, inferred_types)
    +make_fake_typeinfo(curr_module_fullname, class_gen_name, class_short_name, bases)
    +intersect_instances(instances, errors)
    -_get_base_classes()
    -_make_fake_typeinfo_and_full_name(curr_module_)
    +intersect_instance_callable(typ, callable_type): Instance
    +make_fake_callable(typ): Instance
    +partition_by_callable(typ, unsound_partition)
    +conditional_callable_type_map(expr, current_type)
    +conditional_types_for_iterable(item_type, iterable_type)
    -_is_truthy_type(t): bool
    -_check_for_truthy_type(t, expr)
    +format_expr_type(): str
    +get_expr_name(): str
    +find_type_equals_check(node, expr_indices)
    +is_type_call(): bool
    +combine_maps(): TypeMap
    +find_isinstance_check(node)
    +find_isinstance_check_helper(node)
    +is_exactly_literal_type(): bool
    +has_no_custom_eq_checks(): bool
    +propagate_up_typemap_info(new_types): TypeMap
    +refine_parent_types(expr, expr_type)
    +replay_lookup()
    +replay_lookup()
    +replay_lookup()
    +refine_identity_comparison_expression(operands, operand_types, chain_indices, narrowable_operand_indices, is_valid_target, coerce_only_in_literal_context)
    +should_coerce_inner(): bool
    +refine_away_none_in_comparison(operands, operand_types, chain_indices, narrowable_operand_indices)
    +is_len_of_tuple(expr): bool
    +can_be_narrowed_with_len(typ): bool
    +literal_int_expr(expr)
    +find_tuple_len_narrowing(node)
    +narrow_with_len(typ, op, size)
    +refine_tuple_type_with_len(typ, op, size)
    +refine_instance_type_with_len(typ, op, size)
    +check_subtype(subtype, supertype, context, msg, subtype_label, supertype_label): bool
    +check_subtype(subtype, supertype, context, msg, subtype_label, supertype_label): bool
    +check_subtype(subtype, supertype, context, msg, subtype_label, supertype_label): bool
    +get_precise_awaitable_type(typ, local_errors)
    +checking_await_set()
    +check_possible_missing_await(subtype, supertype, context, code)
    +named_type(name): Instance
    +named_generic_type(name, args): Instance
    +lookup_typeinfo(fullname): TypeInfo
    +type_type(): Instance
    +str_type(): Instance
    +store_type(node, typ)
    +has_type(node): bool
    +lookup_type_or_none(node)
    +lookup_type(node): Type
    +store_types(d)
    +local_type_map()
    +in_checked_function(): bool
    +lookup(name): SymbolTableNode
    +lookup_qualified(name): SymbolTableNode
    +enter_partial_types()
    +handle_partial_var_type(typ, is_lvalue, node, context): Type
    +is_defined_in_base_class(var): bool
    +find_partial_types(var)
    +find_partial_types_in_all_scopes(var)
    +temp_node(t, context): TempNode
    +fail(msg, context)
    +note(msg, context, offset)
    +iterable_item_type(it, context): Type
    +function_type(func): FunctionLike
    +push_type_map(type_map)
    +infer_issubclass_maps(node, expr)
    +conditional_types_with_intersection(expr_type, type_ranges, ctx, default)
    +conditional_types_with_intersection(expr_type, type_ranges, ctx, default)
    +conditional_types_with_intersection(expr_type, type_ranges, ctx, default)
    +is_writable_attribute(node): bool
    +get_isinstance_type(expr)
    +is_literal_enum(n): bool
    +add_any_attribute_to_type(typ, name): Type
    +hasattr_type_maps(expr, source_type, name)
    +partition_union_by_attr(source_type, name)
    +has_valid_attribute(typ, name): bool
    +get_expression_type(node, type_context): Type
  }

  class CollectArgTypeVarTypes {
    -__init__()
    +visit_type_var(t)
  }

  class TypeTransformVisitor {
    -__init__(map)
    +type(type): Type
  }

  class InvalidInferredTypes {
    -__init__()
    +visit_uninhabited_type(t): bool
    +visit_erased_type(t): bool
    +visit_type_var(t): bool
  }

  class SetNothingToAny {
    +visit_uninhabited_type(t): Type
    +visit_type_alias_type(t): Type
  }

  class CheckerScope {
    +stack
    +top
    +index
    +enclosing
    +info
    +info
    --
    -__init__(module)
    +top_function()
    +top_non_lambda_function()
    +active_class()
    +enclosing_class()
    +active_self_type()
    +push_function(item)
    +push_class(info)
  }

  class DisjointDict {
    +subtree_roots
    +new_root
    +root_values
    +root_id_to_keys
    +root_id
    +output
    +new_id
    +i
    +new_parent
    +i: new_parent
    --
    -__init__()
    +add_mapping(keys, values)
    +items()
    -_lookup_or_make_root_id(key): int
    -_lookup_root_id(key): int
  }

  class VarAssignVisitor {
    +old_lvalue
    +old_lvalue
    --
    -__init__(v)
    +visit_assignment_stmt(s)
    +visit_name_expr(e)
    +visit_member_expr(e)
    +visit_index_expr(e)
    +visit_with_stmt(s)
    +visit_for_stmt(s)
    +visit_assignment_expr(e)
    +visit_as_pattern(p)
    +visit_starred_pattern(p)
  }

  class FileSystemCache {
    +st
    +st
    +ok: bool
    +path
    +path
    +ok: bool
    +ok: bool
    +dirname
    +st
    +seq
    +st
    +path
    +res
    +results
    +st
    +names
    +res
    +res: bool
    +res
    +names
    +res
    +res: bool
    +res
    +st
    +dirname
    +data: bytes
    +data
    +s1
    +s2
    --
    -__init__()
    +set_package_root(package_root)
    +flush()
    +stat(path): os.stat_result
    +init_under_package_root(path): bool
    -_fake_init(path): os.stat_result
    +listdir(path)
    +isfile(path): bool
    +isfile_case(path, prefix): bool
    +exists_case(path, prefix): bool
    +isdir(path): bool
    +exists(path): bool
    +read(path): bytes
    +hash_digest(path): str
    +samefile(f1, f2): bool
  }

  class StrictOptionalState {
    +saved
    --
    -__init__(strict_optional)
    +strict_optional_set(value)
  }

  class SemanticAnalyzer {
    +modules
    +globals: SymbolTable
    +global_decls
    +nonlocal_decls
    +locals
    +is_comprehension_stack
    +block_depth
    -_type
    +type_stack
    +tvar_scope: TypeVarLikeScope
    +options: Options
    +function_stack
    +progress: bool
    +deferred: bool
    +incomplete: bool
    +missing_names
    +patches
    +loop_depth
    +cur_mod_id: str
    +imports
    +errors: Errors
    +plugin: Plugin
    +statement
    +wrapped_coro_return_types
    +old
    +names
    +cdef
    +info
    +bool_info
    +bool_type
    +special_var_types
    +v
    +str_type
    +str_type
    +typ: Type
    +inst
    +typ: inst
    +inst
    +typ: inst
    +typ
    +existing
    +an_type
    +var
    +name
    +name
    +tag
    +n
    +target
    +alias_node
    +scope
    +has_self_type
    +has_self_type: bool
    +analyzer
    +tag
    +result
    +skip_self
    +result
    +result
    +info
    +any_type
    +ret_type
    +last_type
    +last_type
    +new_arg_types
    +overlap
    +overlapped
    +new_arg_types
    +new_arg_types
    +functype
    +self_type
    +leading_type: Type
    +leading_type
    +leading_type
    +typ
    +sym
    +sym
    +new
    +a
    +info
    +first_item
    +typ
    +types
    +impl
    +types
    +non_overload_indexes
    +impl
    +callable
    +impl: item
    +impl: item
    +bad_final
    +bad_final
    +class_status
    +static_status
    +inner
    +inner: item
    +inner
    +inner
    +items
    +first_item
    +deleted_items
    +node
    +is_method
    +a
    +typ
    +t: ProperType
    +sig
    +num_extra_anys
    +extra_anys
    +func
    +args
    +kwargs
    +args_defn_type: NoneType
    +kwargs_defn_type: NoneType
    +args_defn_type
    +kwargs_defn_type
    +args_type
    +kwargs_type
    +param_name
    +param_name
    +param_name: str
    +removed
    +no_type_check: bool
    +could_be_decorated_property: bool
    +no_type_check: bool
    +could_be_decorated_property: bool
    +namespace
    +fullname
    +placeholder
    +tag
    +bases
    +bases_result
    +target
    +is_named_tuple: bool
    +info
    +decorator_name
    +hook
    +hook
    +metaclass_name
    +hook
    +base_name
    +hook
    +spec
    +sym
    +removed
    +declared_tvars: TypeVarLikeList
    +is_protocol: bool
    +base
    +result
    +tvars
    +sym
    +is_protocol: bool
    +all_tvars
    +declared_tvars
    +declared_tvars
    +declared_tvars: all_tvars
    +tvar_defs
    +tvar_def
    +unbound: base
    +sym
    +is_proto
    +tvars: TypeVarLikeList
    +have_type_var_tuple: bool
    +tag
    +tvar
    +have_type_var_tuple: bool
    +sym
    +inner_t
    +sym
    +tvars: TypeVarLikeList
    +base
    +base_tvars
    +tvars
    +base
    +base_tvars
    +tvars
    +tvar_defs
    +tvar_def
    +info
    +local_name
    +local_name
    +global_name
    +global_name
    +info
    +info
    +is_error: bool
    +bases
    +base
    +name
    +msg: str
    +msg: str
    +is_error: bool
    +base
    +base_types
    +info
    +actual_base
    +msg
    +msg: str
    +msg: str
    +name
    +prefix
    +prefix: str
    +info
    +hook
    +with_meta_expr
    +base_expr
    +with_meta_expr
    +add_meta_expr
    +add_meta_expr
    +metas
    +info
    +cycle: bool
    +baseinfo
    +cycle: bool
    +dup
    +worklist
    +visited
    +nxt
    +declared_metaclass: NoneType
    +metaclass_name: NoneType
    +metaclass_name
    +metaclass_name
    +sym
    +metaclass_info
    +metaclass_info
    +inst
    +declared_metaclass: inst
    +abc_meta
    +use_implicit_reexport
    +base_id: id
    +imported_id: as_id
    +module_public
    +base_id
    +imported_id: base_id
    +module_public: use_implicit_reexport
    +node
    +kind: LDEF
    +kind: MDEF
    +kind: GDEF
    +symbol
    +module_id
    +module
    +fullname
    +node: NoneType
    +node
    +node
    +missing_submodule: bool
    +imported_id
    +use_implicit_reexport
    +module_public
    +mod
    +kind
    +node
    +missing_submodule: bool
    +fullname
    +gvar
    +module_hidden
    +message
    +module
    +message
    +alternatives
    +matches
    +suggestion
    +fullname
    +typing_extensions
    +lvalue
    +rvalue
    +assignment
    +i_id
    +m
    +fullname
    +tag
    +old_basic_type_applications
    +special_form: bool
    +special_form: bool
    +special_form: bool
    +special_form: bool
    +special_form: bool
    +special_form: bool
    +special_form: bool
    +special_form: bool
    +special_form: bool
    +lvalue
    +name
    +sym
    +n
    +fname
    +n
    +ref
    +valid_refs
    +valid_refs: type_constructors
    +n
    +fname
    +n
    +call
    +arg
    +lvalue
    +lvalue
    +fullname
    +name
    +namespace
    +lvalue
    +name
    +namespace
    +defn
    +explicit
    +explicit: bool
    +has_explicit_value
    +has_explicit_value: bool
    +has_explicit_value: bool
    +fname: str
    +call
    +fname
    +callee_expr
    +method_name
    +fname
    +method_name
    +fname
    +call: callee_expr
    +hook
    +invalid_bare_final: bool
    +invalid_bare_final: bool
    +lval
    +lval
    +node
    +cur_node
    +cur_node
    +top_function
    +res
    +lvalue
    +allow_tuple_literal
    +analyzed
    +ref_expr
    +safe_literal_inference: bool
    +safe_literal_inference
    +value
    +type_name: str
    +type_name: str
    +type_name: str
    +type_name: str
    +typ
    +dynamic
    +global_scope
    +typ
    +found_type_vars
    +tvar_defs
    +namespace
    +tvar_def
    +new_tvar_defs
    +variadic: bool
    +variadic: bool
    +qualified_tvars
    +empty_tuple_index
    +lookup
    +lvalue
    +pep_613
    +existing
    +non_global_scope
    +rvalue
    +res
    +res
    +alias_tvars
    +depends_on
    +qualified_tvars
    +empty_tuple_index: bool
    +tag
    +incomplete_target
    +incomplete_target
    +res
    +no_args
    +eager
    +alias_node
    +updated: bool
    +updated: bool
    +updated: bool
    +current_node
    +messages
    +target
    +name
    +kind
    +names
    +existing
    +outer
    +var
    +added
    +typ
    +name
    +existing
    +orig_name
    +existing
    +orig_name
    +existing
    +name
    +v
    +original_def
    +original_def
    +items
    +star_exprs
    +cur_node
    +node
    +v
    +node
    +var
    +typ
    +typ
    +call
    +name
    +n_values
    +values
    +res
    +existing
    +prefix
    +prefix: str
    +upper_bound
    +type_var
    +updated: bool
    +updated
    +name
    +typevarlike_type
    +msg: str
    +call
    +callee
    +has_values
    +covariant: bool
    +contravariant: bool
    +upper_bound: Type
    +default: Type
    +covariant
    +contravariant
    +tv_arg
    +upper_bound: tv_arg
    +tv_arg
    +default
    +variance: COVARIANT
    +variance: CONTRAVARIANT
    +variance: INVARIANT
    +analyzed
    +analyzed
    +typ
    +lvalue
    +call
    +name
    +n_values
    +default: Type
    +tv_arg
    +default
    +typ
    +default
    +paramspec_var
    +updated: bool
    +updated
    +call
    +n_values
    +default: Type
    +tv_arg
    +default
    +default
    +name
    +tuple_fallback
    +typevartuple_var
    +updated: bool
    +updated
    +class_def
    +info
    +mro
    +mro
    +result
    +analyzed
    +analyzed
    +lvalue
    +node
    +analyzed
    +sym
    +sym
    +seq_lvals
    +elementwise_assignments
    +rnode
    +lnode
    +lnode
    +rvalue
    +items
    +attrs
    +concrete_slots: bool
    +rvalue
    +concrete_slots: bool
    +slots
    +concrete_slots: bool
    +allow_tuple_literal
    +analyzed
    +types
    +actual_targets
    +types
    +types
    +new_types
    +t
    +allow_tuple_literal
    +analyzed
    +guard
    +n
    +target
    +target
    +reveal_imported: bool
    +reveal_type_node
    +reveal_imported: bool
    +local_nodes
    +local_nodes
    +local_nodes
    +symbol_table
    +local_nodes
    +target
    +expr
    +s: str
    +s: str
    +base
    +sym
    +type_info: NoneType
    +type_info
    +func_def
    +formal_arg
    +type_info
    +type_info
    +n
    +inferred
    +base
    +types
    +base
    +alias
    +target
    +name
    +n
    +index
    +tag
    +types
    +items
    +is_tuple
    +items
    +items
    +base
    +allow_unpack
    +alias
    +has_param_spec: bool
    +num_args
    +has_param_spec: bool
    +num_args
    +allow_unpack
    +has_param_spec
    +num_args
    +allow_unpack: bool
    +has_param_spec: bool
    +num_args
    +typearg
    +analyzed
    +first_arg
    +types
    +analyzed
    +analyzed
    +analyzed
    +analyzed
    +implicit_name: bool
    +node
    +implicit_name: bool
    +implicit_node: node
    +b
    +table
    +node
    +line_diff
    +in_items
    +in_impl
    +parts
    +namespace
    +sym
    +node
    +part
    +nextsym
    +nextsym
    +namespace
    +nextsym
    +nextsym: NoneType
    +typ
    +nextsym: NoneType
    +sym: nextsym
    +t
    +n
    +module
    +names
    +sym
    +fullname
    +sym
    +gvar
    +sym
    +var_type
    +v
    +sym
    +sym: NoneType
    +basename: NoneType
    +basename
    +fullname: name
    +fullname
    +var_type
    +var
    +node_type
    +typ
    +typ
    +v
    +ret
    +filenode
    +result
    +sym
    +node
    +sym
    +node
    +node
    +kind: LDEF
    +kind: MDEF
    +kind: GDEF
    +symbol
    +names
    +kind: MDEF
    +names
    +kind: GDEF
    +symbol
    +names
    +existing
    +old
    +new
    +i: int
    +new_name
    +new_name
    +existing
    +name
    +f
    +existing
    +typ
    +typ
    +symbol_node
    +existing_symbol
    +symbol_node
    +symbol_node
    +symbol
    +existing
    +var
    +any_type
    +old_scope
    +line
    +fullname
    +placeholder
    +name_format
    +names
    +is_comprehension
    +kind: MDEF
    +kind: LDEF
    +kind: GDEF
    +names
    +names_candidate
    +names: names_candidate
    +names
    +names
    +names
    +exps
    +incomplete
    +incomplete: bool
    +message
    +fullname
    +modules_with_unimported_hints
    +lowercased
    +fullname
    +hint
    +node
    +node: original_ctx
    +node: NoneType
    +extra_msg: str
    +extra_msg
    +extra_msg: str
    +current_index
    +current_func
    +fallback
    +typ
    +tvar_scope
    +tpan
    +has_self_type
    +a
    +tag
    +typ
    +target
    +target
    +values
    +parameters
    +boolean
    +names
    --
    -__init__(modules, missing_modules, incomplete_namespaces, errors, plugin)
    +type()
    +is_stub_file(): bool
    +is_typeshed_stub_file(): bool
    +final_iteration(): bool
    +allow_unbound_tvars_set()
    +prepare_file(file_node)
    +prepare_typing_namespace(file_node, aliases)
    +helper()
    +prepare_builtins_namespace(file_node)
    +refresh_partial(node, patches, final_iteration, file_node, options, active_type)
    +refresh_top_level(file_node)
    +add_implicit_module_attrs(file_node)
    +add_builtin_aliases(tree)
    +add_typing_extension_aliases(tree)
    +create_alias(tree, target_name, alias, name)
    +adjust_public_exports()
    +file_context(file_node, options, active_type)
    +visit_func_def(defn)
    +analyze_func_def(defn)
    +remove_unpack_kwargs(defn, typ): CallableType
    +prepare_method_signature(func, info, has_self_type)
    +is_expected_self_type(typ, is_classmethod): bool
    +set_original_def(previous, new): bool
    +update_function_type_variables(fun_type, defn): bool
    +setup_self_type()
    +visit_overloaded_func_def(defn)
    +analyze_overloaded_func_def(defn)
    +process_overload_impl(defn)
    +analyze_overload_sigs_and_impl(defn)
    +handle_missing_overload_decorators(defn, non_overload_indexes, some_overload_decorators)
    +handle_missing_overload_implementation(defn)
    +process_final_in_overload(defn)
    +process_static_or_class_method_in_overload(defn)
    +analyze_property_with_multi_part_definition(defn)
    +add_function_to_symbol_table(func)
    +analyze_arg_initializers(defn)
    +analyze_function_body(defn)
    +check_classvar_in_signature(typ)
    +check_function_signature(fdef)
    +check_paramspec_definition(defn)
    +visit_decorator(dec)
    +check_decorated_function_is_method(decorator, context)
    +visit_class_def(defn)
    +analyze_class(defn)
    +setup_type_vars(defn, tvar_defs)
    +setup_alias_type_vars(defn)
    +is_core_builtin_class(defn): bool
    +analyze_class_body_common(defn)
    +analyze_typeddict_classdef(defn): bool
    +analyze_namedtuple_classdef(defn, tvar_defs): bool
    +apply_class_plugin_hooks(defn)
    +get_fullname_for_hook(expr)
    +analyze_class_keywords(defn)
    +enter_class(info)
    +leave_class()
    +analyze_class_decorator(defn, decorator)
    +clean_up_bases_and_infer_type_variables(defn, base_type_exprs, context)
    +analyze_class_typevar_declaration(base)
    +analyze_unbound_tvar(t)
    +analyze_unbound_tvar_impl(t, allow_tvt)
    +get_all_bases_tvars(base_type_exprs, removed): TypeVarLikeList
    +get_and_bind_all_tvars(type_exprs)
    +prepare_class_def(defn, info, custom_names)
    +make_empty_type_info(defn): TypeInfo
    +get_name_repr_of_expr(expr)
    +analyze_base_classes(base_type_exprs)
    +configure_base_classes(defn, bases)
    +configure_tuple_base_class(defn, base): Instance
    +set_dummy_mro(info)
    +set_any_mro(info)
    +calculate_class_mro(defn, obj_type)
    +infer_metaclass_and_bases_from_compat_helpers(defn)
    +verify_base_classes(defn): bool
    +verify_duplicate_base_classes(defn): bool
    +is_base_class(t, s): bool
    +get_declared_metaclass(name, metaclass_expr)
    +recalculate_metaclass(defn, declared_metaclass)
    +visit_import(i)
    +visit_import_from(imp)
    +process_imported_symbol(node, module_id, id, imported_id, fullname, module_public, context)
    +report_missing_module_attribute(import_id, source_id, imported_id, module_public, module_hidden, context, add_unknown_imported_symbol)
    +process_import_over_existing_name(imported_id, existing_symbol, module_symbol, import_node): bool
    +correct_relative_import(node): str
    +visit_import_all(i)
    +visit_assignment_expr(s)
    +check_valid_comprehension(s): bool
    +visit_assignment_stmt(s)
    +analyze_identity_global_assignment(s): bool
    +should_wait_rhs(rv): bool
    +can_be_type_alias(rv, allow_none): bool
    +can_possibly_be_type_form(s): bool
    +is_type_ref(rv, bare): bool
    +is_none_alias(node): bool
    +record_special_form_lvalue(s)
    +analyze_enum_assign(s): bool
    +analyze_namedtuple_assign(s): bool
    +analyze_typeddict_assign(s): bool
    +analyze_lvalues(s)
    +apply_dynamic_class_hook(s)
    +unwrap_final(s): bool
    +check_final_implicit_def(s)
    +store_final_status(s)
    +flatten_lvalues(lvalues)
    +process_type_annotation(s)
    +is_annotated_protocol_member(s): bool
    +analyze_simple_literal_type(rvalue, is_final)
    +analyze_alias(name, rvalue, allow_placeholder)
    +is_pep_613(s): bool
    +check_and_set_up_type_alias(s): bool
    +disable_invalid_recursive_aliases(s, current_node)
    +analyze_lvalue(lval, nested, explicit_type, is_final, escape_comprehensions, has_explicit_value)
    +analyze_name_lvalue(lvalue, explicit_type, is_final, escape_comprehensions, has_explicit_value)
    +is_final_redefinition(kind, name): bool
    +is_alias_for_final_name(name): bool
    +make_name_lvalue_var(lvalue, kind, inferred, has_explicit_value): Var
    +make_name_lvalue_point_to_existing_def(lval, explicit_type, is_final)
    +analyze_tuple_or_list_lvalue(lval, explicit_type)
    +analyze_member_lvalue(lval, explicit_type, is_final, has_explicit_value)
    +is_self_member_ref(memberexpr): bool
    +check_lvalue_validity(node, ctx)
    +store_declared_types(lvalue, typ)
    +process_typevar_declaration(s): bool
    +check_typevarlike_name(call, name, context): bool
    +get_typevarlike_declaration(s, typevarlike_types)
    +process_typevar_parameters(args, names, kinds, num_values, context)
    +get_typevarlike_argument(typevarlike_name, param_name, param_value, context)
    +extract_typevarlike_name(s, call)
    +process_paramspec_declaration(s): bool
    +process_typevartuple_declaration(s): bool
    +basic_new_typeinfo(name, basetype_or_fallback, line): TypeInfo
    +analyze_value_types(items)
    +check_classvar(s)
    +is_classvar(typ): bool
    +is_final_type(typ): bool
    +fail_invalid_classvar(context)
    +process_module_assignment(lvals, rval, ctx)
    +process__all__(s)
    +process__deletable__(s)
    +process__slots__(s)
    +visit_block(b)
    +visit_block_maybe(b)
    +visit_expression_stmt(s)
    +visit_return_stmt(s)
    +visit_raise_stmt(s)
    +visit_assert_stmt(s)
    +visit_operator_assignment_stmt(s)
    +visit_while_stmt(s)
    +visit_for_stmt(s)
    +visit_break_stmt(s)
    +visit_continue_stmt(s)
    +visit_if_stmt(s)
    +visit_try_stmt(s)
    +analyze_try_stmt(s, visitor)
    +visit_with_stmt(s)
    +visit_del_stmt(s)
    +is_valid_del_target(s): bool
    +visit_global_decl(g)
    +visit_nonlocal_decl(d)
    +visit_match_stmt(s)
    +visit_name_expr(expr)
    +bind_name_expr(expr, sym)
    +visit_super_expr(expr)
    +visit_tuple_expr(expr)
    +visit_list_expr(expr)
    +visit_set_expr(expr)
    +visit_dict_expr(expr)
    +visit_star_expr(expr)
    +visit_yield_from_expr(e)
    +visit_call_expr(expr)
    +translate_dict_call(call)
    +check_fixed_args(expr, numargs, name): bool
    +visit_member_expr(expr)
    +visit_op_expr(expr)
    +visit_comparison_expr(expr)
    +visit_unary_expr(expr)
    +visit_index_expr(expr)
    +analyze_type_application(expr)
    +analyze_type_application_args(expr)
    +visit_slice_expr(expr)
    +visit_cast_expr(expr)
    +visit_assert_type_expr(expr)
    +visit_reveal_expr(expr)
    +visit_type_application(expr)
    +visit_list_comprehension(expr)
    +visit_set_comprehension(expr)
    +visit_dictionary_comprehension(expr)
    +visit_generator_expr(expr)
    +analyze_comp_for(expr)
    +analyze_comp_for_2(expr)
    +visit_lambda_expr(expr)
    +visit_conditional_expr(expr)
    +visit__promote_expr(expr)
    +visit_yield_expr(e)
    +visit_await_expr(expr)
    +visit_as_pattern(p)
    +visit_or_pattern(p)
    +visit_value_pattern(p)
    +visit_sequence_pattern(p)
    +visit_starred_pattern(p)
    +visit_mapping_pattern(p)
    +visit_class_pattern(p)
    +lookup(name, ctx, suppress_errors)
    +is_active_symbol_in_class_body(node): bool
    +is_textually_before_statement(node): bool
    +is_overloaded_item(node, statement): bool
    +is_defined_in_current_module(fullname): bool
    +lookup_qualified(name, ctx, suppress_errors)
    +lookup_type_node(expr)
    +get_module_symbol(node, name)
    +is_missing_module(module): bool
    +implicit_symbol(sym, name, parts, source_type): SymbolTableNode
    +create_getattr_var(getattr_defn, name, fullname)
    +lookup_fully_qualified(fullname): SymbolTableNode
    +lookup_fully_qualified_or_none(fullname)
    +object_type(): Instance
    +str_type(): Instance
    +named_type(fullname, args): Instance
    +named_type_or_none(fullname, args)
    +builtin_type(fully_qualified_name): Instance
    +lookup_current_scope(name)
    +add_symbol(name, node, context, module_public, module_hidden, can_defer, escape_comprehensions): bool
    +add_symbol_skip_local(name, node)
    +add_symbol_table_node(name, symbol, context, can_defer, escape_comprehensions): bool
    +add_redefinition(names, name, symbol)
    +add_local(node, context)
    -_get_node_for_class_scoped_import(name, symbol_node, context)
    +add_imported_symbol(name, node, context, module_public, module_hidden)
    +add_unknown_imported_symbol(name, context, target_name, module_public, module_hidden)
    +tvar_scope_frame(frame)
    +defer(debug_context, force_progress)
    +track_incomplete_refs(): Tag
    +found_incomplete_ref(tag): bool
    +record_incomplete_ref()
    +mark_incomplete(name, node, becomes_typeinfo, module_public, module_hidden)
    +is_incomplete_namespace(fullname): bool
    +process_placeholder(name, kind, ctx, force_progress)
    +cannot_resolve_name(name, kind, ctx)
    +qualified_name(name): str
    +enter(function)
    +is_func_scope(): bool
    +is_nested_within_func_scope(): bool
    +is_class_scope(): bool
    +is_module_scope(): bool
    +current_symbol_kind(): int
    +current_symbol_table(escape_comprehensions): SymbolTable
    +is_global_or_nonlocal(name): bool
    +add_exports(exp_or_exps)
    +name_not_defined(name, ctx, namespace)
    +already_defined(name, ctx, original_ctx, noun)
    +name_already_defined(name, ctx, original_ctx)
    +attribute_already_defined(name, ctx, original_ctx)
    +is_local_name(name): bool
    +in_checked_function(): bool
    +fail(msg, ctx, serious)
    +note(msg, ctx, code)
    +incomplete_feature_enabled(feature, ctx): bool
    +accept(node)
    +expr_to_analyzed_type(expr, report_invalid_types, allow_placeholder, allow_type_any, allow_unbound_tvars, allow_param_spec_literals, allow_unpack)
    +analyze_type_expr(expr)
    +type_analyzer(): TypeAnalyser
    +expr_to_unanalyzed_type(node, allow_unpack): ProperType
    +anal_type(typ)
    +class_type(self_type): Type
    +schedule_patch(priority, patch)
    +report_hang()
    +add_plugin_dependency(trigger, target)
    +add_type_alias_deps(aliases_used, target)
    +is_mangled_global(name): bool
    +is_initial_mangled_global(name): bool
    +parse_bool(expr)
    +parse_str_literal(expr)
    +set_future_import_flags(module_name)
    +is_future_flag_set(flag): bool
    +parse_dataclass_transform_spec(call): DataclassTransformSpec
    +parse_dataclass_transform_field_specifiers(arg)
  }

  class MakeAnyNonExplicit {
    +visit_any(t): Type
    +visit_type_alias_type(t): Type
  }

  class PatternType {
    +type: Type
    +rest_type: Type
    +captures
  }

  class PatternChecker {
    +chk: mypy.checker.TypeChecker
    +msg: MessageBuilder
    +plugin: Plugin
    +subject: Expression
    +subject_type: Type
    +type_context
    +self_match_types
    +non_sequence_match_types
    +options: Options
    +result
    +current_type
    +pattern_type
    +current_type
    +pattern_types
    +pattern_type
    +current_type
    +types
    +capture_types
    +node
    +vars
    +node
    +captures
    +typ
    +typ
    +union_type
    +current_type
    +typ
    +typ
    +current_type
    +value
    +typ
    +typ
    +current_type
    +star_positions
    +star_position
    +star_position
    +required_patterns
    +unpack_index: NoneType
    +inner_types
    +unpack_index
    +size_diff
    +normalized_inner_types
    +it
    +inner_types: normalized_inner_types
    +current_type
    +inner_type
    +inner_type
    +inner_types
    +contracted_new_inner_types
    +contracted_rest_inner_types
    +captures
    +contracted_inner_types
    +pattern_type
    +new_inner_types
    +rest_inner_types
    +new_type: Type
    +rest_type: Type
    +narrowed_inner_types
    +inner_rest_types
    +new_type
    +new_type
    +rest_type
    +new_tuple_type
    +new_inner_type
    +new_inner_type
    +new_type
    +new_type: current_type
    +t
    +items
    +not_none_items
    +t
    +unpack_index
    +unpack
    +unpacked
    +missing
    +new_types
    +new_middle
    +new_types
    +star_length
    +res
    +new_types
    +star_length
    +captures
    +list_type
    +current_type
    +can_match: bool
    +captures
    +inner_type
    +can_match: bool
    +inner_type
    +pattern_type
    +can_match: bool
    +mapping
    +mapping_inst
    +dict_typeinfo
    +rest_type
    +object_type
    +rest_type
    +new_type
    +new_type
    +mapping_type
    +result
    +has_local_errors
    +result
    +result: NoneType
    +result
    +current_type
    +type_info
    +any_type
    +args
    +typ: Type
    +typ
    +typ
    +name
    +name
    +narrowed_type
    +keyword_pairs
    +match_arg_set
    +captures
    +pattern_type
    +captures
    +match_args_type
    +has_local_errors
    +proper_match_args_type
    +match_arg_names
    +match_arg_names
    +keyword_arg_set
    +has_duplicates: bool
    +has_duplicates: bool
    +has_duplicates: bool
    +can_match: bool
    +key_type
    +key_type
    +key_type
    +has_local_errors
    +key_type
    +can_match: bool
    +rest_type: current_type
    +new_type
    +typ
    +sequence
    +types
    +already_captured
    +node
    +proper_type
    +types
    +sequence
    +proper_type
    +proper_type
    +empty_type
    +partial_type
    --
    -__init__(chk, msg, plugin, options)
    +accept(o, type_context): PatternType
    +visit_as_pattern(o): PatternType
    +visit_or_pattern(o): PatternType
    +visit_value_pattern(o): PatternType
    +visit_singleton_pattern(o): PatternType
    +visit_sequence_pattern(o): PatternType
    +get_sequence_type(t, context)
    +contract_starred_pattern_types(types, star_pos, num_patterns)
    +expand_starred_pattern_types(types, star_pos, num_types, original_unpack)
    +visit_starred_pattern(o): PatternType
    +visit_mapping_pattern(o): PatternType
    +get_mapping_item_type(pattern, mapping_type, key)
    +get_simple_mapping_item_type(pattern, mapping_type, key): Type
    +visit_class_pattern(o): PatternType
    +should_self_match(typ): bool
    +can_match_sequence(typ): bool
    +generate_types_from_names(type_names)
    +update_type_map(original_type_map, extra_type_map)
    +construct_sequence_child(outer_type, inner_type): Type
    +early_non_match(): PatternType
  }

  class MixedTraverserVisitor {
    +info
    --
    -__init__()
    +visit_var(var)
    +visit_func(o)
    +visit_class_def(o)
    +visit_type_alias_expr(o)
    +visit_type_var_expr(o)
    +visit_typeddict_expr(o)
    +visit_namedtuple_expr(o)
    +visit__promote_expr(o)
    +visit_newtype_expr(o)
    +visit_assignment_stmt(o)
    +visit_for_stmt(o)
    +visit_with_stmt(o)
    +visit_cast_expr(o)
    +visit_assert_type_expr(o)
    +visit_type_application(o)
    +visit_optional_type(t)
  }

  class SubtypeContext {
    -__init__()
    +check_context(proper_subtype)
  }

  class SubtypeVisitor {
    +members
    +right
    +item
    +unpacked
    +mapped
    +unpacked
    +mapped
    +rname
    +t
    +erased
    +t: erased
    +nominal: bool
    +prefix
    +suffix
    +tvt
    +fallback
    +left_args
    +right_args
    +unpacked
    +type_params
    +type_params
    +nominal: bool
    +nominal: bool
    +item
    +item
    +call
    +right
    +right
    +right
    +right
    +call
    +ret_type
    +ret_type
    +right
    +iter_type
    +iter_type
    +unpack
    +unpack
    +li
    +rfallback
    +lfallback
    +right_unpack_index
    +right_unpack
    +right_unpacked
    +right_item
    +right_prefix: right_unpack_index
    +right_suffix
    +left_unpack_index
    +left_unpack
    +left_unpacked
    +left_item
    +left_prefix: left_unpack_index
    +left_suffix
    +max_overlap
    +repr_items
    +left_repr
    +right
    +check
    +check
    +right
    +call
    +previous_match_left_index
    +matched_overloads
    +found_match: bool
    +subtype_match
    +previous_match_left_index: left_index
    +found_match: bool
    +strict_concat
    +literal_types
    +p_item
    +lit_type
    +item: lit_type
    +fast_check
    +p_item
    +p_item
    +lit_type
    +right
    +item
    +item
    +metaclass
    --
    -__init__(right, subtype_context, proper_subtype)
    +{static} build_subtype_kind(proper_subtype): SubtypeKind
    -_is_subtype(left, right): bool
    +visit_unbound_type(left): bool
    +visit_any(left): bool
    +visit_none_type(left): bool
    +visit_uninhabited_type(left): bool
    +visit_erased_type(left): bool
    +visit_deleted_type(left): bool
    +visit_instance(left): bool
    +visit_type_var(left): bool
    +visit_param_spec(left): bool
    +visit_type_var_tuple(left): bool
    +visit_unpack_type(left): bool
    +visit_parameters(left): bool
    +visit_callable_type(left): bool
    +visit_tuple_type(left): bool
    +variadic_tuple_subtype(left, right): bool
    +visit_typeddict_type(left): bool
    +visit_literal_type(left): bool
    +visit_overloaded(left): bool
    +visit_union_type(left): bool
    +visit_partial_type(left): bool
    +visit_type_type(left): bool
    +visit_type_alias_type(left): bool
  }

  class ArgTypeExpander {
    +original_actual: actual_type
    +actual_type
    +actual_type
    +item
    +unpacked
    +fallback
    +fallback: unpacked
    +item
    +formal_name
    --
    -__init__(context)
    +expand_actual_type(actual_type, actual_kind, formal_name, formal_kind, allow_unpack): Type
  }

  class InvalidSourceList {
  }

  class SourceFinder {
    +sources
    +seen
    +names
    +subpath
    +sub_sources
    +path
    +module_name
    +module
    +name
    +init_file
    +result
    +f
    --
    -__init__(fscache, options)
    +is_explicit_package_base(path): bool
    +find_sources_in_dir(path)
    +crawl_up(path)
    +crawl_up_dir(dir)
    -_crawl_up_helper(dir)
    +get_init_file(dir)
  }

  class Missing {
    -__repr__(): str
  }

  class StubtestFailure {
  }

  class Error {
    +stub_line: NoneType
    +stub_file: NoneType
    +stub_line
    +stub_node
    +stub_file
    +stub_loc_str: str
    +runtime_line: NoneType
    +runtime_file: NoneType
    +runtime_line
    +runtime_file
    +runtime_loc_str: str
    +output
    --
    -__init__(object_path, message, stub_object, runtime_object)
    +is_missing_stub(): bool
    +is_positional_only_related(): bool
    +get_description(concise): str
  }

  class SubClass {
  }

  class Signature {
    +arg_type
    +kw_only
    +ret: str
    +stub_sig
    +stub_args
    +runtime_sig
    +assume_positional_only
    +all_args
    +args
    +name
    +all_types
    +kinds
    +is_opt
    +is_pos
    +sig
    +example_arg_name
    +arg
    --
    -__init__()
    -__str__(): str
    +get_name(): str
    +get_type()
    +has_default(): bool
    +get_desc(): str
    +{static} from_funcitem()
    +{static} from_inspect_signature()
    +{static} from_overloadedfuncdef()
    +get_position(): int
    +get_type(): mypy.types.ProperType
    +get_kind(): nodes.ArgKind
  }

  class _Arguments {
    +modules
    +concise: bool
    +ignore_missing_stub: bool
    +ignore_positional_only: bool
    +allowlist
    +generate_allowlist: bool
    +ignore_unused_allowlist: bool
    +mypy_config_file: str
    +custom_typeshed_dir: str
    +check_typeshed: bool
    +version: str
  }

}

package "venv2.lib.python3.12.site-packages.mypy.dmypy" {
  class AugmentedHelpFormatter {
    -__init__(prog)
  }

  class BadStatus {
  }

}

package "venv2.lib.python3.12.site-packages.mypy.test" {
  class IPCTests {
    +queue
    +msg
    +p
    +connection_name
    +queue
    +msg: str
    +p
    +connection_name
    +queue
    +p
    +connection_name
    +fancy_text: bytes
    +t0
    +t1
    +t0: t1
    --
    +test_transaction_large()
    +test_connect_twice()
    +test_multiple_messages()
    +test_connect_alot()
  }

  class ErrorStreamSuite {
    +required_out_section: bool
    +base_path: str
    +files
    --
    +run_case(testcase)
  }

  class SolveSuite {
    +t_prime
    +free_vars
    --
    +setUp()
    +test_empty_input()
    +test_simple_supertype_constraints()
    +test_simple_subtype_constraints()
    +test_both_kinds_of_constraints()
    +test_unsatisfiable_constraints()
    +test_exactly_specified_result()
    +test_multiple_variables()
    +test_no_constraints_for_var()
    +test_simple_constraints_with_dynamic_type()
    +test_both_normal_and_any_types_in_results()
    +test_poly_no_constraints()
    +test_poly_trivial_free()
    +test_poly_free_pair()
    +test_poly_free_pair_with_bounds()
    +test_poly_free_pair_with_bounds_uninhabited()
    +test_poly_bounded_chain()
    +test_poly_reverse_overlapping_chain()
    +test_poly_reverse_split_chain()
    +test_poly_unsolvable_chain()
    +test_simple_chain_closure()
    +test_reverse_chain_closure()
    +test_secondary_constraint_closure()
    +assert_solve(vars, constraints, results, free_vars, allow_polymorphic)
    +assert_transitive_closure(vars, constraints, graph, lowers, uppers)
    +supc(type_var, bound): Constraint
    +subc(type_var, bound): Constraint
  }

  class DaemonSuite {
    +files: daemon_files
    --
    +run_case(testcase)
  }

  class DaemonUtilitySuite {
    +search
    +fscache
    +res
    +fullpath
    --
    +test_filter_out_missing_top_level_packages()
    +makepath(): str
    +make_file(base, path)
  }

  class ModuleFinderSuite {
    +options
    +options
    +found_module
    +found_module
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    +expected
    +found_module
    --
    +setUp()
    +test__no_namespace_packages__nsx()
    +test__no_namespace_packages__nsx_a()
    +test__no_namespace_packages__find_a_in_pkg1()
    +test__no_namespace_packages__find_b_in_pkg2()
    +test__find_nsx_as_namespace_pkg_in_pkg1()
    +test__find_nsx_a_init_in_pkg1()
    +test__find_nsx_b_init_in_pkg2()
    +test__find_nsx_c_c_in_pkg3()
    +test__find_nsy_a__init_pyi()
    +test__find_nsy_b__init_py()
    +test__find_nsy_c_pyi()
    +test__find_a_in_pkg1()
    +test__find_b_init_in_pkg2()
    +test__find_d_nowhere()
  }

  class ModuleFinderSitePackagesSuite {
    +package_paths
    +options
    +options
    +cases
    +template
    +actual
    +cases
    +template
    +actual
    --
    +setUp()
    +path(): str
    +test__packages_with_ns()
    +test__packages_without_ns()
  }

  class FineGrainedSuite {
    +files
    +use_cache: bool
    +main_src
    +main_path
    +options
    +build_options
    +server
    +num_regular_incremental_steps
    +step: int
    +sources
    +messages
    +messages
    +a
    +steps
    +all_triggered
    +a
    +options
    +response
    +out
    +result
    +result
    +filtered
    +filtered
    +m
    +sources
    +new_messages
    +new_messages
    +updated
    +changed
    +targets
    +triggered
    +updated
    +changed
    +targets
    +expected_stale
    +expected_rechecked
    +expected
    +new_messages
    +a: new_messages
    +m
    +regex
    +alt_m
    +m: alt_m
    +paths
    +base
    +output
    +targets
    +json
    +callsites
    +no_any
    +no_errors
    +m
    +flex_any
    +m
    +use_fixme
    +m
    +max_guesses
    +res
    +val
    +val
    +val
    +val
    +output
    +targets
    +m
    +show
    +verbosity: int
    +verbosity: int
    +verbosity: int
    +m
    +limit
    +include_span
    +include_kind
    +include_object_attrs
    +union_attrs
    +force_reload
    +res
    +val
    +step_bit
    +regex
    +m
    +step_bit
    +regex
    +m
    --
    +should_skip(testcase): bool
    +run_case(testcase)
    +get_options(source, testcase, build_cache): Options
    +run_check(server, sources)
    +build(options, sources)
    +format_triggered(triggered)
    +get_build_steps(program_text): int
    +perform_step(operations, server, options, build_options, testcase, main_src, step, num_regular_incremental_steps)
    +parse_sources(program_text, incremental_step, options)
    +maybe_suggest(step, server, src, tmp_dir)
    +maybe_inspect(step, server, src)
    +get_suggest(program_text, incremental_step)
    +get_inspect(program_text, incremental_step)
  }

  class TestMessageSorting {
    +msgs
    +old_msgs
    +msg1
    +msg2
    +old_msgs
    +msg1: str
    +msg2: str
    +msg3: str
    +old_msgs
    +msg1: str
    +msg2: str
    +new1: str
    +new2: str
    +old_msgs
    --
    +test_simple_sorting()
    +test_long_form_sorting()
    +test_mypy_error_prefix()
    +test_new_file_at_the_end()
  }

  class FineGrainedCacheSuite {
    +use_cache: bool
    +test_name_suffix: str
    +files
  }

  class ParserSuite {
    +required_out_section: bool
    +base_path: str
    +files
    --
    +run_case(testcase)
  }

  class ParseErrorSuite {
    +required_out_section: bool
    +base_path: str
    +files
    --
    +run_case(testcase)
  }

  class PythonCmdlineSuite {
    +files: cmdline_files
    +native_sep: bool
    --
    +run_case(testcase)
  }

  class FakeFSCache {
    -__init__(files)
    +isfile(file): bool
    +isdir(dir): bool
    +listdir(dir)
    +init_under_package_root(file): bool
  }

  class SourceFinderSuite {
    +options
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +options
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +options
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +finder
    +options
    +finder
    +options
    +files
    +finder
    +options
    +files
    +finder
    +options
    +files
    +finder
    +finder
    +options
    +finder
    +options
    +fscache
    +files
    +fscache
    +fscache
    +fscache
    +fscache
    +fscache
    +big_exclude1
    +big_exclude2
    +fscache
    +files
    +fscache
    --
    +setUp()
    +tearDown()
    +test_crawl_no_namespace()
    +test_crawl_namespace()
    +test_crawl_namespace_explicit_base()
    +test_crawl_namespace_multi_dir()
    +test_find_sources_in_dir_no_namespace()
    +test_find_sources_in_dir_namespace()
    +test_find_sources_in_dir_namespace_explicit_base()
    +test_find_sources_in_dir_namespace_multi_dir()
    +test_find_sources_exclude()
  }

  class PEP561Suite {
    +files
    +base_path: str
    --
    +run_case(test_case)
  }

  class ASTDiffSuite {
    +files
    +first_src
    +files_dict
    +second_src
    +options
    +a
    +prefix: str
    +snapshot1
    +snapshot2
    +diff
    +result
    --
    +run_case(testcase)
    +build(source, options)
  }

  class ArgSuite {
    +options
    +sys_ver_str
    +base
    +matching_version
    +matching_version
    +matching_version
    +matching_version
    +special_opts
    +options
    +options
    --
    +test_coherence()
    +test_executable_inference()
  }

  class TypeFixture {
    +obj_tuple
    +signature
    +bool_func
    +n
    +n
    +class_def
    +module_name
    +module_name: str
    +v
    +variance
    +variance: COVARIANT
    +info
    +mro
    +bases
    +bases
    +A
    +target
    +AN
    +A
    +target
    +AN
    +AN
    +args
    --
    -__init__(variance)
    +make_type_var(id, values, upper_bound, variance): TypeVarType
    +make_type_var_tuple(id, upper_bound): TypeVarTupleType
    -_add_bool_dunder(type_info)
    +callable(): CallableType
    +callable_type(): CallableType
    +callable_default(min_args): CallableType
    +callable_var_arg(min_args): CallableType
    +make_type_info(name, module_name, is_abstract, mro, bases, typevars, typevar_tuple_index, variances): TypeInfo
    +def_alias_1(base)
    +def_alias_2(base)
    +non_rec_alias(target, alias_tvars, args): TypeAliasType
  }

  class InterfaceTypeFixture {
    -__init__()
  }

  class SkippedNodeSearcher {
    -__init__()
    +visit_assignment_stmt(s)
    +visit_name_expr(n)
    +visit_int_expr(n)
  }

  class TypeAssertTransformVisitor {
    +type(type): Type
  }

  class StubgenCmdLineSuite {
    +current
    +opts
    +files
    +current
    +opts
    +files
    +current
    +captured_output
    +opts
    +file
    --
    +test_files_found()
    +test_packages_found()
    +test_module_not_found()
    +make_file()
    +run(result)
  }

  class StubgenCliParseSuite {
    +all_mypy_packages
    --
    +test_walk_packages()
  }

  class StubgenUtilSuite {
    +good: str
    +bad: str
    +bad_fixed: str
    +bad: str
    +bad_fixed: str
    +bad: str
    +bad_fixed: str
    +bad: str
    +bad_fixed: str
    +original: bytes
    +dest: bytes
    --
    +test_parse_signature()
    +test_parse_signature_with_args()
    +test_parse_signature_with_optional_args()
    +test_parse_signature_with_default_arg()
    +test_parse_signature_with_qualified_function()
    +test_parse_signature_with_kw_only_arg()
    +test_parse_signature_with_star_arg()
    +test_parse_signature_with_star_star_arg()
    +assert_parse_signature(sig, result)
    +test_build_signature()
    +test_parse_all_signatures()
    +test_find_unique_signatures()
    +test_infer_sig_from_docstring()
    +test_infer_sig_from_docstring_duplicate_args()
    +test_infer_sig_from_docstring_bad_indentation()
    +test_infer_arg_sig_from_anon_docstring()
    +test_infer_prop_type_from_docstring()
    +test_infer_sig_from_docstring_square_brackets()
    +test_remove_misplaced_type_comments_1()
    +test_remove_misplaced_type_comments_2()
    +test_remove_misplaced_type_comments_3()
    +test_remove_misplaced_type_comments_4()
    +test_remove_misplaced_type_comments_5()
    +test_remove_misplaced_type_comments_bytes()
    +test_common_dir_prefix_unix()
    +test_common_dir_prefix_win()
  }

  class StubgenHelpersSuite {
    +test_is_blacklisted_path()
    +test_is_non_library_module()
  }

  class StubgenPythonSuite {
    +required_out_section: bool
    +base_path: str
    +files
    +extra
    +mods
    +source
    +mod
    +options
    +modules
    +out_dir: str
    +a
    +fnam
    +a
    +flags
    +pyversion: NoneType
    +flag_list
    +pyversion
    +flag_list
    +options
    +modules
    --
    +run_case(testcase)
    +run_case_inner(testcase)
    +parse_flags(program_text, extra): Options
    +parse_modules(program_text)
    +add_file(path, result, header)
  }

  class TestBaseClass {
  }

  class TestClass {
    -__init__(arg0)
  }

  class StubgencSuite {
    +output
    +mod
    +gen
    --
    +test_infer_hash_sig()
    +test_infer_getitem_sig()
    +test_infer_setitem_sig()
    +test_infer_eq_op_sig()
    +test_infer_binary_op_sig()
    +test_infer_equality_op_sig()
    +test_infer_unary_op_sig()
    +test_infer_cast_sig()
    +test_generate_class_stub_no_crash_for_object()
    +test_generate_class_stub_variable_type_annotation()
  }

  class TestClassVariableCls {
    +x: int
  }

  class ArgSigSuite {
    +test_repr()
  }

  class IsValidTypeSuite {
    +test_is_valid_type()
  }

  class ModuleInspectSuite {
    +p
    +p
    +p
    --
    +test_python_module()
    +test_python_package()
    +test_c_module()
    +test_non_existent()
  }

  class TestStubInfo {
    +test_is_legacy_bundled_packages()
  }

  class TypeExportSuite {
    +required_out_section: bool
    +files
    +line
    +mask: str
    +mask
    +src
    +options
    +result
    +a
    +map
    +nodes
    +searcher
    +ignored
    +keys
    +ts
    +ts
    +a
    --
    +run_case(testcase)
  }

  class MapActualsToFormalsSuite {
    +any_type
    +result
    +result
    --
    +test_basic()
    +test_positional_only()
    +test_optional()
    +test_callee_star()
    +test_caller_star()
    +test_too_many_caller_args()
    +test_tuple_star()
    +make_tuple(): TupleType
    +test_named_args()
    +test_some_named_args()
    +test_missing_named_arg()
    +test_duplicate_named_arg()
    +test_varargs_and_bare_asterisk()
    +test_keyword_varargs()
    +test_both_kinds_of_varargs()
    +test_special_cases()
    +assert_map(caller_kinds_, callee_kinds_, expected)
    +assert_vararg_map(caller_kinds, callee_kinds, expected, vararg_type)
  }

  class OperandDisjointDictSuite {
    +d
    +d
    +d
    +d
    --
    +new()
    +test_independent_maps()
    +test_partial_merging()
    +test_full_merging()
    +test_merge_with_multiple_overlaps()
  }

  class OperandComparisonGroupingSuite {
    +output
    +x0
    +x1
    +x2
    +x3
    +x4
    +basic_input
    +none_assignable
    +all_assignable
    +x0
    +x1
    +x2
    +x3
    +x4
    +x5
    +x0
    +x1
    +x2
    +x3
    +x4
    +nothing_combined
    +everything_combined
    +two_groups
    +x0
    +x1
    +x2
    +x3
    +groups
    +keymap
    +x0
    +x1
    +single_comparison
    +expected_output
    +assignable_combinations
    +to_group_by
    +keymap
    --
    +literal_keymap(assignable_operands)
    +test_basic_cases()
    +test_multiple_groups()
    +test_multiple_groups_coalescing()
    +test_multiple_groups_different_operators()
    +test_single_pair()
    +test_empty_pair_list()
  }

  class FancyErrorFormattingTestCases {
    +test_trim_source()
    +test_split_words()
  }

  class MypycTest {
    +test_using_mypyc()
  }

  class ConstraintsSuite {
    +fx
    +fx
    +fx
    +fx
    +fx
    +fx
    +fx
    +fx
    +fx
    --
    +setUp()
    +test_no_type_variables()
    +test_basic_type_variable()
    +test_basic_type_var_tuple_subtype()
    +test_basic_type_var_tuple()
    +test_type_var_tuple_with_prefix_and_suffix()
    +test_unpack_homogenous_tuple()
    +test_unpack_homogenous_tuple_with_prefix_and_suffix()
    +test_unpack_with_prefix_and_suffix()
    +test_unpack_tuple_length_non_match()
    +test_var_length_tuple_with_fixed_length_tuple()
  }

  class GraphSuite {
    +a
    +b
    +c
    +d
    +data
    +res
    +vertices
    +edges
    +sccs
    +options
    +errors
    +fscache
    +search_paths
    +manager
    +manager
    +graph
    +res
    +manager
    +graph
    +res
    +ascc
    +scc
    --
    +test_topsort()
    +test_scc()
    -_make_manager(): BuildManager
    +test_sorted_components()
    +test_order_ascc()
  }

  class SemAnalSuite {
    +files: semanal_files
    +native_sep: bool
    --
    +run_case(testcase)
  }

  class SemAnalErrorSuite {
    +files
    --
    +run_case(testcase)
  }

  class SemAnalSymtableSuite {
    +required_out_section: bool
    +files
    +src
    +result
    +a
    +a
    --
    +run_case(testcase)
  }

  class SemAnalTypeInfoSuite {
    +required_out_section: bool
    +files
    +src
    +result
    +a
    +typeinfos
    +a
    +a
    --
    +run_case(testcase)
  }

  class TypeInfoMap {
    +a
    +ti
    --
    -__str__(): str
  }

  class TestFileSystemCache {
    +base
    +fullpath
    --
    +setUp()
    +tearDown()
    +test_isfile_case_1()
    +test_isfile_case_2()
    +test_isfile_case_3()
    +test_isfile_case_other_directory()
    +make_file(path, base)
    +isfile_case(path): bool
  }

  class RefInfoSuite {
    +required_out_section: bool
    +files
    +options
    +src
    +result
    +ref_path
    +data
    +a
    --
    +run_case(testcase)
  }

  class GetDependenciesSuite {
    +files
    +src
    +dump_all
    +options
    +a: messages
    +a
    +deps
    +new_deps
    +line
    +line
    +result
    --
    +run_case(testcase)
    +build(source, options)
  }

  class TypesSuite {
    +u
    +u
    +c
    +c2
    +c
    +c2
    +c
    +c2
    +c3
    +options
    +c
    +v
    +c2
    +B
    +C
    +T
    +NA
    +visitor
    +modules
    +visitor
    +modules
    --
    +setUp()
    +test_any()
    +test_simple_unbound_type()
    +test_generic_unbound_type()
    +test_callable_type()
    +test_callable_type_with_default_args()
    +test_callable_type_with_var_args()
    +test_tuple_type_upper()
    +test_type_variable_binding()
    +test_generic_function_type()
    +test_type_alias_expand_once()
    +test_type_alias_expand_all()
    +test_recursive_nested_in_non_recursive()
    +test_indirection_no_infinite_recursion()
  }

  class TypeOpsSuite {
    +lower_bounds
    +exp
    +tuple_any
    +fx
    +fx
    +fx_co
    +fx_contra
    +fx
    +fx
    +lit1
    +lit2
    +lit3
    +tuple_type
    +tuple_type
    +union_type
    +union_type
    +union_type
    +union_type
    +to
    +always_true
    +to
    +to
    +tup_type
    +union_type
    +to
    +fo
    +fo
    +fo
    +always_false
    +fo
    +fo
    +tup_type
    +union_type
    +fo
    +fx
    +fx
    +fx
    +fx
    +literals
    +fx
    +fx
    +tv
    +n
    --
    +setUp()
    +test_trivial_expand()
    +test_trivial_expand_recursive()
    +test_expand_naked_type_var()
    +test_expand_basic_generic_types()
    +assert_expand(orig, map_items, result)
    +test_trivial_erase()
    +test_erase_with_type_variable()
    +test_erase_with_generic_type()
    +test_erase_with_generic_type_recursive()
    +test_erase_with_tuple_type()
    +test_erase_with_function_type()
    +test_erase_with_type_object()
    +test_erase_with_type_type()
    +assert_erase(orig, result)
    +test_is_more_precise()
    +test_is_proper_subtype()
    +test_is_proper_subtype_covariance()
    +test_is_proper_subtype_contravariance()
    +test_is_proper_subtype_invariance()
    +test_is_proper_subtype_and_subtype_literal_types()
    +test_subtype_aliases()
    +test_empty_tuple_always_false()
    +test_nonempty_tuple_always_true()
    +test_union_can_be_true_if_any_true()
    +test_union_can_not_be_true_if_none_true()
    +test_union_can_be_false_if_any_false()
    +test_union_can_not_be_false_if_none_false()
    +test_true_only_of_false_type_is_uninhabited()
    +test_true_only_of_true_type_is_idempotent()
    +test_true_only_of_instance()
    +test_true_only_of_union()
    +test_false_only_of_true_type_is_uninhabited()
    +test_false_only_tuple()
    +test_false_only_of_false_type_is_idempotent()
    +test_false_only_of_instance()
    +test_false_only_of_union()
    +test_simplified_union()
    +test_simplified_union_with_literals()
    +test_simplified_union_with_str_literals()
    +test_simplify_very_large_union()
    +test_simplified_union_with_str_instance_literals()
    +test_simplified_union_with_mixed_str_literals()
    +assert_simplified_union(original, union)
    +tuple(): TupleType
    +callable(vars): CallableType
  }

  class JoinSuite {
    +true_a
    +false_o
    +j
    +true_any
    +false_o
    +j
    +c
    +fx
    +func
    +c1
    +c2
    +c3
    +c
    +fx
    +any
    +fx
    +t1
    +t2
    +tr
    +j
    +a
    +d
    +lit1
    +lit2
    +lit3
    +result
    +actual
    +expected
    +n
    +n
    --
    +setUp()
    +test_trivial_cases()
    +test_class_subtyping()
    +test_tuples()
    +test_var_tuples()
    +test_function_types()
    +test_type_vars()
    +test_none()
    +test_unbound_type()
    +test_any_type()
    +test_mixed_truth_restricted_type_simple()
    +test_mixed_truth_restricted_type()
    +test_other_mixed_types()
    +test_simple_generics()
    +test_generics_invariant()
    +test_generics_covariant()
    +test_generics_contravariant()
    +test_generics_with_multiple_args()
    +test_generics_with_inheritance()
    +test_generics_with_inheritance_and_shared_supertype()
    +test_generic_types_and_any()
    +test_callables_with_any()
    +test_overloaded()
    +ov(): Overloaded
    +test_overloaded_with_any()
    +ov(): Overloaded
    +test_join_interface_types()
    +test_join_interface_and_class_types()
    +test_join_class_types_with_interface_result()
    +test_generic_interfaces()
    +test_simple_type_objects()
    +test_type_type()
    +test_literal_type()
    +test_variadic_tuple_joins()
    +assert_join(s, t, join)
    +assert_simple_join(s, t, join)
    +tuple(): TupleType
    +var_tuple(t): Instance
    +callable(): CallableType
    +type_callable(): CallableType
  }

  class MeetSuite {
    +fx
    +a
    +lit1
    +lit2
    +lit3
    +result
    +actual
    +expected
    +n
    --
    +setUp()
    +test_trivial_cases()
    +test_class_subtyping()
    +test_tuples()
    +test_function_types()
    +test_type_vars()
    +test_none()
    +test_unbound_type()
    +test_dynamic_type()
    +test_simple_generics()
    +test_generics_with_multiple_args()
    +test_generics_with_inheritance()
    +test_generics_with_inheritance_and_shared_supertype()
    +test_generic_types_and_dynamic()
    +test_callables_with_dynamic()
    +test_meet_interface_types()
    +test_meet_interface_and_class_types()
    +test_meet_class_types_with_shared_interfaces()
    +test_meet_with_generic_interfaces()
    +test_type_type()
    +test_literal_type()
    +assert_meet_uninhabited(s, t)
    +test_variadic_tuple_meets()
    +assert_meet(s, t, meet)
    +assert_simple_meet(s, t, meet)
    +tuple(): TupleType
    +callable(): CallableType
  }

  class SameTypeSuite {
    +a
    +b
    +lit1
    +lit2
    +lit3
    +actual
    +actual2
    --
    +setUp()
    +test_literal_type()
    +assert_same(s, t, strict)
    +assert_not_same(s, t, strict)
    +assert_simple_is_same(s, t, expected, strict)
  }

  class RemoveLastKnownValueSuite {
    +t
    +t
    +t
    +t
    +t
    +t
    +t
    +t
    +t
    +t2
    --
    +setUp()
    +test_optional()
    +test_two_instances()
    +test_multiple_same_instances()
    +test_single_last_known_value()
    +test_last_known_values_with_merge()
    +test_generics()
    +assert_union_result(t, expected)
  }

  class ShallowOverloadMatchingSuite {
    +fx
    +ov
    +fx
    +ov
    +fx
    +ov
    +ov
    +ov
    +ov
    +ov
    +ov
    +fx
    +ov
    +fx
    +ov
    +c
    +result
    +arg_types
    +arg_names
    +arg_kinds
    --
    +setUp()
    +test_simple()
    +test_match_using_types()
    +test_none_special_cases()
    +test_optional_arg()
    +test_two_args()
    +assert_find_shallow_matching_overload_item(ov, call, expected_index)
    +make_overload(items): Overloaded
  }

  class TestExpandTypeLimitGetProperType {
    +ALLOWED_GET_PROPER_TYPES: int
    +code
    +get_proper_type_count
    --
    +test_count_get_proper_type()
  }

  class APISuite {
    +setUp()
    +tearDown()
    +test_capture_bad_opt()
    +test_capture_empty()
    +test_capture_help()
    +test_capture_version()
  }

  class Case {
    -__init__(stub, runtime, error)
  }

  class StubtestUnit {
    +test_basic_good()
    +test_types()
    +test_coroutines()
    +test_arg_name()
    +test_arg_kind()
    +test_default_presence()
    +test_default_value()
    +test_static_class_method()
    +test_arg_mismatch()
    +test_varargs_varkwargs()
    +test_overload()
    +test_property()
    +test_var()
    +test_type_alias()
    +test_enum()
    +test_decorator()
    +test_all_at_runtime_not_stub()
    +test_all_in_stub_not_at_runtime()
    +test_all_in_stub_different_to_all_at_runtime()
    +test_missing()
    +test_missing_no_runtime_all()
    +test_non_public_1()
    +test_non_public_2()
    +test_dunders()
    +test_not_subclassable()
    +test_has_runtime_final_decorator()
    +test_name_mangling()
    +test_mro()
    +test_good_literal()
    +test_bad_literal()
    +test_special_subtype()
    +test_runtime_typing_objects()
    +test_named_tuple()
    +test_named_tuple_typing_and_collections()
    +test_type_var()
    +test_metaclass_match()
    +test_metaclass_abcmeta()
    +test_abstract_methods()
    +test_abstract_properties()
  }

  class StubtestMiscUnit {
    +output
    +expected
    +output
    +expected
    +output
    +output
    +output
    +allowlist
    +output
    +output
    +output
    +output
    +output
    +output
    +output
    +output
    +output_str
    +stdlib
    +stdlib
    +runtime: str
    +stub: str
    +config_file
    +output
    +output
    +output
    +output
    --
    +test_output()
    +test_ignore_flags()
    +test_allowlist()
    +test_mypy_build()
    +test_missing_stubs()
    +test_only_py()
    +test_get_typeshed_stdlib_modules()
    +test_signature()
    +f(b)
    +test_config_file()
    +test_no_modules()
    +test_module_and_typeshed()
  }

  class TestGetTerminalSize {
    +ret
    +mock_environ
    --
    +test_get_terminal_size_in_pty_defaults_to_80()
    +test_parse_location_windows()
  }

  class CoberturaReportSuite {
    +cobertura_package
    +child_package
    +expected_output
    --
    +test_get_line_rate()
    +test_as_xml()
  }

  class ASTMergeSuite {
    +files
    +name
    +kind: SYMTABLE
    +kind: TYPEINFO
    +kind: TYPES
    +kind: AST
    +main_src
    +result
    +fine_grained_manager
    +a
    +target_path
    +old_subexpr
    +a
    +options
    +main_path
    +result
    +module
    +type_map
    +modules
    +a
    +s
    +a
    +a
    +s
    +s
    +typestr
    +a
    +a
    +s
    +a
    +all_types
    +tree
    +type_map
    +typ
    --
    +setup()
    +run_case(testcase)
    +build(source, testcase)
    +build_increment(manager, module_id, path)
    +dump(manager, kind, test_modules)
    +dump_asts(modules)
    +dump_symbol_tables(modules)
    +dump_symbol_table(module_id, symtable)
    +format_symbol_table_node(node): str
    +dump_typeinfos(modules)
    +dump_typeinfos_recursive(names)
    +dump_typeinfo(info)
    +dump_types(modules, manager)
    +format_type(typ): str
  }

  class SubtypingSuite {
    +fx2
    --
    +setUp()
    +test_trivial_cases()
    +test_instance_subtyping()
    +test_simple_generic_instance_subtyping_invariant()
    +test_simple_generic_instance_subtyping_covariant()
    +test_simple_generic_instance_subtyping_contravariant()
    +test_generic_subtyping_with_inheritance_invariant()
    +test_generic_subtyping_with_inheritance_covariant()
    +test_generic_subtyping_with_inheritance_contravariant()
    +test_interface_subtyping()
    +test_generic_interface_subtyping()
    +test_basic_callable_subtyping()
    +test_default_arg_callable_subtyping()
    +test_var_arg_callable_subtyping_1()
    +test_var_arg_callable_subtyping_2()
    +test_var_arg_callable_subtyping_3()
    +test_var_arg_callable_subtyping_4()
    +test_var_arg_callable_subtyping_5()
    +test_var_arg_callable_subtyping_6()
    +test_var_arg_callable_subtyping_7()
    +test_var_arg_callable_subtyping_8()
    +test_var_arg_callable_subtyping_9()
    +test_type_callable_subtyping()
    +test_type_var_tuple()
    +test_type_var_tuple_with_prefix_suffix()
    +test_type_var_tuple_unpacked_variable_length_tuple()
    +assert_subtype(s, t)
    +assert_not_subtype(s, t)
    +assert_strict_subtype(s, t)
    +assert_equivalent(s, t)
    +assert_unrelated(s, t)
  }

  class TransformSuite {
    +required_out_section: bool
    +files
    +native_sep: bool
    --
    +run_case(testcase)
  }

  class PythonEvaluationSuite {
    +files
    +cache_dir
    --
    +run_case(testcase)
  }

  class UpdateFile {
    +module: str
    +content: str
    +target_path: str
  }

  class DeleteFile {
    +module: str
    +path: str
  }

  class DataDrivenTestCase {
    +parent: DataSuiteCollector
    +input
    +output
    +output_inline_start: int
    +output2
    +file: str
    +line: int
    +files
    +test_modules
    +expected_stale_modules
    +expected_rechecked_modules
    +expected_fine_grained_targets
    +normalize_output: bool
    +last_line: int
    +output_files
    +deleted_paths
    +triggered
    +skip: bool
    +parent
    +suite
    +save_dir
    +target_dir
    +target_dir
    +steps
    +m
    +num
    +target_path
    +module
    +operation
    +dir
    +module
    +max_step
    +excrepr: object
    +excrepr
    +excrepr
    +excrepr
    --
    -__init__(parent, suite)
    +runtest()
    +setup()
    +teardown()
    +reportinfo()
    +repr_failure(excinfo, style): str
    +find_steps()
  }

  class TestItem {
    +id: str
    +arg
    +data
    +line: int
    +end_line: int
    --
    +trimmed_newlines(): int
  }

  class DataSuiteCollector {
    +suite: DataSuite
    --
    +collect()
  }

  class DataFileFix {
    +lineno: int
    +end_lineno: int
    +lines
  }

  class DataFileCollector {
    +parent: DataSuiteCollector
    -_fixes
    +collector
    +data_path
    +lines
    --
    +{class} from_parent(parent): DataFileCollector
    +collect()
    +setup()
    +teardown()
    +enqueue_fix(fix)
    -_apply_fixes()
  }

  class DataSuite {
    +files
    +base_path: test_temp_dir
    +data_prefix: test_data_prefix
    +required_out_section: bool
    +native_sep: bool
    +test_name_suffix: str
    --
    +setup()
    +run_case(testcase)
  }

  class TypeCheckSuite {
    +files: typecheck_files
    +incremental
    +num_steps
    +m
    +steps
    +idx
    +ops
    +idx
    +file_weights
    +original_program_text
    +module_data
    +module
    +options
    +sources
    +plugin_dir
    +res: NoneType
    +res
    +a
    +a
    +a
    +msg: str
    +msg: str
    +output
    +msg
    +output
    +name: str
    +expected
    +actual
    +suffix
    +expected_rechecked
    +expected_stale
    +error_paths
    +busted_paths
    +modules
    +missing_paths
    +cachedir_tag
    +hits
    +m
    +p
    +ignore_errors: bool
    +missing
    +meta
    +m
    +alt_regex
    +alt_m
    +m: alt_m
    +module_names
    +out
    +search_paths
    +cache
    +path
    +program_text
    --
    +run_case(testcase)
    -_sort_output_if_needed(testcase, a)
    -_filename(): str
    +run_case_once(testcase, operations, incremental_step)
    +verify_cache(module_data, a, manager, graph)
    +find_error_message_paths(a)
    +find_module_files(manager)
    +find_missing_cache_files(modules, manager)
    +parse_module(program_text, incremental_step)
  }

}

package "venv2.lib.python3.12.site-packages.mypy.test.meta" {
  class ParseTestDataSuite {
    +result
    +result
    +expected_lineno
    +expected
    +actual
    +actual
    --
    +test_parse_invalid_case()
    +test_parse_invalid_section()
    +test_bad_ge_version_check()
    +test_bad_eq_version_check()
  }

  class PytestResult {
    +input: str
    +input_updated: str
    +stdout: str
    +stderr: str
  }

  class DiffHelperSuite {
    +expected
    +actual
    +output
    +output
    +expected
    +actual
    +output
    +output
    +a
    +b
    +a
    +b
    --
    +test_render_diff_range()
    +test_diff_ranges()
  }

  class UpdateDataSuite {
    +result
    +expected
    --
    +test_update_data()
  }

}

package "venv2.lib.python3.12.site-packages.mypy.plugins" {
  class SingledispatchTypeVars {
    +return_type: Type
    +fallback: CallableType
  }

  class RegisterCallableInfo {
    +register_type: Type
    +singledispatch_obj: Instance
  }

  class _MethodInfo {
    +is_static: bool
    +type: CallableType
  }

  class DefaultPlugin {
    +typed_dict_updates
    --
    +get_function_hook(fullname)
    +get_function_signature_hook(fullname)
    +get_method_signature_hook(fullname)
    +get_method_hook(fullname)
    +get_attribute_hook(fullname)
    +get_class_decorator_hook(fullname)
    +get_class_decorator_hook_2(fullname)
  }

  class MethodSpec {
    +args
    +return_type: Type
    +self_type
    +tvar_defs
  }

  class DataclassAttribute {
    +arg_kind: ARG_POS
    +arg_kind: ARG_NAMED_OPT
    +arg_kind: ARG_NAMED
    +arg_kind: ARG_OPT
    +arg_kind
    +arg_kind: ARG_POS
    +data
    +typ
    --
    -__init__(name, alias, is_in_init, is_init_var, has_default, line, column, type, info, kw_only, is_neither_frozen_nor_nonfrozen, api)
    +to_argument(current_info): Argument
    +expand_type(current_info)
    +to_var(current_info): Var
    +serialize(): JsonDict
    +{class} deserialize(info, data, api): DataclassAttribute
    +expand_typevar_from_subtype(sub_type)
  }

  class DataclassTransformer {
    +info
    +attributes
    +decorator_arguments
    +py_version
    +args
    +nameless_var
    +args
    +obj_type
    +self_tvar_expr
    +obj_type
    +order_tvar_def
    +order_return_type
    +order_args
    +existing_method
    +parent_decorator_arguments
    +parent_args
    +str_type
    +literals
    +match_args_type
    +generated_slots
    +slots_type
    +lvalue
    +cls
    +found_attrs
    +found_dataclass_supertype: bool
    +found_dataclass_supertype: bool
    +name: str
    +attr
    +sym_node
    +current_attr_names
    +kw_only
    +lhs
    +sym
    +node
    +is_init_var: bool
    +node_type
    +is_init_var: bool
    +kw_only: bool
    +is_in_init_param
    +is_in_init
    +is_in_init
    +has_default: bool
    +has_default
    +has_default: bool
    +is_kw_only: kw_only
    +field_kw_only_param
    +value
    +is_kw_only: value
    +typ
    +alias: NoneType
    +alias
    +init_type
    +all_attrs
    +found_default: bool
    +found_kw_sentinel: bool
    +context: Context
    +context
    +found_default
    +context: cls
    +context
    +found_kw_sentinel
    +info
    +sym_node
    +var
    +var
    +info
    +var
    +node_type
    +attr_name: str
    +any_type
    +field_type
    +field_type: any_type
    +attr_type
    +var
    +args
    +message: str
    +message: str
    +expression
    +specifier_type
    +parameter
    +literals
    +default
    +t
    +setter
    +super_info
    +setter_type
    --
    -__init__(cls, reason, spec, api)
    +transform(): bool
    -_add_internal_replace_method(attributes)
    -_add_internal_post_init_method(attributes)
    +add_slots(info, attributes)
    +reset_init_only_vars(info, attributes)
    -_get_assignment_statements_from_if_statement(stmt)
    -_get_assignment_statements_from_block(block)
    +collect_attributes()
    -_freeze(attributes)
    -_propertize_callables(attributes, settable)
    -_is_kw_only_type(node): bool
    -_add_dataclass_fields_magic_attribute()
    -_collect_field_args(expr)
    -_get_bool_arg(name, default): bool
    -_get_default_init_value_for_field_specifier(call): bool
    -_infer_dataclass_attr_init_type(sym, name, context)
  }

  class Converter {
    -__init__(init_type, ret_type)
  }

  class Attribute {
    +init_type
    +init_type
    +converter_vars
    +init_vars
    +variables
    +init_type
    +init_type
    +init_type
    +unannotated: bool
    +unannotated: bool
    +init_type
    +proper_type
    +unannotated: bool
    +node
    +arg_kind
    +arg_kind
    +raw_init_type
    +init_type
    +raw_converter_init_type
    +converter_init_type
    --
    -__init__(name, info, has_default, init, kw_only, converter, context, init_type)
    +argument(ctx): Argument
    +serialize(): JsonDict
    +{class} deserialize(info, data, api): Attribute
    +expand_typevar_from_subtype(sub_type)
  }

  class MethodAdder {
    +self_type
    --
    -__init__(ctx)
    +add_method(method_name, args, ret_type, self_type, tvd)
  }

  class ProperTypePlugin {
    +get_function_hook(fullname)
  }

}

package "venv2.lib.python3.12.site-packages.mypy.server" {
  class FineGrainedBuildManager {
    +manager
    +changed_modules
    +removed_set
    +changed_modules
    +initial_set
    +blocking_error: NoneType
    +changed_modules
    +blocking_error
    +result
    +messages: blocker_messages
    +changed_modules
    +changed_modules
    +messages
    +messages
    +changed_modules
    +t0
    +result
    +changed_modules
    +changed_modules
    +t1
    +manager
    +previous_modules
    +graph
    +t0
    +old_snapshots
    +snapshot
    +result
    +t1
    +triggered
    +filtered
    +t2
    --
    -__init__(result)
    +update(changed_modules, removed_modules, followed)
    +trigger(target)
    +flush_cache()
    +update_one(changed_modules, initial_set, removed_set, blocking_error, followed)
    +update_module(module, path, force_removed, followed)
  }

  class NormalUpdate {
    +module: str
    +path: str
    +remaining
    +tree
  }

  class BlockedUpdate {
    +module: str
    +path: str
    +remaining
    +messages
  }

  class SnapshotTypeVisitor {
    +typ
    +tvs
    +tvmap
    +tid
    +tv: TypeVarLikeType
    +tv
    +tv
    +items
    +required
    +items
    +normalized
    --
    +visit_unbound_type(typ): SnapshotItem
    +visit_any(typ): SnapshotItem
    +visit_none_type(typ): SnapshotItem
    +visit_uninhabited_type(typ): SnapshotItem
    +visit_erased_type(typ): SnapshotItem
    +visit_deleted_type(typ): SnapshotItem
    +visit_instance(typ): SnapshotItem
    +visit_type_var(typ): SnapshotItem
    +visit_param_spec(typ): SnapshotItem
    +visit_type_var_tuple(typ): SnapshotItem
    +visit_unpack_type(typ): SnapshotItem
    +visit_parameters(typ): SnapshotItem
    +visit_callable_type(typ): SnapshotItem
    +normalize_callable_variables(typ): CallableType
    +visit_tuple_type(typ): SnapshotItem
    +visit_typeddict_type(typ): SnapshotItem
    +visit_literal_type(typ): SnapshotItem
    +visit_union_type(typ): SnapshotItem
    +visit_overloaded(typ): SnapshotItem
    +visit_partial_type(typ): SnapshotItem
    +visit_type_type(typ): SnapshotItem
    +visit_type_alias_type(typ): SnapshotItem
  }

  class NodeStripVisitor {
    +to_delete
    +key
    +old_type
    +old_is_class_body
    +old_type
    +old_is_class_body
    --
    -__init__(saved_class_attrs)
    +strip_file_top_level(file_node)
    +visit_block(b)
    +visit_class_def(node)
    +save_implicit_attributes(node)
    +visit_func_def(node)
    +visit_decorator(node)
    +visit_overloaded_func_def(node)
    +visit_assignment_stmt(node)
    +visit_import_from(node)
    +visit_import_all(node)
    +visit_for_stmt(node)
    +visit_name_expr(node)
    +visit_member_expr(node)
    +visit_index_expr(node)
    +visit_op_expr(node)
    +strip_ref_expr(node)
    +visit_call_expr(node)
    +visit_super_expr(node)
    +process_lvalue_in_method(lvalue)
    +enter_class(info)
    +enter_method(info)
  }

  class DependencyVisitor {
    +target
    +signature: Type
    +signature
    +variants
    +tname
    +tname
    +tname
    +target
    +old_is_class
    +target
    +rvalue
    +analyzed
    +info
    +prefix
    +typ
    +attr_target
    +info
    +prefix
    +lvalue
    +typ
    +class_name
    +items
    +lvalue
    +rvalue
    +fname
    +init
    +fname
    +fname
    +lvalue_type
    +type_triggers
    +attr_trigger
    +node
    +info
    +object_type
    +lvalue_type
    +type_triggers
    +node
    +lvalue_type
    +lvalue_type
    +lvalue_type
    +method
    +inplace_method
    +item_type
    +typ
    +class_name
    +typ
    +name
    +suffix: str
    +suffix
    +e
    +obj_type
    +typ: obj_type
    +name
    +typ
    +typ
    +arg
    +method
    +left
    +right
    +method
    +rev_method
    +typ
    +typ
    +typ
    +trigger
    +target
    +targets
    +typ
    +typ
    +typ
    +member
    +member
    +triggers
    +targets
    +triggers
    +typ
    +typ
    --
    -__init__(type_map, python_version, alias_deps, options)
    +visit_mypy_file(o)
    +visit_func_def(o)
    +visit_decorator(o)
    +visit_class_def(o)
    +visit_newtype_expr(o)
    +process_type_info(info)
    +visit_import(o)
    +visit_import_from(o)
    +visit_import_all(o)
    +visit_block(o)
    +visit_assignment_stmt(o)
    +process_lvalue(lvalue)
    +is_self_member_ref(memberexpr): bool
    +get_non_partial_lvalue_type(lvalue): Type
    +visit_operator_assignment_stmt(o)
    +visit_for_stmt(o)
    +visit_with_stmt(o)
    +visit_del_stmt(o)
    +process_global_ref_expr(o)
    +visit_name_expr(o)
    +visit_member_expr(e)
    +get_unimported_fullname(e, typ)
    +visit_super_expr(e)
    +visit_call_expr(e)
    +process_isinstance_call(e)
    +visit_cast_expr(e)
    +visit_assert_type_expr(e)
    +visit_type_application(e)
    +visit_index_expr(e)
    +visit_unary_expr(e)
    +visit_op_expr(e)
    +visit_comparison_expr(e)
    +process_binary_op(op, left, right)
    +add_operator_method_dependency(e, method)
    +add_operator_method_dependency_for_type(typ, method)
    +visit_generator_expr(e)
    +visit_dictionary_comprehension(e)
    +visit_star_expr(e)
    +visit_yield_from_expr(e)
    +visit_await_expr(e)
    +add_type_alias_deps(target)
    +add_dependency(trigger, target)
    +add_type_dependencies(typ, target)
    +add_attribute_dependency(typ, name)
    +attribute_triggers(typ, name)
    +add_attribute_dependency_for_expr(e, name)
    +add_iter_dependency(node)
    +use_logical_deps(): bool
    +get_type_triggers(typ)
  }

  class TypeTriggersVisitor {
    +trigger
    +triggers
    +trigger
    +triggers
    +triggers
    +triggers
    +triggers
    +triggers
    +old_triggers
    +triggers
    +triggers
    +triggers
    +triggers
    +triggers
    +triggers
    --
    -__init__(use_logical_deps, seen_aliases)
    +get_type_triggers(typ)
    +visit_instance(typ)
    +visit_type_alias_type(typ)
    +visit_any(typ)
    +visit_none_type(typ)
    +visit_callable_type(typ)
    +visit_overloaded(typ)
    +visit_erased_type(t)
    +visit_deleted_type(typ)
    +visit_partial_type(typ)
    +visit_tuple_type(typ)
    +visit_type_type(typ)
    +visit_type_var(typ)
    +visit_param_spec(typ)
    +visit_type_var_tuple(typ)
    +visit_unpack_type(typ)
    +visit_parameters(typ)
    +visit_typeddict_type(typ)
    +visit_literal_type(typ)
    +visit_unbound_type(typ)
    +visit_uninhabited_type(typ)
    +visit_union_type(typ)
  }

  class SubexpressionFinder {
    -__init__()
    +visit_int_expr(o)
    +visit_name_expr(o)
    +visit_float_expr(o)
    +visit_str_expr(o)
    +visit_bytes_expr(o)
    +visit_unicode_expr(o)
    +visit_complex_expr(o)
    +visit_ellipsis(o)
    +visit_super_expr(o)
    +visit_type_var_expr(o)
    +visit_type_alias_expr(o)
    +visit_namedtuple_expr(o)
    +visit_typeddict_expr(o)
    +visit__promote_expr(o)
    +visit_newtype_expr(o)
    +visit_member_expr(e)
    +visit_yield_from_expr(e)
    +visit_yield_expr(e)
    +visit_call_expr(e)
    +visit_op_expr(e)
    +visit_comparison_expr(e)
    +visit_slice_expr(e)
    +visit_cast_expr(e)
    +visit_assert_type_expr(e)
    +visit_reveal_expr(e)
    +visit_assignment_expr(e)
    +visit_unary_expr(e)
    +visit_list_expr(e)
    +visit_tuple_expr(e)
    +visit_dict_expr(e)
    +visit_set_expr(e)
    +visit_index_expr(e)
    +visit_generator_expr(e)
    +visit_dictionary_comprehension(e)
    +visit_list_comprehension(e)
    +visit_set_comprehension(e)
    +visit_conditional_expr(e)
    +visit_type_application(e)
    +visit_lambda_expr(e)
    +visit_star_expr(e)
    +visit_await_expr(e)
    +add(e)
  }

  class NodeReplaceVisitor {
    +node
    +node
    +info
    +new
    +skip_slots
    +skip_slots
    +new
    +result
    +node
    --
    -__init__(replacements)
    +visit_mypy_file(node)
    +visit_block(node)
    +visit_func_def(node)
    +visit_overloaded_func_def(node)
    +visit_class_def(node)
    +process_base_func(node)
    +process_type_var_def(tv)
    +process_param_spec_def(tv)
    +process_type_var_tuple_def(tv)
    +visit_assignment_stmt(node)
    +visit_name_expr(node)
    +visit_member_expr(node)
    +visit_ref_expr(node)
    +visit_namedtuple_expr(node)
    +visit_cast_expr(node)
    +visit_assert_type_expr(node)
    +visit_super_expr(node)
    +visit_call_expr(node)
    +visit_newtype_expr(node)
    +visit_lambda_expr(node)
    +visit_typeddict_expr(node)
    +visit_enum_call_expr(node)
    +visit_var(node)
    +visit_type_alias(node)
    +fixup(node): SN
    +fixup_and_reset_typeinfo(node): TypeInfo
    +fixup_type(typ)
    +process_type_info(info)
    +process_synthetic_type_info(info)
    +replace_statements(nodes)
  }

  class TypeReplaceVisitor {
    +new
    --
    -__init__(replacements)
    +visit_instance(typ)
    +visit_type_alias_type(typ)
    +visit_any(typ)
    +visit_none_type(typ)
    +visit_callable_type(typ)
    +visit_overloaded(t)
    +visit_erased_type(t)
    +visit_deleted_type(typ)
    +visit_partial_type(typ)
    +visit_tuple_type(typ)
    +visit_type_type(typ)
    +visit_type_var(typ)
    +visit_param_spec(typ)
    +visit_type_var_tuple(typ)
    +visit_unpack_type(typ)
    +visit_parameters(typ)
    +visit_typeddict_type(typ)
    +visit_raw_expression_type(t)
    +visit_literal_type(typ)
    +visit_unbound_type(typ)
    +visit_type_list(typ)
    +visit_callable_argument(typ)
    +visit_ellipsis_type(typ)
    +visit_uninhabited_type(typ)
    +visit_union_type(typ)
    +visit_placeholder_type(t)
    +fixup(node): SN
  }

}

package "venv2.lib.python3.12.site-packages.rich" {
  class Screen {
    +renderable
    +style
    +render_options
    +lines
    +lines
    +new_line
    --
    -__init__()
    -__rich_console__(console, options)
  }

  class RichHandler {
    +KEYWORDS
    +HIGHLIGHTER_CLASS
    +level_name
    +level_text
    +message
    +traceback: NoneType
    +traceback
    +message
    +formatter
    +message
    +message_renderable
    +log_renderable
    +use_markup
    +message_text
    +highlighter
    +message_text
    +path
    +level
    +time_format
    +log_time
    +log_renderable
    --
    -__init__(level, console)
    +get_level_text(record): Text
    +emit(record)
    +render_message(record, message)
    +render()
  }

  class Measurement {
    +minimum: int
    +maximum: int
    +minimum
    +width
    +measurement: self
    +measurement
    +measurement
    +renderable
    +renderable
    +get_console_width
    +render_width
    --
    +span(): int
    +normalize()
    +with_maximum(width)
    +with_minimum(width)
    +clamp(min_width, max_width)
    +{class} get(console, options, renderable)
  }

  class Tree {
    +ASCII_GUIDES
    +TREE_GUIDES
    +node
    +stack
    +pop
    +push
    +new_line
    +get_style
    +null_style
    +guide_style
    +line
    +guide
    +line
    +levels
    +guide_style_stack
    +style_stack
    +remove_guide_styles
    +depth: int
    +stack_node
    +guide_style
    +guide_style
    +style
    +prefix
    +renderable_lines
    +stack
    +pop
    +push
    +minimum: int
    +maximum: int
    +measure
    +level: int
    +iter_tree
    +tree
    +indent
    +minimum
    +maximum
    --
    -__init__(label)
    +add(label)
    -__rich_console__(console, options)
    +make_guide(style): Segment
    -__rich_measure__(console, options)
  }

  class NoChange {
  }

  class ConsoleDimensions {
    +width: int
    +height: int
  }

  class ConsoleOptions {
    +size: ConsoleDimensions
    +legacy_windows: bool
    +min_width: int
    +max_width: int
    +is_terminal: bool
    +encoding: str
    +max_height: int
    +justify
    +overflow
    +no_wrap
    +highlight
    +markup
    +height
    +options: ConsoleOptions
    +options
    +options
    +options
    +options
    +options
    --
    +ascii_only(): bool
    +copy()
    +update()
    +update_width(width)
    +update_height(height)
    +reset_height()
    +update_dimensions(width, height)
  }

  class RichCast {
    -__rich__()
  }

  class ConsoleRenderable {
    -__rich_console__(console, options)
  }

  class CaptureError {
  }

  class NewLine {
    -__init__(count)
    -__rich_console__(console, options)
  }

  class ScreenUpdate {
    +x
    +move_to
    --
    -__init__(lines, x, y)
    -__rich_console__(console, options): RenderResult
  }

  class Capture {
    -__init__(console)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    +get(): str
  }

  class ThemeContext {
    -__init__(console, theme, inherit)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class PagerContext {
    +buffer
    +segments
    +segments
    +segments
    +content
    --
    -__init__(console, pager, styles, links)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class ScreenContext {
    -__init__(console, hide_cursor, style)
    +update()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class Group {
    -__init__()
    +renderables()
    -__rich_measure__(console, options)
    -__rich_console__(console, options): RenderResult
  }

  class ConsoleThreadLocals {
    +theme_stack: ThemeStack
    +buffer
    +buffer_index: int
  }

  class RenderHook {
    +process_renderables(renderables)
  }

  class Console {
    -_environ
    +jupyter_columns
    +width
    +width: JUPYTER_DEFAULT_COLUMNS
    +jupyter_lines
    +height
    +height: JUPYTER_DEFAULT_LINES
    +columns
    +width
    +lines
    +height
    +file
    +file
    +file: NULL_FILE
    +windows_console_features
    +color_term
    +term
    +color_system
    +render_result
    +force_color
    +isatty
    +is_dumb
    +width
    +height
    +streams
    +columns
    +width
    +lines
    +height
    +width
    +height
    +capture
    +status_renderable
    +changed: bool
    +changed: bool
    +measurement
    +render_iterable: RenderResult
    +renderable
    +render_iterable
    +text_renderable
    +render_iterable
    +iter_render
    +render_options
    +render_height
    +render_height
    +lines
    +extra_lines
    +pad_line
    +emoji_enabled
    +markup_enabled
    +highlight_enabled
    +rich_text
    +rich_text
    +highlight_text
    +style
    +style
    +renderables
    +text
    +append_text
    +append: _append
    +append: align_append
    -_highlighter: HighlighterType
    +sep_text
    +renderable
    +style
    +renderables
    +rule
    +raw_output: str
    +objects
    +soft_wrap
    +no_wrap: bool
    +overflow: str
    +crop: bool
    +render_hooks
    +renderables
    +renderables
    +render_options
    +new_segments
    +extend
    +render
    +buffer_extend
    +json_renderable
    +json_renderable
    +render_options
    +x: int
    +y: int
    +render_options
    +render_options
    +lines
    +screen_update
    +segments
    +traceback
    +frame
    +frame
    +frame_info
    +objects
    +render_hooks
    +renderables
    +renderables
    +link_path
    +path
    +locals_map
    +renderables
    +renderables
    +new_segments
    +extend
    +render
    +render_options
    +buffer_extend
    +devnull
    +use_legacy_windows_render: bool
    +fileno
    +use_legacy_windows_render
    +buffer
    +buffer
    +text
    +write
    +MAX_WRITE
    +batch
    +batch_append
    +size: int
    +size: int
    +text
    +output
    +append
    +color_system
    +legacy_windows
    +not_terminal
    +buffer
    +rendered
    +result
    +result
    +result
    +text
    +text
    +text
    +fragments
    +append
    +stylesheet: str
    +render_code_format
    +text
    +rule
    +text
    +text
    +styles
    +text
    +rule
    +style_number
    +text
    +text
    +stylesheet_rules
    +stylesheet_append
    +stylesheet
    +rendered_code
    +html
    +style_cache
    +css_rules
    +color
    +bgcolor
    +color
    +css
    +width
    +char_height: int
    +char_width
    +line_height
    +margin_top: int
    +margin_right: int
    +margin_bottom: int
    +margin_left: int
    +padding_top: int
    +padding_right: int
    +padding_bottom: int
    +padding_left: int
    +padding_width
    +padding_height
    +margin_width
    +margin_height
    +text_backgrounds
    +text_group
    +classes
    +style_no: int
    +tag_attribs
    +segments
    +unique_id
    +y: int
    +x: int
    +style
    +rules
    +class_name
    +has_background: bool
    +background
    +bgcolor
    +has_background
    +background
    +text_length
    +line_offsets
    +lines
    +styles
    +backgrounds
    +matrix
    +terminal_width
    +terminal_height
    +chrome
    +title_color
    +svg
    +svg
    --
    -__init__()
    -__repr__(): str
    +file()
    +file(new_file)
    -_buffer()
    -_buffer_index(): int
    -_buffer_index(value)
    -_theme_stack(): ThemeStack
    -_detect_color_system()
    -_enter_buffer()
    -_exit_buffer()
    +set_live(live)
    +clear_live()
    +push_render_hook(hook)
    +pop_render_hook()
    -__enter__()
    -__exit__(exc_type, exc_value, traceback)
    +begin_capture()
    +end_capture(): str
    +push_theme(theme)
    +pop_theme()
    +use_theme(theme): ThemeContext
    +color_system()
    +encoding(): str
    +is_terminal(): bool
    +is_dumb_terminal(): bool
    +options(): ConsoleOptions
    +size(): ConsoleDimensions
    +size(new_size)
    +width(): int
    +width(width)
    +height(): int
    +height(height)
    +bell()
    +capture(): Capture
    +pager(pager, styles, links): PagerContext
    +line(count)
    +clear(home)
    +status(status)
    +show_cursor(show): bool
    +set_alt_screen(enable): bool
    +is_alt_screen(): bool
    +set_window_title(title): bool
    +screen(hide_cursor, style)
    +measure(renderable): Measurement
    +render(renderable, options)
    +render_lines(renderable, options)
    +render_str(text)
    +get_style(name): Style
    -_collect_renderables(objects, sep, end)
    +align_append()
    +check_text()
    +rule(title)
    +control()
    +out()
    +print()
    +print_json(json)
    +update_screen(renderable)
    +update_screen_lines(lines, x, y)
    +print_exception()
    -{static} _caller_frame_info(currentframe)
    +log()
    +on_broken_pipe()
    -_check_buffer()
    -_write_buffer()
    -_render_buffer(buffer): str
    +input(prompt): str
    +export_text(): str
    +save_text(path)
    +export_html(): str
    +save_html(path)
    +export_svg(): str
    +get_svg_style(): str
    +escape_text(): str
    +make_tag(content): str
    +stringify(): str
    +save_svg(path)
  }

  class LiveRender {
    +renderable
    +style
    +lines
    +shape
    +lines
    +shape
    +lines
    +overflow_text
    +shape
    +new_line
    --
    -__init__(renderable, style, vertical_overflow)
    +set_renderable(renderable)
    +position_cursor(): Control
    +restore_cursor(): Control
    -__rich_console__(console, options): RenderResult
  }

  class Box {
    +box: self
    +box
    +box: ASCII
    +parts
    +append
    +left
    +horizontal
    +cross
    +right
    +left
    +horizontal
    +cross
    +right
    +left
    +horizontal: str
    +cross
    +right
    +left
    +horizontal
    +cross
    +right
    +parts
    +append
    +parts
    +append
    --
    -__init__(box)
    -__repr__(): str
    -__str__(): str
    +substitute(options, safe)
    +get_plain_headed_box()
    +get_top(widths): str
    +get_row(widths, level, edge): str
    +get_bottom(widths): str
  }

  class ColorSystem {
    +STANDARD: int
    +EIGHT_BIT: int
    +TRUECOLOR: int
    +WINDOWS: int
    --
    -__repr__(): str
    -__str__(): str
  }

  class ColorType {
    +DEFAULT: int
    +STANDARD: int
    +EIGHT_BIT: int
    +TRUECOLOR: int
    +WINDOWS: int
    --
    -__repr__(): str
  }

  class ColorParseError {
  }

  class Color {
    +name: str
    +type: ColorType
    +number
    +triplet
    +theme: DEFAULT_TERMINAL_THEME
    +original_color: color
    +color
    +color_number
    +color_match
    +triplet
    +number
    +components
    +triplet
    +number
    +number
    +gray
    +color_number: int
    +color_number: int
    +color_number
    +six_red
    +six_green
    +six_blue
    +color_number
    +triplet
    +triplet
    +color_number
    +triplet
    +triplet
    +color_number
    --
    -__rich__()
    -__rich_repr__(): Result
    +system(): ColorSystem
    +is_system_defined(): bool
    +is_default(): bool
    +get_truecolor(theme, foreground): ColorTriplet
    +{class} from_ansi(number)
    +{class} from_triplet(triplet)
    +{class} from_rgb(red, green, blue)
    +{class} default()
    +{class} parse(color)
    +get_ansi_codes(foreground)
    +downgrade(system)
  }

  class Align {
    +align
    +width
    +rendered
    +lines
    +lines
    +new_line
    +excess_space
    +style
    +pad
    +left
    +pad
    +pad_right
    +pad
    +blank_line
    +vertical_height
    +iter_segments
    +bottom_space
    +iter_segments
    +top_space
    +bottom_space
    +iter_segments
    +top_space
    +iter_segments
    +iter_segments
    +style
    +iter_segments
    +measurement
    --
    -__init__(renderable, align, style)
    -__repr__(): str
    +{class} left(renderable, style)
    +{class} center(renderable, style)
    +{class} right(renderable, style)
    -__rich_console__(console, options)
    +generate_segments()
    +blank_lines()
    -__rich_measure__(console, options): Measurement
  }

  class VerticalCenter {
    +style
    +lines
    +new_line
    +height
    +top_space
    +bottom_space
    +blank_line
    +measurement
    --
    -__init__(renderable, style)
    -__repr__(): str
    -__rich_console__(console, options)
    +blank_lines()
    -__rich_measure__(console, options): Measurement
  }

  class Theme {
    +styles
    +config
    +config
    +styles
    +theme
    --
    -__init__(styles, inherit)
    +config(): str
    +{class} from_file(config_file, source, inherit)
    +{class} read(path, inherit, encoding)
  }

  class ThemeStackError {
  }

  class ThemeStack {
    +styles
    +styles
    --
    -__init__(theme)
    +push_theme(theme, inherit)
    +pop_theme()
  }

  class _Bit {
    -__init__(bit_no)
    -__get__(obj, objtype)
  }

  class Style {
    -_color
    -_bgcolor
    -_attributes: int
    -_set_attributes: int
    -_hash
    -_null: bool
    -_meta
    +STYLE_ATTRIBUTES
    +style: Style
    +style: Style
    +meta
    +bold
    +dim
    +italic
    +underline
    +blink
    +blink2
    +reverse
    +conceal
    +strike
    +underline2
    +frame
    +encircle
    +overline
    +attributes
    +append
    +bits
    +sgr
    +append
    +attributes
    +style: Style
    +STYLE_ATTRIBUTES
    +color
    +bgcolor
    +attributes
    +link
    +words
    +word
    +word
    +bgcolor: word
    +word
    +attribute
    +word
    +link: word
    +color: word
    +style
    +theme
    +css
    +append
    +color
    +bgcolor
    +foreground_color
    +color
    +theme_color
    +theme_color
    +iter_styles
    +iter_styles
    +style: Style
    +style: Style
    +style: Style
    +attrs
    +rendered
    +rendered
    +text
    +new_style: Style
    +combined_style
    --
    -__init__()
    -_make_color(): Color
    +{class} null()
    +{class} from_color(color, bgcolor)
    +{class} from_meta(meta)
    +{class} on(meta)
    +link_id(): str
    -__str__(): str
    -__bool__(): bool
    -_make_ansi_codes(color_system): str
    +{class} normalize(style): str
    +{class} pick_first(): StyleType
    -__rich_repr__(): Result
    -__eq__(other): bool
    -__ne__(other): bool
    -__hash__(): int
    +color()
    +bgcolor()
    +link()
    +transparent_background(): bool
    +background_style()
    +meta()
    +without_color()
    +{class} parse(style_definition)
    +get_html_style(theme): str
    +{class} combine(styles)
    +{class} chain()
    +copy()
    +clear_meta_and_links()
    +update_link(link)
    +render(text): str
    +test(text)
    -_add(style)
    -__add__(style)
  }

  class StyleStack {
    -__init__(default_style)
    -__repr__(): str
    +current(): Style
    +push(style)
    +pop(): Style
  }

  class LogRender {
    +output
    +row
    +log_time
    +time_format
    +log_time_display
    +log_time_display
    +path_text
    --
    -__init__(show_time, show_level, show_path, time_format, omit_repeated_times, level_width)
    -__call__(console, renderables, log_time, time_format, level, path, line_no, link_path)
  }

  class NoEmoji {
  }

  class Emoji {
    +VARIANTS
    --
    -__init__(name, style, variant)
    +{class} replace(text): str
    -__repr__(): str
    -__str__(): str
    -__rich_console__(console, options)
  }

  class LayoutRender {
    +region: Region
    +render
  }

  class LayoutError {
  }

  class NoSplitter {
  }

  class _Placeholder {
    +highlighter
    +width
    +height
    +layout
    +title
    --
    -__init__(layout, style)
    -__rich_console__(console, options): RenderResult
  }

  class Splitter {
    +name: str
    --
    +get_tree_icon(): str
    +divide(children, region)
  }

  class RowSplitter {
    +name: str
    +render_widths
    +offset: int
    --
    +get_tree_icon(): str
    +divide(children, region)
  }

  class ColumnSplitter {
    +name: str
    +render_heights
    +offset: int
    --
    +get_tree_icon(): str
    +divide(children, region)
  }

  class Layout {
    +splitters
    +named_layout
    +layout
    +icon
    +table
    +text: RenderableType
    +layout: self
    +tree
    +layout
    +lines
    +stack
    +push
    +pop
    +layout_regions
    +append_layout_region
    +children
    +region_map
    +render_width
    +render_height
    +region_map
    +layout_regions
    +render_map
    +render_lines
    +update_dimensions
    +lines
    +width
    +height
    +render_map
    +layout_lines
    +new_line
    --
    -__init__(renderable)
    -__rich_repr__(): Result
    +renderable(): RenderableType
    +children()
    +map(): RenderMap
    +get(name)
    -__getitem__(name)
    +tree()
    +summary(): Table
    +recurse(layout)
    +split()
    +add_split()
    +split_row()
    +split_column()
    +unsplit()
    +update(renderable)
    +refresh_screen(console, layout_name)
    -_make_region_map(width, height): RegionMap
    +render(console, options): RenderMap
    -__rich_console__(console, options): RenderResult
  }

  class Renderables {
    +dimensions
    --
    -__init__(renderables)
    -__rich_console__(console, options)
    -__rich_measure__(console, options)
    +append(renderable)
    -__iter__()
  }

  class Lines {
    +words
    +words_size
    +num_spaces
    +spaces
    +index: int
    +index
    +tokens
    +style
    +next_style
    +space_style
    --
    -__init__(lines)
    -__repr__(): str
    -__iter__()
    -__getitem__(index)
    -__getitem__(index)
    -__getitem__(index)
    -__setitem__(index, value)
    -__len__(): int
    -__rich_console__(console, options)
    +append(line)
    +extend(lines)
    +pop(index)
    +justify(console, width, justify, overflow)
  }

  class Frame {
    +filename: str
    +lineno: int
    +name: str
    +line: str
    +locals
    +last_instruction
  }

  class _SyntaxError {
    +offset: int
    +filename: str
    +line: str
    +lineno: int
    +msg: str
  }

  class Stack {
    +top(): T
    +push(item)
  }

  class Trace {
    +stacks
  }

  class PathHighlighter {
    +highlights
  }

  class Traceback {
    +LEXERS
    +trace
    +path
    +path: suppress_entity
    +path
    +rich_traceback
    +stacks
    +is_cause: bool
    +stack
    +append
    +filename
    +last_instruction
    +last_instruction: NoneType
    +instruction_index
    +instruction_position
    +last_instruction
    +filename
    +frame
    +cause
    +exc_type
    +exc_value: cause
    +traceback
    +is_cause: bool
    +cause
    +exc_type
    +exc_value: cause
    +traceback
    +is_cause: bool
    +trace
    +theme
    +background_style
    +token_style
    +traceback_theme
    +highlighter
    +stack_renderable: ConsoleRenderable
    +stack_renderable
    +highlighter
    +path_highlighter
    +text
    +syntax_error_text
    +offset
    +ext
    +new_line_index
    +first_line
    +path_highlighter
    +theme
    +exclude_frames
    +exclude_frames
    +excluded: bool
    +excluded: bool
    +excluded: bool
    +first
    +frame_filename
    +suppressed
    +text
    +text
    +code
    +lexer_name
    +syntax
    --
    -__init__(trace)
    +{class} from_exception(exc_type, exc_value, traceback)
    +{class} extract(exc_type, exc_value, traceback): Trace
    +safe_str(): str
    +get_locals()
    -__rich_console__(console, options): RenderResult
    -_render_syntax_error(syntax_error): RenderResult
    -{class} _guess_lexer(filename, code): str
    -_render_stack(stack): RenderResult
    +read_code(): str
    +render_locals()
  }

  class Region {
    +x: int
    +y: int
    +width: int
    +height: int
  }

  class Control {
    +control_codes
    +rendered_codes
    +control: ControlType
    +control
    --
    -__init__()
    +{class} bell()
    +{class} home()
    +{class} move(x, y)
    +get_codes()
    +{class} move_to_column(x, y)
    +{class} move_to(x, y)
    +{class} clear()
    +{class} show_cursor(show)
    +{class} alt_screen(enable)
    +{class} title(title)
    -__str__(): str
    -__rich_console__(console, options)
  }

  class NullFile {
    +close()
    +isatty(): bool
    +read(__n): str
    +readable(): bool
    +readline(__limit): str
    +readlines(__hint)
    +seek(__offset, __whence): int
    +seekable(): bool
    +tell(): int
    +truncate(__size): int
    +writable(): bool
    +writelines(__lines)
    -__next__(): str
    -__iter__()
    -__enter__()
    -__exit__(__t, __value, __traceback)
    +write(text): int
    +flush()
    +fileno(): int
  }

  class FileProxy {
    +buffer
    +lines
    +console
    +output
    +output
    --
    -__init__(console, file)
    +rich_proxied_file()
    -__getattr__(name): Any
    +write(text): int
    +flush()
    +fileno(): int
  }

  class Palette {
    +table
    +get_color
    +red_mean
    +red
    +green
    +blue
    +min_index
    --
    -__init__(colors)
    -__getitem__(number): ColorTriplet
    -__rich__()
    +match(color): int
    +get_color_distance(): float
  }

  class ColorBox {
    +h
    +l
    +bgcolor
    +color
    --
    -__rich_console__(console, options): RenderResult
    -__rich_measure__(console, options): Measurement
  }

  class Tag {
    +name: str
    +parameters
    --
    -__str__(): str
    +markup(): str
  }

  class Edge {
    +size
    +ratio: int
    +minimum_size: int
  }

  class E {
    +size
    +ratio: int
    +minimum_size: int
  }

  class ReprError {
  }

  class Foo {
  }

  class Constrain {
    +child_options
    +options
    +measurement
    --
    -__init__(renderable, width)
    -__rich_console__(console, options)
    -__rich_measure__(console, options)
  }

  class RichFormatter {
    +pprint: bool
    --
    -__call__(value): Any
  }

  class Pretty {
    +pretty_str
    +pretty_text
    +pretty_text
    +pretty_text
    +pretty_str
    +text_width
    --
    -__init__(_object, highlighter)
    -__rich_console__(console, options)
    -__rich_measure__(console, options)
  }

  class Node {
    +key_repr: str
    +value_repr: str
    +open_brace: str
    +close_brace: str
    +empty: str
    +last: bool
    +is_tuple: bool
    +is_namedtuple: bool
    +children
    +key_separator: str
    +separator: str
    +total_length: start_length
    +repr_text
    +lines
    +line_no: int
    +line
    +repr_str
    --
    +iter_tokens()
    +check_length(start_length, max_length): bool
    -__str__(): str
    +render(max_width, indent_size, expand_all): str
  }

  class _Line {
    +parent
    +is_root: bool
    +node
    +text: str
    +suffix: str
    +whitespace: str
    +expanded: bool
    +last: bool
    +start_length
    +node
    +whitespace
    +new_line
    +new_line
    +child_whitespace
    +tuple_of_one
    +separator
    +line
    --
    +expandable(): bool
    +check_length(max_length): bool
    +expand(indent_size)
    -__str__(): str
  }

  class BrokenRepr {
    -__repr__(): str
  }

  class StockKeepingUnit {
    +name: str
    +description: str
    +price: float
    +category: str
    +reviews
  }

  class Thing {
    -__repr__(): str
  }

  class Columns {
    +render_str
    +renderables
    +width_padding
    +max_width
    +widths
    +column_count
    +get_measurement
    +renderable_widths
    +renderable_widths
    +item_count
    +width_renderables
    +column_lengths
    +row_count
    +cells
    +row: int
    +col: int
    +row: int
    +table
    +column_count
    +column_no: int
    +total_width
    +column_count
    +column_no
    +get_renderable
    +align
    +right_to_left
    +add_row
    +row
    +row
    --
    -__init__(renderables, padding)
    +add_renderable(renderable)
    -__rich_console__(console, options): RenderResult
    +iter_renderables()
  }

  class Rule {
    +width
    +characters
    +chars_len
    +title_text
    +title_text
    +required_space
    +truncate_width
    +rule_text
    +side_width
    +left
    +right_length
    +right
    +rule_text
    --
    -__init__(title)
    -__repr__(): str
    -__rich_console__(console, options): RenderResult
    -_rule_line(chars_len, width): Text
    -__rich_measure__(console, options): Measurement
  }

  class Inspect {
    +methods: bool
    +private: bool
    +dunder: bool
    +title_str
    +title_text
    +source_filename
    +source_filename
    +callable_name
    +signature_text
    +qualname
    +prefix: str
    +prefix: str
    +prefix: str
    +qual_signature
    +obj
    +keys
    +total_items
    +keys
    +keys
    +not_shown_count
    +items
    +items_table
    +add_row
    +highlighter
    +signature
    +doc_text
    +doc_text
    +key_text
    +warning
    +docs
    +doc
    +docs
    +docs
    +docs
    --
    -__init__(obj)
    -_make_title(obj): Text
    -__rich__(): Panel
    -_get_signature(name, obj)
    -_render()
    +sort_items()
    +safe_getattr()
    -_get_formatted_doc(object_)
  }

  class MarkdownElement {
    +new_line
    --
    +{class} create(markdown, token): MarkdownElement
    +on_enter(context)
    +on_text(context, text)
    +on_leave(context)
    +on_child_close(context, child): bool
    -__rich_console__(console, options): RenderResult
  }

  class UnknownElement {
  }

  class TextElement {
    +style_name: str
    --
    +on_enter(context)
    +on_text(context, text)
    +on_leave(context)
  }

  class Paragraph {
    +style_name: str
    +justify: JustifyMethod
    --
    +{class} create(markdown, token): Paragraph
    -__init__(justify)
    -__rich_console__(console, options): RenderResult
  }

  class Heading {
    +text
    --
    +{class} create(markdown, token): Heading
    +on_enter(context)
    -__init__(tag)
    -__rich_console__(console, options): RenderResult
  }

  class CodeBlock {
    +style_name: str
    +node_info
    +lexer_name
    +code
    +syntax
    --
    +{class} create(markdown, token): CodeBlock
    -__init__(lexer_name, theme)
    -__rich_console__(console, options): RenderResult
  }

  class BlockQuote {
    +style_name: str
    +render_options
    +lines
    +style
    +new_line
    +padding
    --
    -__init__()
    +on_child_close(context, child): bool
    -__rich_console__(console, options): RenderResult
  }

  class HorizontalRule {
    +new_line: bool
    +style
    --
    -__rich_console__(console, options): RenderResult
  }

  class TableElement {
    +table
    +row_content
    --
    -__init__()
    +on_child_close(context, child): bool
    -__rich_console__(console, options): RenderResult
  }

  class TableHeaderElement {
    -__init__()
    +on_child_close(context, child): bool
  }

  class TableBodyElement {
    -__init__()
    +on_child_close(context, child): bool
  }

  class TableRowElement {
    -__init__()
    +on_child_close(context, child): bool
  }

  class TableDataElement {
    +style
    +justify: JustifyMethod
    +justify: str
    +justify: str
    +justify: str
    +justify: str
    +text
    --
    +{class} create(markdown, token): MarkdownElement
    -__init__(justify)
    +on_text(context, text)
  }

  class ListElement {
    +number
    +last_number
    --
    +{class} create(markdown, token): ListElement
    -__init__(list_type, list_start)
    +on_child_close(context, child): bool
    -__rich_console__(console, options): RenderResult
  }

  class ListItem {
    +style_name: str
    +render_options
    +lines
    +bullet_style
    +bullet
    +padding
    +new_line
    +number_width
    +render_options
    +lines
    +number_style
    +new_line
    +padding
    +numeral
    --
    -__init__()
    +on_child_close(context, child): bool
    +render_bullet(console, options): RenderResult
    +render_number(console, options, number, last_number): RenderResult
  }

  class Link {
    +url
    --
    +{class} create(markdown, token): MarkdownElement
    -__init__(text, href)
  }

  class ImageItem {
    +new_line: bool
    +link_style
    +title
    +text
    --
    +{class} create(markdown, token): MarkdownElement
    -__init__(destination, hyperlinks)
    +on_enter(context)
    -__rich_console__(console, options): RenderResult
  }

  class MarkdownContext {
    +highlight_text
    +style
    +style
    --
    -__init__(console, options, style, inline_code_lexer, inline_code_theme)
    +current_style(): Style
    +on_text(text, node_type)
    +enter_style(style_name): Style
    +leave_style(): Style
  }

  class Markdown {
    +elements
    +inlines
    +parser
    +is_fence
    +is_image
    +style
    +options
    +context
    +tokens
    +inline_style_tags
    +new_line: bool
    +node_type
    +tag
    +entering
    +exiting
    +self_closing
    +href
    +link_style
    +element
    +link_style
    +link_url_style
    +element_class
    +element
    +element
    +should_render
    +text
    +should_render
    +new_line
    --
    -__init__(markup, code_theme, justify, style, hyperlinks, inline_code_lexer, inline_code_theme)
    -_flatten_tokens(tokens)
    -__rich_console__(console, options): RenderResult
  }

  class Pager {
    +show(content)
  }

  class SystemPager {
    -_pager(content): Any
    +show(content)
  }

  class Span {
    +start: int
    +end: int
    +style
    +span1
    +span2
    --
    -__repr__(): str
    -__bool__(): bool
    +split(offset)
    +move(offset)
    +right_crop(offset)
    +extend(cells)
  }

  class Text {
    +sanitized_text
    +result
    +text
    +lines
    +output
    +plain
    +markup_spans
    +position: int
    +append
    +position: offset
    +markup
    +rendered_text
    +joiner
    +decoder
    +result
    +styled_text
    +text
    +append
    +sanitized_text
    +old_length
    +copy_self
    +copy_self
    +length
    +start
    +end: length
    +end
    +length
    +start
    +end: length
    +end
    +style
    +meta
    +offset
    +get_style
    +style
    +spans
    +new_spaces
    +end_offset
    +count: int
    +append_span
    +plain
    +re_highlight
    +get_span
    +match_style
    +re_words
    +add_span
    +count: int
    +text_length
    +excess
    +whitespace_match
    +whitespace_count
    +length
    +tab_size: int
    +justify
    +overflow
    +lines
    +all_lines
    +text
    +lines
    +max_text_width
    +words
    +min_text_width
    +text
    +get_style
    +enumerated_spans
    +style_map
    +spans
    +stack
    +stack_append
    +stack_pop
    +style_cache
    +style_cache_get
    +combine
    +styles
    +cached_style
    +current_style
    +new_text
    +extend_text
    +append_span
    +extend_spans
    +offset: int
    +tab_size
    +tab_size: int
    +new_text
    +append
    +cell_position: int
    +parts
    +tab_remainder
    +spaces
    +result
    +length
    +spaces
    +max_offset
    +pad_characters
    +excess_space
    +left
    +sanitized_text
    +offset
    +text_length
    +text_length
    +text_length
    +append_text
    +append_span
    +offset
    +content
    +text
    +lines
    +lines
    +text
    +text_length
    +divide_offsets
    +line_ranges
    +style
    +justify
    +overflow
    +new_lines
    +line_count
    +lower_bound: int
    +upper_bound: line_count
    +start_line_no
    +upper_bound
    +lower_bound
    +start_line_no
    +end_line_no: start_line_no
    +end_line_no: start_line_no
    +lower_bound: start_line_no
    +upper_bound: line_count
    +upper_bound
    +lower_bound
    +end_line_no
    +new_start
    +new_end
    +max_offset
    +wrap_justify
    +wrap_overflow
    +no_wrap
    +lines
    +new_lines
    +offsets
    +new_lines
    +lines: Lines
    +append
    +indentation
    +indentation: int
    +text
    +indent_line
    +re_indent
    +new_lines
    +add_line
    +blank_lines: int
    +match
    +indent
    +new_indent
    +blank_lines: int
    +new_text
    --
    -__init__(text, style)
    -__len__(): int
    -__bool__(): bool
    -__str__(): str
    -__repr__(): str
    -__add__(other)
    -__eq__(other): bool
    -__contains__(other): bool
    -__getitem__(slice)
    +get_text_at()
    +cell_len(): int
    +markup(): str
    +{class} from_markup(text)
    +{class} from_ansi(text)
    +{class} styled(text, style)
    +{class} assemble()
    +plain(): str
    +plain(new_text)
    +spans()
    +spans(spans)
    +blank_copy(plain)
    +copy()
    +stylize(style, start, end)
    +stylize_before(style, start, end)
    +apply_meta(meta, start, end)
    +on(meta)
    +remove_suffix(suffix)
    +get_style_at_offset(console, offset): Style
    +extend_style(spaces)
    +highlight_regex(re_highlight, style): int
    +highlight_words(words, style): int
    +rstrip()
    +rstrip_end(size)
    +set_length(new_length)
    -__rich_console__(console, options)
    -__rich_measure__(console, options): Measurement
    +render(console, end)
    +get_current_style(): Style
    +join(lines)
    +iter_text()
    +expand_tabs(tab_size)
    +truncate(max_width)
    -_trim_spans()
    +pad(count, character)
    +pad_left(count, character)
    +pad_right(count, character)
    +align(align, width, character)
    +append(text, style)
    +append_text(text)
    +append_tokens(tokens)
    +copy_styles(text)
    +split(separator): Lines
    +flatten_spans()
    +divide(offsets): Lines
    +right_crop(amount)
    +wrap(console, width): Lines
    +fit(width): Lines
    +detect_indentation(): int
    +with_indent_guides(indent_size)
  }

  class Highlighter {
    +highlight_text
    +highlight_text
    --
    -__call__(text): Text
    +highlight(text)
  }

  class NullHighlighter {
    +highlight(text)
  }

  class RegexHighlighter {
    +highlights
    +base_style: str
    +highlight_regex
    --
    +highlight(text)
  }

  class ReprHighlighter {
    +base_style: str
    +highlights
  }

  class JSONHighlighter {
    +JSON_STR: str
    +JSON_WHITESPACE
    +base_style: str
    +highlights
    +plain
    +append
    +whitespace
    +cursor: end
    +char
    --
    +highlight(text)
  }

  class ISO8601Highlighter {
    +base_style: str
    +highlights
  }

  class TerminalTheme {
    -__init__(background, foreground, normal, bright)
  }

  class Bar {
    +width
    +prefix_complete_eights
    +prefix_bar_count
    +prefix_eights_count
    +body_complete_eights
    +body_bar_count
    +body_eights_count
    +prefix
    +body
    +suffix
    --
    -__init__(size, begin, end)
    -__repr__(): str
    -__rich_console__(console, options): RenderResult
    -__rich_measure__(console, options): Measurement
  }

  class _RefreshThread {
    -__init__(live, refresh_per_second)
    +stop()
    +run()
  }

  class Live {
    +renderable
    +renderable
    +renderable
    +reset
    +renderables
    +renderables
    --
    -__init__(renderable)
    +is_started(): bool
    +get_renderable(): RenderableType
    +start(refresh)
    +stop()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    -_enable_redirect_io()
    -_disable_redirect_io()
    +renderable(): RenderableType
    +update(renderable)
    +refresh()
    +process_renderables(renderables)
  }

  class SyntaxTheme {
    +get_style_for_token(token_type): Style
    +get_background_style(): Style
  }

  class PygmentsSyntaxTheme {
    +pygments_style
    +style
    +color
    +bgcolor
    +style
    --
    -__init__(theme)
    +get_style_for_token(token_type): Style
    +get_background_style(): Style
  }

  class ANSISyntaxTheme {
    +get_style
    +token
    +style
    +style: _style
    +token
    --
    -__init__(style_map)
    +get_style_for_token(token_type): Style
    +get_background_style(): Style
  }

  class _SyntaxHighlightRange {
    +style: StyleType
    +start: SyntaxPosition
    +end: SyntaxPosition
    +style_before: bool
  }

  class Syntax {
    -_pygments_style_class
    -_theme: SyntaxTheme
    +theme: SyntaxTheme
    +theme
    +theme
    +code
    +lexer
    +lexer
    +lexer_name: str
    +lexer
    +extension
    +lexer
    +lexer_name
    +lexer_name
    +default_style
    +style
    +base_style
    +justify: JustifyMethod
    +text
    +lexer
    +tokens
    +line_no: int
    +background_style
    +background_color
    +foreground_color
    +new_color
    +column_width: int
    +column_width
    +background_style
    +number_style
    +highlight_number_style
    +number_style
    +highlight_number_style
    +padding
    +width
    +lines
    +width
    +segments
    +transparent_background
    +code_width
    +text
    +style
    +text
    +syntax_lines
    +line_offset: int
    +line_offset
    +lines
    +lines
    +style
    +lines
    +numbers_column_width
    +render_options
    +highlight_line
    +new_line
    +line_pointer
    +wrapped_lines
    +segments
    +wrapped_lines
    +wrapped_lines
    +wrapped_line_left_pad
    +line_column
    +code
    +newlines_offsets
    +start
    +end
    +ends_on_nl
    +processed_code
    +processed_code
    +processed_code
    --
    +{class} get_theme(name): SyntaxTheme
    -__init__(code, lexer)
    +{class} from_path(path, encoding, lexer, theme, dedent, line_numbers, line_range, start_line, highlight_lines, code_width, tab_size, word_wrap, background_color, indent_guides, padding)
    +{class} guess_lexer(path, code): str
    -_get_base_style(): Style
    -_get_token_color(token_type)
    +lexer()
    +default_lexer(): Lexer
    +highlight(code, line_range): Text
    +line_tokenize()
    +tokens_to_spans()
    +stylize_range(style, start, end, style_before)
    -_get_line_numbers_color(blend): Color
    -_numbers_column_width(): int
    -_get_number_styles(console)
    -__rich_measure__(console, options)
    -__rich_console__(console, options): RenderResult
    -_get_syntax(console, options)
    -_apply_stylized_ranges(text)
    -_process_code(code)
  }

  class Column {
    +header
    +footer
    +header_style: StyleType
    +footer_style: StyleType
    +style: StyleType
    +justify
    +vertical
    +overflow
    +width
    +min_width
    +max_width
    +ratio
    +no_wrap: bool
    +highlight: bool
    -_index: int
    -_cells
    --
    +copy()
    +cells()
    +flexible(): bool
  }

  class Row {
    +style
    +end_section: bool
  }

  class _Cell {
    +style: StyleType
    +renderable
    +vertical: VerticalAlignMethod
  }

  class Table {
    +columns
    +rows
    +append_column
    +width: int
    +style
    +row_style
    +max_width
    +max_width
    +extra_width
    +max_width
    +measurements
    +minimum_width
    +maximum_width
    +measurement
    +measurement
    +column
    +cell_renderables
    +columns
    +cell_renderables
    +column
    +column
    +max_width
    +max_width
    +extra_width
    +widths
    +table_width
    +render_options
    +render_text
    +max_width
    +columns
    +width_ranges
    +widths
    +get_padding_width
    +extra_width
    +ratios
    +fixed_widths
    +flex_minimum
    +flexible_width
    +flex_widths
    +iter_flex_widths
    +table_width
    +widths
    +table_width
    +excess_width
    +widths
    +table_width
    +width_ranges
    +widths
    +pad_widths
    +widths
    +total_width
    +excess_width
    +max_column
    +second_max_column
    +column_difference
    +ratios
    +max_reduce
    +widths
    +total_width
    +excess_width
    +collapse_padding
    +pad_edge
    +padding
    +any_padding
    +first_column
    +last_column
    -_padding_cache
    +cached
    +left
    +bottom
    +left: int
    +right: int
    +top: int
    +bottom: int
    +raw_cells
    +get_style
    +header_style
    +cell_style
    +footer_style
    +pad_left
    +max_width
    +padding_width
    +min_widths
    +max_widths
    +append_min
    +append_max
    +get_render_width
    +measurement
    +measurement
    +table_style
    +border_style
    +row_cells
    +new_line
    +columns
    +show_header
    +show_footer
    +show_edge
    +show_lines
    +leading
    +box_segments
    +box_segments
    +get_row_style
    +get_style
    +header_row
    +footer_row
    +row
    +max_height: int
    +cells
    +row_style
    +row_style
    +render_options
    +lines
    +max_height
    +row_height
    +vertical: str
    +vertical: str
    +divider
    +end_section
    --
    -__init__()
    +{class} grid()
    +expand(): bool
    +expand(expand)
    -_extra_width(): int
    +row_count(): int
    +get_row_style(console, index): StyleType
    -__rich_measure__(console, options): Measurement
    +padding()
    +padding(padding)
    +add_column(header, footer)
    +add_row()
    +add_cell(renderable)
    +add_section()
    -__rich_console__(console, options)
    +render_annotation(style, justify)
    -_calculate_column_widths(console, options)
    -{class} _collapse_widths(widths, wrapable, max_width)
    -_get_cells(console, column_index, column)
    +get_padding(last_row)
    -_get_padding_width(column_index): int
    -_measure_column(console, options, column): Measurement
    -_render(console, options, widths)
    +align_cell(vertical, width, style)
  }

  class ProgressBar {
    +completed
    +completed
    +bar
    +segments
    +append
    +fore_color
    +back_color
    +cos
    +pi
    +from_triplet
    +position
    +fade
    +color
    +fore_style
    +back_style
    +pulse_segments
    +segment_count
    +current_time
    +segments
    +offset
    +segments
    +width
    +ascii
    +should_pulse
    +completed
    +bar
    +half_bar_right
    +half_bar_left
    +complete_halves
    +bar_count
    +half_bar_count
    +style
    +is_finished
    +complete_style
    +remaining_bars
    --
    -__init__(total, completed, width, pulse, style, complete_style, finished_style, pulse_style, animation_time)
    -__repr__(): str
    +percentage_completed()
    -_get_pulse_segments(fore_style, back_style, color_system, no_color, ascii)
    +update(completed, total)
    -_render_pulse(console, width, ascii)
    -__rich_console__(console, options): RenderResult
    -__rich_measure__(console, options): Measurement
  }

  class ConsoleError {
  }

  class StyleError {
  }

  class StyleSyntaxError {
  }

  class MissingStyle {
  }

  class StyleStackError {
  }

  class NotRenderableError {
  }

  class MarkupError {
  }

  class LiveError {
  }

  class NoAltScreen {
  }

  class PromptError {
  }

  class InvalidResponse {
    -__init__(message)
    -__rich__(): TextType
  }

  class PromptBase {
    +response_type: type
    +validate_error_message: str
    +illegal_choice_message: str
    +prompt_suffix: str
    +choices
    +prompt
    +choices
    +value
    +return_value: PromptType
    +return_value
    +prompt
    +value
    +return_value
    --
    -__init__(prompt)
    +{class} ask(prompt)
    +{class} ask(prompt): PromptType
    +{class} ask(prompt): Any
    +render_default(default): Text
    +make_prompt(default): Text
    +{class} get_input(console, prompt, password, stream): str
    +check_choice(value): bool
    +process_response(value): PromptType
    +on_validate_error(value, error)
    +pre_prompt()
    -__call__(): PromptType
    -__call__()
    -__call__(): Any
  }

  class Prompt {
    +response_type: str
  }

  class IntPrompt {
    +response_type: int
    +validate_error_message: str
  }

  class FloatPrompt {
    +response_type: float
    +validate_error_message: str
  }

  class Confirm {
    +response_type: bool
    +validate_error_message: str
    +choices
    +value
    --
    +render_default(default): Text
    +process_response(value): bool
  }

  class ControlType {
    +BELL: int
    +CARRIAGE_RETURN: int
    +HOME: int
    +CLEAR: int
    +SHOW_CURSOR: int
    +HIDE_CURSOR: int
    +ENABLE_ALT_SCREEN: int
    +DISABLE_ALT_SCREEN: int
    +CURSOR_UP: int
    +CURSOR_DOWN: int
    +CURSOR_FORWARD: int
    +CURSOR_BACKWARD: int
    +CURSOR_MOVE_TO_COLUMN: int
    +CURSOR_MOVE_TO: int
    +ERASE_IN_LINE: int
    +SET_WINDOW_TITLE: int
  }

  class Segment {
    +text: str
    +style
    +control
    +cell_length
    +cell_size: get_character_cell_size
    +pos
    +before
    +cell_pos
    +out_by
    +result_segments: segments
    +apply
    +result_segments
    +result_segments
    +line
    +append
    +line
    +append
    +line
    +append
    +adjust_line_length
    +new_line_segment
    +cropped_line
    +line_length
    +new_line
    +new_line
    +new_line
    +new_line
    +append
    +line_length: int
    +segment_length
    +text
    +new_line
    +get_line_length
    +max_width
    +blank
    +adjust_line_length
    +shaped_lines
    +extra_lines
    +lines
    +blank
    +lines
    +extra_lines
    +lines
    +blank
    +lines
    +extra_lines
    +lines
    +blank
    +top_lines
    +bottom_lines
    +lines
    +iter_segments
    +last_segment
    +last_segment
    +last_segment: segment
    +cache
    +colorless_style
    +colorless_style
    +split_segments
    +add_segment
    +iter_cuts
    +cut
    +pos: int
    +segments_clear
    +segments_copy
    +end_pos
    +pos: end_pos
    +pos: end_pos
    +cut
    +pos: cut
    +cut
    --
    +cell_length(): int
    -__rich_repr__(): Result
    -__bool__(): bool
    +is_control(): bool
    -{class} _split_cells(segment, cut)
    +split_cells(cut)
    +{class} line()
    +{class} apply_style(segments, style, post_style)
    +{class} filter_control(segments, is_control)
    +{class} split_lines(segments)
    +{class} split_and_crop_lines(segments, length, style, pad, include_new_lines)
    +{class} adjust_line_length(line, length, style, pad)
    +{class} get_line_length(line): int
    +{class} get_shape(lines)
    +{class} set_shape(lines, width, height, style, new_lines)
    +{class} align_top(lines, width, height, style, new_lines)
    +{class} align_bottom(lines, width, height, style, new_lines)
    +{class} align_middle(lines, width, height, style, new_lines)
    +{class} simplify(segments)
    +{class} strip_links(segments)
    +{class} strip_styles(segments)
    +{class} remove_color(segments)
    +{class} divide(segments, cuts)
  }

  class Segments {
    +line
    --
    -__init__(segments, new_lines)
    -__rich_console__(console, options)
  }

  class SegmentLines {
    +new_line
    --
    -__init__(lines, new_lines)
    -__rich_console__(console, options)
  }

  class _AnsiToken {
    +plain: str
    +sgr
    +osc
  }

  class AnsiDecoder {
    +from_ansi
    +from_rgb
    +text
    +append
    +line
    +codes
    +iter_codes
    +color_type
    +color_type
    --
    -__init__()
    +decode(terminal_text)
    +decode_line(line): Text
  }

  class _TrackThread {
    +task_id
    +advance
    +update_period
    +last_completed: int
    +wait
    +completed
    +last_completed: completed
    --
    -__init__(progress, task_id, update_period)
    +run()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class _Reader {
    +line
    +block
    +n
    +line
    +lines
    +pos
    --
    -__init__(handle, progress, task, close_handle)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    -__iter__(): BinaryIO
    -__next__(): bytes
    +closed(): bool
    +fileno(): int
    +isatty(): bool
    +mode(): str
    +name(): str
    +readable(): bool
    +seekable(): bool
    +writable(): bool
    +read(size): bytes
    +readinto(b)
    +readline(size): bytes
    +readlines(hint)
    +close()
    +seek(offset, whence): int
    +tell(): int
    +write(s): int
    +writelines(lines)
  }

  class _ReadContext {
    -__init__(progress, reader)
    -__enter__(): _I
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class ProgressColumn {
    +max_refresh
    +current_time
    +renderable
    --
    -__init__(table_column)
    +get_table_column(): Column
    -__call__(task): RenderableType
    +render(task): RenderableType
  }

  class RenderableColumn {
    -__init__(renderable)
    +render(task): RenderableType
  }

  class SpinnerColumn {
    +text
    --
    -__init__(spinner_name, style, speed, finished_text, table_column)
    +set_spinner(spinner_name, spinner_style, speed)
    +render(task): RenderableType
  }

  class TextColumn {
    +text
    +text
    --
    -__init__(text_format, style, justify, markup, highlighter, table_column)
    +render(task): Text
  }

  class BarColumn {
    -__init__(bar_width, style, complete_style, finished_style, pulse_style, table_column)
    +render(task): ProgressBar
  }

  class TimeElapsedColumn {
    +elapsed
    +delta
    --
    +render(task): Text
  }

  class TaskProgressColumn {
    +data_speed
    +text_format
    +text
    +text
    --
    -__init__(text_format, text_format_no_percentage, style, justify, markup, highlighter, table_column, show_speed)
    +{class} render_speed(speed): Text
    +render(task): Text
  }

  class TimeRemainingColumn {
    +max_refresh: float
    +task_time
    +style: str
    +task_time
    +style: str
    +formatted
    +formatted
    --
    -__init__(compact, elapsed_when_finished, table_column)
    +render(task): Text
  }

  class FileSizeColumn {
    +data_size
    --
    +render(task): Text
  }

  class TotalFileSizeColumn {
    +data_size
    --
    +render(task): Text
  }

  class MofNCompleteColumn {
    +completed
    +total
    +total_width
    --
    -__init__(separator, table_column)
    +render(task): Text
  }

  class DownloadColumn {
    +completed
    +unit_and_suffix_calculation_base
    +precision
    +completed_ratio
    +completed_str
    +total
    +total_ratio
    +total_str
    +total_str: str
    +download_status
    +download_text
    --
    -__init__(binary_units, table_column)
    +render(task): Text
  }

  class TransferSpeedColumn {
    +speed
    +data_speed
    --
    +render(task): Text
  }

  class ProgressSample {
    +timestamp: float
    +completed: float
  }

  class Task {
    +id: TaskID
    +description: str
    +total
    +completed: float
    -_get_time: GetTimeCallable
    +finished_time
    +visible: bool
    +fields
    +start_time
    +stop_time
    +finished_speed
    -_progress
    -_lock: RLock
    +completed
    +completed
    +progress
    +total_time
    +iter_progress
    +total_completed
    +speed
    +speed
    +remaining
    +estimate
    --
    +get_time(): float
    +started(): bool
    +remaining()
    +elapsed()
    +finished(): bool
    +percentage(): float
    +speed()
    +time_remaining()
    -_reset()
  }

  class Progress {
    +total
    +task_id
    +advance
    +refresh
    +total_bytes
    +total_bytes: total
    +total_bytes
    +task_id
    +line_buffering
    +buffering
    +buffering
    +total
    +task_id
    +handle
    +reader
    +task
    +task
    +current_time
    +task
    +completed_start
    +update_completed
    +current_time
    +old_sample_time
    +popleft
    +current_time
    +task
    +current_time
    +task
    +completed_start
    +update_completed
    +old_sample_time
    +popleft
    +renderable
    +table
    +table_columns
    +table
    +task
    +new_task_index
    --
    -__init__()
    +{class} get_default_columns()
    +console(): Console
    +tasks()
    +task_ids()
    +finished(): bool
    +start()
    +stop()
    -__enter__(): Self
    -__exit__(exc_type, exc_val, exc_tb)
    +track(sequence, total, completed, task_id, description, update_period)
    +wrap_file(file, total): BinaryIO
    +open(file, mode, buffering, encoding, errors, newline): BinaryIO
    +open(file, mode, buffering, encoding, errors, newline): TextIO
    +open(file, mode, buffering, encoding, errors, newline)
    +start_task(task_id)
    +stop_task(task_id)
    +update(task_id)
    +reset(task_id)
    +advance(task_id, advance)
    +refresh()
    +get_renderable(): RenderableType
    +get_renderables()
    +make_tasks_table(tasks): Table
    -__rich__(): RenderableType
    +add_task(description, start, total, completed, visible): TaskID
    +remove_task(task_id)
  }

  class WindowsConsoleFeatures {
    +vt: bool
    +truecolor: bool
  }

  class LegacyWindowsError {
  }

  class WindowsCoordinates {
    +row: int
    +col: int
    --
    +{class} from_param(value): COORD
  }

  class CONSOLE_SCREEN_BUFFER_INFO {
  }

  class CONSOLE_CURSOR_INFO {
  }

  class LegacyWindowsTerm {
    +BRIGHT_BIT: int
    +ANSI_TO_WINDOWS
    +handle
    +default_text
    +coord: COORD
    +screen_size: COORD
    +color
    +bgcolor
    +fore
    +fore
    +fore
    +fore
    +fore
    +fore
    +back
    +back
    +back
    +back
    +screen_size
    +cursor_position
    +cells_to_erase
    +start_coordinates
    +cursor_position
    +cells_to_erase
    +start
    +cursor_position
    +cursor_position
    +col: int
    +col
    +current_cursor_size
    +invisible_cursor
    +current_cursor_size
    +visible_cursor
    +cursor_info
    --
    -__init__(file)
    +cursor_position(): WindowsCoordinates
    +screen_size(): WindowsCoordinates
    +write_text(text)
    +write_styled(text, style)
    +move_cursor_to(new_position)
    +erase_line()
    +erase_end_of_line()
    +erase_start_of_line()
    +move_cursor_up()
    +move_cursor_down()
    +move_cursor_forward()
    +move_cursor_to_column(column)
    +move_cursor_backward()
    +hide_cursor()
    +show_cursor()
    +set_title(title)
    -_get_cursor_size(): int
  }

  class Panel {
    +title_text
    +subtitle_text
    +renderable
    +style
    +partial_border_style
    +border_style
    +width
    +safe_box: bool
    +box
    +text
    +excess_space
    +left
    +title_text
    +child_width
    +child_height
    +child_width
    +width
    +child_options
    +lines
    +line_start
    +line_end
    +new_line
    +title_text
    +subtitle_text
    +subtitle_text
    +padding
    +renderables
    +width
    +width
    --
    -__init__(renderable, box)
    +{class} fit(renderable, box)
    -_title()
    -_subtitle()
    -__rich_console__(console, options)
    +align_text(width, align, character, style): Text
    -__rich_measure__(console, options)
  }

  class Styled {
    +style
    +rendered_segments
    +segments
    --
    -__init__(renderable, style)
    -__rich_console__(console, options)
    -__rich_measure__(console, options): Measurement
  }

  class Spinner {
    +spinner
    +text
    +frame_no
    +frame
    +table
    --
    -__init__(name, text)
    -__rich_console__(console, options)
    -__rich_measure__(console, options): Measurement
    +render(time)
    +update()
  }

  class JSON {
    +data
    +json
    +highlighter
    +json_instance
    +json
    +highlighter
    --
    -__init__(json, indent, highlight, skip_keys, ensure_ascii, check_circular, allow_nan, default, sort_keys)
    +{class} from_data(data, indent, highlight, skip_keys, ensure_ascii, check_circular, allow_nan, default, sort_keys)
    -__rich__(): Text
  }

  class Padding {
    +style
    +width
    +width
    +render_options
    +render_options
    +lines
    +left
    +right
    +blank_line
    +blank_line
    +blank_line
    +max_width
    +extra_width
    +measurement
    +measurement
    --
    -__init__(renderable, pad)
    +{class} indent(renderable, level)
    +{static} unpack()
    -__repr__(): str
    -__rich_console__(console, options)
    -__rich_measure__(console, options)
  }

  class Status {
    -__init__(status)
    +renderable(): Spinner
    +console()
    +update(status)
    +start()
    +stop()
    -__rich__(): RenderableType
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class RichRenderable {
    -{class} __subclasshook__(other): bool
  }

  class JupyterRenderable {
    +data
    +data
    +data
    --
    -__init__(html, text)
    -_repr_mimebundle_(include, exclude)
  }

  class JupyterMixin {
    +console
    +segments
    +html
    +text
    +data
    +data
    +data
    --
    -_repr_mimebundle_(include, exclude)
  }

  class ColorTriplet {
    +red: int
    +green: int
    +blue: int
    --
    +hex(): str
    +rgb(): str
    +normalized()
  }

}

package "venv2.lib.python3.12.site-packages.blib2to3" {
  class Symbols {
    -__init__(grammar)
  }

  class _python_symbols {
    +and_expr: int
    +and_test: int
    +annassign: int
    +arglist: int
    +argument: int
    +arith_expr: int
    +asexpr_test: int
    +assert_stmt: int
    +async_funcdef: int
    +async_stmt: int
    +atom: int
    +augassign: int
    +break_stmt: int
    +case_block: int
    +classdef: int
    +comp_for: int
    +comp_if: int
    +comp_iter: int
    +comp_op: int
    +comparison: int
    +compound_stmt: int
    +continue_stmt: int
    +decorated: int
    +decorator: int
    +decorators: int
    +del_stmt: int
    +dictsetmaker: int
    +dotted_as_name: int
    +dotted_as_names: int
    +dotted_name: int
    +encoding_decl: int
    +eval_input: int
    +except_clause: int
    +expr: int
    +expr_stmt: int
    +exprlist: int
    +factor: int
    +file_input: int
    +flow_stmt: int
    +for_stmt: int
    +funcdef: int
    +global_stmt: int
    +guard: int
    +if_stmt: int
    +import_as_name: int
    +import_as_names: int
    +import_from: int
    +import_name: int
    +import_stmt: int
    +lambdef: int
    +listmaker: int
    +match_stmt: int
    +namedexpr_test: int
    +not_test: int
    +old_comp_for: int
    +old_comp_if: int
    +old_comp_iter: int
    +old_lambdef: int
    +old_test: int
    +or_test: int
    +parameters: int
    +paramspec: int
    +pass_stmt: int
    +pattern: int
    +patterns: int
    +power: int
    +raise_stmt: int
    +return_stmt: int
    +shift_expr: int
    +simple_stmt: int
    +single_input: int
    +sliceop: int
    +small_stmt: int
    +subject_expr: int
    +star_expr: int
    +stmt: int
    +subscript: int
    +subscriptlist: int
    +suite: int
    +term: int
    +test: int
    +testlist: int
    +testlist1: int
    +testlist_gexp: int
    +testlist_safe: int
    +testlist_star_expr: int
    +tfpdef: int
    +tfplist: int
    +tname: int
    +tname_star: int
    +trailer: int
    +try_stmt: int
    +type_stmt: int
    +typedargslist: int
    +typeparam: int
    +typeparams: int
    +typevar: int
    +typevartuple: int
    +varargslist: int
    +vfpdef: int
    +vfplist: int
    +vname: int
    +while_stmt: int
    +with_stmt: int
    +xor_expr: int
    +yield_arg: int
    +yield_expr: int
    +yield_stmt: int
  }

  class _pattern_symbols {
    +Alternative: int
    +Alternatives: int
    +Details: int
    +Matcher: int
    +NegatedUnit: int
    +Repeater: int
    +Unit: int
  }

  class Base {
    +type: int
    +parent
    +children
    +was_changed: bool
    +was_checked: bool
    +new
    +l_children
    +found: bool
    +found: bool
    +node: self
    +node
    +next_sib
    +prefix
    --
    -__new__()
    -__eq__(other): bool
    +prefix(): str
    -_eq(other): bool
    -__deepcopy__(memo): _P
    +clone(): _P
    +post_order()
    +pre_order()
    +replace(new)
    +get_lineno()
    +changed()
    +remove()
    +next_sibling()
    +prev_sibling()
    +leaves()
    +depth(): int
    +get_suffix(): str
  }

  class Node {
    +fixers_applied
    +used_names
    -_prev
    -_next
    +previous
    +previous: current
    --
    -__init__(type, children, context, prefix, fixers_applied)
    -__repr__(): str
    -__str__(): str
    -_eq(other): bool
    +clone()
    +post_order()
    +pre_order()
    +prefix(): str
    +prefix(prefix)
    +set_child(i, child)
    +insert_child(i, child)
    +append_child(child)
    +invalidate_sibling_maps()
    +update_sibling_maps()
  }

  class Leaf {
    +value: str
    +fixers_applied
    +bracket_depth: int
    +opening_bracket
    +used_names
    +lineno: int
    +column: int
    +fmt_pass_converted_first_leaf
    --
    -__init__(type, value, context, prefix, fixers_applied, opening_bracket, fmt_pass_converted_first_leaf)
    -__repr__(): str
    -__str__(): str
    -_eq(other): bool
    +clone()
    +leaves()
    +post_order()
    +pre_order()
    +prefix(): str
    +prefix(prefix)
  }

  class BasePattern {
    +type
    +type: NoneType
    +content: Any
    +name
    +args
    +r
    +r
    +r: _Results
    --
    -__new__()
    -__repr__(): str
    -_submatch(node, results): bool
    +optimize()
    +match(node, results): bool
    +match_seq(nodes, results): bool
    +generate_matches(nodes)
  }

  class LeafPattern {
    -__init__(type, content, name)
    +match(node, results): bool
    -_submatch(node, results)
  }

  class NodePattern {
    +wildcards: bool
    +newcontent
    --
    -__init__(type, content, name)
    -_submatch(node, results): bool
  }

  class WildcardPattern {
    +min: int
    +max: int
    +f
    +wrapped_content
    +subpattern: NoneType
    +subpattern
    +r
    +save_stderr
    +nodelen
    +results
    +new_results
    +r
    +results: new_results
    +count: int
    +r
    +done: bool
    +max
    +done: bool
    +done: bool
    +r
    --
    -__init__(content, min, max, name)
    +optimize(): Any
    +match(node, results): bool
    +match_seq(nodes, results): bool
    +generate_matches(nodes)
    -_iterative_matches(nodes)
    -_bare_name_matches(nodes)
    -_recursive_matches(nodes, count)
  }

  class NegatedPattern {
    -__init__(content)
    +match(node, results): bool
    +match_seq(nodes, results): bool
    +generate_matches(nodes)
  }

}

package "venv2.lib.python3.12.site-packages.blib2to3.pgen2" {
  class PgenGrammar {
  }

  class ParserGenerator {
    +filename: Path
    +stream
    +generator
    +first
    +close_stream: NoneType
    +stream
    +close_stream
    +c
    +names
    +i
    +dfa
    +states
    +arcs
    +rawfirst
    +first
    +ilabel
    +ilabel
    +itoken
    +value
    +keywords
    +keywords
    +itoken
    +names
    +dfa
    +state
    +totalset
    +overlapcheck
    +fset
    +fset
    +inverse
    +dfas
    +startsymbol
    +name
    +dfa
    +startsymbol: name
    +base
    +states
    +arcs
    +st
    +todo
    +j
    +j
    +changes: bool
    +changes: bool
    +state_j
    +changes: bool
    +aa
    +zz
    +b: d
    +value
    +a
    +z
    +value
    +tup
    +tup
    +msg
    +msg
    --
    -__init__(filename, stream)
    +make_grammar(): PgenGrammar
    +make_first(c, name)
    +make_label(c, label): int
    +addfirstsets()
    +calcfirst(name)
    +parse()
    +make_dfa(start, finish)
    +closure()
    +addclosure(base)
    +dump_nfa(name, start, finish)
    +dump_dfa(name, dfa)
    +simplify_dfa(dfa)
    +parse_rhs()
    +parse_alt()
    +parse_item()
    +parse_atom()
    +expect(type, value): str
    +gettoken()
    +raise_error(msg): NoReturn
  }

  class NFAState {
    +arcs
    --
    -__init__()
    +addarc(next, label)
  }

  class DFAState {
    +nfaset
    +isfinal: bool
    +arcs
    -__hash__: Any
    --
    -__init__(nfaset, final)
    +addarc(next, label)
    +unifystate(old, new)
    -__eq__(other): bool
  }

  class Grammar {
    +d
    +d
    +d
    +new
    --
    -__init__()
    +dump(filename)
    -_update(attrs)
    +load(filename)
    +loads(pkl)
    +copy(): _P
    +report()
  }

  class Converter {
    +f
    +lineno: int
    +mo
    +number
    +f
    +lineno: int
    +allarcs
    +states
    +mo
    +arcs
    +mo
    +mo
    +state
    +mo
    +arcs
    +dfas
    +mo
    +ndfas
    +mo
    +symbol
    +state
    +mo
    +first
    +rawbitset
    +byte
    +labels
    +mo
    +nlabels
    +mo
    +x
    +y: NoneType
    +y
    +mo
    +ndfas
    +mo
    +nlabels
    +mo
    +start
    --
    +run(graminit_h, graminit_c)
    +parse_graminit_h(filename)
    +parse_graminit_c(filename)
    +finish_off()
  }

  class Recorder {
    +is_backtracking
    +func
    +func
    +func
    +args
    +alive_ilabels
    --
    -__init__(parser, ilabels, context)
    +ilabels()
    +switch_to(ilabel)
    +backtrack()
    +add_token(tok_type, tok_val, raw)
    +determine_route(value, force)
  }

  class ParseError {
    -__init__(msg, type, value, context)
  }

  class Parser {
    +start
    +newnode: RawNode
    +stackentry
    +ilabels
    +recorder
    +next_token_value: value
    +force: bool
    +next_token_type
    +ilabel
    +arcs
    +t
    +itsdfa
    +state: newstate
    +ilabel
    +rawnode: RawNode
    +newnode
    +newnode: RawNode
    +newnode
    --
    -__init__(grammar, convert)
    +setup(proxy, start)
    +addtoken(type, value, context): bool
    -_addtoken(ilabel, type, value, context): bool
    +classify(type, value, context)
    +shift(type, value, newstate, context)
    +push(type, newdfa, newstate, context)
    +pop()
  }

  class ReleaseRange {
    +start: int
    +end
    +tokens
    +total_eaten
    --
    +lock()
  }

  class TokenProxy {
    +release_range
    +eaten_tokens
    +token
    +token
    +token
    --
    -__init__(generator)
    +release()
    +eat(point): Any
    -__iter__()
    -__next__(): Any
    +can_advance(to): bool
  }

  class Driver {
    +logger
    +proxy
    +p
    +lineno: int
    +column: int
    +indent_columns
    +type: NoneType
    +value: NoneType
    +start: NoneType
    +end: NoneType
    +line_text: NoneType
    +prefix: str
    +lineno: s_lineno
    +column: int
    +column: s_column
    +column: int
    +type
    +prefix: str
    +value: str
    +prefix: str
    +prefix: _prefix
    +column: int
    +tokens
    +tokens
    +lines
    +current_line: str
    +current_column: int
    +wait_for_nl: bool
    +res
    +current_line: str
    +current_column: int
    +wait_for_nl: bool
    +current_column: int
    +wait_for_nl: bool
    --
    -__init__(grammar, logger)
    +parse_tokens(tokens, debug): NL
    +parse_stream_raw(stream, debug): NL
    +parse_stream(stream, debug): NL
    +parse_file(filename, encoding, debug): NL
    +parse_string(text, debug): NL
    -_partially_consume_prefix(prefix, column)
  }

  class TokenError {
  }

  class StopTokenizing {
  }

  class Untokenizer {
    +tokens
    +prev_row: int
    +prev_col: int
    +col_offset
    +startline: bool
    +indents
    +toks_append
    +startline: bool
    +startline: bool
    +startline: bool
    --
    -__init__()
    +add_whitespace(start)
    +untokenize(iterable): str
    +compat(token, iterable)
  }

}

package "venv2.lib.python3.12.site-packages.pluggy" {
  class TagTracer {
    +extra
    +args
    +extra
    +content
    +indent
    +lines
    +processor
    +tags
    --
    -__init__()
    +get(name): TagTracerSub
    -_format_message(tags, args): str
    -_processmessage(tags, args)
    +setwriter(writer)
    +setprocessor(tags, processor)
  }

  class TagTracerSub {
    -__init__(root, tags)
    -__call__()
    +get(name): TagTracerSub
  }

  class PluggyWarning {
  }

  class PluggyTeardownRaisedWarning {
  }

  class HookspecOpts {
    +firstresult: bool
    +historic: bool
    +warn_on_impl
    +warn_on_impl_args
  }

  class HookimplOpts {
    +wrapper: bool
    +hookwrapper: bool
    +optionalhook: bool
    +tryfirst: bool
    +trylast: bool
    +specname
  }

  class HookspecMarker {
    +opts: HookspecOpts
    --
    -__init__(project_name)
    -__call__(function, firstresult, historic, warn_on_impl, warn_on_impl_args): _F
    -__call__(function, firstresult, historic, warn_on_impl, warn_on_impl_args)
    -__call__(function, firstresult, historic, warn_on_impl, warn_on_impl_args)
    +setattr_hookspec_opts(): _F
  }

  class HookimplMarker {
    +opts: HookimplOpts
    --
    -__init__(project_name)
    -__call__(function, hookwrapper, optionalhook, tryfirst, trylast, specname, wrapper): _F
    -__call__(function, hookwrapper, optionalhook, tryfirst, trylast, specname, wrapper)
    -__call__(function, hookwrapper, optionalhook, tryfirst, trylast, specname, wrapper)
    +setattr_hookimpl_opts(): _F
  }

  class HookRelay {
    -__init__()
    -__getattr__(name): HookCaller
  }

  class HookCaller {
    +splitpoint: i
    +splitpoint
    +i
    +notincall
    +firstresult
    +kwargs
    +res
    +opts: HookimplOpts
    +hookimpls
    +hookimpl
    +i
    +firstresult
    +res
    --
    -__init__(name, hook_execute, specmodule_or_class, spec_opts)
    +has_spec(): bool
    +set_specification(specmodule_or_class, spec_opts)
    +is_historic(): bool
    -_remove_plugin(plugin)
    +get_hookimpls()
    -_add_hookimpl(hookimpl)
    -__repr__(): str
    -_verify_all_args_are_provided(kwargs)
    -__call__(): Any
    +call_historic(result_callback, kwargs)
    +call_extra(methods, kwargs): Any
    -_maybe_apply_history(method)
  }

  class _SubsetHookCaller {
    -__init__(orig, remove_plugins)
    -_hookimpls()
    +spec()
    -_call_history()
    -__repr__(): str
  }

  class HookImpl {
    -__init__(plugin, plugin_name, function, hook_impl_opts)
    -__repr__(): str
  }

  class HookSpec {
    -__init__(namespace, name, opts)
  }

  class HookCallError {
  }

  class Result {
    +exc
    +result: NoneType
    +exception: NoneType
    +result
    +exception: exc
    +exc
    +tb
    --
    -__init__(result, exception)
    +excinfo()
    +exception()
    +{class} from_call(func)
    +force_result(result)
    +force_exception(exception)
    +get_result(): ResultType
  }

  class PluginValidationError {
    -__init__(plugin, message)
  }

  class DistFacade {
    +name: str
    --
    -__init__(dist)
    +project_name(): str
    -__getattr__(attr, default): Any
    -__dir__()
  }

  class PluginManager {
    +plugin_name
    +hookimpl_opts
    +method
    +hookimpl
    +name
    +hook
    +hook
    +method: object
    +res
    +res
    +res: NoneType
    +name
    +plugin
    +hookcallers
    +names
    +spec_opts
    +hc
    +hc
    +method
    +opts
    +name
    +notinspec
    +argname_warning
    +hook: HookCaller
    +count: int
    +plugin
    +hookcallers
    +oldcall
    +outcome
    +hooktrace
    +orig: HookCaller
    +plugins_to_remove
    --
    -__init__(project_name)
    -_hookexec(hook_name, methods, kwargs, firstresult)
    +register(plugin, name)
    +parse_hookimpl_opts(plugin, name)
    +unregister(plugin, name)
    +set_blocked(name)
    +is_blocked(name): bool
    +unblock(name): bool
    +add_hookspecs(module_or_class)
    +parse_hookspec_opts(module_or_class, name)
    +get_plugins()
    +is_registered(plugin): bool
    +get_canonical_name(plugin): str
    +get_plugin(name)
    +has_plugin(name): bool
    +get_name(plugin)
    -_verify_hook(hook, hookimpl)
    +check_pending()
    +load_setuptools_entrypoints(group, name): int
    +list_plugin_distinfo()
    +list_name_plugin()
    +get_hookcallers(plugin)
    +add_hookcall_monitoring(before, after)
    +traced_hookexec(hook_impls, caller_kwargs, firstresult)
    +undo()
    +enable_tracing()
    +before(methods, kwargs)
    +after(hook_name, methods, kwargs)
    +subset_hook_caller(name, remove_plugins): HookCaller
  }

}

package "venv2.lib.python3.12.site-packages.alembic" {
  class Config {
    +cmd_opts
    +config_file_name
    +toml_file_name
    +config_ini_section: str
    +output
    +output
    +here
    +here
    +file_config
    +here
    +toml_data
    +data
    +package_dir
    +USE_DEFAULT
    +value
    +value
    +value
    +value
    +value
    +separator
    +split_on_path
    +sep
    +version_locations_str
    +split_char
    +prepend_sys_path_str
    +split_char
    +hooks
    +toml_hook_config
    +opts
    +ini_hook_config
    +names
    +opts
    --
    -__init__(file_, toml_file, ini_section, output_buffer, stdout, cmd_opts, config_args, attributes)
    -_config_file_path()
    -_toml_file_path()
    +attributes()
    +print_stdout(text)
    +file_config(): ConfigParser
    +toml_alembic_config()
    +get_template_directory(): str
    -_get_template_path(): Path
    +get_section(name, default)
    +get_section(name, default)
    +get_section(name, default)
    +get_section(name, default)
    +set_main_option(name, value)
    +remove_main_option(name)
    +set_section_option(section, name, value)
    +get_section_option(section, name, default)
    +get_main_option(name, default): str
    +get_main_option(name, default)
    +get_main_option(name, default)
    +get_alembic_option(name, default): str
    +get_alembic_option(name, default)
    +get_alembic_option(name, default)
    -_get_toml_config_value(name, default)
    +messaging_opts(): MessagingOptions
    -_get_file_separator_char()
    +get_version_locations_list()
    +get_prepend_sys_paths_list()
    +get_hooks_list()
  }

  class MessagingOptions {
    +quiet: bool
  }

  class CommandFunction {
    -__name__: str
    --
    -__call__(config): Any
  }

  class CommandLine {
    -_POSITIONAL_TRANSLATIONS
    +parser
    +alembic_commands
    +subparser
    +kwarg_opt
    +opts
    +spec
    +positional
    +kwarg
    +positional
    +kwarg
    +positional
    +help_
    +help_lines
    +help_lines
    +help_text
    +names
    +alembic_config_env
    +default_pyproject_toml: alembic_config_env
    +default_alembic_config: str
    +default_pyproject_toml: str
    +default_alembic_config: alembic_config_env
    +default_alembic_config: str
    +default_pyproject_toml: str
    +toml: NoneType
    +ini: NoneType
    +toml: name
    +ini: name
    +options
    +cfg
    --
    -__init__(prog)
    -_generate_args(prog)
    +register_command(fn)
    -_inspect_function(fn)
    +run_cmd(config, options)
    -_inis_from_config(options)
    +main(argv)
  }

}

package "venv2.lib.python3.12.site-packages.alembic.util" {
  class EncodedIO {
    +close()
  }

  class CommandError {
  }

  class AutogenerateDiffsDetected {
    -__init__(message, revision_context, diffs)
  }

  class _ModuleClsMeta {
    -__setattr__(key, value)
  }

  class ModuleClsProxy {
    -_setups
    +meth
    +fn
    +translations
    +spec
    +outer_args: str
    +inner_args: str
    +translate_str
    +return_kw
    +return_args
    +args
    +pos_only
    +pos_only
    +outer_args: str
    +inner_args: str
    +translate_str: str
    +func_text
    +lcl
    --
    -{class} _update_module_proxies(name)
    -_install_proxy()
    -_remove_proxy()
    +{class} create_module_class_proxy(globals_, locals_)
    -{class} _setup_proxy(globals_, locals_, attr_names)
    -{class} _add_proxied_attribute(methname, globals_, locals_, attr_names)
    -{class} _create_method_proxy(name, globals_, locals_)
    -_name_error(from_): NoReturn
    +translate(spec, translations, args, kw): Any
  }

  class Dispatcher {
    +targets
    +targets
    +targets
    +d
    --
    -__init__(uselist)
    +dispatch_for(target, qualifier)
    +decorate(): _C
    +dispatch(obj, qualifier): Any
    -_fn_or_list(fn_or_list)
    +go()
    +branch(): Dispatcher
  }

  class _CompilerProtocol {
    -__call__(element, compiler): str
  }

  class _textual_index_element {
    -__init__(table, text)
    +get_children()
  }

  class _literal_bindparam {
  }

}

package "venv2.lib.python3.12.site-packages.alembic.ddl" {
  class PostgresqlImpl {
    +transactional_ddl: bool
    +type_synonyms
    +postgresql_include
    +conn_col_default: rendered_inspector_default
    +defaults_equal
    +metadata_default
    +metadata_default
    +metadata_default
    +metadata_default
    +conn
    +using
    +seq_match
    +info
    +doubled_constraints
    +expr
    +expr
    +expr
    +expr
    +expr
    +expr
    +cast_re
    +expr
    +expr
    +expr
    +msg
    +unique_msg
    +m_exprs
    +r_exprs
    +skip
    +m_compile
    +m_text
    +r_compile
    +r_text
    +m_options
    +r_options
    +metadata_tup
    +reflected_tup
    +meta_sig
    +conn_sig
    +metadata_do
    +conn_do
    +options
    +options
    +expr
    +mod
    +meth
    --
    +create_index(index)
    +prep_table_for_batch(batch_impl, table)
    +compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
    +alter_column(table_name, column_name)
    +autogen_column_reflect(inspector, table, column_info)
    +correct_for_autogen_constraints(conn_unique_constraints, conn_indexes, metadata_unique_constraints, metadata_indexes)
    -_cleanup_index_expr(index, expr): str
    -_dialect_options(item)
    +compare_indexes(metadata_index, reflected_index): ComparisonResult
    +compare_unique_constraint(metadata_constraint, reflected_constraint): ComparisonResult
    +adjust_reflected_dialect_options(reflected_options, kind)
    -_compile_element(element): str
    +render_ddl_sql_expr(expr, is_server_default, is_index): str
    +render_type(type_, autogen_context)
    -_render_HSTORE_type(type_, autogen_context): str
    -_render_ARRAY_type(type_, autogen_context): str
    -_render_JSON_type(type_, autogen_context): str
    -_render_JSONB_type(type_, autogen_context): str
  }

  class PostgresqlColumnType {
    +using
    --
    -__init__(name, column_name, type_)
  }

  class CreateExcludeConstraintOp {
    +constraint_type: str
    +constraint_table
    +schema_obj
    +t
    +excl
    +op
    +op
    --
    -__init__(constraint_name, table_name, elements, where, schema, _orig_constraint)
    +{class} from_constraint(constraint): CreateExcludeConstraintOp
    +to_constraint(migration_context): ExcludeConstraint
    +{class} create_exclude_constraint(operations, constraint_name, table_name)
    +{class} batch_create_exclude_constraint(operations, constraint_name)
  }

  class MSSQLImpl {
    +transactional_ddl: bool
    +batch_separator: str
    +type_synonyms
    +identity_attrs_ignore
    +result
    +existing_type: type_
    +type_: NoneType
    +nullable: existing_nullable
    +existing_type: type_
    +type_: NoneType
    +used_default: bool
    +used_default: bool
    +mssql_include
    +drop_default
    +drop_check
    +drop_fks
    +rendered_metadata_default
    +rendered_inspector_default
    +is_alter: bool
    +options
    +options
    --
    -__init__()
    -_exec(construct)
    +emit_begin()
    +emit_commit()
    +alter_column(table_name, column_name)
    +create_index(index)
    +bulk_insert(table, rows)
    +drop_column(table_name, column)
    +compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
    -_compare_identity_default(metadata_identity, inspector_identity)
    +adjust_reflected_dialect_options(reflected_object, kind)
  }

  class _ExecDropConstraint {
    +inherit_cache: bool
    --
    -__init__(tname, colname, type_, schema)
  }

  class _ExecDropFKConstraint {
    +inherit_cache: bool
    --
    -__init__(tname, colname, schema)
  }

  class ComparisonResult {
    +status
    +message: str
    --
    +is_equal(): bool
    +is_different(): bool
    +is_skip(): bool
    +{class} Equal(): ComparisonResult
    +{class} Different(reason): ComparisonResult
    +{class} Skip(reason): ComparisonResult
  }

  class _constraint_sig {
    +const: _C
    -_sig
    +name
    +impl: DefaultImpl
    -_is_index
    -_is_fk
    -_is_uq
    -_is_metadata: bool
    +sig
    --
    -__init_subclass__()
    -{class} _register()
    -__init__(is_metadata, impl, const)
    +compare_to_reflected(other): ComparisonResult
    -_compare_to_reflected(other): ComparisonResult
    +{class} from_constraint(is_metadata, impl, constraint)
    +md_name_to_sql_name(context)
    +is_named()
    +unnamed()
    +unnamed_no_options()
    -_full_sig()
    -__eq__(other): bool
    -__ne__(other): bool
    -__hash__(): int
  }

  class _uq_constraint_sig {
    +is_unique: bool
    +metadata_obj: self
    +conn_obj: other
    --
    -{class} _register()
    -__init__(is_metadata, impl, const)
    +column_names()
    -_compare_to_reflected(other): ComparisonResult
  }

  class _ix_constraint_sig {
    +name: sqla_compat._ConstraintName
    +metadata_obj: self
    +conn_obj: other
    --
    -{class} _register()
    -__init__(is_metadata, impl, const)
    -_compare_to_reflected(other): ComparisonResult
    +has_expressions()
    +column_names()
    +column_names_optional()
    +is_named()
    +unnamed()
  }

  class _fk_constraint_sig {
    -{class} _register()
    -__init__(is_metadata, impl, const)
    +unnamed_no_options()
  }

  class SQLiteImpl {
    +transactional_ddl: bool
    +col
    +rendered_metadata_default
    +rendered_metadata_default
    +rendered_inspector_default
    +rendered_inspector_default
    +str_expr
    +str_expr
    --
    +requires_recreate_in_batch(batch_op): bool
    +add_constraint(const)
    +drop_constraint(const)
    +compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default): bool
    -_guess_if_default_is_unparenthesized_sql_expr(expr): bool
    +autogen_column_reflect(inspector, table, column_info)
    +render_ddl_sql_expr(expr, is_server_default): str
    +cast_for_batch_migrate(existing, existing_transfer, new_type)
    +correct_for_autogen_constraints(conn_unique_constraints, conn_indexes, metadata_unique_constraints, metadata_indexes)
  }

  class ImplMeta {
    +newtype
    --
    -__init__(classname, bases, dict_)
  }

  class DefaultImpl {
    +transactional_ddl: bool
    +command_terminator: str
    +type_synonyms
    +type_arg_extract
    +identity_attrs_ignore
    +vt
    +construct
    +compile_kw
    +compile_kw
    +compile_kw
    +compiled
    +conn
    +conn
    +kw
    +cls_
    +cls_
    +cls_
    +cls_
    +with_comment
    +comment
    +comment
    +definition: str
    +definition
    +tokens
    +term_tokens
    +paren_term: NoneType
    +paren_term: token
    +params
    +term: str
    +synonyms
    +inspector_all_terms
    +metadata_all_terms
    +insp
    +meta
    +mi
    +mm
    +inspector_params
    +metadata_params
    +compile_kw
    +meta_always
    +inspector_always
    +conn_unique
    +meta_unique
    +msg
    +unique_msg
    +m_sig
    +r_sig
    +metadata_tup
    +reflected_tup
    +meta_sig
    +conn_sig
    +conn_indexes_by_name
    +iex
    --
    -__init__(dialect, connection, as_sql, transactional_ddl, output_buffer, context_opts)
    +{class} get_by_dialect(dialect)
    +static_output(text)
    +version_table_impl(): Table
    +requires_recreate_in_batch(batch_op): bool
    +prep_table_for_batch(batch_impl, table)
    +bind()
    -_exec(construct, execution_options, multiparams, params)
    +execute(sql, execution_options)
    +alter_column(table_name, column_name)
    +add_column(table_name, column)
    +drop_column(table_name, column)
    +add_constraint(const)
    +drop_constraint(const)
    +rename_table(old_table_name, new_table_name, schema)
    +create_table(table)
    +drop_table(table)
    +create_index(index)
    +create_table_comment(table)
    +drop_table_comment(table)
    +create_column_comment(column)
    +drop_index(index)
    +bulk_insert(table, rows, multiinsert)
    -_tokenize_column_type(column): Params
    -_column_types_match(inspector_params, metadata_params): bool
    -_column_args_match(inspected_params, meta_params): bool
    +compare_type(inspector_column, metadata_column): bool
    +compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
    +correct_for_autogen_constraints(conn_uniques, conn_indexes, metadata_unique_constraints, metadata_indexes)
    +cast_for_batch_migrate(existing, existing_transfer, new_type)
    +render_ddl_sql_expr(expr, is_server_default): str
    -_compat_autogen_column_reflect(inspector): Callable
    +correct_for_autogen_foreignkeys(conn_fks, metadata_fks)
    +autogen_column_reflect(inspector, table, column_info)
    +start_migrations()
    +emit_begin()
    +emit_commit()
    +render_type(type_obj, autogen_context)
    -_compare_identity_default(metadata_identity, inspector_identity)
    -_compare_index_unique(metadata_index, reflected_index)
    -_create_metadata_constraint_sig(constraint)
    -_create_reflected_constraint_sig(constraint)
    +compare_indexes(metadata_index, reflected_index): ComparisonResult
    +compare_unique_constraint(metadata_constraint, reflected_constraint): ComparisonResult
    -_skip_functional_indexes(metadata_indexes, conn_indexes)
    +adjust_reflected_dialect_options(reflected_object, kind)
  }

  class Params {
    +token0: str
    +tokens
    +args
    +kwargs
  }

  class OracleImpl {
    +transactional_ddl: bool
    +batch_separator: str
    +command_terminator: str
    +type_synonyms
    +identity_attrs_ignore
    +result
    +rendered_metadata_default
    +rendered_metadata_default
    +rendered_inspector_default
    +rendered_inspector_default
    +rendered_inspector_default
    --
    -__init__()
    -_exec(construct)
    +compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
    +emit_begin()
    +emit_commit()
  }

  class AlterTable {
    -__init__(table_name, schema)
  }

  class RenameTable {
    -__init__(old_table_name, new_table_name, schema)
  }

  class AlterColumn {
    -__init__(name, column_name, schema, existing_type, existing_nullable, existing_server_default, existing_comment)
  }

  class ColumnNullable {
    -__init__(name, column_name, nullable)
  }

  class ColumnType {
    -__init__(name, column_name, type_)
  }

  class ColumnName {
    -__init__(name, column_name, newname)
  }

  class ColumnDefault {
    -__init__(name, column_name, default)
  }

  class ComputedColumnDefault {
    -__init__(name, column_name, default)
  }

  class IdentityColumnDefault {
    -__init__(name, column_name, default, impl)
  }

  class AddColumn {
    -__init__(name, column, schema, if_not_exists)
  }

  class DropColumn {
    -__init__(name, column, schema, if_exists)
  }

  class ColumnComment {
    -__init__(name, column_name, comment)
  }

  class MySQLImpl {
    +transactional_ddl: bool
    +type_synonyms
    +type_arg_extract
    +rendered_inspector_default
    +metadata_default
    +onupdate_ins
    +onupdate_met
    +rendered_inspector_default
    +rendered_metadata_default
    +removed
    +conn_fk_by_sig
    +metadata_fk_by_sig
    +mdfk
    +cnfk
    --
    +alter_column(table_name, column_name)
    +drop_constraint(const)
    -_is_mysql_allowed_functional_default(type_, server_default): bool
    +compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
    +correct_for_autogen_constraints(conn_unique_constraints, conn_indexes, metadata_unique_constraints, metadata_indexes)
    +correct_for_autogen_foreignkeys(conn_fks, metadata_fks)
  }

  class MariaDBImpl {
  }

  class MySQLAlterDefault {
    -__init__(name, column_name, default, schema)
  }

  class MySQLChangeColumn {
    -__init__(name, column_name, schema, newname, type_, nullable, default, autoincrement, comment)
  }

  class MySQLModifyColumn {
  }

}

package "venv2.lib.python3.12.site-packages.alembic.runtime" {
  class EnvironmentContext {
    -_migration_context
    +config: Config
    +script: ScriptDirectory
    +value
    +value
    +dict_value
    +value: dict_value
    +opts
    --
    -__init__(config, script)
    -__enter__(): EnvironmentContext
    -__exit__()
    +is_offline_mode(): bool
    +is_transactional_ddl(): bool
    +requires_connection(): bool
    +get_head_revision(): _RevNumber
    +get_head_revisions(): _RevNumber
    +get_starting_revision_argument(): _RevNumber
    +get_revision_argument(): _RevNumber
    +get_tag_argument()
    +get_x_argument(as_dictionary)
    +get_x_argument(as_dictionary)
    +get_x_argument(as_dictionary)
    +get_x_argument(as_dictionary)
    +configure(connection, url, dialect_name, dialect_opts, transactional_ddl, transaction_per_migration, output_buffer, starting_rev, tag, template_args, render_as_batch, target_metadata, include_name, include_object, include_schemas, process_revision_directives, compare_type, compare_server_default, render_item, literal_binds, upgrade_token, downgrade_token, alembic_module_prefix, sqlalchemy_module_prefix, user_module_prefix, on_version_apply)
    +run_migrations()
    +execute(sql, execution_options)
    +static_output(text)
    +begin_transaction()
    +get_context(): MigrationContext
    +get_bind(): Connection
    +get_impl(): DefaultImpl
  }

  class _ProxyTransaction {
    +t
    +t
    --
    -__init__(migration_context)
    -_proxied_transaction()
    +rollback()
    +commit()
    -__enter__(): _ProxyTransaction
    -__exit__(type_, value, traceback)
  }

  class MigrationContext {
    +as_sql: bool
    +transactional_ddl
    +version_table
    +version_table_schema
    +opts
    +dialect_opts
    +dialect
    +url_obj
    +dialect
    +url_obj
    +dialect
    +current_level
    +base_connection
    +fake_trans
    +fake_trans: NoneType
    +transaction_now
    +transaction_now
    +in_transaction
    +heads
    +start_from_rev: Any
    +start_from_rev: NoneType
    +start_from_rev
    +heads
    +head_maintainer
    +heads
    +heads
    +heads
    +dont_mutate
    +head_maintainer
    +meth
    +user_value
    +user_value
    --
    -__init__(dialect, connection, opts, environment_context)
    +{class} configure(connection, url, dialect_name, dialect, environment_context, dialect_opts, opts): MigrationContext
    +autocommit_block()
    +begin_transaction(_per_migration)
    +begin_commit()
    +get_current_revision()
    +get_current_heads()
    -_ensure_version_table(purge)
    -_has_version_table(): bool
    +stamp(script_directory, revision)
    +run_migrations()
    -_in_connection_transaction(): bool
    +execute(sql, execution_options)
    -_stdout_connection(connection): MockConnection
    +dump()
    +bind()
    +config()
    -_compare_type(inspector_column, metadata_column): bool
    -_compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_column_default): bool
  }

  class HeadMaintainer {
    +ret
    +ret
    +vers
    +vers
    --
    -__init__(context, heads)
    -_insert_version(version)
    -_delete_version(version)
    -_update_version(from_, to_)
    +update_to_step(step)
  }

  class MigrationInfo {
    +is_upgrade: bool
    +is_stamp: bool
    +up_revision_id
    +up_revision_ids
    +down_revision_ids
    +revision_map: RevisionMap
    --
    -__init__(revision_map, is_upgrade, is_stamp, up_revisions, down_revisions)
    +is_migration(): bool
    +source_revision_ids()
    +destination_revision_ids()
    +up_revision()
    +up_revisions()
    +down_revisions()
    +source_revisions()
    +destination_revisions()
  }

  class MigrationStep {
    +from_revisions_no_deps
    +to_revisions_no_deps
    +is_upgrade: bool
    +migration_fn: Any
    --
    +doc()
    +name(): str
    +{class} upgrade_from_script(revision_map, script): RevisionStep
    +{class} downgrade_from_script(revision_map, script): RevisionStep
    +is_downgrade(): bool
    +short_log(): str
    -__str__()
  }

  class RevisionStep {
    +downrevs
    +to_revisions
    +other_heads
    +ancestors
    +from_revisions
    +from_revisions
    +other_heads
    +ancestors
    +ancestors
    +to_revisions
    +downrevs
    +downrevs
    +downrevs
    +downrev
    +down_revision
    +down_revision
    --
    -__init__(revision_map, revision, is_upgrade)
    -__repr__()
    -__eq__(other): bool
    +doc()
    +from_revisions()
    +from_revisions_no_deps()
    +to_revisions()
    +to_revisions_no_deps()
    -_has_scalar_down_revision(): bool
    +should_delete_branch(heads): bool
    +merge_branch_idents(heads)
    -_unmerge_to_revisions(heads)
    +unmerge_branch_idents(heads)
    +should_create_branch(heads): bool
    +should_merge_branches(heads): bool
    +should_unmerge_branches(heads): bool
    +update_version_num(heads)
    +delete_version_num(): str
    +insert_version_num(): str
    +info(): MigrationInfo
  }

  class StampStep {
    +doc
    --
    -__init__(from_, to_, is_upgrade, branch_move, revision_map)
    +stamp_revision()
    -__eq__(other)
    +from_revisions()
    +to_revisions()
    +from_revisions_no_deps()
    +to_revisions_no_deps()
    +delete_version_num(): str
    +insert_version_num(): str
    +update_version_num(heads)
    +merge_branch_idents(heads)
    +unmerge_branch_idents(heads)
    +should_delete_branch(heads): bool
    +should_create_branch(heads)
    +should_merge_branches(heads): bool
    +should_unmerge_branches(heads): bool
    +info(): MigrationInfo
  }

}

package "venv2.lib.python3.12.site-packages.alembic.operations" {
  class SchemaObjects {
    +m
    +columns
    +t
    +p
    +m
    +t1_cols
    +t1_cols: local_cols
    +t1
    +tname
    +f
    +t
    +uq
    +t
    +ck
    +t
    +types
    +const
    +const
    +kw
    +mt
    +m
    +cols
    +t
    +constraints
    +t
    +idx
    +tokens
    +sname
    +tname
    +tname: table_key
    +sname: NoneType
    +rel_t
    +rel_t
    --
    -__init__(migration_context)
    +primary_key_constraint(name, table_name, cols, schema): PrimaryKeyConstraint
    +foreign_key_constraint(name, source, referent, local_cols, remote_cols, onupdate, ondelete, deferrable, source_schema, referent_schema, initially, match): ForeignKeyConstraint
    +unique_constraint(name, source, local_cols, schema): UniqueConstraint
    +check_constraint(name, source, condition, schema)
    +generic_constraint(name, table_name, type_, schema): Any
    +metadata(): MetaData
    +table(name): Table
    +column(name, type_): Column
    +index(name, tablename, columns, schema): Index
    -_parse_table_key(table_key)
    -_ensure_table_for_fk(metadata, fk)
  }

  class BatchOperationsImpl {
    +should_recreate
    +fn
    +m1
    +m1
    +existing_table
    +reflected: bool
    +existing_table
    +reflected: bool
    +batch_impl
    +fn
    --
    -__init__(operations, table_name, schema, recreate, copy_from, table_args, table_kwargs, reflect_args, reflect_kwargs, naming_convention, partial_reordering)
    +dialect(): Dialect
    +impl(): DefaultImpl
    -_should_recreate(): bool
    +flush()
    +alter_column()
    +add_column()
    +drop_column()
    +add_constraint(const)
    +drop_constraint(const)
    +rename_table()
    +create_index(idx)
    +drop_index(idx)
    +create_table_comment(table)
    +drop_table_comment(table)
    +create_table(table)
    +drop_table(table)
    +create_column_comment(column)
  }

  class ApplyBatchImpl {
    +schema
    +c_copy
    +pairs
    +col_by_idx
    +pairs_list
    +sorted_
    +m
    +schema
    +new_table
    +const_columns
    +const_copy: Constraint
    +const_copy
    +const_copy
    +const_copy
    +idx
    +idx_copy
    +spec
    +parts
    +tname
    +referent_schema
    +referent_schema: NoneType
    +key
    +t
    +colname
    +existing
    +existing_transfer
    +existing_type
    +resolved_existing_type
    +type_
    +index_cols
    +col_indexes
    +idx
    +insert_before
    +insert_before
    +idx
    +insert_after
    +insert_after
    +const
    --
    -__init__(impl, table, table_args, table_kwargs, reflected, partial_reordering)
    -{class} _calc_temp_name(tablename): str
    -_grab_table_elements()
    -_adjust_self_columns_for_partial_reordering()
    -_transfer_elements_to_new_table()
    -_gather_indexes_from_both_tables()
    -_setup_referent(metadata, constraint)
    +colspec()
    -_create(op_impl)
    +alter_column(table_name, column_name, nullable, server_default, name, type_, autoincrement, comment)
    -_setup_dependencies_for_add_column(colname, insert_before, insert_after)
    +add_column(table_name, column, insert_before, insert_after)
    +drop_column(table_name, column)
    +create_column_comment(column)
    +create_table_comment(table)
    +drop_table_comment(table)
    +add_constraint(const)
    +drop_constraint(const)
    +create_index(idx)
    +drop_index(idx)
    +rename_table()
  }

  class MigrateOperation {
    -_mutations
    --
    +info()
    +reverse(): MigrateOperation
    +to_diff_tuple()
  }

  class AddConstraintOp {
    +add_constraint_ops
    --
    +constraint_type(): str
    +{class} register_add_constraint(type_)
    +go()
    +{class} from_constraint(constraint): AddConstraintOp
    +to_constraint(migration_context): Constraint
    +reverse(): DropConstraintOp
    +to_diff_tuple()
  }

  class DropConstraintOp {
    +types
    +constraint_table
    +constraint
    +constraint_table
    +op
    +op
    --
    -__init__(constraint_name, table_name, type_)
    +reverse(): AddConstraintOp
    +to_diff_tuple()
    +{class} from_constraint(constraint): DropConstraintOp
    +to_constraint(): Constraint
    +{class} drop_constraint(operations, constraint_name, table_name, type_)
    +{class} batch_drop_constraint(operations, constraint_name, type_)
  }

  class CreatePrimaryKeyOp {
    +constraint_type: str
    +constraint_table
    +pk_constraint
    +schema_obj
    +op
    +op
    --
    -__init__(constraint_name, table_name, columns)
    +{class} from_constraint(constraint): CreatePrimaryKeyOp
    +to_constraint(migration_context): PrimaryKeyConstraint
    +{class} create_primary_key(operations, constraint_name, table_name, columns)
    +{class} batch_create_primary_key(operations, constraint_name, columns)
  }

  class CreateUniqueConstraintOp {
    +constraint_type: str
    +constraint_table
    +uq_constraint
    +kw
    +schema_obj
    +op
    +op
    --
    -__init__(constraint_name, table_name, columns)
    +{class} from_constraint(constraint): CreateUniqueConstraintOp
    +to_constraint(migration_context): UniqueConstraint
    +{class} create_unique_constraint(operations, constraint_name, table_name, columns): Any
    +{class} batch_create_unique_constraint(operations, constraint_name, columns): Any
  }

  class CreateForeignKeyOp {
    +constraint_type: str
    +fk_constraint
    +kw
    +schema_obj
    +op
    +op
    --
    -__init__(constraint_name, source_table, referent_table, local_cols, remote_cols)
    +to_diff_tuple()
    +{class} from_constraint(constraint): CreateForeignKeyOp
    +to_constraint(migration_context): ForeignKeyConstraint
    +{class} create_foreign_key(operations, constraint_name, source_table, referent_table, local_cols, remote_cols)
    +{class} batch_create_foreign_key(operations, constraint_name, referent_table, local_cols, remote_cols)
  }

  class CreateCheckConstraintOp {
    +constraint_type: str
    +constraint_table
    +ck_constraint
    +schema_obj
    +op
    +op
    --
    -__init__(constraint_name, table_name, condition)
    +{class} from_constraint(constraint): CreateCheckConstraintOp
    +to_constraint(migration_context): CheckConstraint
    +{class} create_check_constraint(operations, constraint_name, table_name, condition)
    +{class} batch_create_check_constraint(operations, constraint_name, condition)
  }

  class CreateIndexOp {
    +schema_obj
    +idx
    +op
    +op
    --
    -__init__(index_name, table_name, columns)
    +reverse(): DropIndexOp
    +to_diff_tuple()
    +{class} from_index(index): CreateIndexOp
    +to_index(migration_context): Index
    +{class} create_index(operations, index_name, table_name, columns)
    +{class} batch_create_index(operations, index_name, columns)
  }

  class DropIndexOp {
    +schema_obj
    +op
    +op
    --
    -__init__(index_name, table_name)
    +to_diff_tuple()
    +reverse(): CreateIndexOp
    +{class} from_index(index): DropIndexOp
    +to_index(migration_context): Index
    +{class} drop_index(operations, index_name, table_name)
    +{class} batch_drop_index(operations, index_name)
  }

  class CreateTableOp {
    +schema_obj
    +op
    --
    -__init__(table_name, columns)
    +reverse(): DropTableOp
    +to_diff_tuple()
    +{class} from_table(table): CreateTableOp
    +to_table(migration_context): Table
    +{class} create_table(operations, table_name): Table
  }

  class DropTableOp {
    +cols_and_constraints
    +cols_and_constraints
    +schema_obj
    +t
    +op
    --
    -__init__(table_name)
    +to_diff_tuple()
    +reverse(): CreateTableOp
    +{class} from_table(table): DropTableOp
    +to_table(migration_context): Table
    +{class} drop_table(operations, table_name)
  }

  class AlterTableOp {
    -__init__(table_name)
  }

  class RenameTableOp {
    +op
    --
    -__init__(old_table_name, new_table_name)
    +{class} rename_table(operations, old_table_name, new_table_name)
  }

  class CreateTableCommentOp {
    +op
    +op
    +schema_obj
    --
    -__init__(table_name, comment)
    +{class} create_table_comment(operations, table_name, comment)
    +{class} batch_create_table_comment(operations, comment)
    +reverse()
    +to_table(migration_context): Table
    +to_diff_tuple()
  }

  class DropTableCommentOp {
    +op
    +op
    +schema_obj
    --
    -__init__(table_name)
    +{class} drop_table_comment(operations, table_name)
    +{class} batch_drop_table_comment(operations)
    +reverse(): CreateTableCommentOp
    +to_table(migration_context): Table
    +to_diff_tuple()
  }

  class AlterColumnOp {
    +col_diff
    +hc1
    +kw
    +all_keys
    +swap
    +alt
    +alt
    --
    -__init__(table_name, column_name)
    +to_diff_tuple(): Any
    +has_changes(): bool
    +reverse(): AlterColumnOp
    +{class} alter_column(operations, table_name, column_name)
    +{class} batch_alter_column(operations, column_name)
  }

  class AddColumnOp {
    +op
    +op
    +kw
    +op
    --
    -__init__(table_name, column)
    +reverse(): DropColumnOp
    +to_diff_tuple()
    +to_column()
    +{class} from_column(col): AddColumnOp
    +{class} from_column_and_tablename(schema, tname, col): AddColumnOp
    +{class} add_column(operations, table_name, column)
    +{class} batch_add_column(operations, column)
  }

  class DropColumnOp {
    +op
    +schema_obj
    +op
    +op
    --
    -__init__(table_name, column_name)
    +to_diff_tuple()
    +reverse(): AddColumnOp
    +{class} from_column_and_tablename(schema, tname, col): DropColumnOp
    +to_column(migration_context)
    +{class} drop_column(operations, table_name, column_name)
    +{class} batch_drop_column(operations, column_name)
  }

  class BulkInsertOp {
    +op
    --
    -__init__(table, rows)
    +{class} bulk_insert(operations, table, rows)
  }

  class ExecuteSQLOp {
    +op
    --
    -__init__(sqltext)
    +{class} execute(operations, sqltext)
    +{class} batch_execute(operations, sqltext)
    +to_diff_tuple()
  }

  class OpContainer {
    -__init__(ops)
    +is_empty(): bool
    +as_diffs(): Any
    -{class} _ops_as_diffs(migrations)
  }

  class ModifyTableOps {
    -__init__(table_name, ops)
    +reverse(): ModifyTableOps
  }

  class UpgradeOps {
    -__init__(ops, upgrade_token)
    +reverse_into(downgrade_ops): DowngradeOps
    +reverse(): DowngradeOps
  }

  class DowngradeOps {
    -__init__(ops, downgrade_token)
    +reverse(): UpgradeOps
  }

  class MigrationScript {
    -_needs_render
    -_upgrade_ops
    -_downgrade_ops
    --
    -__init__(rev_id, upgrade_ops, downgrade_ops)
    +upgrade_ops()
    +upgrade_ops(upgrade_ops)
    +downgrade_ops()
    +downgrade_ops(downgrade_ops)
    +upgrade_ops_list()
    +downgrade_ops_list()
  }

  class AbstractOperations {
    +impl
    +fn
    +source_name
    +fn
    +source_name
    +spec
    +name_args
    +args
    +num_defaults
    +defaulted_vals
    +defaulted_vals
    +defaulted_vals
    +apply_kw
    +args
    +func_text
    +globals_
    +lcl
    +op
    +impl
    +batch_op
    +fn
    +sync_conn
    +async_conn
    --
    -__init__(migration_context, impl)
    +{class} register_operation(name, sourcename)
    +register()
    +{class} implementation_for(op_cls)
    +decorate(): _C
    +{class} context(migration_context)
    +batch_alter_table(table_name, schema, recreate, partial_reordering, copy_from, table_args, table_kwargs, reflect_args, reflect_kwargs, naming_convention)
    +get_context(): MigrationContext
    +invoke(operation): Table
    +invoke(operation)
    +invoke(operation): Any
    +invoke(operation): Any
    +f(name): conv
    +inline_literal(value, type_): _literal_bindparam
    +get_bind(): Connection
    +run_async(async_function): _T
  }

  class Operations {
    +add_column(table_name, column)
    +alter_column(table_name, column_name)
    +bulk_insert(table, rows)
    +create_check_constraint(constraint_name, table_name, condition)
    +create_exclude_constraint(constraint_name, table_name)
    +create_foreign_key(constraint_name, source_table, referent_table, local_cols, remote_cols)
    +create_index(index_name, table_name, columns)
    +create_primary_key(constraint_name, table_name, columns)
    +create_table(table_name): Table
    +create_table_comment(table_name, comment)
    +create_unique_constraint(constraint_name, table_name, columns): Any
    +drop_column(table_name, column_name)
    +drop_constraint(constraint_name, table_name, type_)
    +drop_index(index_name, table_name)
    +drop_table(table_name)
    +drop_table_comment(table_name)
    +execute(sqltext)
    +rename_table(old_table_name, new_table_name)
  }

  class BatchOperations {
    +impl: BatchOperationsImpl
    --
    -_noop(operation): NoReturn
    +add_column(column)
    +alter_column(column_name)
    +create_check_constraint(constraint_name, condition)
    +create_exclude_constraint(constraint_name)
    +create_foreign_key(constraint_name, referent_table, local_cols, remote_cols)
    +create_index(index_name, columns)
    +create_primary_key(constraint_name, columns)
    +create_table_comment(comment)
    +create_unique_constraint(constraint_name, columns): Any
    +drop_column(column_name)
    +drop_constraint(constraint_name, type_)
    +drop_index(index_name)
    +drop_table_comment()
    +execute(sqltext)
  }

}

package "venv2.lib.python3.12.site-packages.alembic.script" {
  class _CollectRevisionsProtocol {
    -__call__(upper, lower, inclusive, implicit_base, assert_relative_length)
  }

  class RevisionError {
  }

  class RangeNotAncestorError {
    -__init__(lower, upper)
  }

  class MultipleHeads {
    -__init__(heads, argument)
  }

  class ResolutionError {
    -__init__(message, argument)
  }

  class CycleDetected {
    +kind: str
    --
    -__init__(revisions)
  }

  class DependencyCycleDetected {
    +kind: str
    --
    -__init__(revisions)
  }

  class LoopDetected {
    +kind: str
    --
    -__init__(revision)
  }

  class DependencyLoopDetected {
    +kind: str
    --
    -__init__(revision)
  }

  class RevisionMap {
    +map_: _InterimRevisionMapType
    +heads
    -_real_heads
    +bases
    -_real_bases
    +has_branch_labels
    +all_revisions
    +rev_map
    +down_revision
    +revision_map: _RevisionMapType
    +total_space
    +deleted_revs
    +total_space
    +deleted_revs
    +map_rev
    +parent: node
    +parent
    +deps
    +normalized_resolved
    +map_
    +revisions
    +current_heads
    +current_heads
    +rint
    +select_heads
    +select_heads
    +resolved
    +branch_rev
    +nonbranch_rev
    +branch_rev
    +branch_rev
    +branch_rev: NoneType
    +revision
    +revision
    +revision: bool
    +revs
    +revs
    +revs
    +revision
    +targets
    +shares
    +resolved_target
    +resolved_target: target
    +resolved_test_against_revs
    +branch_label
    +branch_label: NoneType
    +current_head
    +fn: _CollectRevisionsProtocol
    +fn
    +fn
    +map_
    +seen
    +todo
    +target
    +per_target
    +rev
    +next_rev
    +overlaps
    +id_to_rev
    +todo
    +inserted_order
    +current_heads
    +ancestors_by_idx
    +output
    +current_candidate_idx: int
    +candidate
    +current_candidate_idx: check_head_index
    +candidate_rev
    +heads_to_add
    +current_candidate_idx
    +initial
    +initial
    +initial: start
    +children
    +walk_up
    +children
    +children: walk_up
    +children
    +children
    +children
    +ret
    +initial
    +match
    +rel_int
    +rev
    +relative_revision
    +cr_tuple
    +symbol_list
    +symbol_list
    +all_current
    +sl_all_current
    +symbol_list
    +symbol
    +current_revisions
    +symbol
    +branch_label: symbol
    +rev
    +branch_label: NoneType
    +match
    +match: NoneType
    +current_revisions_tup
    +current_revisions_tup
    +relative
    +current_revisions_tup
    +start_revs: current_revisions_tup
    +start_revs
    +active_on_branch
    +start_revs
    +start_revs
    +rev
    +target_revision: NoneType
    +roots
    +roots
    +roots
    +roots
    +ancestors
    +roots
    +heads
    +downgrade_revisions
    +active_revisions
    +targets
    +branch_rev
    +branch
    +targets
    +required_node_set
    +current_revisions
    +current_revisions
    +lower: NoneType
    +current_revisions
    +lower
    +current_node_set
    +needs
    +lower_descendents
    +top_revs
    +top_revs
    --
    -__init__(generator)
    +heads()
    +bases()
    -_real_heads()
    -_real_bases()
    -_revision_map(): _RevisionMapType
    -_detect_cycles(rev_map, heads, bases, _real_heads, _real_bases)
    -_map_branch_labels(revisions, map_)
    -_add_branches(revisions, map_)
    -_add_depends_on(revisions, map_)
    -_normalize_depends_on(revisions, map_)
    +add_revision(revision, _replace)
    +get_current_head(branch_label)
    -_get_base_revisions(identifier)
    +get_revisions(id_)
    +get_revision(id_)
    -_resolve_branch(branch_label)
    -_revision_for_ident(resolved_id, check_branch)
    -_filter_into_branch_heads(targets)
    +filter_for_lineage(targets, check_against, include_dependencies)
    -_shares_lineage(target, test_against_revs, include_dependencies): bool
    -_resolve_revision_number(id_)
    +iterate_revisions(upper, lower, implicit_base, inclusive, assert_relative_length, select_for_downgrade)
    -_get_descendant_nodes(targets, map_, check, omit_immediate_dependencies, include_dependencies)
    +fn()
    +fn()
    +fn()
    -_get_ancestor_nodes(targets, map_, check, include_dependencies)
    +fn()
    +fn()
    -_iterate_related_revisions(fn, targets, map_, check)
    -_topological_sort(revisions, heads)
    +get_ancestors()
    -_walk(start, steps, branch_label, no_overwalk)
    -_parse_downgrade_target(current_revisions, target, assert_relative_length)
    -_parse_upgrade_target(current_revisions, target, assert_relative_length)
    -_collect_downgrade_revisions(upper, lower, inclusive, implicit_base, assert_relative_length)
    -_collect_upgrade_revisions(upper, lower, inclusive, implicit_base, assert_relative_length)
    -_get_all_current(id_)
  }

  class Revision {
    +nextrev
    -_all_nextrev
    +revision: str
    +down_revision
    +dependencies
    +branch_labels
    -_resolved_dependencies
    -_normalized_resolved_dependencies
    +illegal_chars
    +args
    --
    +{class} verify_rev_id(revision)
    -__init__(revision, down_revision, dependencies, branch_labels)
    -__repr__(): str
    +add_nextrev(revision)
    -_all_down_revisions()
    -_normalized_down_revisions()
    -_versioned_down_revisions()
    +is_head(): bool
    -_is_real_head(): bool
    +is_base(): bool
    -_is_real_base(): bool
    +is_branch_point(): bool
    -_is_real_branch_point(): bool
    +is_merge_point(): bool
  }

  class ScriptDirectory {
    +loc
    +paths
    +dupes
    +real_path
    +script
    +script_location
    +truncate_slug_length
    +tsl
    +truncate_slug_length
    +truncate_slug_length: NoneType
    +prepend_sys_path
    +rvl
    +start
    +end
    +ancestor: str
    +ancestor
    +multiple_heads: str
    +multiple_heads
    +resolution
    +bases
    +revs
    +revs
    +heads_revs
    +steps
    +revision: str
    +filtered_heads
    +filtered_heads
    +dests
    +descendants
    +ancestors
    +todo_heads
    +step
    +todo_heads
    +step
    +step
    +path
    +tzinfo
    +tzinfo: NoneType
    +tzinfo
    +create_date
    +create_date
    +head: str
    +heads
    +create_date
    +version_path
    +version_path
    +version_path
    +norm_path
    +path
    +resolved_depends_on
    +resolved_depends_on
    +resolved_depends_on: NoneType
    +post_write_hooks
    +script
    +epoch
    +slug
    +slug
    +filename
    --
    -__init__(dir, file_template, truncate_slug_length, version_locations, sourceless, output_encoding, timezone, hooks, recursive_version_locations, messaging_opts)
    +versions(): str
    -_singular_version_location(): Path
    -_version_locations()
    -_load_revisions()
    +{class} from_config(config): ScriptDirectory
    -_catch_revision_errors(ancestor, multiple_heads, start, end, resolution)
    +walk_revisions(base, head)
    +get_revisions(id_)
    +get_all_current(id_)
    +get_revision(id_): Script
    +as_revision_number(id_)
    +iterate_revisions(upper, lower)
    +get_current_head()
    +get_heads()
    +get_base()
    +get_bases()
    -_upgrade_revs(destination, current_rev)
    -_downgrade_revs(destination, current_rev)
    -_stamp_revs(revision, heads)
    +run_env()
    +env_py_location(): str
    -_append_template(src, dest)
    -_generate_template(src, dest)
    -_copy_file(src, dest)
    -_ensure_directory(path)
    -_generate_create_date(): datetime.datetime
    +generate_revision(revid, message, head, splice, branch_labels, version_path, file_template, depends_on)
    -_rev_path(path, rev_id, message, create_date): Path
  }

  class Script {
    +module: ModuleType
    +path: str
    -_db_current_indicator
    +doc
    +doc
    +entry
    +text
    +text
    +text
    +paths
    +py_cache_path
    +names
    +path
    +py_match
    +py_match
    +py_filename
    +is_c
    +is_o
    +is_c: bool
    +is_o: bool
    +py_exists
    +pyc_exists
    +module
    +m
    +revision
    +revision
    --
    -__init__(module, rev_id, path)
    -_script_path(): Path
    +doc(): str
    +longdoc(): str
    +log_entry(): str
    -__str__(): str
    -_head_only(include_branches, include_doc, include_parents, tree_indicators, head_indicators): str
    +cmd_format(verbose, include_branches, include_doc, include_parents, tree_indicators): str
    -_format_down_revision(): str
    -{class} _list_py_dir(scriptdir, path)
    -{class} _from_path(scriptdir, path)
  }

}

package "venv2.lib.python3.12.site-packages.alembic.testing" {
  class CompareTable {
    -__init__(table)
    -__eq__(other)
    -__ne__(other)
  }

  class CompareColumn {
    -__init__(column)
    -__eq__(other)
    -__ne__(other)
  }

  class CompareIndex {
    +expr
    +expr_str
    +expr_str
    --
    -__init__(index, name_only)
    -__eq__(other)
    -__ne__(other)
    -__repr__()
  }

  class CompareCheckConstraint {
    -__init__(constraint)
    -__eq__(other)
    -__ne__(other)
  }

  class CompareForeignKey {
    +r1
    --
    -__init__(constraint)
    -__eq__(other)
    -__ne__(other)
  }

  class ComparePrimaryKey {
    +r1
    --
    -__init__(constraint)
    -__eq__(other)
    -__ne__(other)
  }

  class CompareUniqueConstraint {
    +r1
    --
    -__init__(constraint)
    -__eq__(other)
    -__ne__(other)
  }

  class _ErrorContainer {
    +error: Any
  }

  class SuiteRequirements {
    +insp
    --
    +schemas()
    +autocommit_isolation()
    +materialized_views()
    +unique_constraint_reflection()
    +doesnt_have_check_uq_constraints()
    +sequences()
    +foreign_key_match()
    +foreign_key_constraint_reflection()
    +check_constraints_w_enforcement()
    +reflects_pk_names()
    +reflects_fk_options()
    +sqlalchemy_1x()
    +sqlalchemy_2()
    +asyncio()
    +go()
    +comments()
    +alter_column()
    +computed_columns()
    +autoincrement_on_composite_pk()
    +fk_ondelete_is_reflected()
    +fk_onupdate_is_reflected()
    +fk_onupdate()
    +fk_ondelete_restrict()
    +fk_onupdate_restrict()
    +fk_ondelete_noaction()
    +fk_initially()
    +fk_deferrable()
    +fk_deferrable_is_reflected()
    +fk_names()
    +integer_subtype_comparisons()
    +no_name_normalize()
    +identity_columns()
    +identity_columns_alter()
  }

  class TestBase {
    +is_sqlalchemy_future: sqla_2
    +location
    +file_path
    +current_dir
    --
    +clear_staging_dir()
    +pushd(dirname)
    +pop_alembic_config_env()
    +ops_context(migration_context)
    +migration_context(connection)
    +as_sql_migration_context(connection)
    +connection()
  }

  class TablesTest {
  }

  class buffer_ {
    +msg
    +msg
    +msg
    +msg
    --
    -__init__()
    +write(msg)
    +flush()
  }

  class ctx {
    +get_buf()
    +clear_assertions()
    +assert_()
    +assert_contains(sql)
  }

  class AlterColRoundTripFixture {
    +c1
    +c2
    +c1
    +c2
    +column
    +t
    +insp
    +old_col
    +insp
    +new_col
    +compare: to_
    --
    +setUp()
    -_compare_type(t1, t2)
    -_compare_server_default(t1, s1, t2, s2)
    +tearDown()
    -_run_alter_col(from_, to_, compare)
  }

}

package "venv2.lib.python3.12.site-packages.alembic.testing.suite" {
  class AutogenerateForeignKeysTest {
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    --
    +test_remove_fk()
    +test_add_fk()
    +test_no_change()
    +test_no_change_composite_fk()
    +test_casing_convention_changed_so_put_drops_first()
    +test_add_composite_fk_with_name()
    +test_remove_composite_fk()
    +test_add_fk_colkeys()
    +test_no_change_colkeys()
  }

  class IncludeHooksTest {
    +m1
    +m2
    +ref
    +t1
    +ref
    +diffs
    +diffs
    +m1
    +m2
    +ref
    +t2
    +diffs
    +m1
    +m2
    +r1a
    +t1
    +r2b
    +t2
    +diffs
    +diffs
    --
    +test_remove_connection_fk(hook_type)
    +include_object(name, type_, reflected, compare_to)
    +include_name(type_, parent_names)
    +test_add_metadata_fk()
    +include_object(name, type_, reflected, compare_to)
    +test_change_fk(hook_type)
    +include_object(name, type_, reflected, compare_to)
    +include_name(type_, parent_names)
  }

  class AutogenerateFKOptionsTest {
    +m1
    +m2
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    +diffs
    --
    -_fk_opts_fixture(old_opts, new_opts)
    +test_add_ondelete()
    +test_remove_ondelete()
    +test_nochange_ondelete()
    +test_add_onupdate()
    +test_remove_onupdate()
    +test_nochange_onupdate()
    +test_nochange_ondelete_restrict()
    +test_nochange_onupdate_restrict()
    +test_nochange_ondelete_noaction()
    +test_nochange_onupdate_noaction()
    +test_change_ondelete_from_restrict()
    +test_change_onupdate_from_restrict()
    +test_ondelete_onupdate_combo()
    +test_add_initially_deferred()
    +test_remove_initially_deferred()
    +test_add_initially_immediate_plus_deferrable()
    +test_remove_initially_immediate_plus_deferrable()
    +test_add_initially_deferrable_nochange_one()
    +test_add_initially_deferrable_nochange_two()
    +test_add_initially_deferrable_nochange_three()
    +test_add_deferrable()
    +test_remove_deferrable()
  }

  class ModelOne {
    +schema: Any
    +schema
    +m
    +schema
    +m
    --
    -{class} _get_db_schema()
    -{class} _get_model_schema()
  }

  class NamingConvModel {
    +configure_opts
    +naming_convention
    +m
    +m
    --
    -{class} _get_db_schema()
    -{class} _get_model_schema()
  }

  class _ComparesFKs {
    +fks
    +server_fk_name
    --
    -_assert_fk_diff(diff, type_, source_table, source_columns, target_table, target_columns, name, conditional_name, source_schema, onupdate, ondelete, initially, deferrable)
  }

  class AutogenTest {
    +configure_opts
    +conn
    +ctx_opts
    +context
    --
    -_flatten_diffs(diffs)
    -{class} _get_bind()
    +{class} setup_class()
    +{class} teardown_class()
    +setUp()
    +tearDown()
    -_update_context(object_filters, name_filters, include_schemas)
  }

  class AutogenFixtureTest {
    +dialect
    +existing_length
    +ctx_opts
    +context
    +autogen_context
    +uo
    +dialect
    --
    -_fixture(m1, m2, include_schemas, opts, object_filters, name_filters, return_ops, max_identifier_length)
    +setUp()
    +tearDown()
  }

  class AutogenerateComputedTest {
    +m1
    +m2
    +diffs
    +c
    +m1
    +m2
    +diffs
    +c
    +m1
    +m2
    +arg_before
    +arg_after
    +diffs
    +m1
    +m2
    +arg_before
    +arg_after
    +diffs
    --
    +test_add_computed_column()
    +test_remove_computed_column()
    +test_cant_change_computed_warning(test_case)
    +test_computed_unchanged(test_case)
  }

  class AlterColumnTest {
    +m1
    +m2
    +alter_col
    +m1
    +m2
    +m1
    +m2
    +alter_col
    +m1
    +m2
    +alter_col
    +ops
    +modify_table
    +alter_col
    --
    +test_all_existings_filled(pk)
    +test_all_existings_filled_in_notnull(pk)
    +test_all_existings_filled_in_comment(pk)
    +test_all_existings_filled_in_server_default(pk)
    -_assert_alter_col(m1, m2, pk, nullable)
  }

  class AutoincrementTest {
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    +m1
    +m2
    +ops
    --
    +test_alter_column_autoincrement_none()
    +test_alter_column_autoincrement_pk_false()
    +test_alter_column_autoincrement_pk_implicit_true()
    +test_alter_column_autoincrement_pk_explicit_true()
    +test_alter_column_autoincrement_nonpk_false()
    +test_alter_column_autoincrement_nonpk_implicit_false()
    +test_alter_column_autoincrement_nonpk_explicit_true()
    +test_alter_column_autoincrement_compositepk_false()
    +test_alter_column_autoincrement_compositepk_implicit_false()
    +test_alter_column_autoincrement_compositepk_explicit_true()
  }

  class AutogenerateIdentityTest {
    +m1
    +m2
    +diffs
    +i
    +m1
    +m2
    +diffs
    +c
    +m1
    +m2
    +id_
    +diffs
    +m1
    +m2
    +args
    +args
    +id_
    +diffs
    +arg_before
    +arg_after
    +m1
    +m2
    +diffs
    +diffs
    +old
    +new
    +m1
    +m2
    +diffs
    +diffs
    +added
    +m1
    +m2
    +diffs
    +diffs
    +removed
    --
    +test_add_identity_column()
    +test_remove_identity_column()
    +test_no_change_identity_column()
    +test_dialect_kwargs_changes()
    +test_change_identity(before, after)
    +check(idt)
    +test_add_identity_to_column()
    +test_remove_identity_from_column()
  }

  class AutogenerateCommentsTest {
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    +m1
    +m2
    +diffs
    --
    +test_existing_table_comment_no_change()
    +test_add_table_comment()
    +test_remove_table_comment()
    +test_alter_table_comment()
    +test_existing_column_comment_no_change()
    +test_add_column_comment()
    +test_remove_column_comment()
    +test_alter_column_comment()
  }

  class BackendAlterColumnTest {
    +test_rename_column()
    +test_modify_type_int_str()
    +test_add_server_default_int()
    +test_modify_server_default_int()
    +test_modify_nullable_to_non()
    +test_modify_non_nullable_to_nullable()
  }

  class MigrationTransactionTest {
    +conn: NoneType
    +conn
    +context
    +proxy
    +context
    +proxy
    +context
    +proxy
    +context
    +proxy
    +context
    +proxy
    +context
    +proxy
    +context
    +context
    +context
    +context
    +context
    +context
    +context
    +context
    +context
    +context
    +to_check
    +buf
    --
    -_fixture(opts)
    +teardown_method()
    +test_proxy_transaction_rollback()
    +test_proxy_transaction_commit()
    +test_proxy_transaction_contextmanager_commit()
    +test_proxy_transaction_contextmanager_rollback()
    +go()
    +test_proxy_transaction_contextmanager_explicit_rollback()
    +test_proxy_transaction_contextmanager_explicit_commit()
    +test_transaction_per_migration_transactional_ddl()
    +test_transaction_per_migration_non_transactional_ddl()
    +test_transaction_per_all_transactional_ddl()
    +test_transaction_per_all_non_transactional_ddl()
    +test_transaction_per_all_sqlmode()
    +test_transaction_per_migration_sqlmode()
    +test_autocommit_block()
    +test_autocommit_block_no_transaction()
    +test_autocommit_block_transactional_ddl_sqlmode()
    +test_autocommit_block_nontransactional_ddl_sqlmode()
    -_assert_impl_steps()
  }

}

package "venv2.lib.python3.12.site-packages.alembic.autogenerate" {
  class _f_name {
    -__init__(prefix, name)
    -__repr__(): str
  }

  class Rewriter {
    -_chained
    +wr
    +upgrade_ops_list
    +ret
    +downgrade_ops_list
    +ret
    +directives
    +traverser
    +dest
    --
    -__init__()
    +chain(other): Rewriter
    +rewrites(operator)
    -_rewrite(context, revision, directive)
    -__call__(context, revision, directives)
    -_traverse_script(context, revision, directive)
    -_traverse_op_container(context, revision, directive)
    -_traverse_any_directive(context, revision, directive)
    -_traverse_for(context, revision, directive): Any
    -_traverse_list(context, revision, directives)
    +process_revision_directives(context, revision, directives)
  }

  class AutogenContext {
    +metadata
    +connection
    +dialect
    +imports
    +migration_context: MigrationContext
    +opts
    +metadata
    +include_object
    +include_name
    +object_filters
    +name_filters
    +table_name: name
    +table_name
    +schema_name
    +run_filters: run_object_filters
    +result
    +result
    +intersect
    --
    -__init__(migration_context, metadata, opts, autogenerate)
    +inspector(): Inspector
    -_within_batch()
    +run_name_filters(name, type_, parent_names): bool
    +run_object_filters(object_, name, type_, reflected, compare_to): bool
    +sorted_tables()
    +table_key_to_table()
  }

  class RevisionContext {
    +generated_revisions
    +process_revision_directives
    +template_args
    +autogen_context
    +upgrade_token
    +downgrade_token
    +migration_script
    +autogen_context
    +hook
    +command_args
    +op
    --
    -__init__(config, script_directory, command_args, process_revision_directives)
    -_to_script(migration_script)
    +run_autogenerate(rev, migration_context)
    +run_no_autogenerate(rev, migration_context)
    -_run_environment(rev, migration_context, autogenerate)
    -_default_revision(): MigrationScript
    +generate_scripts()
  }

  class _InspectorConv {
    -__init__(inspector)
    -_apply_reflectinfo_conv(consts)
    -_apply_constraint_conv(consts)
    +get_indexes()
    +get_unique_constraints()
    +get_foreign_keys()
    +reflect_table(table)
  }

}

package "venv2.lib.python3.12.site-packages.blackd" {
  class InvalidVariantHeader {
  }

}

package "venv2.lib.python3.12.site-packages.pydantic_settings" {
  class SettingsError {
  }

  class PydanticBaseSettingsSource {
    -__init__(settings_cls)
    +get_field_value(field, field_name)
    +field_is_complex(field): bool
    +prepare_field_value(field_name, field, value, value_is_complex): Any
    +decode_complex_value(field_name, field, value): Any
    -__call__()
  }

  class InitSettingsSource {
    -__init__(settings_cls, init_kwargs)
    +get_field_value(field, field_name)
    -__call__()
    -__repr__(): str
  }

  class PydanticBaseEnvSettingsSource {
    +field_info
    +v_alias
    +v_alias
    +first_arg
    +values
    +sub_model_field
    +sub_model_field: f
    +data
    +field_value
    --
    -__init__(settings_cls, case_sensitive, env_prefix)
    -_apply_case_sensitive(value): str
    -_extract_field_info(field, field_name)
    -_replace_field_names_case_insensitively(field, field_values)
    -__call__()
  }

  class SecretsSettingsSource {
    +secrets
    +path
    --
    -__init__(settings_cls, secrets_dir, case_sensitive, env_prefix)
    -__call__()
    +{class} find_case_path(dir_path, file_name, case_sensitive)
    +get_field_value(field, field_name)
    -__repr__(): str
  }

  class EnvSettingsSource {
    +env_val
    +env_val
    +env_val_built
    +value
    +allow_parse_failure: bool
    +allow_parse_failure: bool
    +prefixes
    +result
    +env_name_without_prefix
    +env_var: result
    +target_field
    +target_field
    +env_var
    +target_field
    +env_val
    --
    -__init__(settings_cls, case_sensitive, env_prefix, env_nested_delimiter)
    -_load_env_vars()
    +get_field_value(field, field_name)
    +prepare_field_value(field_name, field, value, value_is_complex): Any
    -_union_is_complex(annotation, metadata): bool
    -_field_is_complex(field)
    +{static} next_field(key)
    +explode_env_vars(field_name, field, env_vars)
    -__repr__(): str
  }

  class DotEnvSettingsSource {
    +env_files
    +env_files
    +dotenv_vars
    +env_path
    +data
    +data_lower_keys
    +data_lower_keys
    +env_name_without_prefix
    --
    -__init__(settings_cls, env_file, env_file_encoding, case_sensitive, env_prefix, env_nested_delimiter)
    -_load_env_vars()
    -_read_env_files(case_sensitive)
    -__call__()
    -__repr__(): str
  }

  class SettingsConfigDict {
    +case_sensitive: bool
    +env_prefix: str
    +env_file
    +env_file_encoding
    +env_nested_delimiter
    +secrets_dir
  }

  class BaseSettings {
    +case_sensitive
    +env_prefix
    +env_file
    +env_file_encoding
    +env_nested_delimiter
    +secrets_dir
    +init_settings
    +env_settings
    +dotenv_settings
    +file_secret_settings
    +sources
    +model_config
    --
    -__init__(_case_sensitive, _env_prefix, _env_file, _env_file_encoding, _env_nested_delimiter, _secrets_dir)
    +{class} settings_customise_sources(settings_cls, init_settings, env_settings, dotenv_settings, file_secret_settings)
    -_settings_build_values(init_kwargs, _case_sensitive, _env_prefix, _env_file, _env_file_encoding, _env_nested_delimiter, _secrets_dir)
  }

}

package "venv2.lib.python3.12.site-packages.blinker" {
  class Symbol {
    +symbols
    +obj
    --
    -__new__(name): Symbol
    -__init__(name)
    -__repr__(): str
    -__getnewargs__()
  }

  class Signal {
    +ANY: ANY
    +set_class
    +receiver_id
    +sender_id
    +results
    +result
    +result
    +results
    +result
    +result
    +sender_id
    +ids
    +ids
    +receiver
    +strong
    +sender_id: c.Hashable
    +sender_id: ANY_ID
    +sender_id
    +receiver_id
    --
    +receiver_connected(): Signal
    +receiver_disconnected(): Signal
    -__init__(doc)
    +connect(receiver, sender, weak): F
    +connect_via(sender, weak)
    +decorator(): F
    +connected_to(receiver, sender)
    +muted()
    +send()
    +has_receivers_for(sender): bool
    +receivers_for(sender)
    +disconnect(receiver, sender)
    -_disconnect(receiver_id, sender_id)
    -_make_cleanup_receiver(receiver_id)
    +cleanup()
    -_make_cleanup_sender(sender_id)
    +cleanup()
    -_cleanup_bookkeeping()
    -_clear_state()
  }

  class NamedSignal {
    +base
    --
    -__init__(name, doc)
    -__repr__(): str
  }

  class Namespace {
    +signal(name, doc): NamedSignal
  }

  class _PNamespaceSignal {
    -__call__(name, doc): NamedSignal
  }

}

package "venv2.lib.python3.12.site-packages.psycopg2" {
  class Json {
    +s
    +qs
    --
    -__init__(adapted, dumps)
    -__conform__(proto)
    +dumps(obj)
    +prepare(conn)
    +getquoted()
    -__str__()
  }

  class DictCursorBase {
    +row_factory
    +res
    +res
    +res
    +res
    +res
    +res
    +res
    +first
    +res
    +first
    --
    -__init__()
    +fetchone()
    +fetchmany(size)
    +fetchall()
    -__iter__()
  }

  class DictConnection {
    +cursor()
  }

  class DictCursor {
    -__init__()
    +execute(query, vars)
    +callproc(procname, vars)
    -_build_index()
  }

  class DictRow {
    +x
    +x
    +g
    +g
    --
    -__init__(cursor)
    -__getitem__(x)
    -__setitem__(x, v)
    +items()
    +keys()
    +values()
    +get(x, default)
    +copy()
    -__contains__(x)
    -__reduce__()
    -__getstate__()
    -__setstate__(data)
  }

  class RealDictConnection {
    +cursor()
  }

  class RealDictCursor {
    -__init__()
    +execute(query, vars)
    +callproc(procname, vars)
    -_build_index()
  }

  class RealDictRow {
    +cursor
    +args
    +cursor: NoneType
    +mapping
    --
    -__init__()
    -__setitem__(key, value)
  }

  class NamedTupleConnection {
    +cursor()
  }

  class NamedTupleCursor {
    +Record: NoneType
    +MAX_CACHE: int
    +t
    +nt
    +nt
    +ts
    +nt
    +nt
    +ts
    +nt
    +nt
    +it
    +t
    +nt
    +nt
    +key
    +fields
    +s
    +s
    +nt
    --
    +execute(query, vars)
    +executemany(query, vars)
    +callproc(procname, vars)
    +fetchone()
    +fetchmany(size)
    +fetchall()
    -__iter__()
    -_make_nt()
    -{class} _do_make_nt(key)
  }

  class LoggingConnection {
    +msg
    +msg
    +msg
    --
    +initialize(logobj)
    +filter(msg, curs)
    -_logtofile(msg, curs)
    -_logtologger(msg, curs)
    -_check()
    +cursor()
  }

  class LoggingCursor {
    +execute(query, vars)
    +callproc(procname, vars)
  }

  class MinTimeLoggingConnection {
    +t
    +msg
    --
    +initialize(logobj, mintime)
    +filter(msg, curs)
    +cursor()
  }

  class MinTimeLoggingCursor {
    +execute(query, vars)
    +callproc(procname, vars)
  }

  class LogicalReplicationConnection {
    -__init__()
  }

  class PhysicalReplicationConnection {
    -__init__()
  }

  class StopReplication {
  }

  class ReplicationCursor {
    +command
    +slot_type
    +command
    +command: str
    +slot_type
    +lsn
    +lsn
    +lsn
    --
    +create_replication_slot(slot_name, slot_type, output_plugin)
    +drop_replication_slot(slot_name)
    +start_replication(slot_name, slot_type, start_lsn, timeline, options, decode, status_interval)
    +fileno()
  }

  class UUID_adapter {
    -__init__(uuid)
    -__conform__(proto)
    +getquoted()
    -__str__()
  }

  class Inet {
    +obj
    --
    -__init__(addr)
    -__repr__()
    +prepare(conn)
    +getquoted()
    -__conform__(proto)
    -__str__()
  }

  class HstoreAdapter {
    +adapt
    +rv
    +k
    +k
    +v
    +v
    +v: bytes
    +k
    +v
    +getquoted: _getquoted_9
    +rv
    +start: int
    +k
    +v
    +v
    +start
    +s
    +conn_status
    +typarray
    --
    -__init__(wrapped)
    +prepare(conn)
    -_getquoted_8()
    -_getquoted_9()
    +{class} parse(s, cur, _bsdec)
    +{class} parse_unicode(s, cur)
    +{class} get_oids(conn_or_curs)
  }

  class CompositeCaster {
    +tokens
    +values
    +rv
    +name
    +conn_status
    +tname: name
    +schema: str
    +typarray
    +recs
    +savepoint: bool
    +savepoint: bool
    +recs
    +tname
    +schema
    +type_oid
    +array_oid
    +type_attrs
    --
    -__init__(name, oid, attrs, array_oid, schema)
    +parse(s, curs)
    +make(values)
    +{class} tokenize(s)
    -_create_type(name, attnames)
    -{class} _from_db(name, conn_or_curs)
  }

  class FixedOffsetTimezone {
    +offset
    +key
    +tz
    +rv
    --
    -__init__(offset, name)
    -__new__(offset, name)
    -__repr__()
    -__eq__(other)
    -__ne__(other)
    -__getinitargs__()
    +utcoffset(dt)
    +tzname(dt)
    +dst(dt)
  }

  class LocalTimezone {
    +tt
    +stamp
    +tt
    --
    +utcoffset(dt)
    +dst(dt)
    +tzname(dt)
    -_isdst(dt)
  }

  class Range {
    +items
    +self_value
    +other_value
    --
    -__init__(lower, upper, bounds, empty)
    -__repr__()
    -__str__()
    +lower()
    +upper()
    +isempty()
    +lower_inf()
    +upper_inf()
    +lower_inc()
    +upper_inc()
    -__contains__(x)
    -__bool__()
    -__eq__(other)
    -__ne__(other)
    -__hash__()
    -__lt__(other)
    -__le__(other)
    -__gt__(other)
    -__ge__(other)
    -__getstate__()
    -__setstate__(state)
  }

  class RangeAdapter {
    +name: NoneType
    +r
    +a
    +lower
    +lower: bytes
    +a
    +upper
    +upper: bytes
    --
    -__init__(adapted)
    -__conform__(proto)
    +prepare(conn)
    +getquoted()
  }

  class RangeCaster {
    +name
    +conn_status
    +tname: name
    +schema: str
    +rec
    +savepoint: bool
    +savepoint: bool
    +rec
    +m
    +lower
    +lower
    +lower
    +upper
    +upper
    +upper
    +lower
    +upper
    +bounds
    --
    -__init__(pgrange, pyrange, oid, subtype_oid, array_oid)
    -_create_ranges(pgrange, pyrange)
    -{class} _from_db(name, pyrange, conn_or_curs)
    +parse(s, cur)
    -_register(scope)
  }

  class NumericRange {
  }

  class DateRange {
  }

  class DateTimeRange {
  }

  class DateTimeTZRange {
  }

  class NumberRangeAdapter {
    +r
    +lower
    +lower: str
    +upper
    +upper: str
    --
    +getquoted()
  }

  class SQL_IN {
    +pobjs
    +qobjs
    --
    -__init__(seq)
    +prepare(conn)
    +getquoted()
    -__str__()
  }

  class NoneAdapter {
    -__init__(obj)
    +getquoted(_null)
  }

  class Composable {
    -__init__(wrapped)
    -__repr__()
    +as_string(context)
    -__add__(other)
    -__mul__(n)
    -__eq__(other)
    -__ne__(other)
  }

  class Composed {
    +wrapped
    +rv
    +joiner
    --
    -__init__(seq)
    +seq()
    +as_string(context)
    -__iter__()
    -__add__(other)
    +join(joiner)
  }

  class SQL {
    +rv
    +autonum: int
    +autonum: NoneType
    +rv
    +it
    --
    -__init__(string)
    +string()
    +as_string(context)
    +format()
    +join(seq)
  }

  class Identifier {
    -__init__()
    +strings()
    +string()
    -__repr__()
    +as_string(context)
  }

  class Literal {
    +conn: context
    +conn
    +a
    +rv
    +rv
    --
    +wrapped()
    +as_string(context)
  }

  class Placeholder {
    -__init__(name)
    +name()
    -__repr__()
    +as_string(context)
  }

  class PoolError {
  }

  class AbstractConnectionPool {
    +conn
    +key
    +conn
    +key
    +status
    --
    -__init__(minconn, maxconn)
    -_connect(key)
    -_getkey()
    -_getconn(key)
    -_putconn(conn, key, close)
    -_closeall()
  }

  class SimpleConnectionPool {
    +getconn
    +putconn
    +closeall
  }

  class ThreadedConnectionPool {
    -__init__(minconn, maxconn)
    +getconn(key)
    +putconn(conn, key, close)
    +closeall()
  }

}

package "venv2.lib.python3.12.site-packages.itsdangerous" {
  class _CompactJSON {
    +{static} loads(): t.Any
    +{static} dumps(): str
  }

  class TimestampSigner {
    +value
    +timestamp
    +sep
    +value
    +result
    +sig_error: NoneType
    +sig_error: e
    +result
    +sep
    +ts_int
    +ts_dt
    +ts_int
    +ts_dt
    +age
    --
    +get_timestamp(): int
    +timestamp_to_datetime(ts): datetime
    +sign(value): bytes
    +unsign(signed_value, max_age, return_timestamp): bytes
    +unsign(signed_value, max_age, return_timestamp)
    +unsign(signed_value, max_age, return_timestamp)
    +validate(signed_value, max_age): bool
  }

  class TimedSerializer {
    +default_signer
    +s
    +last_exception: NoneType
    +payload
    +last_exception: err
    --
    +iter_unsigners(salt)
    +loads(s, max_age, return_timestamp, salt): t.Any
    +loads_unsafe(s, max_age, salt)
  }

  class URLSafeSerializerMixin {
    +default_serializer
    +decompress: bool
    +payload
    +decompress: bool
    +json
    +json
    +json
    +is_compressed: bool
    +compressed
    +json: compressed
    +is_compressed: bool
    +base64d
    +base64d
    --
    +load_payload(payload): t.Any
    +dump_payload(obj): bytes
  }

  class URLSafeSerializer {
  }

  class URLSafeTimedSerializer {
  }

  class BadData {
    -__init__(message)
    -__str__(): str
  }

  class BadSignature {
    -__init__(message, payload)
  }

  class BadTimeSignature {
    -__init__(message, payload, date_signed)
  }

  class SignatureExpired {
  }

  class BadHeader {
    -__init__(message, payload, header, original_error)
  }

  class BadPayload {
    -__init__(message, original_error)
  }

  class _PDataSerializer {
    +loads(): t.Any
    +dumps(): _TSerialized
  }

  class Serializer {
    +default_serializer
    +default_signer
    +default_fallback_signers
    +salt
    +serializer
    +signer
    +fallback_signers
    +use_serializer
    +is_text
    +use_serializer: serializer
    +is_text
    +salt
    +salt
    +kwargs: fallback
    +fallback
    +kwargs
    +payload
    +rv
    +s
    +last_exception: NoneType
    +last_exception: err
    +load_kwargs
    +load_payload_kwargs
    --
    -__init__(secret_key, salt, serializer, serializer_kwargs, signer, signer_kwargs, fallback_signers)
    -__init__(secret_key, salt, serializer, serializer_kwargs, signer, signer_kwargs, fallback_signers)
    -__init__(secret_key, salt)
    -__init__(secret_key, salt, serializer, serializer_kwargs, signer, signer_kwargs, fallback_signers)
    -__init__(secret_key, salt)
    -__init__(secret_key, salt, serializer, serializer_kwargs, signer, signer_kwargs, fallback_signers)
    +secret_key(): bytes
    +load_payload(payload, serializer): t.Any
    +dump_payload(obj): bytes
    +make_signer(salt): Signer
    +iter_unsigners(salt)
    +dumps(obj, salt): _TSerialized
    +dump(obj, f, salt)
    +loads(s, salt): t.Any
    +load(f, salt): t.Any
    +loads_unsafe(s, salt)
    -_loads_unsafe_impl(s, salt, load_kwargs, load_payload_kwargs)
    +load_unsafe(f, salt)
  }

  class SigningAlgorithm {
    +get_signature(key, value): bytes
    +verify_signature(key, value, sig): bool
  }

  class NoneAlgorithm {
    +get_signature(key, value): bytes
  }

  class HMACAlgorithm {
    +default_digest_method: t.Any
    +digest_method
    +mac
    --
    -__init__(digest_method)
    +get_signature(key, value): bytes
  }

  class Signer {
    +default_digest_method: t.Any
    +default_key_derivation: str
    +salt
    +salt: bytes
    +key_derivation
    +digest_method
    +algorithm
    +secret_key
    +secret_key
    +mac
    +value
    +key
    +sig
    +value
    +sig
    +value
    +key
    +signed_value
    --
    -__init__(secret_key, salt, sep, key_derivation, digest_method, algorithm)
    +secret_key(): bytes
    +derive_key(secret_key): bytes
    +get_signature(value): bytes
    +sign(value): bytes
    +verify_signature(value, sig): bool
    +unsign(signed_value): bytes
    +validate(signed_value): bool
  }

}

package "venv2.lib.python3.12.site-packages.pydantic" {
  class AfterValidator {
    +func
    +schema
    +info_arg
    +func
    +func
    --
    -__get_pydantic_core_schema__(source_type, handler): core_schema.CoreSchema
  }

  class BeforeValidator {
    +func
    +schema
    +info_arg
    +func
    +func
    --
    -__get_pydantic_core_schema__(source_type, handler): core_schema.CoreSchema
  }

  class PlainValidator {
    +func
    +info_arg
    +func
    +func
    --
    -__get_pydantic_core_schema__(source_type, handler): core_schema.CoreSchema
  }

  class WrapValidator {
    +func
    +schema
    +info_arg
    +func
    +func
    --
    -__get_pydantic_core_schema__(source_type, handler): core_schema.CoreSchema
  }

  class _OnlyValueValidatorClsMethod {
    -__call__(__cls, __value): Any
  }

  class _V2ValidatorClsMethod {
    -__call__(__cls, __input_value, __info): Any
  }

  class _V2WrapValidatorClsMethod {
    -__call__(__cls, __input_value, __validator, __info): Any
  }

  class ModelWrapValidatorHandler {
    -__call__(input_value, outer_location): _ModelTypeCo
  }

  class ModelWrapValidatorWithoutInfo {
    -__call__(cls, __value, __handler): _ModelType
  }

  class ModelWrapValidator {
    -__call__(cls, __value, __handler, __info): _ModelType
  }

  class ModelBeforeValidatorWithoutInfo {
    -__call__(cls, __value): Any
  }

  class ModelBeforeValidator {
    -__call__(cls, __value, __info): Any
  }

  class InstanceOf {
    +instance_of_schema
    +original_schema
    --
    -{class} __class_getitem__(item): AnyType
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
  }

  class SkipValidation {
    +original_schema
    +metadata
    --
    -__class_getitem__(item): Any
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
  }

  class RGBA {
    -__init__(r, g, b, alpha)
    -__getitem__(item): Any
  }

  class Color {
    +value
    +field_schema
    +rgb
    +values
    +as_hex
    +as_hex
    --
    -__init__(value)
    -{class} __get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    +original(): ColorType
    +as_named(): str
    +as_hex(): str
    +as_rgb(): str
    +as_rgb_tuple(): ColorTuple
    +as_hsl(): str
    +as_hsl_tuple(): HslColorTuple
    -_alpha_float(): float
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -{class} _validate(__input_value, _)
    -__str__(): str
    -__repr_args__()
    -__eq__(other): bool
    -__hash__(): int
  }

  class ConfigDict {
    +title
    +str_to_lower: bool
    +str_to_upper: bool
    +str_strip_whitespace: bool
    +str_min_length: int
    +str_max_length
    +extra
    +frozen: bool
    +populate_by_name: bool
    +use_enum_values: bool
    +validate_assignment: bool
    +arbitrary_types_allowed: bool
    +from_attributes: bool
    +loc_by_alias: bool
    +alias_generator
    +ignored_types
    +allow_inf_nan: bool
    +json_schema_extra
    +json_encoders
    +strict: bool
    +revalidate_instances
    +ser_json_timedelta
    +ser_json_bytes
    +validate_default: bool
    +validate_return: bool
    +protected_namespaces
    +hide_input_in_errors: bool
    +defer_build: bool
    +plugin_settings
    +schema_generator
    +json_schema_serialization_defaults_required: bool
    +json_schema_mode_override
    +coerce_numbers_to_str: bool
    +regex_engine
    +validation_error_cause: bool
  }

  class _FromFieldInfoInputs {
    +annotation
    +default_factory
    +alias
    +alias_priority
    +validation_alias
    +serialization_alias
    +title
    +description
    +examples
    +exclude
    +gt
    +ge
    +lt
    +le
    +multiple_of
    +strict
    +min_length
    +max_length
    +pattern
    +allow_inf_nan
    +max_digits
    +decimal_places
    +union_mode
    +discriminator
    +json_schema_extra
    +frozen
    +validate_default
    +repr: bool
    +init_var
    +kw_only
  }

  class _FieldInfoInputs {
    +default: Any
  }

  class FieldInfo {
    +annotation
    +default: Any
    +default_factory
    +alias
    +alias_priority
    +validation_alias
    +serialization_alias
    +title
    +description
    +examples
    +exclude
    +discriminator
    +json_schema_extra
    +frozen
    +validate_default
    +repr: bool
    +init_var
    +kw_only
    +metadata
    +metadata_lookup
    +kwargs
    +default
    +alias_is_set
    +final: bool
    +final: bool
    +annotation
    +final: bool
    +field_info_annotations
    +field_info
    +new_field_info
    +metadata
    +final: bool
    +final: bool
    +annotation
    +default
    +init_var: bool
    +init_var: bool
    +annotation: Any
    +init_var: bool
    +annotation
    +pydantic_field
    +pydantic_field
    +field_infos
    +field_info
    +metadata
    +flattened_field_infos
    +field_infos
    +field_info
    +new_kwargs
    +metadata
    +field_info
    +default
    +default: PydanticUndefined
    +default_factory
    +default_factory
    +dc_field_metadata
    +metadata
    +general_metadata
    +marker
    +annotation
    +value
    --
    -__init__()
    +{class} from_field(default): typing_extensions.Self
    +{class} from_annotation(annotation): FieldInfo
    +{class} from_annotated_attribute(annotation, default): FieldInfo
    +{static} merge_field_infos(): FieldInfo
    -{class} _from_dataclass_field(dc_field): typing_extensions.Self
    -{class} _extract_metadata(annotation)
    -{class} _collect_metadata(kwargs)
    +get_default(): Any
    +is_required(): bool
    +rebuild_annotation(): Any
    +apply_typevars_map(typevars_map, types_namespace)
    -__repr_args__(): ReprArgs
  }

  class AliasPath {
    +path
    --
    -__init__(first_arg)
    +convert_to_aliases()
  }

  class AliasChoices {
    +choices
    +aliases
    --
    -__init__(first_choice)
    +convert_to_aliases()
  }

  class _EmptyKwargs {
  }

  class ModelPrivateAttr {
    +set_name
    --
    -__init__(default)
    -__getattr__(item): Any
    -__set_name__(cls, name)
    +get_default(): Any
    -__eq__(other): bool
  }

  class ComputedFieldInfo {
    +decorator_repr
    +wrapped_property: property
    +return_type: Any
    +alias
    +alias_priority
    +title
    +description
    +examples
    +json_schema_extra
    +repr: bool
  }

  class PydanticDeprecationWarning {
    +message: str
    +since
    +expected_removal
    +message
    --
    -__init__(message)
    -__str__(): str
  }

  class PydanticDeprecatedSince20 {
    -__init__(message)
  }

  class GenericBeforeBaseModelWarning {
  }

  class PydanticPlugin {
    +sym
    +sym
    +transformer
    +info_metaclass
    +default_any_type
    +default_args
    +default_factory_args
    +default_type
    +default_arg
    +default_factory_type
    +default_factory_type
    +ret_type
    +args
    --
    -__init__(options)
    +get_base_class_hook(fullname)
    +get_metaclass_hook(fullname)
    +get_function_hook(fullname)
    +get_method_hook(fullname)
    +get_class_decorator_hook(fullname)
    +report_config_data(ctx)
    -_pydantic_model_class_maker_callback(ctx): bool
    -_pydantic_model_metaclass_marker_callback(ctx)
    -_pydantic_field_callback(ctx): Type
  }

  class PydanticPluginConfig {
    +init_forbid_extra: bool
    +init_typed: bool
    +warn_required_dynamic_aliases: bool
    +debug_dataclass_transform: bool
    +toml_config
    +config
    +setting
    +plugin_config
    +setting
    --
    -__init__(options)
    +to_data()
  }

  class PydanticModelField {
    +name
    +name
    +data
    +typ
    --
    -__init__(name, alias, has_dynamic_alias, has_default, line, column, type, info)
    +to_argument(current_info, typed, force_optional, use_alias): Argument
    +expand_type(current_info)
    +to_var(current_info, use_alias): Var
    +serialize(): JsonDict
    +{class} deserialize(info, data, api): PydanticModelField
    +expand_typevar_from_subtype(sub_type)
  }

  class PydanticModelTransformer {
    +tracked_config_fields
    +info
    +is_root_model
    +config
    +fields
    +is_settings
    +first_dec
    +cls
    +config
    +has_config_kwargs: bool
    +has_config_from_namespace: bool
    +config_data
    +has_config_kwargs: bool
    +stmt
    +lhs
    +lhs
    +has_config_from_namespace: bool
    +cls
    +found_fields
    +field
    +sym_node
    +current_field_names
    +maybe_field
    +lhs
    +cls
    +lhs
    +lhs
    +sym
    +node
    +node_type
    +has_default
    +typ
    +init_type
    +default
    +t
    +setter
    +super_info
    +setter_type
    +typed
    +use_alias
    +requires_dynamic_aliases
    +args
    +base_settings_node
    +base_settings_init_node
    +func_type
    +analyzed_variable_type
    +variable
    +var
    +set_str
    +optional_set_str
    +fields_set_argument
    +args
    +var
    +args
    +info
    +sym_node
    +var
    +var_str
    +var_str
    +detail
    +var
    +forbid_extra
    +forbid_extra
    +has_alias_generator: bool
    +has_alias_generator: bool
    +expr
    +expr
    +arg
    +info
    +arguments
    --
    -__init__(cls, reason, api, plugin_config)
    +transform(): bool
    +adjust_decorator_signatures()
    +collect_config(): ModelConfigData
    +collect_fields(model_config, is_root_model)
    -_get_assignment_statements_from_if_statement(stmt)
    -_get_assignment_statements_from_block(block)
    +collect_field_from_stmt(stmt, model_config)
    -_infer_dataclass_attr_init_type(sym, name, context)
    +add_initializer(fields, config, is_settings, is_root_model)
    +add_model_construct_method(fields, config, is_settings)
    +set_frozen(fields, frozen)
    +get_config_update(name, arg)
    +{static} get_has_default(): bool
    +{static} get_alias_info()
    +get_field_arguments(fields, typed, use_alias, requires_dynamic_aliases, is_settings)
    +should_init_forbid_extra(fields, config): bool
    +{static} is_dynamic_alias_present(has_alias_generator): bool
  }

  class ModelConfigData {
    -__init__(forbid_extra, frozen, from_attributes, populate_by_name, has_alias_generator)
    +get_values_dict()
    +update(config)
    +setdefault(key, value)
  }

  class Strict {
    +strict: bool
    --
    -__hash__(): int
  }

  class AllowInfNan {
    +allow_inf_nan: bool
    --
    -__hash__(): int
  }

  class StringConstraints {
    +strip_whitespace
    +to_upper
    +to_lower
    +strict
    +min_length
    +max_length
    +pattern
    --
    -__iter__()
  }

  class ImportString {
    +serializer
    --
    -{class} __class_getitem__(item): AnyType
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -{static} _serialize(): str
    -__repr__(): str
  }

  class UuidVersion {
    +uuid_version
    +field_schema
    +schema
    --
    -__get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -__get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -__hash__(): int
  }

  class PathType {
    +path_type
    +field_schema
    +format_conversion
    +function_lookup
    --
    -__get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -__get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    +{static} validate_file(_): Path
    +{static} validate_directory(_): Path
    +{static} validate_new(_): Path
    -__hash__(): int
  }

  class Json {
    -{class} __class_getitem__(item): AnyType
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -__repr__(): str
    -__hash__(): int
    -__eq__(other): bool
  }

  class _SecretField {
    +field_type: str
    +inner_schema
    +field_type: bytes
    +inner_schema
    +error_kind
    +json_schema
    +json_schema
    +s
    --
    -__init__(secret_value)
    +get_secret_value(): SecretType
    -__eq__(other): bool
    -__hash__(): int
    -__len__(): int
    -__str__(): str
    -__repr__(): str
    -_display(): SecretType
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    +serialize(info)
    +get_json_schema(handler): JsonSchemaValue
  }

  class SecretStr {
    -_display(): str
  }

  class SecretBytes {
    -_display(): bytes
  }

  class PaymentCardBrand {
    +amex: str
    +mastercard: str
    +visa: str
    +other: str
    --
    -__str__(): str
  }

  class PaymentCardNumber {
    +strip_whitespace
    +min_length
    +max_length
    +bin: str
    +last4: str
    +brand: PaymentCardBrand
    +card_number
    +num_masked
    +sum_
    +length
    +parity
    +digit
    +valid
    +brand
    +brand
    +brand
    +brand
    +required_length
    +required_length: int
    +valid
    +required_length: str
    +valid
    +required_length: int
    +valid
    +valid: bool
    --
    -__init__(card_number)
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    +{class} validate(__input_value, _): PaymentCardNumber
    +masked(): str
    +{class} validate_digits(card_number)
    +{class} validate_luhn_check_digit(card_number): str
    +{static} validate_brand(): PaymentCardBrand
  }

  class ByteSize {
    +str_match
    +unit: str
    +unit_mult
    +divisor: int
    +units
    +final_unit: str
    +divisor: int
    +units
    +final_unit: str
    +num
    +unit_div
    --
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -{class} _validate(__input_value, _): ByteSize
    +human_readable(decimal): str
    +to(unit): float
  }

  class PastDate {
    +schema
    --
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -__repr__(): str
  }

  class FutureDate {
    +schema
    --
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -__repr__(): str
  }

  class AwareDatetime {
    +schema
    --
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -__repr__(): str
  }

  class NaiveDatetime {
    +schema
    --
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -__repr__(): str
  }

  class PastDatetime {
    +schema
    --
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -__repr__(): str
  }

  class FutureDatetime {
    +schema
    --
    -{class} __get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    -__repr__(): str
  }

  class EncoderProtocol {
    +{class} decode(data): bytes
    +{class} encode(value): bytes
    +{class} get_json_format(): str
  }

  class Base64Encoder {
    +{class} decode(data): bytes
    +{class} encode(value): bytes
    +{class} get_json_format()
  }

  class Base64UrlEncoder {
    +{class} decode(data): bytes
    +{class} encode(value): bytes
    +{class} get_json_format()
  }

  class EncodedBytes {
    +encoder
    +field_schema
    --
    -__get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -__get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    +decode(data, _): bytes
    +encode(value): bytes
    -__hash__(): int
  }

  class EncodedStr {
    -__get_pydantic_core_schema__(source, handler): core_schema.CoreSchema
    +decode_str(data, _): str
    +encode_str(value): str
    -__hash__(): int
  }

  class GetPydanticSchema {
    +get_pydantic_core_schema
    +get_pydantic_json_schema
    --
    -__getattr__(item): Any
  }

  class Tag {
    +tag: str
    +schema
    +metadata
    --
    -__get_pydantic_core_schema__(source_type, handler): CoreSchema
  }

  class Discriminator {
    +discriminator
    +custom_error_type
    +custom_error_message
    +custom_error_context
    +origin
    +original_schema
    +original_schema
    +tagged_union_choices
    +tag: NoneType
    +metadata
    +metadata_tag
    +tag: metadata_tag
    +custom_error_type
    +custom_error_type
    +custom_error_message
    +custom_error_message
    +custom_error_context
    +custom_error_context
    +custom_error_type
    --
    -__get_pydantic_core_schema__(source_type, handler): CoreSchema
    -_convert_schema(original_schema): core_schema.TaggedUnionSchema
  }

  class _AllowAnyJson {
    +python_schema
    --
    -{class} __get_pydantic_core_schema__(source_type, handler): CoreSchema
  }

  class PydanticJsonSchemaWarning {
  }

  class _DefinitionsRemapping {
    +defs_remapping
    +json_remapping
    +copied_definitions
    +definitions_schema
    +schemas_for_alternatives
    +alternatives
    +defs_remapping
    +json_remapping
    +alternatives
    +remapped_defs_ref
    +remapping
    +new_definitions_schema
    +definitions_schema: new_definitions_schema
    --
    +{static} from_prioritized_choices(defs_to_json, definitions): _DefinitionsRemapping
    +remap_defs_ref(ref): DefsRef
    +remap_json_ref(ref): JsonRef
    +remap_json_schema(schema): Any
  }

  class GenerateJsonSchema {
    +schema_dialect: str
    +ignored_warning_kinds
    +mapping
    +core_schema_types
    +method_name
    +definitions_remapping
    +json_schemas_map
    +json_schema
    +json_schema
    +json_schema
    +json_schema: JsonSchemaValue
    +json_ref_counts
    +ref
    +ref_json_schema
    +json_schema
    +json_schema
    +ref
    +definitions_remapping
    +json_schema
    +core_ref
    +core_mode_ref
    +metadata_handler
    +core_ref
    +json_ref
    +json_schema: ref_json_schema
    +json_schema
    +ref
    +json_schema
    +json_schema
    +ser_schema
    +json_schema
    +generate_for_schema_type
    +json_schema
    +json_schema
    +json_schema
    +current_handler
    +json_schema
    +json_schema
    +original_schema
    +ref
    +current_handler
    +json_schema
    +json_schema
    +json_schema
    +current_handler
    +json_schema
    +json_schema
    +json_schema
    +json_schema
    +json_schema
    +json_schema
    +json_schema
    +json_schema
    +multiple_of
    +le
    +ge
    +lt
    +gt
    +json_schema
    +json_schema
    +json_schema
    +json_schema
    +expected
    +expected
    +types
    +items_schema
    +json_schema
    +json_schema: JsonSchemaValue
    +prefixItems
    +items_schema
    +json_schema
    +items_schema
    +json_schema
    +items_schema
    +json_schema
    +json_schema: JsonSchemaValue
    +keys_schema
    +keys_pattern
    +values_schema
    +json_schema
    +default
    +encoded_default
    +null_schema
    +inner_json_schema
    +generated
    +choices
    +choice_schema
    +generated
    +k
    +one_of_choices
    +json_schema: JsonSchemaValue
    +openapi_discriminator
    +openapi_discriminator
    +alias
    +alias_is_present_on_all_choices: bool
    +choice
    +properties
    +alias_is_present_on_all_choices: bool
    +openapi_discriminator: alias
    +step_index
    +use_strict
    +total
    +named_required_fields
    +config
    +json_schema
    +extra
    +extra
    +properties
    +required_fields
    +name
    +field_json_schema
    +title
    +field_json_schema
    +json_schema
    +alias: Any
    +alias
    +alias
    +name: alias
    +alias
    +name
    +cls
    +config
    +title
    +json_schema
    +json_schema_extra
    +root_json_schema_extra
    +json_schema_extra: root_json_schema_extra
    +json_schema
    +schema_to_update
    +schema_to_update: json_schema
    +json_schema_extra
    +schema_to_update
    +schema_to_update: json_schema
    +named_required_fields
    +json_schema
    +extras_schema
    +schema_to_update
    +named_required_fields
    +cls
    +config: ConfigDict
    +title
    +json_schema
    +json_schema_extra
    +json_schema
    +description: NoneType
    +description
    +metadata
    +prefer_positional
    +arguments
    +kw_only_arguments
    +kw_or_p_arguments
    +p_only_arguments
    +var_args_schema
    +var_kwargs_schema
    +positional_possible
    +keyword_possible
    +positional_possible
    +properties
    +required
    +name
    +argument_schema
    +json_schema: JsonSchemaValue
    +additional_properties_schema
    +prefix_items
    +min_items: int
    +name
    +argument_schema
    +json_schema: JsonSchemaValue
    +items_schema
    +name
    +alias
    +name: alias
    +content_core_schema
    +content_json_schema
    +json_schema
    +json_schema
    +core_ref: CoreRef
    +core_ref
    +schema_type
    +return_schema
    +field_schema
    +field_schema
    +components
    +components
    +core_ref_no_id
    +components
    +short_ref
    +mode_title
    +name
    +name_mode
    +module_qualname
    +module_qualname_mode
    +module_qualname_id
    +occurrence_index
    +occurrence_index
    +module_qualname_occurrence
    +module_qualname_occurrence_mode
    +core_mode_ref
    +maybe_defs_ref
    +json_ref
    +defs_ref
    +json_ref
    +ref_json_schema
    +json_schema
    +referenced_json_schema
    +json_schema
    +json_ref
    +def_ref
    +config
    --
    -__init__(by_alias, ref_template)
    -_config(): _config.ConfigWrapper
    +mode(): JsonSchemaMode
    +build_schema_type_to_method()
    +generate_definitions(inputs)
    +generate(schema, mode): JsonSchemaValue
    +generate_inner(schema): JsonSchemaValue
    +populate_defs(json_schema): JsonSchemaValue
    +convert_to_all_of(): JsonSchemaValue
    +handler_func(): JsonSchemaValue
    +new_handler_func(current_handler, js_modify_function): JsonSchemaValue
    +new_handler_func(current_handler, js_modify_function): JsonSchemaValue
    +any_schema(schema): JsonSchemaValue
    +none_schema(schema): JsonSchemaValue
    +bool_schema(schema): JsonSchemaValue
    +int_schema(schema): JsonSchemaValue
    +float_schema(schema): JsonSchemaValue
    +decimal_schema(schema): JsonSchemaValue
    +str_schema(schema): JsonSchemaValue
    +bytes_schema(schema): JsonSchemaValue
    +date_schema(schema): JsonSchemaValue
    +time_schema(schema): JsonSchemaValue
    +datetime_schema(schema): JsonSchemaValue
    +timedelta_schema(schema): JsonSchemaValue
    +literal_schema(schema): JsonSchemaValue
    +is_instance_schema(schema): JsonSchemaValue
    +is_subclass_schema(schema): JsonSchemaValue
    +callable_schema(schema): JsonSchemaValue
    +list_schema(schema): JsonSchemaValue
    +tuple_positional_schema(schema): JsonSchemaValue
    +tuple_variable_schema(schema): JsonSchemaValue
    +set_schema(schema): JsonSchemaValue
    +frozenset_schema(schema): JsonSchemaValue
    -_common_set_schema(schema): JsonSchemaValue
    +generator_schema(schema): JsonSchemaValue
    +dict_schema(schema): JsonSchemaValue
    -_function_schema(schema): JsonSchemaValue
    +function_before_schema(schema): JsonSchemaValue
    +function_after_schema(schema): JsonSchemaValue
    +function_plain_schema(schema): JsonSchemaValue
    +function_wrap_schema(schema): JsonSchemaValue
    +default_schema(schema): JsonSchemaValue
    +nullable_schema(schema): JsonSchemaValue
    +union_schema(schema): JsonSchemaValue
    +tagged_union_schema(schema): JsonSchemaValue
    -_extract_discriminator(schema, one_of_choices)
    +chain_schema(schema): JsonSchemaValue
    +lax_or_strict_schema(schema): JsonSchemaValue
    +json_or_python_schema(schema): JsonSchemaValue
    +typed_dict_schema(schema): JsonSchemaValue
    -{static} _name_required_computed_fields()
    -_named_required_fields_schema(named_required_fields): JsonSchemaValue
    -_get_alias_name(field, name): str
    +typed_dict_field_schema(schema): JsonSchemaValue
    +dataclass_field_schema(schema): JsonSchemaValue
    +model_field_schema(schema): JsonSchemaValue
    +computed_field_schema(schema): JsonSchemaValue
    +model_schema(schema): JsonSchemaValue
    -_update_class_schema(json_schema, title, extra, cls, json_schema_extra): JsonSchemaValue
    +resolve_schema_to_update(json_schema): JsonSchemaValue
    +model_fields_schema(schema): JsonSchemaValue
    +field_is_present(field): bool
    +field_is_required(field, total): bool
    +dataclass_args_schema(schema): JsonSchemaValue
    +dataclass_schema(schema): JsonSchemaValue
    +arguments_schema(schema): JsonSchemaValue
    +kw_arguments_schema(arguments, var_kwargs_schema): JsonSchemaValue
    +p_arguments_schema(arguments, var_args_schema): JsonSchemaValue
    +get_argument_name(argument): str
    +call_schema(schema): JsonSchemaValue
    +custom_error_schema(schema): JsonSchemaValue
    +json_schema(schema): JsonSchemaValue
    +url_schema(schema): JsonSchemaValue
    +multi_host_url_schema(schema): JsonSchemaValue
    +uuid_schema(schema): JsonSchemaValue
    +definitions_schema(schema): JsonSchemaValue
    +definition_ref_schema(schema): JsonSchemaValue
    +ser_schema(schema)
    +get_title_from_name(name): str
    +field_title_should_be_set(schema): bool
    +normalize_name(name): str
    +get_defs_ref(core_mode_ref): DefsRef
    +get_cache_defs_ref_schema(core_ref)
    +handle_ref_overrides(json_schema): JsonSchemaValue
    +get_schema_from_definitions(json_ref)
    +encode_default(dft): Any
    +update_with_validations(json_schema, core_schema, mapping)
  }

  class ValidationsMapping {
    +numeric
    +bytes
    +string
    +array
    +object
    +date
  }

  class WithJsonSchema {
    +json_schema
    +mode
    +mode
    --
    -__get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -__hash__(): int
  }

  class Examples {
    +examples
    +mode
    +mode
    +json_schema
    +examples
    --
    -__get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -__hash__(): int
  }

  class SkipJsonSchema {
    -__class_getitem__(item): AnyType
    -__get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -__hash__(): int
  }

  class UrlConstraints {
    +max_length
    +allowed_schemes
    +host_required
    +default_host
    +default_port
    +default_path
    --
    -__hash__(): int
  }

  class EmailStr {
    +field_schema
    --
    -{class} __get_pydantic_core_schema__(_source, _handler): core_schema.CoreSchema
    -{class} __get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -{class} _validate(__input_value): str
  }

  class NameEmail {
    +field_schema
    --
    -__init__(name, email)
    -__eq__(other): bool
    -{class} __get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -{class} __get_pydantic_core_schema__(_source, _handler): core_schema.CoreSchema
    -{class} _validate(__input_value): NameEmail
    -__str__(): str
  }

  class IPvAnyAddress {
    +field_schema
    --
    -__new__(value)
    -{class} __get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -{class} __get_pydantic_core_schema__(_source, _handler): core_schema.CoreSchema
    -{class} _validate(__input_value)
  }

  class IPvAnyInterface {
    +field_schema
    --
    -__new__(value)
    -{class} __get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -{class} __get_pydantic_core_schema__(_source, _handler): core_schema.CoreSchema
    -{class} _validate(__input_value)
  }

  class IPvAnyNetwork {
    +field_schema
    --
    -__new__(value)
    -{class} __get_pydantic_json_schema__(core_schema, handler): JsonSchemaValue
    -{class} __get_pydantic_core_schema__(_source, _handler): core_schema.CoreSchema
    -{class} _validate(__input_value)
  }

  class RootModel {
    +root: RootModelRootType
    +extra
    +root: data
    +cls
    +m
    +cls
    +m
    --
    -__init_subclass__()
    -__init__(root)
    +{class} model_construct(root, _fields_set): Model
    -__getstate__()
    -__setstate__(state)
    -__copy__(): Model
    -__deepcopy__(memo): Model
    +model_dump(): RootModelRootType
    -__eq__(other): bool
    -__repr_args__(): _repr.ReprArgs
  }

  class TypeAdapter {
    +config_wrapper
    +type_has_config
    +type_has_config: bool
    +core_schema: CoreSchema
    +core_schema
    +core_schema
    +core_config
    +validator: SchemaValidator
    +validator
    +f
    +module
    +validator
    +serializer: SchemaSerializer
    +serializer
    +serializer
    +schema_generator_instance
    +schema_generator_instance
    +inputs
    +json_schema
    --
    -__new__(__type)
    -__new__(__type)
    -__new__(__type)
    -__init__(type)
    -__init__(type)
    -__init__(type)
    +validate_python(__object): T
    +validate_json(__data): T
    +validate_strings(__obj): T
    +get_default_value()
    +dump_python(__instance): Any
    +dump_json(__instance): bytes
    +json_schema()
    +{static} json_schemas()
  }

  class PlainSerializer {
    +func: core_schema.SerializerFunction
    +return_type: Any
    +when_used
    +schema
    +return_type
    +return_schema
    --
    -__get_pydantic_core_schema__(source_type, handler): core_schema.CoreSchema
  }

  class WrapSerializer {
    +func: core_schema.WrapSerializerFunction
    +return_type: Any
    +when_used
    +schema
    +return_type
    +return_schema
    --
    -__get_pydantic_core_schema__(source_type, handler): core_schema.CoreSchema
  }

  class SerializeAsAny {
    +schema
    +schema_to_update: schema
    +schema_to_update
    +schema_to_update
    --
    -__class_getitem__(item): Any
    -__get_pydantic_core_schema__(source_type, handler): core_schema.CoreSchema
  }

  class PydanticErrorMixin {
    -__init__(message)
    -__str__(): str
  }

  class PydanticUserError {
  }

  class PydanticUndefinedAnnotation {
    +name
    +name
    --
    -__init__(name, message)
    +{class} from_name_error(name_error): Self
  }

  class PydanticImportError {
    -__init__(message)
  }

  class PydanticSchemaGenerationError {
    -__init__(message)
  }

  class PydanticInvalidForJsonSchema {
    -__init__(message)
  }

  class BaseModel {
    +model_config
    +model_fields
    -__class_vars__
    -__private_attributes__
    -__signature__
    -__pydantic_complete__
    -__pydantic_core_schema__
    -__pydantic_custom_init__
    -__pydantic_decorators__
    -__pydantic_generic_metadata__
    -__pydantic_parent_namespace__
    -__pydantic_post_init__
    -__pydantic_root_model__
    -__pydantic_serializer__
    -__pydantic_validator__
    -__pydantic_extra__
    -__pydantic_fields_set__
    -__pydantic_private__
    +model_fields
    +model_config
    +m
    +fields_values
    +defaults
    -_extra
    +copied
    +param_names
    +params_component
    +types_namespace
    +frame_parent_ns
    +cls_parent_ns
    +types_namespace
    +types_namespace
    +types_namespace
    +config
    +cached
    +typevar_values
    +typevars_map
    +submodel: cls
    +parent_args
    +args: typevar_values
    +args
    +origin
    +model_name
    +params
    +cached
    +submodel
    +cls
    +m
    +cls
    +m
    +private_attributes
    +attribute
    +pydantic_extra
    +pydantic_extra: NoneType
    +attribute
    +attr
    +attribute
    +typ: str
    +typ: str
    +error: pydantic_core.InitErrorDetails
    +private
    +private
    +self_type
    +other_type
    +extra
    +field
    +pydantic_extra
    +pydantic_extra: NoneType
    +obj
    +type_str: str
    +type_str: str
    +type_str: str
    +type_str: str
    +error: pydantic_core.InitErrorDetails
    +obj
    +values
    +private: NoneType
    +private
    +extra
    +extra
    +fields_set
    +fields_set
    --
    -__init__()
    +model_computed_fields()
    +model_extra()
    +model_fields_set()
    +{class} model_construct(_fields_set): Model
    +model_copy(): Model
    +model_dump()
    +model_dump_json(): str
    +{class} model_json_schema(by_alias, ref_template, schema_generator, mode)
    +{class} model_parametrized_name(params): str
    +model_post_init(__context)
    +{class} model_rebuild()
    +{class} model_validate(obj): Model
    +{class} model_validate_json(json_data): Model
    +{class} model_validate_strings(obj): Model
    -{class} __get_pydantic_core_schema__(__source, __handler): CoreSchema
    -{class} __get_pydantic_json_schema__(__core_schema, __handler): JsonSchemaValue
    -{class} __pydantic_init_subclass__()
    -__class_getitem__(typevar_values)
    -__copy__(): Model
    -__deepcopy__(memo): Model
    -__getattr__(item): Any
    -__setattr__(name, value)
    -__delattr__(item): Any
    -_check_frozen(name, value)
    -__getstate__()
    -__setstate__(state)
    -__eq__(other): bool
    -__init_subclass__()
    -__iter__(): TupleGenerator
    -__repr__(): str
    -__repr_args__(): _repr.ReprArgs
    -__str__(): str
    -__fields__()
    -__fields_set__()
    +dict()
    +json(): str
    +{class} parse_obj(obj): Model
    +{class} parse_raw(b): Model
    +{class} parse_file(path): Model
    +{class} from_orm(obj): Model
    +{class} construct(_fields_set): Model
    +copy(): Model
    +{class} schema(by_alias, ref_template)
    +{class} schema_json(): str
    +{class} validate(value): Model
    +{class} update_forward_refs()
    -_iter(): Any
    -_copy_and_set_values(): Any
    -{class} _get_value(): Any
    -_calculate_keys(): Any
  }

  class GetJsonSchemaHandler {
    +mode: JsonSchemaMode
    --
    -__call__(__core_schema): JsonSchemaValue
    +resolve_ref_schema(__maybe_ref_json_schema): JsonSchemaValue
  }

  class GetCoreSchemaHandler {
    -__call__(__source_type): core_schema.CoreSchema
    +generate_schema(__source_type): core_schema.CoreSchema
    +resolve_ref_schema(__maybe_ref_schema): core_schema.CoreSchema
    +field_name()
    -_get_types_namespace()
  }

}

package "venv2.lib.python3.12.site-packages.pydantic.v1" {
  class RGBA {
    -__init__(r, g, b, alpha)
    -__getitem__(item): Any
  }

  class Color {
    +value
    +rgb
    +values
    +as_hex
    +as_hex
    --
    -__init__(value)
    -{class} __modify_schema__(field_schema)
    +original(): ColorType
    +as_named(): str
    +as_hex(): str
    +as_rgb(): str
    +as_rgb_tuple(): ColorTuple
    +as_hsl(): str
    +as_hsl_tuple(): HslColorTuple
    -_alpha_float(): float
    -{class} __get_validators__()
    -__str__(): str
    -__repr_args__()
    -__eq__(other): bool
    -__hash__(): int
  }

  class SchemaExtraCallable {
    -__call__(schema)
    -__call__(schema, model_class)
  }

  class Extra {
    +allow: str
    +ignore: str
    +forbid: str
  }

  class ConfigDict {
    +title
    +anystr_lower: bool
    +anystr_strip_whitespace: bool
    +min_anystr_length: int
    +max_anystr_length
    +validate_all: bool
    +extra: Extra
    +allow_mutation: bool
    +frozen: bool
    +allow_population_by_field_name: bool
    +use_enum_values: bool
    +fields
    +validate_assignment: bool
    +error_msg_templates
    +arbitrary_types_allowed: bool
    +orm_mode: bool
    +getter_dict
    +alias_generator
    +keep_untouched
    +schema_extra
    +json_loads
    +json_dumps
    +json_encoders
    +underscore_attrs_are_private: bool
    +allow_inf_nan: bool
    +copy_on_model_validation
    +post_init_call
  }

  class BaseConfig {
    +title
    +anystr_lower: bool
    +anystr_upper: bool
    +anystr_strip_whitespace: bool
    +min_anystr_length: int
    +max_anystr_length
    +validate_all: bool
    +extra: Extra
    +allow_mutation: bool
    +frozen: bool
    +allow_population_by_field_name: bool
    +use_enum_values: bool
    +fields
    +validate_assignment: bool
    +error_msg_templates
    +arbitrary_types_allowed: bool
    +orm_mode: bool
    +getter_dict
    +alias_generator
    +keep_untouched
    +schema_extra
    +json_loads
    +json_dumps
    +json_encoders
    +underscore_attrs_are_private: bool
    +allow_inf_nan: bool
    +copy_on_model_validation
    +smart_union: bool
    +post_init_call
    +fields_value
    +field_info
    +field_info: fields_value
    +field_info
    +alias
    --
    +{class} get_field_info(name)
    +{class} prepare_field(field)
  }

  class Config {
    +env_prefix: str
    +env_file
    +env_file_encoding
    +env_nested_delimiter
    +secrets_dir
    +validate_all: bool
    +extra: Extra
    +arbitrary_types_allowed: bool
    +case_sensitive: bool
    +env_names
    +field_info_from_config
    +env
    +env_names
    +env_names
    +env_names: env
    +env_names
    +env_names
    --
    +{class} prepare_field(field)
    +{class} customise_sources(init_settings, env_settings, file_secret_settings)
    +{class} parse_env_var(field_name, raw_val): Any
  }

  class UndefinedType {
    -__repr__(): str
    -__copy__(): T
    -__reduce__(): str
    -__deepcopy__(_): T
  }

  class FieldInfo {
    +field_defaults_to_hide
    +attrs
    +current_value
    --
    -__init__(default)
    -__repr_args__()
    +get_constraints()
    +update_from_config(from_config)
    -_validate()
  }

  class ModelField {
    +field_info_from_config
    +field_info: NoneType
    +field_infos
    +field_info
    +field_info
    +field_info: value
    +field_info
    +value
    +required
    +required: bool
    +value: NoneType
    +required: bool
    +annotation
    +info_from_config
    +new_alias
    +new_alias_priority
    +new_exclude
    +new_include
    +default_value
    +origin
    +types_
    +args
    +get_validators
    +get_validators
    +get_validators
    +sub_fields_mapping
    +all_aliases
    +t
    +class_validators: NoneType
    +class_validators
    +class_validators_
    +get_validators
    +v_funcs
    +errors
    +e: errors_.PydanticTypeError
    +e
    +e
    +e
    +e
    +e
    +loc
    +result
    +errors
    +v_loc
    +converted
    +converted
    +converted
    +converted
    +converted
    +converted
    +converted
    +converted
    +converted
    +iterable
    +e
    +e
    +e
    +loc
    +result
    +errors
    +v_loc
    +v_iter
    +loc
    +v_loc
    +v_loc
    +original_cls
    +errors
    +discriminator_value
    +discriminator_value
    +discriminator_value
    +sub_field
    +loc
    +v
    +t
    +t
    +t
    +t
    +t
    +t
    +args
    --
    -__init__()
    +get_default(): Any
    -{static} _get_field_info(annotation, value, config)
    +{class} infer()
    +set_config(config)
    +alt_alias(): bool
    +prepare()
    -_set_default_and_type()
    -_type_analysis()
    +prepare_discriminated_union_sub_fields()
    -_create_sub_type(type_, name)
    +populate_validators()
    +validate(v, values)
    -_validate_sequence_like(v, values, loc, cls)
    -_validate_iterable(v, values, loc, cls)
    -_validate_tuple(v, values, loc, cls)
    -_validate_mapping_like(v, values, loc, cls)
    -_get_mapping_value(original, converted)
    -_validate_singleton(v, values, loc, cls)
    -_validate_discriminated_union(v, values, loc, cls)
    -_apply_validators(v, values, loc, cls, validators)
    +is_complex(): bool
    -_type_display(): PyObjectStr
    -__repr_args__()
  }

  class ModelPrivateAttr {
    -__init__(default)
    +get_default(): Any
    -__eq__(other): bool
  }

  class DeferredType {
  }

  class _ErrorDictRequired {
    +loc: Loc
    +msg: str
    +type: str
  }

  class ErrorDict {
    +ctx
  }

  class ErrorWrapper {
    -__init__(exc, loc)
    +loc_tuple()
    -__repr_args__()
  }

  class ValidationError {
    +config
    +config
    +errors
    +no_errors
    --
    -__init__(errors, model)
    +errors()
    +json(): str
    -__str__(): str
    -__repr_args__()
  }

  class ValidatedFunction {
    +parameters
    +type_hints
    +takes_args: bool
    +takes_kwargs: bool
    +fields
    +annotation: Any
    +annotation
    +default
    +takes_args: bool
    +takes_kwargs: bool
    +values
    +m
    +values
    +arg_iter
    +arg_name
    +var_kwargs
    +wrong_positional_args
    +duplicate_kwargs
    +fields_alias
    +non_var_fields
    +d
    +var_kwargs
    +args_
    +in_kwargs: bool
    +kwargs
    +in_kwargs: bool
    +args_
    +kwargs
    +pos_args
    --
    -__init__(function, config)
    +init_model_instance(): BaseModel
    +call(): Any
    +build_values(args, kwargs)
    +execute(m): Any
    +create_model(fields, takes_args, takes_kwargs, config)
  }

  class CustomConfig {
  }

  class DecoratorBaseModel {
    +plural
    +keys
    +plural
    +keys
    +plural
    +keys
    --
    +check_args(v)
    +check_kwargs(v)
    +check_positional_only(v)
    +check_duplicate_kwargs(v)
  }

  class IfConfig {
    -__init__(validator)
    +check(config): bool
  }

  class SettingsError {
  }

  class BaseSettings {
    +init_settings
    +env_settings
    +file_secret_settings
    +sources
    --
    -__init__(_env_file, _env_file_encoding, _env_nested_delimiter, _secrets_dir)
    -_build_values(init_kwargs, _env_file, _env_file_encoding, _env_nested_delimiter, _secrets_dir)
  }

  class InitSettingsSource {
    -__init__(init_kwargs)
    -__call__(settings)
    -__repr__(): str
  }

  class EnvSettingsSource {
    +d
    +env_vars
    +env_vars
    +dotenv_vars
    +env_vars
    +env_val
    +env_val
    +env_val_built
    +env_val
    +env_files
    +env_files
    +dotenv_vars
    +env_path
    +allow_parse_failure: bool
    +allow_parse_failure: bool
    +prefixes
    +result
    +env_name_without_prefix
    +env_var: result
    +env_var
    --
    -__init__(env_file, env_file_encoding, env_nested_delimiter, env_prefix_len)
    -__call__(settings)
    -_read_env_files(case_sensitive)
    +field_is_complex(field)
    +explode_env_vars(field, env_vars)
    -__repr__(): str
  }

  class SecretsSettingsSource {
    +secrets
    +secrets_path
    +path
    +secret_value
    +secret_value
    --
    -__init__(secrets_dir)
    -__call__(settings)
    -__repr__(): str
  }

  class PydanticPlugin {
    +sym
    +sym
    +transformer
    +info_metaclass
    +default_any_type
    +default_args
    +default_factory_args
    +default_type
    +default_arg
    +default_factory_type
    +default_factory_type
    +default_factory_type
    +ret_type
    +args
    --
    -__init__(options)
    +get_base_class_hook(fullname)
    +get_metaclass_hook(fullname)
    +get_function_hook(fullname)
    +get_method_hook(fullname)
    +get_class_decorator_hook(fullname)
    +report_config_data(ctx)
    -_pydantic_model_class_maker_callback(ctx)
    -_pydantic_model_metaclass_marker_callback(ctx)
    -_pydantic_field_callback(ctx)
  }

  class PydanticPluginConfig {
    +init_forbid_extra: bool
    +init_typed: bool
    +warn_required_dynamic_aliases: bool
    +warn_untyped_fields: bool
    +debug_dataclass_transform: bool
    +toml_config
    +config
    +setting
    +plugin_config
    +setting
    --
    -__init__(options)
    +to_data()
  }

  class PydanticModelTransformer {
    +tracked_config_fields
    +ctx
    +info
    +config
    +fields
    +is_settings
    +first_dec
    +ctx
    +cls
    +config
    +ctx
    +cls
    +fields
    +known_fields
    +lhs
    +sym
    +node
    +is_required
    +all_fields
    +superclass_fields
    +field
    +all_fields
    +ctx
    +typed
    +use_alias
    +force_all_optional
    +init_arguments
    +var
    +ctx
    +set_str
    +optional_set_str
    +fields_set_argument
    +construct_arguments
    +construct_arguments
    +obj_type
    +self_tvar_name: str
    +tvar_fullname
    +tvd
    +self_tvar_expr
    +tvd
    +self_tvar_expr
    +self_type: tvd
    +self_type
    +ctx
    +info
    +sym_node
    +var
    +var_str
    +var_str
    +detail
    +var
    +lhs
    +forbid_extra
    +forbid_extra
    +has_alias_generator: bool
    +has_alias_generator: bool
    +expr
    +value_type
    +value_type
    +expr
    +arg
    +info
    +arguments
    --
    -__init__(ctx, plugin_config)
    +transform()
    +adjust_validator_signatures()
    +collect_config()
    +collect_fields(model_config)
    +add_initializer(fields, config, is_settings)
    +add_construct_method(fields)
    +set_frozen(fields, frozen)
    +get_config_update(substmt)
    +{static} get_is_required(stmt, lhs): bool
    +{static} type_has_implicit_default(): bool
    +{static} get_alias_info()
    +get_field_arguments(fields, typed, force_all_optional, use_alias)
    +should_init_forbid_extra(fields, config): bool
    +{static} is_dynamic_alias_present(has_alias_generator): bool
  }

  class PydanticModelField {
    +name
    +name
    +type_annotation
    +type_annotation
    --
    -__init__(name, is_required, alias, has_dynamic_alias, line, column)
    +to_var(info, use_alias): Var
    +to_argument(info, typed, force_optional, use_alias): Argument
    +serialize(): JsonDict
    +{class} deserialize(info, data)
  }

  class ModelConfigData {
    -__init__(forbid_extra, allow_mutation, frozen, orm_mode, allow_population_by_field_name, has_alias_generator)
    +set_values_dict()
    +update(config)
    +setdefault(key, value)
  }

  class ConstrainedNumberMeta {
    +new_cls
    --
    -__new__(name, bases, dct)
  }

  class StrictBool {
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value): bool
  }

  class ConstrainedInt {
    +strict: bool
    +gt: OptionalInt
    +ge: OptionalInt
    +lt: OptionalInt
    +le: OptionalInt
    +multiple_of: OptionalInt
    --
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
  }

  class PositiveInt {
    +gt: int
  }

  class NegativeInt {
    +lt: int
  }

  class NonPositiveInt {
    +le: int
  }

  class NonNegativeInt {
    +ge: int
  }

  class StrictInt {
    +strict: bool
  }

  class ConstrainedFloat {
    +strict: bool
    +gt: OptionalIntFloat
    +ge: OptionalIntFloat
    +lt: OptionalIntFloat
    +le: OptionalIntFloat
    +multiple_of: OptionalIntFloat
    +allow_inf_nan
    --
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
  }

  class PositiveFloat {
    +gt: int
  }

  class NegativeFloat {
    +lt: int
  }

  class NonPositiveFloat {
    +le: int
  }

  class NonNegativeFloat {
    +ge: int
  }

  class StrictFloat {
    +strict: bool
  }

  class FiniteFloat {
    +allow_inf_nan: bool
  }

  class ConstrainedBytes {
    +strip_whitespace: bool
    +to_upper: bool
    +to_lower: bool
    +min_length: OptionalInt
    +max_length: OptionalInt
    +strict: bool
    --
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
  }

  class StrictBytes {
    +strict: bool
  }

  class ConstrainedStr {
    +strip_whitespace: bool
    +to_upper: bool
    +to_lower: bool
    +min_length: OptionalInt
    +max_length: OptionalInt
    +curtail_length: OptionalInt
    +regex
    +strict: bool
    +value
    --
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value)
    -{static} _get_pattern(): str
  }

  class StrictStr {
    +strict: bool
  }

  class ConstrainedSet {
    -__args__
    +min_items
    +max_items
    +item_type
    +v
    +v_len
    --
    -{class} __get_validators__()
    -{class} __modify_schema__(field_schema)
    +{class} set_length_validator(v)
  }

  class ConstrainedFrozenSet {
    -__args__
    +min_items
    +max_items
    +item_type
    +v
    +v_len
    --
    -{class} __get_validators__()
    -{class} __modify_schema__(field_schema)
    +{class} frozenset_length_validator(v)
  }

  class ConstrainedList {
    -__args__
    +min_items
    +max_items
    +unique_items
    +item_type
    +v
    +v_len
    --
    -{class} __get_validators__()
    -{class} __modify_schema__(field_schema)
    +{class} list_length_validator(v)
    +{class} unique_items_validator(v)
  }

  class PyObject {
    +validate_always: bool
    +value
    --
    -{class} __get_validators__()
    +{class} validate(value): Any
  }

  class ConstrainedDecimal {
    +gt: OptionalIntFloatDecimal
    +ge: OptionalIntFloatDecimal
    +lt: OptionalIntFloatDecimal
    +le: OptionalIntFloatDecimal
    +max_digits: OptionalInt
    +decimal_places: OptionalInt
    +multiple_of: OptionalIntFloatDecimal
    +normalized_value
    +normalized_value: value
    +digits
    +decimals: int
    +digits
    +decimals
    +digits
    +decimals
    +whole_digits
    +expected
    --
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value): Decimal
  }

  class UUID1 {
    -{class} __modify_schema__(field_schema)
  }

  class UUID3 {
  }

  class UUID4 {
  }

  class UUID5 {
  }

  class FilePath {
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value): Path
  }

  class DirectoryPath {
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value): Path
  }

  class JsonWrapper {
  }

  class JsonMeta {
    -__getitem__(t)
  }

  class Json {
    -{class} __modify_schema__(field_schema)
  }

  class SecretField {
    -__eq__(other): bool
    -__str__(): str
    -__hash__(): int
    +get_secret_value(): Any
  }

  class SecretStr {
    +min_length: OptionalInt
    +max_length: OptionalInt
    +value
    --
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value)
    -__init__(value)
    -__repr__(): str
    -__len__(): int
    +display(): str
    +get_secret_value(): str
  }

  class SecretBytes {
    +min_length: OptionalInt
    +max_length: OptionalInt
    +value
    --
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value)
    -__init__(value)
    -__repr__(): str
    -__len__(): int
    +display(): str
    +get_secret_value(): bytes
  }

  class PaymentCardBrand {
    +amex: str
    +mastercard: str
    +visa: str
    +other: str
    --
    -__str__(): str
  }

  class PaymentCardNumber {
    +strip_whitespace
    +min_length
    +max_length
    +bin: str
    +last4: str
    +brand: PaymentCardBrand
    +num_masked
    +sum_
    +length
    +parity
    +digit
    +valid
    +required_length
    +required_length: int
    +valid
    +required_length: str
    +valid
    +required_length: int
    +valid
    +valid: bool
    +brand
    +brand
    +brand
    +brand
    --
    -__init__(card_number)
    -{class} __get_validators__()
    +masked(): str
    +{class} validate_digits(card_number): str
    +{class} validate_luhn_check_digit(card_number): str
    +{class} validate_length_for_brand(card_number)
    -{static} _get_brand(): PaymentCardBrand
  }

  class ByteSize {
    +str_match
    +unit: str
    +unit_mult
    +divisor: int
    +units
    +final_unit: str
    +divisor: int
    +units
    +final_unit: str
    +num
    +unit_div
    --
    -{class} __get_validators__()
    +{class} validate(v)
    +human_readable(decimal): str
    +to(unit): float
  }

  class PastDate {
    -{class} __get_validators__()
    +{class} validate(value): date
  }

  class FutureDate {
    -{class} __get_validators__()
    +{class} validate(value): date
  }

  class ConstrainedDate {
    +gt: OptionalDate
    +ge: OptionalDate
    +lt: OptionalDate
    +le: OptionalDate
    --
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
  }

  class Validator {
    -__init__(func, pre, each_item, always, check_fields, skip_on_failure)
  }

  class ValidatorGroup {
    +validators
    +unused_validators
    +fn
    --
    -__init__(validators)
    +get_validators(name)
    +check_for_unused()
  }

  class Parts {
  }

  class HostParts {
    +host: str
    +tld
    +host_type
    +port
    +rebuild: bool
  }

  class AnyUrl {
    +strip_whitespace: bool
    +min_length: int
    +max_length
    +allowed_schemes
    +tld_required: bool
    +user_required: bool
    +host_required: bool
    +hidden_parts
    +parts
    +url
    +value
    +value
    +url: str
    +m
    +original_parts
    +parts
    +parts
    +scheme
    +user
    +host
    +host_type: f
    +is_international: bool
    +d
    +d
    +is_international: bool
    +tld
    +d
    +tld
    +is_international: bool
    +tld
    +host_type: str
    +rebuild: bool
    +host
    +tld
    +extra
    --
    -__new__(url): object
    -__init__(url)
    +{class} build(): str
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value, field, config)
    -{class} _build_url(m, url, parts)
    -{static} _match_url()
    -{static} _validate_port()
    +{class} validate_parts(parts, validate_port)
    +{class} validate_host(parts)
    +{static} get_default_parts()
    +{class} apply_default_parts(parts)
    -__repr__(): str
  }

  class AnyHttpUrl {
    +allowed_schemes
  }

  class HttpUrl {
    +tld_required: bool
    +max_length: int
    +hidden_parts
    --
    +{static} get_default_parts()
  }

  class FileUrl {
    +allowed_schemes
    +host_required: bool
  }

  class MultiHostDsn {
    +hosts_parts
    +host_re
    +d: Parts
    +port
    +host_part
    --
    -__init__()
    -{static} _match_url()
    +{class} validate_parts(parts, validate_port)
    -{class} _build_url(m, url, parts)
  }

  class PostgresDsn {
    +allowed_schemes
    +user_required: bool
  }

  class CockroachDsn {
    +allowed_schemes
    +user_required: bool
  }

  class AmqpDsn {
    +allowed_schemes
    +host_required: bool
  }

  class RedisDsn {
    +allowed_schemes
    +host_required: bool
    --
    +{static} get_default_parts()
  }

  class MongoDsn {
    +allowed_schemes
    --
    +{static} get_default_parts()
  }

  class KafkaDsn {
    +allowed_schemes
    --
    +{static} get_default_parts()
  }

  class EmailStr {
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value): str
  }

  class NameEmail {
    +value
    --
    -__init__(name, email)
    -__eq__(other): bool
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value)
    -__str__(): str
  }

  class IPvAnyAddress {
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value)
  }

  class IPvAnyInterface {
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value)
  }

  class IPvAnyNetwork {
    -{class} __modify_schema__(field_schema)
    -{class} __get_validators__()
    +{class} validate(value)
  }

  class PyObjectStr {
    -__repr__(): str
  }

  class Representation {
    -__slots__
    +attrs
    --
    -__repr_args__()
    -__repr_name__(): str
    -__repr_str__(join_str): str
    -__pretty__(fmt)
    -__str__(): str
    -__repr__(): str
    -__rich_repr__()
  }

  class GetterDict {
    -__init__(obj)
    -__getitem__(key): Any
    +get(key, default): Any
    +extra_keys()
    +keys()
    +values()
    +items()
    -__iter__()
    -__len__(): int
    -__contains__(item): bool
    -__eq__(other): bool
    -__repr_args__()
    -__repr_name__(): str
  }

  class ValueItems {
    +items
    +items
    +item
    +normalized_items
    +all_items: NoneType
    +all_items
    +normalized_i
    +normalized_item
    +override
    +base
    +merge_keys
    +merge_keys
    +merged
    +merged_item
    +items
    +class_name
    --
    -__init__(value, items)
    +is_excluded(item): bool
    +is_included(item): bool
    +for_element(e)
    -_normalize_indexes(items, v_length)
    +{class} merge(base, override, intersect): Any
    -{static} _coerce_items()
    -{class} _coerce_value(value): Any
    +{static} is_true(): bool
    -__repr_args__()
  }

  class ClassAttribute {
    -__init__(name, value)
    -__get__(instance, owner)
  }

  class PydanticErrorMixin {
    +code: str
    +msg_template: str
    --
    -__init__()
    -__str__(): str
    -__reduce__()
  }

  class PydanticTypeError {
  }

  class PydanticValueError {
  }

  class ConfigError {
  }

  class MissingError {
    +msg_template: str
  }

  class ExtraError {
    +msg_template: str
  }

  class NoneIsNotAllowedError {
    +code: str
    +msg_template: str
  }

  class NoneIsAllowedError {
    +code: str
    +msg_template: str
  }

  class WrongConstantError {
    +code: str
    +permitted
    --
    -__str__(): str
  }

  class NotNoneError {
    +code: str
    +msg_template: str
  }

  class BoolError {
    +msg_template: str
  }

  class BytesError {
    +msg_template: str
  }

  class DictError {
    +msg_template: str
  }

  class EmailError {
    +msg_template: str
  }

  class UrlError {
    +code: str
  }

  class UrlSchemeError {
    +code: str
    +msg_template: str
  }

  class UrlSchemePermittedError {
    +code: str
    +msg_template: str
    --
    -__init__(allowed_schemes)
  }

  class UrlUserInfoError {
    +code: str
    +msg_template: str
  }

  class UrlHostError {
    +code: str
    +msg_template: str
  }

  class UrlHostTldError {
    +code: str
    +msg_template: str
  }

  class UrlPortError {
    +code: str
    +msg_template: str
  }

  class UrlExtraError {
    +code: str
    +msg_template: str
  }

  class EnumMemberError {
    +code: str
    +permitted
    --
    -__str__(): str
  }

  class IntegerError {
    +msg_template: str
  }

  class FloatError {
    +msg_template: str
  }

  class PathError {
    +msg_template: str
  }

  class _PathValueError {
    -__init__()
  }

  class PathNotExistsError {
    +code: str
    +msg_template: str
  }

  class PathNotAFileError {
    +code: str
    +msg_template: str
  }

  class PathNotADirectoryError {
    +code: str
    +msg_template: str
  }

  class PyObjectError {
    +msg_template: str
  }

  class SequenceError {
    +msg_template: str
  }

  class IterableError {
    +msg_template: str
  }

  class ListError {
    +msg_template: str
  }

  class SetError {
    +msg_template: str
  }

  class FrozenSetError {
    +msg_template: str
  }

  class DequeError {
    +msg_template: str
  }

  class TupleError {
    +msg_template: str
  }

  class TupleLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class ListMinLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class ListMaxLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class ListUniqueItemsError {
    +code: str
    +msg_template: str
  }

  class SetMinLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class SetMaxLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class FrozenSetMinLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class FrozenSetMaxLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class AnyStrMinLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class AnyStrMaxLengthError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class StrError {
    +msg_template: str
  }

  class StrRegexError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class _NumberBoundError {
    -__init__()
  }

  class NumberNotGtError {
    +code: str
    +msg_template: str
  }

  class NumberNotGeError {
    +code: str
    +msg_template: str
  }

  class NumberNotLtError {
    +code: str
    +msg_template: str
  }

  class NumberNotLeError {
    +code: str
    +msg_template: str
  }

  class NumberNotFiniteError {
    +code: str
    +msg_template: str
  }

  class NumberNotMultipleError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class DecimalError {
    +msg_template: str
  }

  class DecimalIsNotFiniteError {
    +code: str
    +msg_template: str
  }

  class DecimalMaxDigitsError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class DecimalMaxPlacesError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class DecimalWholeDigitsError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class DateTimeError {
    +msg_template: str
  }

  class DateError {
    +msg_template: str
  }

  class DateNotInThePastError {
    +code: str
    +msg_template: str
  }

  class DateNotInTheFutureError {
    +code: str
    +msg_template: str
  }

  class TimeError {
    +msg_template: str
  }

  class DurationError {
    +msg_template: str
  }

  class HashableError {
    +msg_template: str
  }

  class UUIDError {
    +msg_template: str
  }

  class UUIDVersionError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class ArbitraryTypeError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class ClassError {
    +code: str
    +msg_template: str
  }

  class SubclassError {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class JsonError {
    +msg_template: str
  }

  class JsonTypeError {
    +code: str
    +msg_template: str
  }

  class PatternError {
    +code: str
    +msg_template: str
  }

  class DataclassTypeError {
    +code: str
    +msg_template: str
  }

  class CallableError {
    +msg_template: str
  }

  class EnumError {
    +code: str
    +msg_template: str
  }

  class IntEnumError {
    +code: str
    +msg_template: str
  }

  class IPvAnyAddressError {
    +msg_template: str
  }

  class IPvAnyInterfaceError {
    +msg_template: str
  }

  class IPvAnyNetworkError {
    +msg_template: str
  }

  class IPv4AddressError {
    +msg_template: str
  }

  class IPv6AddressError {
    +msg_template: str
  }

  class IPv4NetworkError {
    +msg_template: str
  }

  class IPv6NetworkError {
    +msg_template: str
  }

  class IPv4InterfaceError {
    +msg_template: str
  }

  class IPv6InterfaceError {
    +msg_template: str
  }

  class ColorError {
    +msg_template: str
  }

  class StrictBoolError {
    +msg_template: str
  }

  class NotDigitError {
    +code: str
    +msg_template: str
  }

  class LuhnValidationError {
    +code: str
    +msg_template: str
  }

  class InvalidLengthForBrand {
    +code: str
    +msg_template: str
  }

  class InvalidByteSize {
    +msg_template: str
  }

  class InvalidByteSizeUnit {
    +msg_template: str
  }

  class MissingDiscriminator {
    +code: str
    +msg_template: str
  }

  class InvalidDiscriminator {
    +code: str
    +msg_template: str
    --
    -__init__()
  }

  class Dataclass {
    -__dataclass_fields__
    -__dataclass_params__
    -__post_init__
    -__pydantic_run_validation__
    -__post_init_post_parse__
    -__pydantic_initialised__
    -__pydantic_model__
    -__pydantic_validate_values__
    -__pydantic_has_field_info_default__
    --
    -__init__()
    -{class} __get_validators__()
    -{class} __validate__(v)
  }

  class DataclassProxy {
    -__init__(dc_cls)
    -__call__(): Any
    -__getattr__(name): Any
    -__setattr__(__name, __value)
    -__instancecheck__(instance): bool
    -__copy__()
    -__deepcopy__(memo)
  }

  class Protocol {
    +json: str
    +pickle: str
  }

  class ModelMetaclass {
    +fields
    +config: BaseConfig
    +validators
    +private_attributes
    +base_private_attributes
    +slots: SetStr
    +slots
    +class_vars: SetStr
    +hash_func
    +config
    +validators
    +hash_func
    +resolve_forward_refs
    +allowed_config_kwargs: SetStr
    +config_kwargs
    +config_from_namespace
    +config
    +validators
    +vg
    +extra_validators
    +untouched_types: ANNOTATED_FIELD_UNTOUCHED_TYPES
    +annotations
    +value
    +allowed_types
    +untouched_types
    +can_be_changed
    +inferred
    +json_encoder
    +json_encoder: pydantic_encoder
    +hash_func
    +exclude_from_namespace
    +new_namespace
    +cls
    +set_name
    --
    -__new__(name, bases, namespace)
    +is_untouched(): bool
    -__instancecheck__(instance): bool
  }

  class BaseModel {
    -__fields__
    -__include_fields__
    -__exclude_fields__
    -__validators__
    -__pre_root_validators__
    -__post_root_validators__
    -__config__
    -__json_encoder__
    -__schema_cache__
    -__custom_root_type__
    -__signature__
    -__private_attributes__
    -__class_vars__
    -__fields_set__
    +Config: BaseConfig
    +new_values
    +new_values
    +known_field
    +dict_without_original_value
    +errors
    +new_values
    +private_attrs
    +default
    +exclude_unset: skip_defaults
    +exclude_unset: skip_defaults
    +encoder
    +data
    +data
    +obj
    +obj
    +exc
    +obj
    +obj
    +obj
    +m
    +m
    +fields_values
    +values
    +cls
    +m
    +value
    +value
    +values
    +fields_set
    +fields_set
    +cached
    +s
    +copy_on_model_validation
    +deep_copy
    +deep_copy: bool
    +deep_copy: bool
    +deep_copy: bool
    +value
    +value_as_dict
    +v_dict
    +value_exclude
    +value_include
    +seq_args
    +exclude
    +include
    +allowed_keys
    +value_exclude
    +value_include
    +model_field
    +dict_key
    +dict_key: field_key
    +v
    +keys
    +keys
    +keys
    --
    -__init__()
    -__setattr__(name, value)
    -__getstate__()
    -__setstate__(state)
    -_init_private_attributes()
    +dict()
    +json(): str
    -{class} _enforce_dict_if_root(obj): Any
    +{class} parse_obj(obj)
    +{class} parse_raw(b)
    +{class} parse_file(path)
    +{class} from_orm(obj)
    +{class} construct(_fields_set)
    -_copy_and_set_values(values, fields_set)
    +copy()
    +{class} schema(by_alias, ref_template)
    +{class} schema_json(): str
    -{class} __get_validators__()
    +{class} validate(value)
    -{class} _decompose_class(obj): GetterDict
    -{class} _get_value(v, to_dict, by_alias, include, exclude, exclude_unset, exclude_defaults, exclude_none): Any
    -{class} __try_update_forward_refs__()
    +{class} update_forward_refs()
    -__iter__()
    -_iter(to_dict, by_alias, include, exclude, exclude_unset, exclude_defaults, exclude_none)
    -_calculate_keys(include, exclude, exclude_unset, update)
    -__eq__(other): bool
    -__repr_args__()
  }

  class GenericModel {
    -__concrete__
    -__parameters__
    +args
    +args
    +cached
    +params
    +typevars_map
    +model_name
    +validators
    +type_hints
    +instance_type_hints
    +fields
    +created_model
    +object_by_reference: NoneType
    +reference_name: model_name
    +reference_module_globals
    +object_by_reference
    +new_params
    +param_names
    +params_component
    +base_parameters
    +parameterized_base
    +mapped_types: Parametrization
    --
    -__class_getitem__(params)
    -_cache_key(): CacheKey
    -{class} __concrete_name__(params): str
    -{class} __parameterized_bases__(typevars_map)
    +build_base_model(mapped_types)
  }

  class SkipField {
    -__init__(message)
  }

}

package "venv2.lib.python3.12.site-packages.pydantic._internal" {
  class GenerateJsonSchemaHandler {
    +ref
    +json_schema
    --
    -__init__(generate_json_schema, handler_override)
    -__call__(__core_schema): JsonSchemaValue
    +resolve_ref_schema(maybe_ref_json_schema): JsonSchemaValue
  }

  class CallbackGetCoreSchemaHandler {
    +schema
    +ref
    +ref
    --
    -__init__(handler, generate_schema, ref_mode)
    -__call__(__source_type): core_schema.CoreSchema
    -_get_types_namespace()
    +generate_schema(__source_type): core_schema.CoreSchema
    +field_name()
    +resolve_ref_schema(maybe_ref_schema): core_schema.CoreSchema
  }

  class _WalkCoreSchema {
    +mapping
    +key: core_schema.CoreSchemaType
    +method_name
    +schema
    +ser_schema
    +sub_schema
    +schema
    +return_schema
    +new_definitions
    +updated_definition
    +new_inner_schema
    +new_schema
    +items_schema
    +items_schema
    +items_schema
    +items_schema
    +schema
    +items_schema
    +schema
    +extras_schema
    +keys_schema
    +values_schema
    +new_choices
    +new_choices
    +extras_schema
    +replaced_fields
    +replaced_computed_fields
    +replaced_field
    +replaced_field
    +extras_schema
    +replaced_computed_fields
    +replaced_field
    +replaced_fields
    +replaced_field
    +replaced_fields
    +replaced_computed_fields
    +replaced_field
    +replaced_field
    +replaced_arguments_schema
    +replaced_param
    --
    -__init__()
    -_build_schema_type_to_method()
    +walk(schema, f): core_schema.CoreSchema
    -_walk(schema, f): core_schema.CoreSchema
    -_handle_other_schemas(schema, f): core_schema.CoreSchema
    -_handle_ser_schemas(ser_schema, f): core_schema.SerSchema
    +handle_definitions_schema(schema, f): core_schema.CoreSchema
    +handle_list_schema(schema, f): core_schema.CoreSchema
    +handle_set_schema(schema, f): core_schema.CoreSchema
    +handle_frozenset_schema(schema, f): core_schema.CoreSchema
    +handle_generator_schema(schema, f): core_schema.CoreSchema
    +handle_tuple_variable_schema(schema, f): core_schema.CoreSchema
    +handle_tuple_positional_schema(schema, f): core_schema.CoreSchema
    +handle_dict_schema(schema, f): core_schema.CoreSchema
    +handle_function_schema(schema, f): core_schema.CoreSchema
    +handle_union_schema(schema, f): core_schema.CoreSchema
    +handle_tagged_union_schema(schema, f): core_schema.CoreSchema
    +handle_chain_schema(schema, f): core_schema.CoreSchema
    +handle_lax_or_strict_schema(schema, f): core_schema.CoreSchema
    +handle_json_or_python_schema(schema, f): core_schema.CoreSchema
    +handle_model_fields_schema(schema, f): core_schema.CoreSchema
    +handle_typed_dict_schema(schema, f): core_schema.CoreSchema
    +handle_dataclass_args_schema(schema, f): core_schema.CoreSchema
    +handle_arguments_schema(schema, f): core_schema.CoreSchema
    +handle_call_schema(schema, f): core_schema.CoreSchema
  }

  class CallMarker {
    +function
    +validate_return: bool
  }

  class ValidateCallWrapper {
    +func
    +schema_type: func
    +schema_type: function
    +namespace
    +config_wrapper
    +gen_schema
    +schema
    +core_config
    +return_type
    +gen_schema
    +schema
    +validator
    +res
    +bound_function
    +result
    --
    -__init__(function, config, validate_return)
    -__call__(): Any
    -__get__(obj, objtype): ValidateCallWrapper
    -__set_name__(owner, name)
    -__repr__(): str
    -__eq__(other)
  }

  class V1OnlyValueValidator {
    -__call__(__value): Any
  }

  class V1ValidatorWithValues {
    -__call__(__value, values): Any
  }

  class V1ValidatorWithValuesKwOnly {
    -__call__(__value): Any
  }

  class V1ValidatorWithKwargs {
    -__call__(__value): Any
  }

  class V1ValidatorWithValuesAndKwargs {
    -__call__(__value, values): Any
  }

  class V1RootValidatorFunction {
    -__call__(__values): RootValidatorValues
  }

  class V2CoreBeforeRootValidator {
    -__call__(__values, __info): RootValidatorValues
  }

  class V2CoreAfterRootValidator {
    -__call__(__fields_tuple, __info): RootValidatorFieldsTuple
  }

  class PlainRepr {
    -__repr__(): str
  }

  class Representation {
    +attrs_names
    +attrs_names
    +attrs
    --
    -__repr_args__(): ReprArgs
    -__repr_name__(): str
    -__repr_str__(join_str): str
    -__pretty__(fmt)
    -__rich_repr__(): RichReprResult
    -__str__(): str
    -__repr__(): str
  }

  class _ModelNamespaceDict {
    +existing: Any
    --
    -__setitem__(k, v)
  }

  class ModelMetaclass {
    +config_wrapper
    +private_attributes
    +original_model_post_init
    +cls
    +mro
    +parent_parameters
    +parameters
    +combined_parameters
    +parameters_str
    +generic_type_label
    +error_message
    +bases_str
    +parent_namespace
    +parent_namespace
    +types_namespace
    +private_attributes
    +maybe_mock_validator
    +rebuilt_validator
    +field_names
    +class_vars
    +private_attributes
    --
    -__new__(cls_name, bases, namespace, __pydantic_generic_metadata__, __pydantic_reset_parent_namespace__, _create_model_module): type
    +wrapped_model_post_init(__context)
    -__getattr__(item): Any
    -{class} __prepare__()
    -__instancecheck__(instance): bool
    -{static} _collect_bases_data()
    -__fields__()
  }

  class _PydanticWeakRef {
    -__init__(obj)
    -__call__(): Any
    -__reduce__()
  }

  class GenerateSchema {
    +obj
    +cls
    +items_schemas
    --
    -__init__(config_wrapper, types_namespace, typevars_map)
    -{class} __from_parent(config_wrapper_stack, types_namespace, typevars_map, defs): GenerateSchema
    -_config_wrapper(): ConfigWrapper
    -_current_generate_schema(): GenerateSchema
    -_arbitrary_types(): bool
    +str_schema(): CoreSchema
    -_list_schema(tp, items_type): CoreSchema
    -_dict_schema(tp, keys_type, values_type): CoreSchema
    -_set_schema(tp, items_type): CoreSchema
    -_frozenset_schema(tp, items_type): CoreSchema
    -_tuple_variable_schema(tp, items_type): CoreSchema
    -_tuple_positional_schema(tp, items_types): CoreSchema
    -_arbitrary_type_schema(tp): CoreSchema
    -_unknown_type_schema(obj): CoreSchema
    -_apply_discriminator_to_union(schema, discriminator): CoreSchema
  }

  class CollectedInvalid {
  }

  class _CommonField {
    +schema: core_schema.CoreSchema
    +validation_alias
    +serialization_alias
    +serialization_exclude
    +frozen
    +metadata
  }

  class _Definitions {
    +ref
    --
    -__init__()
    +get_schema_or_ref(tp)
  }

  class _FieldNameStack {
    -__init__()
    +push(field_name)
    +get()
  }

  class MissingDefinitionForUnionRef {
    -__init__(ref)
  }

  class _ApplyInferredDiscriminator {
    +schema
    +schema
    +new_defs
    +missing_defs
    +schema
    +wrapped
    +nullable_wrapper
    +wrapped
    +definitions_wrapper
    +schema
    +choices_schemas
    +choice
    +discriminator
    +discriminator
    +choices_schemas
    +subchoices
    +inferred_discriminator_values
    +inner_discriminator
    +values
    +subchoices
    +subchoice_values
    +values
    +subchoice_schema
    +subchoice_values
    +schema_ref
    +source
    +field
    +source
    +field
    +source
    +alias
    +values
    +choice_schema
    +choice_values
    +validator_type
    +existing_choice
    --
    -__init__(discriminator, definitions)
    +apply(schema): core_schema.CoreSchema
    -_apply_to_root(schema): core_schema.CoreSchema
    -_handle_choice(choice)
    -_is_discriminator_shared(choice): bool
    -_infer_discriminator_values_for_choice(choice, source_name)
    -_infer_discriminator_values_for_typed_dict_choice(choice, source_name)
    -_infer_discriminator_values_for_model_choice(choice, source_name)
    -_infer_discriminator_values_for_dataclass_choice(choice, source_name)
    -_infer_discriminator_values_for_field(field, source)
    -_infer_discriminator_values_for_inner_schema(schema, source)
    -_set_unique_choice_for_values(choice, values)
  }

  class PydanticRecursiveRef {
    +type_ref: str
    --
    -__call__()
    -__or__(other)
    -__ror__(other)
  }

  class ValidatorDecoratorInfo {
    +decorator_repr
    +fields
    +mode
    +each_item: bool
    +always: bool
    +check_fields
  }

  class FieldValidatorDecoratorInfo {
    +decorator_repr
    +fields
    +mode: FieldValidatorModes
    +check_fields
  }

  class RootValidatorDecoratorInfo {
    +decorator_repr
    +mode
  }

  class FieldSerializerDecoratorInfo {
    +decorator_repr
    +fields
    +mode
    +return_type: Any
    +when_used: core_schema.WhenUsed
    +check_fields
  }

  class ModelSerializerDecoratorInfo {
    +decorator_repr
    +mode
    +return_type: Any
    +when_used: core_schema.WhenUsed
  }

  class ModelValidatorDecoratorInfo {
    +decorator_repr
    +mode
  }

  class PydanticDescriptorProxy {
    +wrapped
    +decorator_info: DecoratorInfo
    +shim
    +f
    --
    -__post_init__()
    -_call_wrapped_attr(func)
    -__get__(obj, obj_type)
    -__set_name__(instance, name)
    -__getattr__(__name): Any
  }

  class Decorator {
    +cls_ref: str
    +cls_var_name: str
    +func
    +shim
    +info: DecoratorInfoType
    +func
    +func
    +func
    +attribute
    +func
    --
    +{static} build()
    +bind_to_cls(cls)
  }

  class DecoratorInfos {
    +validators
    +field_validators
    +root_validators
    +field_serializers
    +model_serializers
    +model_validators
    +computed_fields
    +res
    +existing
    +existing
    +to_replace
    +info
    --
    +{static} build(): DecoratorInfos
  }

  class CoreMetadata {
    +pydantic_js_functions
    +pydantic_js_annotation_functions
    +pydantic_js_prefer_positional_arguments
    +pydantic_typed_dict_cls
  }

  class CoreMetadataHandler {
    +metadata
    +metadata
    +metadata
    --
    -__init__(schema)
    +metadata(): CoreMetadata
  }

  class SchemaTransformer {
    +get_core_schema
    +get_json_schema
    --
    -__get_pydantic_core_schema__(source_type, handler): CoreSchema
    -__get_pydantic_json_schema__(schema, handler): JsonSchemaValue
  }

  class InnerSchemaValidator {
    +core_schema: CoreSchema
    +js_schema
    +js_core_schema
    +js_schema_update
    +js_schema
    --
    -__get_pydantic_json_schema__(_schema, handler): JsonSchemaValue
    -__get_pydantic_core_schema__(_source_type, _handler): CoreSchema
  }

  class SequenceValidator {
    +mapped_origin
    +item_source_type
    +min_length
    +max_length
    +strict: bool
    +items
    +v
    +items_schema: NoneType
    +items_schema
    +metadata
    +constrained_schema
    +constrained_schema
    +constrained_schema
    +schema: constrained_schema
    +coerce_instance_wrap
    +coerce_instance_wrap
    +constrained_schema
    +check_instance
    +serialization
    +strict
    +schema: strict
    +lax
    +schema
    --
    +serialize_sequence_via_list(v, handler, info): Any
    -__get_pydantic_core_schema__(source_type, handler): CoreSchema
  }

  class MappingValidator {
    +mapped_origin
    +keys_source_type
    +values_source_type
    +min_length
    +max_length
    +strict: bool
    +keys_schema: NoneType
    +keys_schema
    +values_schema: NoneType
    +values_schema
    +metadata
    +schema
    +constrained_schema
    +check_instance
    +default_default_factory
    +coerce_instance_wrap
    +coerce_instance_wrap
    +serialization
    +strict
    +schema: strict
    +lax
    +schema
    --
    +serialize_mapping_via_dict(v, handler): Any
    -__get_pydantic_core_schema__(source_type, handler): CoreSchema
  }

  class PydanticMetadata {
  }

  class _PydanticGeneralMetadata {
    -__init__(metadata)
  }

  class ConfigWrapper {
    +config_dict: ConfigDict
    +title
    +str_to_lower: bool
    +str_to_upper: bool
    +str_strip_whitespace: bool
    +str_min_length: int
    +str_max_length
    +extra
    +frozen: bool
    +populate_by_name: bool
    +use_enum_values: bool
    +validate_assignment: bool
    +arbitrary_types_allowed: bool
    +from_attributes: bool
    +loc_by_alias: bool
    +alias_generator
    +ignored_types
    +allow_inf_nan: bool
    +json_schema_extra
    +json_encoders
    +strict: bool
    +revalidate_instances
    +ser_json_timedelta
    +ser_json_bytes
    +validate_default: bool
    +validate_return: bool
    +protected_namespaces
    +hide_input_in_errors: bool
    +defer_build: bool
    +plugin_settings
    +schema_generator
    +json_schema_serialization_defaults_required: bool
    +json_schema_mode_override
    +coerce_numbers_to_str: bool
    +regex_engine
    +validation_error_cause: bool
    +config_new
    +config
    +config_class_from_namespace
    +config_dict_from_namespace
    +config_from_namespace
    +core_config
    +c
    --
    -__init__(config)
    +{class} for_model(bases, namespace, kwargs): Self
    -__getattr__(name): Any
    +core_config(obj): core_schema.CoreConfig
    +dict_not_none(): Any
    -__repr__()
  }

  class ConfigWrapperStack {
    +config_wrapper
    --
    -__init__(config_wrapper)
    +tail(): ConfigWrapper
    +push(config_wrapper)
  }

  class MockValSer {
    +val_ser
    +val_ser
    --
    -__init__(error_message)
    -__getattr__(item)
    +rebuild()
  }

  class LimitedDict {
    +excess
    +to_remove
    --
    -__init__(size_limit)
    -__setitem__(__key, __value)
    -__class_getitem__(): Any
  }

  class DeepChainMap {
    +hit: bool
    +hit: bool
    --
    +clear()
    -__setitem__(key, value)
    -__delitem__(key)
  }

  class PydanticGenericMetadata {
    +origin
    +args
    +parameters
  }

  class StandardDataclass {
    -__dataclass_fields__
    -__dataclass_params__
    -__post_init__
    --
    -__init__()
  }

  class PydanticDataclass {
    -__pydantic_config__
    -__pydantic_complete__
    -__pydantic_core_schema__
    -__pydantic_decorators__
    -__pydantic_fields__
    -__pydantic_serializer__
    -__pydantic_validator__
  }

  class ValueItems {
    +items
    +items
    +item
    +normalized_items
    +all_items: NoneType
    +all_items
    +normalized_i
    +normalized_item
    +override
    +base
    +merge_keys
    +merge_keys
    +merged
    +merged_item
    +items
    +class_name
    --
    -__init__(value, items)
    +is_excluded(item): bool
    +is_included(item): bool
    +for_element(e)
    -_normalize_indexes(items, v_length)
    +{class} merge(base, override, intersect): Any
    -{static} _coerce_items(): MappingIntStrAny
    -{class} _coerce_value(value): Any
    +{static} is_true(): bool
    -__repr_args__(): _repr.ReprArgs
  }

  class ClassAttribute {
    -__init__(name, value)
    -__get__(instance, owner)
  }

}

package "venv2.lib.python3.12.site-packages.pydantic.plugin" {
  class SchemaTypePath {
    +module: str
    +name: str
  }

  class PydanticPluginProtocol {
    +new_schema_validator(schema, schema_type, schema_type_path, schema_kind, config, plugin_settings)
  }

  class BaseValidateHandlerProtocol {
    +on_enter
    --
    +on_success(result)
    +on_error(error)
    +on_exception(exception)
  }

  class ValidatePythonHandlerProtocol {
    +on_enter(input)
  }

  class ValidateJsonHandlerProtocol {
    +on_enter(input)
  }

  class ValidateStringsHandlerProtocol {
    +on_enter(input)
  }

  class PluggableSchemaValidator {
    +python_event_handlers
    +json_event_handlers
    +strings_event_handlers
    --
    -__init__(schema, schema_type, schema_type_path, schema_kind, config, plugins, plugin_settings)
    -__getattr__(name): Any
  }

}

package "venv2.lib.python3.12.site-packages.pydantic.deprecated" {
  class _ConfigMetaclass {
    -__getattr__(item): Any
  }

  class BaseConfig {
    -__getattr__(item): Any
    -__init_subclass__()
  }

  class _ExtraMeta {
    -__getattribute__(__name): Any
  }

  class Extra {
    +allow
    +ignore
    +forbid
  }

  class ValidatedFunction {
    +parameters
    +type_hints
    +takes_args: bool
    +takes_kwargs: bool
    +fields
    +annotation: Any
    +annotation
    +default
    +takes_args: bool
    +takes_kwargs: bool
    +values
    +m
    +values
    +arg_iter
    +arg_name
    +var_kwargs
    +wrong_positional_args
    +duplicate_kwargs
    +fields_alias
    +non_var_fields
    +d
    +var_kwargs
    +args_
    +in_kwargs: bool
    +kwargs
    +in_kwargs: bool
    +args_
    +kwargs
    +pos_args
    +config_wrapper
    --
    -__init__(function, config)
    +init_model_instance(): BaseModel
    +call(): Any
    +build_values(args, kwargs)
    +execute(m): Any
    +create_model(fields, takes_args, takes_kwargs, config)
  }

  class DecoratorBaseModel {
    +plural
    +keys
    +plural
    +keys
    +plural
    +keys
    +model_config
    --
    +{class} check_args(v)
    +{class} check_kwargs(v)
    +{class} check_positional_only(v)
    +{class} check_duplicate_kwargs(v)
  }

  class _OnlyValueValidatorClsMethod {
    -__call__(__cls, __value): Any
  }

  class _V1ValidatorWithValuesClsMethod {
    -__call__(__cls, __value, values): Any
  }

  class _V1ValidatorWithValuesKwOnlyClsMethod {
    -__call__(__cls, __value): Any
  }

  class _V1ValidatorWithKwargsClsMethod {
    -__call__(__cls): Any
  }

  class _V1ValidatorWithValuesAndKwargsClsMethod {
    -__call__(__cls, values): Any
  }

  class _V1RootValidatorClsMethod {
    -__call__(__cls, __values): _decorators_v1.RootValidatorValues
  }

  class Protocol {
    +json: str
    +pickle: str
  }

}

package "venv2.lib.python3.12.site-packages.iniconfig" {
  class SectionWrapper {
    +config
    +name
    +section
    --
    -__init__(config, name)
    +lineof(name)
    +get(key)
    +get(key, convert)
    +get(key, default, convert)
    +get(key, default, convert)
    +get(key, default, convert)
    +get(key, default, convert)
    -__getitem__(key): str
    -__iter__()
    +lineof(): int
    +items()
  }

  class IniConfig {
    +path
    +sections
    +data
    +tokens
    +sections_data
    +sections_data
    +lineno
    +value: str
    --
    -__init__(path, data, encoding)
    +lineof(section, name)
    +get(section, name)
    +get(section, name, convert)
    +get(section, name, default, convert)
    +get(section, name, default, convert)
    +get(section, name, default, convert)
    +get(section, name, default, convert)
    -__getitem__(name): SectionWrapper
    -__iter__()
    -__contains__(arg): bool
  }

  class _ParsedLine {
    +lineno: int
    +section
    +name
    +value
  }

  class ParseError {
    +path
    +lineno
    +msg
    --
    -__init__(path, lineno, msg)
    -__str__(): str
  }

}

package "venv2.lib.python3.12.site-packages.black" {
  class InvalidInput {
  }

  class Replacement {
    +mask: str
    +src: str
  }

  class CellMagic {
    +name: str
    +params
    +body: str
    --
    +header(): str
  }

  class CellMagicFinder {
    +args
    --
    -__init__(cell_magic)
    +visit_Expr(node)
  }

  class OffsetAndMagic {
    +col_offset: int
    +magic: str
  }

  class MagicFinder {
    +args
    +src
    +src
    +args
    +src
    +src
    +src
    +src
    +src
    --
    -__init__()
    +visit_Assign(node)
    +visit_Expr(node)
  }

  class Ok {
    -__init__(value)
    +ok(): T
  }

  class Err {
    -__init__(e)
    +err(): E
  }

  class FileData {
    +st_mtime: float
    +st_size: int
    +hash: str
  }

  class Cache {
    +mode: Mode
    +cache_file: Path
    +file_data
    +cache_file
    +data
    +file_data
    +data
    +stat
    +hash
    +res_src
    +old
    +st
    +new_hash
    +changed
    +done
    +data
    --
    +{class} read(mode): Self
    +{static} hash_digest(): str
    +{static} get_file_data(): FileData
    +is_changed(source): bool
    +filtered_cached(sources)
    +write(sources)
  }

  class WriteBack {
    +NO: int
    +YES: int
    +DIFF: int
    +CHECK: int
    +COLOR_DIFF: int
    --
    +{class} from_configuration()
  }

  class BracketMatchError {
  }

  class BracketTracker {
    +depth: int
    +bracket_match
    +delimiters
    +previous
    -_for_loop_depths
    -_lambda_argument_depths
    +invisible
    +opening_bracket
    +delim
    +delim
    +priority
    --
    +mark(leaf)
    +any_open_for_or_lambda(): bool
    +any_open_brackets(): bool
    +max_delimiter_priority(exclude): Priority
    +delimiter_count_with_priority(priority): int
    +maybe_increment_for_loop_variable(leaf): bool
    +maybe_decrement_after_for_loop_variable(leaf): bool
    +maybe_increment_lambda_arguments(leaf): bool
    +maybe_decrement_after_lambda_arguments(leaf): bool
    +get_open_lsqb()
  }

  class Line {
    +mode: Mode
    +depth: int
    +leaves
    +comments
    +bracket_tracker: BracketTracker
    +inside_brackets: bool
    +should_split_rhs: bool
    +magic_trailing_comma
    +has_value
    +first_leaf
    +second_leaf
    +second_leaf: NoneType
    +value
    +leaf
    +leaf_list
    +ignored_ids
    +last_leaf
    +last_leaf
    +comment_seen: bool
    +comment_seen: bool
    +first_line
    +last_line
    +last_leaf
    +last_leaf
    +trailing_comma
    +trailing_comma_comments
    +open_lsqb
    +subscript_start
    +subscript_start
    +op
    +length
    +indent
    +leaves
    +first
    +res
    --
    +append(leaf, preformatted, track_bracket)
    +append_safe(leaf, preformatted)
    +is_comment(): bool
    +is_decorator(): bool
    +is_import(): bool
    +is_with_or_async_with_stmt(): bool
    +is_class(): bool
    +is_stub_class(): bool
    +is_def(): bool
    +is_stub_def(): bool
    +is_class_paren_empty(): bool
    +is_triple_quoted_string(): bool
    +opens_block(): bool
    +is_fmt_pass_converted(): bool
    +contains_standalone_comments(): bool
    +contains_implicit_multiline_string_with_comments(): bool
    +contains_uncollapsable_type_comments(): bool
    +contains_unsplittable_type_ignore(): bool
    +contains_multiline_strings(): bool
    +has_magic_trailing_comma(closing, ensure_removable): bool
    +append_comment(comment): bool
    +comments_after(leaf)
    +remove_trailing_comma()
    +is_complex_subscript(leaf): bool
    +enumerate_with_length(reversed)
    +clone()
    -__str__(): str
    -__bool__(): bool
  }

  class RHSResult {
    +head: Line
    +body: Line
    +tail: Line
    +opening_bracket: Leaf
    +closing_bracket: Leaf
  }

  class LinesBlock {
    +mode: Mode
    +previous_block
    +original_line: Line
    +before: int
    +content_lines
    +after: int
    +empty_line
    --
    +all_lines()
  }

  class EmptyLineTracker {
    +mode: Mode
    +previous_line
    +previous_block
    +previous_defs
    +semantic_leading_comment
    +previous_after
    +before
    +before: int
    +block
    +max_allowed: int
    +max_allowed
    +first_leaf
    +before
    +before
    +before: int
    +user_had_newline
    +depth
    +previous_def: NoneType
    +previous_def
    +before
    +before: int
    +before: int
    +before: int
    +before: int
    +before: int
    +before: int
    +is_empty_first_line_ok
    +comment_to_add_newlines
    +slc
    +comment_to_add_newlines: slc
    +newlines: int
    +newlines: int
    +newlines: int
    +newlines: int
    +newlines: int
    +newlines
    +newlines: int
    +newlines: int
    +newlines: int
    +newlines
    +newlines: int
    +previous_block
    +newlines: int
    --
    +maybe_empty_lines(current_line): LinesBlock
    -_maybe_empty_lines(current_line)
    -_maybe_empty_lines_for_class_or_def(current_line, before, user_had_newline)
  }

  class TargetVersion {
    +PY33: int
    +PY34: int
    +PY35: int
    +PY36: int
    +PY37: int
    +PY38: int
    +PY39: int
    +PY310: int
    +PY311: int
    +PY312: int
  }

  class Feature {
    +F_STRINGS: int
    +NUMERIC_UNDERSCORES: int
    +TRAILING_COMMA_IN_CALL: int
    +TRAILING_COMMA_IN_DEF: int
    +ASYNC_IDENTIFIERS: int
    +ASYNC_KEYWORDS: int
    +ASSIGNMENT_EXPRESSIONS: int
    +POS_ONLY_ARGUMENTS: int
    +RELAXED_DECORATORS: int
    +PATTERN_MATCHING: int
    +UNPACKING_ON_FLOW: int
    +ANN_ASSIGN_EXTENDED_RHS: int
    +EXCEPT_STAR: int
    +VARIADIC_GENERICS: int
    +DEBUG_F_STRINGS: int
    +PARENTHESIZED_CONTEXT_MANAGERS: int
    +TYPE_PARAMS: int
    +FORCE_OPTIONAL_PARENTHESES: int
    +FUTURE_ANNOTATIONS: int
  }

  class Preview {
    +add_trailing_comma_consistently
    +blank_line_after_nested_stub_class
    +blank_line_between_nested_and_def_stub_file
    +hex_codes_in_unicode_sequences
    +improved_async_statements_handling
    +multiline_string_handling
    +no_blank_line_before_class_docstring
    +prefer_splitting_right_hand_side_of_assignments
    +string_processing
    +parenthesize_conditional_expressions
    +parenthesize_long_type_hints
    +respect_magic_trailing_comma_in_return_type
    +skip_magic_trailing_comma_in_subscript
    +wrap_long_dict_values_in_parens
    +wrap_multiple_context_managers_in_parens
    +dummy_implementations
    +walrus_subscript
    +module_docstring_newlines
    +accept_raw_docstrings
    +fix_power_op_line_length
    +hug_parens_with_braces_and_square_brackets
    +allow_empty_first_line_before_new_block_or_comment
    +single_line_format_skip_with_multiple_comments
    +long_case_block_line_splitting
  }

  class Deprecated {
  }

  class Mode {
    +target_versions
    +line_length: int
    +string_normalization: bool
    +is_pyi: bool
    +is_ipynb: bool
    +skip_source_first_line: bool
    +magic_trailing_comma: bool
    +experimental_string_processing: bool
    +python_cell_magics
    +preview: bool
    +version_str
    +version_str: str
    +parts
    --
    -__post_init__()
    -__contains__(feature): bool
    +get_cache_key(): str
  }

  class _TopLevelStatementsVisitor {
    +newline_leaf
    +ancestor
    +semantic_parent
    +semantic_parent
    --
    -__init__(lines_set)
    +visit_simple_stmt(node)
    +visit_suite(node)
  }

  class _LinesMapping {
    +original_start: int
    +original_end: int
    +modified_start: int
    +modified_end: int
    +is_changed_block: bool
  }

  class DebugVisitor {
    +tree_depth: int
    +list_output
    +print_output: bool
    +indent
    +v
    +code
    --
    +out(message)
    +visit_default(node)
    +{class} show(code)
  }

  class CannotTransform {
  }

  class StringTransformer {
    -__name__: Final
    +match_result
    +cant_transform
    +string_indices
    +cant_transform
    +line
    --
    -__init__(line_length, normalize_strings)
    +do_match(line): TMatchResult
    +do_transform(line, string_indices)
    -__call__(line, _features, _mode)
  }

  class CustomSplit {
    +has_prefix: bool
    +break_idx: int
  }

  class CustomSplitMapMixin {
    -_Key: ClassVar
    -_CUSTOM_SPLIT_MAP
    +key
    +key
    +custom_splits
    +key
    --
    -{static} _get_key()
    +add_custom_splits(string, custom_splits)
    +pop_custom_splits(string)
    +has_custom_splits(string): bool
  }

  class StringMerger {
    +LL
    +is_valid_index
    +string_indices
    +idx: int
    +leaf
    +contains_comment: bool
    +i: idx
    +contains_comment: bool
    +new_line: line
    +rblc_result
    +new_line
    +msg_result
    +new_line
    +msg_cant_transform
    +rblc_cant_transform
    +cant_transform
    +LL
    +indices_to_transform
    +string_leaf
    +new_line
    +new_string_leaf
    +LL
    +is_valid_index
    +merged_string_idx_dict
    +vresult
    +new_line
    +previous_merged_string_idx
    +previous_merged_num_of_strings
    +previous_merged_string_idx: i
    +atom_node
    +BREAK_MARK: str
    +QUOTE
    +f_expressions
    +debug_expressions_contain_visible_quotes
    +string
    +RE_EVEN_BACKSLASHES: str
    +naked_string
    +naked_string
    +custom_splits
    +prefix_tracker
    +next_str_idx: string_idx
    +prefix: str
    +prefix
    +S: str
    +NS: str
    +num_of_strings: int
    +next_str_idx: string_idx
    +SS
    +next_prefix
    +SS
    +NSS
    +has_prefix
    +S
    +NS
    +non_string_idx: next_str_idx
    +S_leaf
    +temp_string
    +mark_idx
    +temp_string
    +breakpoint_idx
    +string_leaf
    +first_child_idx
    +i: string_idx
    +found_sa_comment: bool
    +is_valid_index
    +found_sa_comment: bool
    +num_of_inline_string_comments: int
    +set_of_prefixes
    +num_of_strings: int
    +prefix
    --
    +do_match(line): TMatchResult
    +do_transform(line, string_indices)
    -{static} _remove_backslash_line_continuation_chars(string_indices)
    -_merge_string_group(line, string_indices)
    -_merge_one_string_group(LL, string_idx, is_valid_index)
    +make_naked(string_prefix): str
    -{static} _validate_msg(string_idx)
  }

  class StringParenStripper {
    +LL
    +is_valid_index
    +string_indices
    +idx
    +leaf
    +string_idx: idx
    +string_parser
    +next_idx
    +before_lpar
    +idx: string_idx
    +LL
    +string_and_rpar_indices
    +string_parser
    +rpar_idx
    +should_transform: bool
    +should_transform: bool
    +LL
    +new_line
    +previous_idx
    +leaf
    +lpar_or_rpar_idx
    +string_leaf
    +old_comments
    +previous_idx: idx
    --
    +do_match(line): TMatchResult
    +do_transform(line, string_indices)
    -_transform_to_new_line(line, string_and_rpar_indices): Line
  }

  class BaseStringSplitter {
    +STRING_OPERATORS: Final
    +match_result
    +string_indices
    +string_idx
    +vresult
    +LL
    +string_leaf
    +max_string_length
    +LL
    +is_valid_index
    +offset
    +p_idx
    +P
    +N
    +N
    +NN
    +has_comments: bool
    +has_comments: bool
    +max_string_length
    +matching_nodes
    +prev_sibling
    +next_sibling
    +parent
    +prev_sibling
    +next_sibling
    --
    +do_splitter_match(line): TMatchResult
    +do_match(line): TMatchResult
    -_validate(line, string_idx)
    -_get_max_string_length(line, string_idx): int
    -{static} _prefer_paren_wrap_match()
  }

  class StringSplitter {
    +MIN_SUBSTR_SIZE: Final
    +LL
    +is_valid_index
    +idx: int
    +string_idx: idx
    +string_parser
    +idx
    +LL
    +string_idx
    +QUOTE
    +is_valid_index
    +insert_str_child
    +prefix
    +drop_pointless_f_prefix
    +first_string_line: bool
    +string_op_leaves
    +string_op_leaves_length
    +maybe_prefix_leaves
    +ends_with_comma
    +result
    +max_break_width
    +custom_splits
    +use_custom_breakpoints
    +rest_value
    +string_line_results
    +csplit
    +break_idx
    +max_bidx
    +maybe_break_idx
    +rest_value
    +string_line_results
    +first_string_line: bool
    +use_custom_breakpoints: bool
    +break_idx: maybe_break_idx
    +next_value
    +next_value
    +next_value
    +next_leaf
    +next_line
    +rest_value
    +first_string_line: bool
    +rest_value
    +rest_leaf
    +last_line
    +temp_value: rest_value
    +non_string_line
    +previous_was_unescaped_backslash: bool
    +it
    +previous_was_unescaped_backslash
    +previous_was_unescaped_backslash: bool
    +previous_was_unescaped_backslash: bool
    +begin
    +end: idx
    +illegal_indices
    +iterators
    +is_valid_index
    +is_space
    +is_split_safe
    +is_not_escaped: bool
    +j
    +is_not_escaped
    +is_big_enough
    +break_idx: max_break_idx
    +break_idx
    +new_prefix
    +temp
    +temp
    +temp
    +new_string: temp
    +LL
    +string_op_leaves
    +i: int
    +prefix_leaf
    --
    +do_splitter_match(line): TMatchResult
    +do_transform(line, string_indices)
    +maybe_append_string_operators()
    +max_last_string_column(): int
    +more_splits_should_be_made(): bool
    -_iter_nameescape_slices(string)
    -_iter_fexpr_slices(string)
    -_get_illegal_split_indices(string)
    -_get_break_idx(string, max_break_idx)
    +breaks_unsplittable_expression(): bool
    +passes_all_checks(): bool
    -_maybe_normalize_string_quotes(leaf)
    -_normalize_f_string(string, prefix): str
    -_get_string_operator_leaves(leaves)
  }

  class StringParenWrapper {
    +LL
    +string_idx
    +string_value
    +max_string_width
    +is_valid_index
    +idx
    +is_valid_index
    +idx
    +is_valid_index
    +idx
    +string_idx: idx
    +string_parser
    +idx
    +is_valid_index
    +idx
    +string_idx: idx
    +string_parser
    +idx
    +parent_types
    +is_valid_index
    +idx
    +string_idx: idx
    +string_parser
    +idx
    +LL
    +string_idx
    +is_valid_index
    +insert_str_child
    +comma_idx
    +ends_with_comma: bool
    +ends_with_comma: bool
    +leaves_to_steal_comments_from
    +first_line
    +left_leaves
    +old_parens_exist: bool
    +old_parens_exist: bool
    +lpar_leaf
    +string_value
    +string_line
    +string_leaf
    +old_rpar_leaf: NoneType
    +right_leaves
    +old_rpar_leaf
    +opening_bracket
    +index
    +last_line
    +new_rpar_leaf
    +comma_leaf
    --
    +do_splitter_match(line): TMatchResult
    -{static} _return_match()
    -{static} _else_match()
    -{static} _assert_match()
    -{static} _assign_match()
    -{static} _dict_or_lambda_match()
    +do_transform(line, string_indices)
  }

  class StringParser {
    +DEFAULT_TOKEN: Final
    +START: Final
    +DOT: Final
    +NAME: Final
    +PERCENT: Final
    +SINGLE_FMT_ARG: Final
    +LPAR: Final
    +RPAR: Final
    +DONE: Final
    -_goto
    +idx
    +next_token
    +current_state
    --
    -__init__()
    +parse(leaves, string_idx): int
    -_next_state(leaf): bool
  }

  class Visitor {
    +name
    +name
    +visitf
    --
    +visit(node)
    +visit_default(node)
  }

  class CannotSplit {
  }

  class LineGenerator {
    +complete_line
    +any_open_brackets
    +already_parenthesized
    +lpar
    +rpar
    +is_return_annotation: bool
    +is_return_annotation: bool
    +is_return_annotation: bool
    +prev_type
    +prev_type
    +is_suite_like
    +children
    +internal_stmt
    +next_leaf
    +value
    +lpar
    +rpar
    +index
    +docstring
    +docstring
    +docstring
    +prefix
    +docstring
    +quote_char
    +quote_len
    +docstring
    +docstring_started_empty
    +indent
    +docstring
    +docstring
    +has_trailing_backslash: bool
    +docstring
    +backslash_count
    +has_trailing_backslash: bool
    +docstring: str
    +quote
    +lines
    +last_line_length
    +v
    +Ø
    +assignments
    +assignments: ASSIGNMENTS
    --
    -__init__(mode, features)
    +line(indent)
    +visit_default(node)
    +visit_test(node)
    +visit_INDENT(node)
    +visit_DEDENT(node)
    +visit_stmt(node, keywords, parens)
    +visit_typeparams(node)
    +visit_typevartuple(node)
    +visit_paramspec(node)
    +visit_dictsetmaker(node)
    +visit_funcdef(node)
    +visit_match_case(node)
    +visit_suite(node)
    +visit_simple_stmt(node)
    +visit_async_stmt(node)
    +visit_decorators(node)
    +visit_power(node)
    +visit_SEMI(leaf)
    +visit_ENDMARKER(leaf)
    +visit_STANDALONE_COMMENT(leaf)
    +visit_factor(node)
    +visit_tname(node)
    +visit_STRING(leaf)
    -__post_init__()
  }

  class _BracketSplitComponent {
    +head
    +body
    +tail
  }

  class Changed {
    +NO: int
    +CACHED: int
    +YES: int
  }

  class NothingChanged {
  }

  class Report {
    +check: bool
    +diff: bool
    +quiet: bool
    +verbose: bool
    +change_count: int
    +same_count: int
    +failure_count: int
    +reformatted
    +msg
    +msg
    +reformatted: str
    +unchanged: str
    +failed: str
    +reformatted: str
    +unchanged: str
    +failed: str
    +report
    +s
    +s
    +s
    --
    +done(src, changed)
    +failed(src, message)
    +path_ignored(path, message)
    +return_code(): int
    -__str__(): str
  }

  class ProtoComment {
    +type: int
    +value: str
    +newlines: int
    +consumed: int
  }

}

package "venv2.lib.python3.12.site-packages.ordered_set" {
  class OrderedSet {
    +result
    +append: add
    +item_index: int
    +item_index
    +get_loc: index
    +get_indexer: index
    +elem
    +i
    +other_as_set
    +cls: type
    +cls
    +containers
    +items
    +cls: type
    +items
    +cls
    +common
    +items
    +cls
    +items
    +other
    +items
    +cls: type
    +cls
    +diff1
    +diff2
    +items_to_remove
    +items_as_set
    +other
    +items_to_add
    +items_to_remove
    --
    -__init__(initial)
    -__len__()
    -__getitem__(index)
    -__getitem__(index)
    -__getitem__(index): T
    -__getitem__(index)
    +copy()
    -__getstate__()
    -__setstate__(state)
    -__contains__(key): bool
    +add(key): int
    +update(sequence): int
    +index(key)
    +index(key): int
    +index(key)
    +pop(index): T
    +discard(key)
    +clear()
    -__iter__()
    -__reversed__()
    -__repr__(): str
    -__eq__(other): bool
    +union()
    -__and__(other)
    +intersection()
    +difference()
    +issubset(other): bool
    +issuperset(other): bool
    +symmetric_difference(other)
    -_update_items(items)
    +difference_update()
    +intersection_update(other)
    +symmetric_difference_update(other)
  }

}

package "venv2.lib.python3.12.site-packages.pydantic_core" {
  class ErrorDetails {
    +type: str
    +loc
    +msg: str
    +input: _Any
    +ctx
  }

  class InitErrorDetails {
    +type
    +loc
    +input: _Any
    +ctx
  }

  class ErrorTypeInfo {
    +type: ErrorType
    +message_template_python: str
    +example_message_python: str
    +message_template_json
    +example_message_json
    +example_context
  }

  class MultiHostHost {
    +username
    +password
    +host
    +port
  }

  class CoreConfig {
    +title: str
    +strict: bool
    +extra_fields_behavior: ExtraBehavior
    +typed_dict_total: bool
    +from_attributes: bool
    +loc_by_alias: bool
    +revalidate_instances
    +validate_default: bool
    +populate_by_name: bool
    +str_max_length: int
    +str_min_length: int
    +str_strip_whitespace: bool
    +str_to_lower: bool
    +str_to_upper: bool
    +allow_inf_nan: bool
    +ser_json_timedelta
    +ser_json_bytes
    +ser_json_inf_nan
    +hide_input_in_errors: bool
    +validation_error_cause: bool
    +coerce_numbers_to_str: bool
    +regex_engine
  }

  class SerializationInfo {
    +include(): IncExCall
    +exclude(): IncExCall
    +mode(): str
    +by_alias(): bool
    +exclude_unset(): bool
    +exclude_defaults(): bool
    +exclude_none(): bool
    +round_trip(): bool
    +mode_is_json(): bool
    -__str__(): str
    -__repr__(): str
  }

  class FieldSerializationInfo {
    +field_name(): str
  }

  class ValidationInfo {
    +context()
    +config()
    +mode()
    +data()
    +field_name()
  }

  class SimpleSerSchema {
    +type
  }

  class PlainSerializerFunctionSerSchema {
    +type
    +function
    +is_field_serializer: bool
    +info_arg: bool
    +return_schema: CoreSchema
    +when_used: WhenUsed
  }

  class SerializerFunctionWrapHandler {
    -__call__(__input_value, __index_key): Any
  }

  class WrapSerializerFunctionSerSchema {
    +type
    +function
    +is_field_serializer: bool
    +info_arg: bool
    +schema: CoreSchema
    +return_schema: CoreSchema
    +when_used: WhenUsed
  }

  class FormatSerSchema {
    +type
    +formatting_string
    +when_used: WhenUsed
  }

  class ToStringSerSchema {
    +type
    +when_used: WhenUsed
  }

  class ModelSerSchema {
    +type
    +cls
    +schema
  }

  class ComputedField {
    +type
    +property_name
    +return_schema
    +alias: str
    +metadata: Any
  }

  class AnySchema {
    +type
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class NoneSchema {
    +type
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class BoolSchema {
    +type
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class IntSchema {
    +type
    +multiple_of: int
    +le: int
    +ge: int
    +lt: int
    +gt: int
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class FloatSchema {
    +type
    +allow_inf_nan: bool
    +multiple_of: float
    +le: float
    +ge: float
    +lt: float
    +gt: float
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class DecimalSchema {
    +type
    +allow_inf_nan: bool
    +multiple_of: Decimal
    +le: Decimal
    +ge: Decimal
    +lt: Decimal
    +gt: Decimal
    +max_digits: int
    +decimal_places: int
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class StringSchema {
    +type
    +pattern: str
    +max_length: int
    +min_length: int
    +strip_whitespace: bool
    +to_lower: bool
    +to_upper: bool
    +regex_engine
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class BytesSchema {
    +type
    +max_length: int
    +min_length: int
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class DateSchema {
    +type
    +strict: bool
    +le: date
    +ge: date
    +lt: date
    +gt: date
    +now_op
    +now_utc_offset: int
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class TimeSchema {
    +type
    +strict: bool
    +le: time
    +ge: time
    +lt: time
    +gt: time
    +tz_constraint
    +microseconds_precision
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class DatetimeSchema {
    +type
    +strict: bool
    +le: datetime
    +ge: datetime
    +lt: datetime
    +gt: datetime
    +now_op
    +tz_constraint
    +now_utc_offset: int
    +microseconds_precision
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class TimedeltaSchema {
    +type
    +strict: bool
    +le: timedelta
    +ge: timedelta
    +lt: timedelta
    +gt: timedelta
    +microseconds_precision
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class LiteralSchema {
    +type
    +expected
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class IsInstanceSchema {
    +type
    +cls
    +cls_repr: str
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class IsSubclassSchema {
    +type
    +cls
    +cls_repr: str
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class CallableSchema {
    +type
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class UuidSchema {
    +type
    +version
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class IncExSeqSerSchema {
    +type
    +include
    +exclude
  }

  class ListSchema {
    +type
    +items_schema: CoreSchema
    +min_length: int
    +max_length: int
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: IncExSeqOrElseSerSchema
  }

  class TuplePositionalSchema {
    +type
    +items_schema
    +extras_schema: CoreSchema
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: IncExSeqOrElseSerSchema
  }

  class TupleVariableSchema {
    +type
    +items_schema: CoreSchema
    +min_length: int
    +max_length: int
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: IncExSeqOrElseSerSchema
  }

  class SetSchema {
    +type
    +items_schema: CoreSchema
    +min_length: int
    +max_length: int
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class FrozenSetSchema {
    +type
    +items_schema: CoreSchema
    +min_length: int
    +max_length: int
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class GeneratorSchema {
    +type
    +items_schema: CoreSchema
    +min_length: int
    +max_length: int
    +ref: str
    +metadata: Any
    +serialization: IncExSeqOrElseSerSchema
  }

  class IncExDictSerSchema {
    +type
    +include: IncExDict
    +exclude: IncExDict
  }

  class DictSchema {
    +type
    +keys_schema: CoreSchema
    +values_schema: CoreSchema
    +min_length: int
    +max_length: int
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: IncExDictOrElseSerSchema
  }

  class NoInfoValidatorFunctionSchema {
    +type
    +function: NoInfoValidatorFunction
  }

  class WithInfoValidatorFunctionSchema {
    +type
    +function
    +field_name: str
  }

  class _ValidatorFunctionSchema {
    +function
    +schema
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class BeforeValidatorFunctionSchema {
    +type
  }

  class AfterValidatorFunctionSchema {
    +type
  }

  class ValidatorFunctionWrapHandler {
    -__call__(input_value, outer_location): Any
  }

  class NoInfoWrapValidatorFunctionSchema {
    +type
    +function: NoInfoWrapValidatorFunction
  }

  class WithInfoWrapValidatorFunctionSchema {
    +type
    +function
    +field_name: str
  }

  class WrapValidatorFunctionSchema {
    +type
    +function
    +schema
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class PlainValidatorFunctionSchema {
    +type
    +function
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class WithDefaultSchema {
    +type
    +schema
    +default: Any
    +default_factory
    +on_error
    +validate_default: bool
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class NullableSchema {
    +type
    +schema
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class UnionSchema {
    +type
    +choices
    +auto_collapse: bool
    +custom_error_type: str
    +custom_error_message: str
    +custom_error_context
    +mode
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class TaggedUnionSchema {
    +type
    +choices
    +discriminator
    +custom_error_type: str
    +custom_error_message: str
    +custom_error_context
    +strict: bool
    +from_attributes: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class ChainSchema {
    +type
    +steps
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class LaxOrStrictSchema {
    +type
    +lax_schema
    +strict_schema
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class JsonOrPythonSchema {
    +type
    +json_schema
    +python_schema
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class TypedDictField {
    +type
    +schema
    +required: bool
    +validation_alias
    +serialization_alias: str
    +serialization_exclude: bool
    +metadata: Any
  }

  class TypedDictSchema {
    +type
    +fields
    +computed_fields
    +strict: bool
    +extras_schema: CoreSchema
    +extra_behavior: ExtraBehavior
    +total: bool
    +populate_by_name: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
    +config: CoreConfig
  }

  class ModelField {
    +type
    +schema
    +validation_alias
    +serialization_alias: str
    +serialization_exclude: bool
    +frozen: bool
    +metadata: Any
  }

  class ModelFieldsSchema {
    +type
    +fields
    +model_name: str
    +computed_fields
    +strict: bool
    +extras_schema: CoreSchema
    +extra_behavior: ExtraBehavior
    +populate_by_name: bool
    +from_attributes: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class ModelSchema {
    +type
    +cls
    +schema
    +custom_init: bool
    +root_model: bool
    +post_init: str
    +revalidate_instances
    +strict: bool
    +frozen: bool
    +extra_behavior: ExtraBehavior
    +config: CoreConfig
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class DataclassField {
    +type
    +name
    +schema
    +kw_only: bool
    +init_only: bool
    +frozen: bool
    +validation_alias
    +serialization_alias: str
    +serialization_exclude: bool
    +metadata: Any
  }

  class DataclassArgsSchema {
    +type
    +dataclass_name
    +fields
    +computed_fields
    +populate_by_name: bool
    +collect_init_only: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
    +extra_behavior: ExtraBehavior
  }

  class DataclassSchema {
    +type
    +cls
    +schema
    +fields
    +cls_name: str
    +post_init: bool
    +revalidate_instances
    +strict: bool
    +frozen: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
    +slots: bool
    +config: CoreConfig
  }

  class ArgumentsParameter {
    +name
    +schema
    +mode
    +alias
  }

  class ArgumentsSchema {
    +type
    +arguments_schema
    +populate_by_name: bool
    +var_args_schema: CoreSchema
    +var_kwargs_schema: CoreSchema
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class CallSchema {
    +type
    +arguments_schema
    +function
    +function_name: str
    +return_schema: CoreSchema
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class CustomErrorSchema {
    +type
    +schema
    +custom_error_type
    +custom_error_message: str
    +custom_error_context
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class JsonSchema {
    +type
    +schema: CoreSchema
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class UrlSchema {
    +type
    +max_length: int
    +allowed_schemes
    +host_required: bool
    +default_host: str
    +default_port: int
    +default_path: str
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class MultiHostUrlSchema {
    +type
    +max_length: int
    +allowed_schemes
    +host_required: bool
    +default_host: str
    +default_port: int
    +default_path: str
    +strict: bool
    +ref: str
    +metadata: Any
    +serialization: SerSchema
  }

  class DefinitionsSchema {
    +type
    +schema
    +definitions
    +metadata: Any
    +serialization: SerSchema
  }

  class DefinitionReferenceSchema {
    +type
    +schema_ref
    +metadata: Any
    +serialization: SerSchema
  }

}

package "venv2.lib.python3.12.site-packages.pytest_flask" {
  class LiveServer {
    +keep_trying: bool
    +start_time
    +elapsed_time
    +keep_trying: bool
    +sock
    +ret: bool
    +ret: bool
    --
    -__init__(app, host, port, wait, clean_stop)
    +start()
    +worker(host, port)
    -_is_ready()
    +url(url)
    +stop()
    -_stop_cleanly(timeout)
    -__repr__()
  }

  class JSONResponse {
    -__eq__(other)
    -__ne__(other)
  }

}

package "venv2.lib.python3.12.site-packages._pytest" {
  class Skip {
    +reason: str
  }

  class Xfail {
    +reason: str
    +run: bool
    +strict: bool
    +raises
  }

  class DatetimeFormatter {
    +ct
    +tz
    +dt
    --
    +formatTime(record, datefmt): str
  }

  class ColoredLevelFormatter {
    +LOGLEVEL_COLOROPTS
    +LEVELNAME_FMT_REGEX
    +levelname_fmt_match
    +levelname_fmt
    +formatted_levelname
    +color_kwargs
    +colorized_formatted_levelname
    +fmt
    --
    -__init__(terminalwriter)
    +add_color_level(level)
    +format(record): str
  }

  class PercentStyleMultiline {
    +auto_indent
    +auto_indent
    +lines
    +formatted
    +indentation
    +indentation: auto_indent
    --
    -__init__(fmt, auto_indent)
    -{static} _get_auto_indent(): int
    +format(record): str
  }

  class catching_logs {
    +root_logger
    +root_logger
    --
    -__init__(handler, level)
    -__enter__()
    -__exit__(type, value, traceback)
  }

  class LogCaptureHandler {
    -__init__()
    +emit(record)
    +reset()
    +clear()
    +handleError(record)
  }

  class LogCaptureFixture {
    +logger
    +original_disable_level: int
    +level
    +disable_level
    +logger_obj
    +initial_disabled_logging_level
    +logger_obj
    +orig_level
    +handler_orig_level
    +original_disable_level
    --
    -__init__(item)
    -_finalize()
    +handler(): LogCaptureHandler
    +get_records(when)
    +text(): str
    +records()
    +record_tuples()
    +messages()
    +clear()
    -_force_enable_logging(level, logger_obj): int
    +set_level(level, logger)
    +at_level(level, logger)
  }

  class LoggingPlugin {
    +log_file
    +directory
    +log_file_format
    +log_file_date_format
    +log_file_formatter
    +terminal_reporter
    +capture_manager
    +log_cli_formatter
    +logger
    +color
    +formatter: logging.Formatter
    +formatter
    +fpath
    +fpath
    +stream: io.TextIOWrapper
    +old_stream
    +enabled
    +terminal_reporter
    +log
    +empty
    --
    -__init__(config)
    -_disable_loggers(loggers_to_disable)
    -_create_formatter(log_format, log_date_format, auto_indent)
    +set_log_path(fname)
    -_log_cli_enabled()
    +pytest_sessionstart()
    +pytest_collection()
    +pytest_runtestloop(session)
    +pytest_runtest_logstart()
    +pytest_runtest_logreport()
    -_runtest_for(item, when)
    +pytest_runtest_setup(item)
    +pytest_runtest_call(item)
    +pytest_runtest_teardown(item)
    +pytest_runtest_logfinish()
    +pytest_sessionfinish()
    +pytest_unconfigure()
  }

  class _FileHandler {
    +handleError(record)
  }

  class _LiveLoggingStreamHandler {
    +stream: TerminalReporter
    +ctx_manager
    --
    -__init__(terminal_reporter, capture_manager)
    +reset()
    +set_when(when)
    +emit(record)
    +handleError(record)
  }

  class _LiveLoggingNullHandler {
    +reset()
    +set_when(when)
    +handleError(record)
  }

  class UnitTestCase {
    +nofuncargs: bool
    +cls
    +skipped
    +loader
    +foundsomething: bool
    +x
    +funcobj
    +foundsomething: bool
    +runtest
    +ut
    +class_fixture
    +method_fixture
    --
    +collect()
    -_inject_setup_teardown_fixtures(cls)
  }

  class TestCaseFunction {
    +nofuncargs: bool
    -_excinfo
    -_testcase
    +rawexcinfo
    +excinfo
    +values
    +excinfo
    +msg: str
    +skipped
    +traceback
    +ntraceback
    +ntraceback: traceback
    --
    -_getobj()
    +setup()
    +teardown()
    +startTest(testcase)
    -_addexcinfo(rawexcinfo)
    +addError(testcase, rawexcinfo)
    +addFailure(testcase, rawexcinfo)
    +addSkip(testcase, reason)
    +addExpectedFailure(testcase, rawexcinfo, reason)
    +addUnexpectedSuccess(testcase, reason)
    +addSuccess(testcase)
    +stopTest(testcase)
    +addDuration(testcase, elapsed)
    +runtest()
    -_traceback_filter(excinfo): _pytest._code.Traceback
  }

  class CallInfo {
    -_result
    +excinfo
    +start: float
    +stop: float
    +duration: float
    +when
    +excinfo: NoneType
    +start
    +precise_start
    +result
    +excinfo
    +result: NoneType
    +precise_stop
    +duration
    +stop
    --
    -__init__(result, excinfo, start, stop, duration, when)
    +result(): TResult
    +{class} from_call(func, when, reraise)
    -__repr__(): str
  }

  class SetupState {
    +needed_collectors
    +needed_collectors
    +exceptions
    +these_exceptions
    +fin
    +msg
    --
    -__init__()
    +setup(item)
    +addfinalizer(finalizer, node)
    +teardown_exact(nextitem)
  }

  class HelpAction {
    -__init__(option_strings, dest, default, help)
    -__call__(parser, namespace, values, option_string)
  }

  class NotSetType {
    +token: int
  }

  class _PytestWrapper {
    +obj: Any
  }

  class cached_property {
    +value
    --
    -__init__(func)
    -__get__(instance, owner)
    -__get__(instance, owner): _T
    -__get__(instance, owner)
  }

  class MoreQuietAction {
    +new_count
    --
    -__init__(option_strings, dest, default, required, help)
    -__call__(parser, namespace, values, option_string)
  }

  class TestShortLogReport {
    +category: str
    +letter: str
    +word
  }

  class WarningReport {
    +message: str
    +nodeid
    +fslocation
    +count_towards_summary: ClassVar
    +relpath
    --
    +get_location(config)
  }

  class TerminalReporter {
    +file
    +cfg: str
    +verbosity: int
    +char
    +fspath
    +relfspath
    +width_of_current_line
    +wrapped
    +wrapped
    +line
    +erase
    +fill_count
    +fill
    +fill: str
    +line
    +set_main_color
    +fslocation
    +message
    +warning_report
    +msg
    +line
    +rep: report
    +res
    +markup: NoneType
    +running_xdist
    +was_xfail
    +markup
    +markup
    +markup
    +markup
    +markup
    +line
    +reason
    +available_width
    +formatted_reason
    +formatted_reason
    +num_tests
    +progress_length
    +progress_length
    +w
    +past_edge
    +msg
    +collected
    +progress
    +counter_format
    +format_string
    +msg
    +w
    +fill
    +items
    +t
    +errors
    +skipped
    +deselected
    +selected
    +line
    +verinfo
    +msg
    +pypy_version_info
    +verinfo
    +lines
    +result
    +testpaths
    +plugininfo
    +lines
    +failed
    +counts
    +stack
    +indent: str
    +needed_collectors
    +indent
    +obj
    +doc
    +outcome
    +summary_exit_codes
    +excrepr
    +msg
    +line
    +line
    +values
    +res
    +res: str
    +head_line
    +all_warnings
    +final
    +warning_reports
    +warning_reports: all_warnings
    +reports_grouped_by_message
    +locations
    +location
    +counts_by_filename
    +title
    +maybe_location
    +lines
    +indented
    +message
    +message
    +reports
    +msg
    +reports
    +showcapture
    +content
    +reports
    +line
    +msg
    +reports
    +msg
    +msg
    +msg
    +showcapture
    +content
    +session_duration
    +line_parts
    +display_sep
    +fullwidth
    +with_markup
    +msg
    +main_markup
    +duration
    +duration_with_markup
    +markup_for_end_sep
    +markup_for_end_sep
    +failed
    +config
    +color
    +line
    +xfailed
    +verbose_word
    +markup_word
    +nodeid
    +line
    +reason
    +xpassed
    +verbose_word
    +markup_word
    +nodeid
    +reason
    +skipped
    +fskips
    +verbose_word
    +markup_word
    +prefix: str
    +reason
    +REPORTCHAR_ACTIONS
    +lines
    +action
    +stats
    +main_color: str
    +main_color: str
    +main_color: str
    +main_color: str
    +unknown_types
    +reports
    +parts
    +reports
    +count
    +color
    +markup
    +parts
    +deselected
    +errors
    +parts
    +main_color: str
    +main_color: str
    +collected_output
    +parts
    +all_tests_were_deselected
    +main_color: str
    +collected_output
    +main_color: str
    +selected
    +collected_output
    +parts
    +main_color
    --
    -__init__(config, file)
    -_determine_show_progress_info()
    +verbosity(): int
    +showheader(): bool
    +no_header(): bool
    +no_summary(): bool
    +showfspath(): bool
    +showfspath(value)
    +showlongtestinfo(): bool
    +hasopt(char): bool
    +write_fspath_result(nodeid, res)
    +write_ensure_prefix(prefix, extra)
    +ensure_newline()
    +wrap_write(content)
    +write(content)
    +flush()
    +write_line(line)
    +rewrite(line)
    +write_sep(sep, title, fullwidth)
    +section(title, sep)
    +line(msg)
    -_add_stats(category, items)
    +pytest_internalerror(excrepr): bool
    +pytest_warning_recorded(warning_message, nodeid)
    +pytest_plugin_registered(plugin)
    +pytest_deselected(items)
    +pytest_runtest_logstart(nodeid, location)
    +pytest_runtest_logreport(report)
    -_is_last_item(): bool
    +pytest_runtest_logfinish(nodeid)
    -_get_progress_information_message(): str
    -_write_progress_information_filling_space()
    -_width_of_current_line(): int
    +pytest_collection()
    +pytest_collectreport(report)
    +report_collect(final)
    +pytest_sessionstart(session)
    -_write_report_lines_from_hooks(lines)
    +pytest_report_header(config)
    +pytest_collection_finish(session)
    -_printcollecteditems(items)
    +pytest_sessionfinish(session, exitstatus)
    +pytest_terminal_summary()
    +pytest_keyboard_interrupt(excinfo)
    +pytest_unconfigure()
    -_report_keyboardinterrupt()
    -_locationline(nodeid, fspath, lineno, domain): str
    +mkrel(): str
    -_getfailureheadline(rep)
    -_getcrashline(rep)
    +getreports(name)
    +summary_warnings()
    +collapsed_location_report(): str
    +summary_passes()
    -_get_teardown_reports(nodeid)
    -_handle_teardown_sections(nodeid)
    +print_teardown_sections(rep)
    +summary_failures()
    +summary_errors()
    -_outrep_summary(rep)
    +summary_stats()
    +short_test_summary()
    +show_simple()
    +show_xfailed()
    +show_xpassed()
    +show_skipped()
    -_get_main_color()
    -_determine_main_color(unknown_type_seen): str
    -_set_main_color()
    +build_summary_stats_line()
    -_get_reports_to_display(key)
    -_build_normal_summary_stats_line()
    -_build_collect_only_summary_stats_line()
  }

  class WarningsRecorder {
    -__init__()
    +list()
    -__getitem__(i)
    -__iter__()
    -__len__(): int
    +pop(cls)
    +clear()
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class WarningsChecker {
    +msg: str
    +expected_warning_tup: NoneType
    +expected_warning_tup: expected_warning
    +expected_warning_tup
    --
    -__init__(expected_warning, match_expr)
    -__exit__(exc_type, exc_val, exc_tb)
    +found_str()
  }

  class TempPathFactory {
    -_given_basetemp
    -_trace: Any
    -_basetemp
    -_retention_count: int
    -_retention_policy
    +count
    +policy
    +basename
    +basename
    +p
    +p
    +basetemp
    +basetemp
    +from_env
    +temproot
    +user
    +rootdir
    +rootdir
    +uid
    +rootdir_stat
    +keep
    +keep: int
    +basetemp
    --
    -__init__(given_basetemp, retention_count, retention_policy, trace, basetemp)
    +{class} from_config(config)
    -_ensure_relative_to_basetemp(basename): str
    +mktemp(basename, numbered): Path
    +getbasetemp(): Path
  }

  class StashKey {
  }

  class Stash {
    -__init__()
    -__setitem__(key, value)
    -__getitem__(key): T
    +get(key, default)
    +setdefault(key, default): T
    -__delitem__(key)
    -__contains__(key): bool
    -__len__(): int
  }

  class pytestPDB {
    -_pluginmanager
    -_config
    -_saved
    -_wrapped_pdb_cls
    +usepdb_cls
    +mod
    +parts
    +pdb_cls
    +pdb_cls
    +value
    +pdb_cls
    +wrapped_cls
    --
    -{class} _is_capturing(capman)
    -{class} _import_pdb_cls(capman)
    -{class} _get_pdb_wrapper_class(pdb_cls, capman)
  }

  class PytestPdbWrapper {
    +ret
    +ret
    +tw
    +capman
    +capturing
    +do_c: do_continue
    +do_cont: do_continue
    +ret
    +do_q: do_quit
    +do_exit: do_quit
    +ret
    +i
    --
    +do_debug(arg)
    +do_continue(arg)
    +do_quit(arg)
    +setup(f, tb)
    +get_stack(f, t)
  }

  class PdbInvoke {
    +capman
    +tb
    --
    +pytest_exception_interact(node, call, report)
    +pytest_internalerror(excinfo)
  }

  class PdbTrace {
    +pytest_pyfunc_call(pyfuncitem)
  }

  class ApproxBase {
    -__init__(expected, rel, abs, nan_ok)
    -__repr__(): str
    -_repr_compare(other_side)
    -__eq__(actual): bool
    -__bool__()
    -__ne__(actual): bool
    -_approx_scalar(x)
    -_yield_comparisons(actual)
    -_check_type()
  }

  class ApproxNumpy {
    +list_scalars
    +value: Any
    +value
    +np_array_shape
    +approx_side_as_seq
    +number_of_elements
    +max_abs_diff
    +max_rel_diff
    +different_ids
    +approx_value
    +other_value
    +abs_diff
    +max_abs_diff
    +max_rel_diff
    +max_rel_diff
    +message_data
    +actual
    --
    -__repr__(): str
    -_repr_compare(other_side)
    +get_value_from_nested_list(nd_index): Any
    -__eq__(actual): bool
    -_yield_comparisons(actual)
  }

  class ApproxMapping {
    +approx_side_as_map
    +number_of_elements
    +max_abs_diff
    +max_rel_diff
    +different_ids
    +max_abs_diff
    +max_rel_diff
    +max_rel_diff
    +message_data
    +msg: str
    --
    -__repr__(): str
    -_repr_compare(other_side)
    -__eq__(actual): bool
    -_yield_comparisons(actual)
    -_check_type()
  }

  class ApproxSequenceLike {
    +seq_type
    +seq_type: list
    +approx_side_as_map
    +number_of_elements
    +max_abs_diff
    +max_rel_diff
    +different_ids
    +abs_diff
    +max_abs_diff
    +max_rel_diff
    +max_rel_diff
    +message_data
    +msg: str
    --
    -__repr__(): str
    -_repr_compare(other_side)
    -__eq__(actual): bool
    -_yield_comparisons(actual)
    -_check_type()
  }

  class ApproxScalar {
    +DEFAULT_ABSOLUTE_TOLERANCE
    +DEFAULT_RELATIVE_TOLERANCE
    +vetted_tolerance
    +vetted_tolerance: str
    +asarray
    +result: bool
    +absolute_tolerance
    +relative_tolerance
    --
    -__repr__(): str
    -__eq__(actual): bool
    +tolerance()
    +set_default(default)
  }

  class ApproxDecimal {
    +DEFAULT_ABSOLUTE_TOLERANCE
    +DEFAULT_RELATIVE_TOLERANCE
  }

  class RaisesContext {
    +exc_info
    --
    -__init__(expected_exception, message, match_expr)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb): bool
  }

  class FastFilesCompleter {
    +prefix_dir
    +prefix_dir: int
    +completion
    +globbed
    --
    -__init__(directories)
    -__call__(prefix)
  }

  class catch_unraisable_exception {
    -__init__()
    -_hook(unraisable)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class EncodedFile {
    +name(): str
    +mode(): str
  }

  class CaptureIO {
    -__init__()
    +getvalue(): str
  }

  class TeeCaptureIO {
    -__init__(other)
    +write(s): int
  }

  class DontReadFromInput {
    +readline: read
    --
    +encoding(): str
    +read(size): str
    -__next__(): str
    +readlines(hint)
    -__iter__()
    +fileno(): int
    +flush()
    +isatty(): bool
    +close()
    +readable(): bool
    +seek(offset, whence): int
    +seekable(): bool
    +tell(): int
    +truncate(size): int
    +write(data): int
    +writelines(lines)
    +writable(): bool
    -__enter__()
    -__exit__(type, value, traceback)
    +buffer(): BinaryIO
  }

  class CaptureBase {
    +EMPTY_BUFFER: AnyStr
    --
    -__init__(fd)
    +start()
    +done()
    +suspend()
    +resume()
    +writeorg(data)
    +snap(): AnyStr
  }

  class NoCapture {
    +EMPTY_BUFFER: str
    --
    -__init__(fd)
    +start()
    +done()
    +suspend()
    +resume()
    +snap(): str
    +writeorg(data)
  }

  class SysCaptureBase {
    +name
    +tmpfile
    +tmpfile
    --
    -__init__(fd, tmpfile)
    +repr(class_name): str
    -__repr__(): str
    -_assert_state(op, states)
    +start()
    +done()
    +suspend()
    +resume()
  }

  class SysCaptureBinary {
    +EMPTY_BUFFER: bytes
    +res
    --
    +snap(): bytes
    +writeorg(data)
  }

  class SysCapture {
    +EMPTY_BUFFER: str
    +res
    --
    +snap(): str
    +writeorg(data)
  }

  class FDCaptureBase {
    -__init__(targetfd)
    -__repr__(): str
    -_assert_state(op, states)
    +start()
    +done()
    +suspend()
    +resume()
  }

  class FDCaptureBinary {
    +EMPTY_BUFFER: bytes
    +res
    --
    +snap(): bytes
    +writeorg(data)
  }

  class FDCapture {
    +EMPTY_BUFFER: str
    +res
    --
    +snap(): str
    +writeorg(data)
  }

  class CaptureResult {
  }

  class MultiCapture {
    +out
    +err
    --
    -__init__(in_, out, err)
    -__repr__(): str
    +start_capturing()
    +pop_outerr_to_orig()
    +suspend_capturing(in_)
    +resume_capturing()
    +stop_capturing()
    +is_started(): bool
    +readouterr()
  }

  class CaptureManager {
    +current_fixture
    +requested_fixture
    +do_fixture
    +do_global
    +outcome
    +rep
    --
    -__init__(method)
    -__repr__(): str
    +is_capturing()
    +is_globally_capturing(): bool
    +start_global_capturing()
    +stop_global_capturing()
    +resume_global_capture()
    +suspend_global_capture(in_)
    +suspend(in_)
    +resume()
    +read_global_capture()
    +set_fixture(capture_fixture)
    +unset_fixture()
    +activate_fixture()
    +deactivate_fixture()
    +suspend_fixture()
    +resume_fixture()
    +global_and_fixture_disabled()
    +item_capture(when, item)
    +pytest_make_collect_report(collector)
    +pytest_runtest_setup(item)
    +pytest_runtest_call(item)
    +pytest_runtest_teardown(item)
    +pytest_keyboard_interrupt()
    +pytest_internalerror()
  }

  class CaptureFixture {
    +capmanager: CaptureManager
    --
    -__init__(captureclass, request)
    -_start()
    +close()
    +readouterr()
    -_suspend()
    -_resume()
    -_is_started(): bool
    +disabled()
  }

  class LsofFdLeakChecker {
    +out
    +open_files
    +fields
    +fd
    +filename
    +lines1
    +lines2
    +new_fds
    +leaked_files
    +error
    --
    +get_open_files()
    +isopen(): bool
    +matching_platform(): bool
    +pytest_runtest_protocol(item)
  }

  class PytestArg {
    +hookrecorder
    --
    -__init__(request)
    +gethookrecorder(hook)
  }

  class RecordedHookCall {
    +d
    --
    -__init__(name, kwargs)
    -__repr__(): str
    -__getattr__(key)
  }

  class HookRecorder {
    +names
    +i: int
    +entries
    +backlocals
    +lines
    +values
    +values
    +passed
    +skipped
    +failed
    +outcomes
    --
    -__init__(pluginmanager)
    +before(hook_impls, kwargs)
    +after(hook_name, hook_impls, kwargs)
    +finish_recording()
    +getcalls(names)
    +assert_contains(entries)
    +popcall(name): RecordedHookCall
    +getcall(name): RecordedHookCall
    +getreports(names)
    +getreports(names)
    +getreports(names)
    +getreports(names)
    +matchreport(inamepart, names, when)
    +getfailures(names)
    +getfailures(names)
    +getfailures(names)
    +getfailures(names)
    +getfailedcollections()
    +listoutcomes()
    +countoutcomes()
    +assertoutcome(passed, skipped, failed)
    +clear()
  }

  class RunResult {
    +outcomes
    +ret
    +to_plural
    +outcomes
    --
    -__init__(ret, outlines, errlines, duration)
    -__repr__(): str
    +parseoutcomes()
    +{class} parse_summary_nouns(lines)
    +assert_outcomes(passed, skipped, failed, errors, xpassed, xfailed, warnings, deselected)
  }

  class CwdSnapshot {
    -__init__()
    +restore()
  }

  class SysModulesSnapshot {
    -__init__(preserve)
    +restore()
  }

  class SysPathsSnapshot {
    -__init__()
    +restore()
  }

  class Pytester {
    +CLOSE_STDIN
  }

  class TimeoutExpired {
  }

  class Collect {
    +pytest_configure(config)
  }

  class reprec {
    +ret
  }

  class LineComp {
    +val
    +lines1
    --
    -__init__()
    +assert_contains_lines(lines2)
  }

  class LineMatcher {
    +lines2
    +lines2
    +lines2
    +msg
    +lines2
    +lines1
    +extralines
    +wnick
    +started: bool
    +nomatchprinted: bool
    +nextline
    +started: bool
    +started: bool
    +msg
    +nomatchprinted: bool
    +msg
    +nomatch_printed: bool
    +wnick
    +msg
    +nomatch_printed: bool
    +log_text
    --
    -__init__(lines)
    -__str__(): str
    -_getlines(lines2)
    +fnmatch_lines_random(lines2)
    +re_match_lines_random(lines2)
    -_match_lines_random(lines2, match_func)
    +get_lines_after(fnline)
    -_log()
    -_log_text(): str
    +fnmatch_lines(lines2)
    +re_match_lines(lines2)
    -_match_lines(lines2, match_func, match_nickname)
    +no_fnmatch_line(pat)
    +no_re_match_line(pat)
    -_no_match_line(pat, match_func, match_nickname)
    -_fail(msg)
    +str(): str
  }

  class OutcomeException {
    +error_msg: str
    --
    -__init__(msg, pytrace)
    -__repr__(): str
  }

  class Skipped {
    -__init__(msg, pytrace, allow_module_level)
  }

  class Failed {
  }

  class Exit {
    -__init__(msg, returncode)
  }

  class _WithException {
    +Exception: _ET
    -__call__: _F
  }

  class XFailed {
  }

  class StepwisePlugin {
    +failed_index: NoneType
    +failed_index: index
    +deselected
    --
    -__init__(config)
    +pytest_sessionstart(session)
    +pytest_collection_modifyitems(config, items)
    +pytest_runtest_logreport(report)
    +pytest_report_collectionfinish()
    +pytest_sessionfinish()
  }

  class _NodeReporter {
    +properties
    +names
    +existing_attrs
    +classnames
    +attrs
    +temp_attrs
    +testcase
    +properties
    +node
    +content_out
    +content_log
    +content_err
    +content_all: str
    +content_all
    +content_all: str
    +content_all: str
    +tag
    +reprcrash
    +message
    +message
    +message
    +reprcrash
    +reason
    +reason
    +msg
    +msg
    +xfailreason
    +xfailreason
    +xfailreason
    +skipped
    +skipreason
    +details
    +skipped
    +data
    --
    -__init__(nodeid, xml)
    +append(node)
    +add_property(name, value)
    +add_attribute(name, value)
    +make_properties_node()
    +record_testreport(testreport)
    +to_xml(): ET.Element
    -_add_simple(tag, message, data)
    +write_captured_output(report)
    -_prepare_content(content, header): str
    -_write_content(report, content, jheader)
    +append_pass(report)
    +append_failure(report)
    +append_collect_error(report)
    +append_collect_skipped(report)
    +append_error(report)
    +append_skipped(report)
    +finalize()
  }

  class LogXML {
    +logfile
    +nodeid
    +workernode
    +reporter
    +nodeid
    +workernode
    +key
    +reporter
    +reporter
    +close_report: NoneType
    +reporter
    +report_wid
    +report_ii
    +close_report
    +reporter
    +reporter
    +reporter
    +report_wid
    +report_ii
    +close_report
    +reporter
    +reporter
    +reporter
    +dirname
    +suite_stop_time
    +suite_time_delta
    +numtests
    +suite_node
    +global_properties
    +testsuites
    +properties
    --
    -__init__(logfile, prefix, suite_name, logging, report_duration, family, log_passing_tests)
    +finalize(report)
    +node_reporter(report): _NodeReporter
    +add_stats(key)
    -_opentestcase(report): _NodeReporter
    +pytest_runtest_logreport(report)
    +update_testcase_duration(report)
    +pytest_collectreport(report)
    +pytest_internalerror(excrepr)
    +pytest_sessionstart()
    +pytest_sessionfinish()
    +pytest_terminal_summary(terminalreporter)
    +add_global_property(name, value)
    -_get_global_properties_node()
  }

  class PyobjMixin {
    +node
    +node
    +node
    +obj
    +obj
    +obj
    +chain
    +parts
    +name
    +name
    +obj
    +compat_co_firstlineno
    +file_path
    +file_path
    +path
    +lineno: compat_co_firstlineno
    +modpath
    --
    +module()
    +cls()
    +instance()
    +obj()
    +obj(value)
    -_getobj()
    +getmodpath(stopatmodule, includemodule): str
    +reportinfo()
  }

  class _EmptyClass {
  }

  class PyCollector {
    +obj
    +dicts
    +seen
    +dict_values
    +ihook
    +values
    +res
    +result
    +modulecol
    +module
    +clscol
    +cls
    +definition
    +fixtureinfo
    +metafunc
    +methods
    +fm
    +subname
    --
    +funcnamefilter(name): bool
    +isnosetest(obj): bool
    +classnamefilter(name): bool
    +istestfunction(obj, name): bool
    +istestclass(obj, name): bool
    -_matches_prefix_or_glob_option(option_name, name): bool
    +collect()
    -_genfunctions(name, funcobj)
  }

  class Module {
    +has_nose
    +setup_module
    +setup_module
    +setup_module: NoneType
    +teardown_module
    +teardown_module
    +teardown_module: NoneType
    +setup_function
    +teardown_function
    +importmode
    +mod
    +exc_info
    +exc_repr
    +formatted_tb
    --
    -_getobj()
    +collect()
    -_inject_setup_module_fixture()
    +xunit_setup_module_fixture()
    -_inject_setup_function_fixture()
    +xunit_setup_function_fixture()
    -_importtestmodule()
  }

  class Package {
    +session
    +setup_module
    +teardown_module
    +func
    +fspath
    +ihook
    +ihook
    +keepduplicates
    +duplicate_paths
    +this_path
    +pkg_prefixes
    +path
    +parts_
    --
    -__init__(fspath, parent, config, session, nodeid, path)
    +setup()
    -_recurse(direntry): bool
    -_collectfile(fspath, handle_dupes)
    +collect()
  }

  class Class {
    +setup_class
    +teardown_class
    +func
    +func
    +has_nose
    +setup_name: str
    +setup_method
    +emit_nose_setup_warning: bool
    +setup_name: str
    +emit_nose_setup_warning: bool
    +setup_method
    +teardown_name: str
    +teardown_method
    +emit_nose_teardown_warning: bool
    +teardown_name: str
    +emit_nose_teardown_warning: bool
    +teardown_method
    +method
    +func
    +func
    --
    +{class} from_parent(parent)
    +newinstance()
    +collect()
    -_inject_setup_class_fixture()
    +xunit_setup_class_fixture()
    -_inject_setup_method_fixture()
    +xunit_setup_method_fixture(request)
  }

  class InstanceDummy {
  }

  class IdMaker {
    +argnames
    +parametersets
    +idfn
    +ids
    +config
    +nodeid
    +func_name
    +resolved_ids
    +id_counts
    +id_suffixes
    +idval
    +idval
    +idval
    +id
    +prefix
    +msg: str
    +msg
    +id
    +name: str
    +id
    +prefix
    +prefix
    +prefix: str
    +msg
    --
    +make_unique_parameterset_ids()
    -_resolve_ids()
    -_idval(val, argname, idx): str
    -_idval_from_function(val, argname, idx)
    -_idval_from_hook(val, argname)
    -_idval_from_value(val)
    -_idval_from_value_required(val, idx): str
    -{static} _idval_from_argname(idx): str
  }

  class CallSpec2 {
    +funcargs
    +params
    +indices
    -_arg2scope
    -_idlist
    +marks
    +funcargs
    +params
    +indices
    +arg2scope
    +valtype_for_arg
    --
    +setmulti()
    +getparam(name): object
    +id(): str
  }

  class Metafunc {
    +scope_
    +scope_
    +arg_values_types
    +generated_ids
    +ids: generated_ids
    +ids
    +newcalls
    +newcallspec
    +idfn: NoneType
    +ids_: NoneType
    +idfn: ids
    +ids_: NoneType
    +idfn: NoneType
    +ids_
    +id_maker
    +num_ids
    +num_ids
    +msg: str
    +valtypes
    +valtypes
    +default_arg_names
    +func_name
    +name
    +name
    --
    -__init__(definition, fixtureinfo, config, cls, module)
    +parametrize(argnames, argvalues, indirect, ids, scope)
    -_resolve_parameter_set_ids(argnames, ids, parametersets, nodeid)
    -_validate_ids(ids, parametersets, func_name)
    -_resolve_arg_value_types(argnames, indirect)
    -_validate_if_using_arg_names(argnames, indirect)
  }

  class Function {
    +fixtureinfo
    +parent_obj
    +parent_obj
    +code
    +traceback
    +ntraceback
    +ntraceback
    +ntraceback
    +ntraceback: traceback
    +ntraceback
    +ntraceback
    +style
    +style: str
    --
    -__init__(name, parent, config, callspec, callobj, keywords, session, fixtureinfo, originalname)
    +{class} from_parent(parent)
    -_initrequest()
    +function()
    -_getobj()
    -_pyfuncitem()
    +runtest()
    +setup()
    -_traceback_filter(excinfo): Traceback
    +repr_failure(excinfo)
  }

  class FunctionDefinition {
    +setup: runtest
    --
    +runtest()
  }

  class BaseReport {
    +when
    +location
    +longrepr
    +sections
    +nodeid: str
    +outcome
    +worker_info
    +longrepr
    +longrepr_terminal
    +s
    +s: str
    +file
    +tw
    +exc
    +kwargs
    --
    -__init__()
    -__getattr__(key): Any
    +toterminal(out)
    +get_sections(prefix)
    +longreprtext(): str
    +caplog(): str
    +capstdout(): str
    +capstderr(): str
    +passed(): bool
    +failed(): bool
    +skipped(): bool
    +fspath(): str
    +count_towards_summary(): bool
    +head_line()
    -_get_verbose_word(config)
    -_to_json()
    -{class} _from_json(reportdict): _R
  }

  class TestReport {
    +when
    +duration
    +start
    +stop
    +keywords
    +excinfo
    +sections
    +outcome
    +longrepr
    +outcome: str
    +longrepr: excinfo
    +outcome: str
    +r
    +longrepr
    +longrepr
    +outcome: str
    +longrepr
    +longrepr
    --
    -__init__(nodeid, location, keywords, outcome, longrepr, when, sections, duration, start, stop, user_properties)
    -__repr__(): str
    +{class} from_item_and_call(item, call)
  }

  class CollectReport {
    +when: str
    --
    -__init__(nodeid, outcome, longrepr, result, sections)
    +location()
    -__repr__(): str
  }

  class CollectErrorRepr {
    -__init__(msg)
    +toterminal(out)
  }

  class ReprFailDoctest {
    -__init__(reprlocation_lines)
    +toterminal(tw)
  }

  class MultipleDoctestFailures {
    -__init__(failures)
  }

  class PytestDoctestRunner {
    +failure
    +failure
    --
    -__init__(checker, verbose, optionflags, continue_on_failure)
    +report_failure(out, test, example, got)
    +report_unexpected_exception(out, test, example, exc_info)
  }

  class DoctestItem {
    +globs
    +failures
    +capman
    +failures
    +failures
    +failures
    +reprlocation_lines
    +example
    +test
    +filename
    +lineno: NoneType
    +lineno
    +message
    +reprlocation
    +checker
    +report_choice
    +lines
    +lines
    +lines
    +lines
    +indent: str
    +indent: str
    +inner_excinfo
    --
    -__init__(name, parent, runner, dtest)
    +{class} from_parent(parent)
    +setup()
    +runtest()
    -_disable_output_capturing_for_darwin()
    +repr_failure(excinfo)
    +reportinfo()
  }

  class DoctestTextfile {
    +obj: NoneType
    +encoding
    +text
    +filename
    +name
    +globs
    +optionflags
    +runner
    +parser
    +test
    --
    +collect()
  }

  class DoctestModule {
    +collect()
  }

  class MockAwareDocTestFinder {
    +obj
    +obj
    +object
    --
    -_find_lineno(obj, source_lines)
    -_find(tests, obj, name, module, source_lines, globs, seen)
    -_from_module(module, object)
  }

  class LiteralsOutputChecker {
    +allow_unicode
    +allow_bytes
    +allow_number
    +want
    +got
    +want
    +got
    +got
    +wants
    +gots
    +offset: int
    +fraction
    +exponent
    +exponent
    +precision
    +got
    --
    +check_output(want, got, optionflags): bool
    +remove_prefixes(txt): str
    -_remove_unwanted_precision(want, got): str
  }

  class NodeMeta {
    +msg
    +sig
    +known_kw
    --
    -__call__()
    -_create()
  }

  class Node {
    +fspath: LEGACY_PATH
    +path
    +chain
    +item
    +item
    +marker_: marker
    +marker_
    +extra_keywords
    +current
    +current
    +excinfo
    +style: str
    +tbfilter
    +style: str
    +tbfilter: bool
    +tbfilter
    +style: str
    +style: str
    +style: str
    +truncate_locals: bool
    +truncate_locals: bool
    +abspath
    +abspath: bool
    --
    -__init__(name, parent, config, session, fspath, path, nodeid)
    +{class} from_parent(parent)
    +ihook()
    -__repr__(): str
    +warn(warning)
    +nodeid(): str
    -__hash__(): int
    +setup()
    +teardown()
    +listchain()
    +add_marker(marker, append)
    +iter_markers(name)
    +iter_markers_with_node(name)
    +get_closest_marker(name)
    +get_closest_marker(name, default): Mark
    +get_closest_marker(name, default)
    +listextrakeywords()
    +listnames()
    +addfinalizer(fin)
    +getparent(cls)
    -_traceback_filter(excinfo): Traceback
    -_repr_failure_py(excinfo, style): TerminalRepr
    +repr_failure(excinfo, style)
  }

  class Collector {
  }

  class CollectError {
  }

  class FSCollector {
    +parent
    +path: path_or_parent
    +path
    +name
    +rel
    +name
    +name
    +session
    +nodeid
    +nodeid
    +nodeid
    --
    -__init__(fspath, path_or_parent, path, name, parent, config, session, nodeid)
    +{class} from_parent(parent)
    +gethookproxy(fspath)
    +isinitpath(path): bool
  }

  class File {
  }

  class Item {
    +nextitem: NoneType
    +cls
    +attr_name: str
    +problems
    +location
    +path
    +relfspath
    --
    -__init__(name, parent, config, session, nodeid)
    -_check_item_and_collector_diamond_inheritance()
    +runtest()
    +add_report_section(when, key, content)
    +reportinfo()
    +location()
  }

  class catch_threading_exception {
    -__init__()
    -_hook(args)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class FSHookProxy {
    +x
    --
    -__init__(pm, remove_mods)
    -__getattr__(name)
  }

  class Interrupted {
  }

  class _bestrelpath_cache {
    +path: Path
    +r
    --
    -__missing__(path): str
  }

  class Session {
    +Interrupted: Interrupted
    +Failed: Failed
    -_setupstate: SetupState
    -_fixturemanager: FixtureManager
    +exitstatus
    +session: Session
    +maxfail
    +pytest_collectreport: pytest_runtest_logreport
    +path_
    +path
    +pm
    +my_conftestmodules
    +remove_mods
    +proxy
    +proxy
    +fspath
    +ihook
    +ihook
    +keepduplicates
    +duplicate_paths
    +args
    +hook
    +items
    +initialpaths
    +rep
    +errors
    +items
    +node_cache1
    +node_cache2
    +matchnodes_cache
    +pkg_roots
    +pm
    +pkginit
    +col
    +seen_dirs
    +path
    +dirpath
    +pkginit
    +key2
    +col
    +collect_root
    +col
    +matching
    +work
    +key
    +rep
    +rep
    +submatchnodes
    +report_arg
    +rep
    --
    -__init__(config)
    +{class} from_config(config)
    -__repr__(): str
    +startpath(): Path
    -_node_location_to_relpath(node_path): str
    +pytest_collectstart()
    +pytest_runtest_logreport(report)
    +isinitpath(path): bool
    +gethookproxy(fspath)
    -_recurse(direntry): bool
    -_collectfile(fspath, handle_dupes)
    +perform_collect(args, genitems)
    +perform_collect(args, genitems)
    +perform_collect(args, genitems)
    +collect()
    +genitems(node)
  }

  class Notset {
    -__repr__(): str
  }

  class MonkeyPatch {
    +m
    +value: name
    +oldval
    +oldval
    +oldval
    +oldval
    +value
    +value
    +environ
    --
    -__init__()
    +{class} context()
    +setattr(target, name, value, raising)
    +setattr(target, name, value, raising)
    +setattr(target, name, value, raising)
    +delattr(target, name, raising)
    +setitem(dic, name, value)
    +delitem(dic, name, raising)
    +setenv(name, value, prepend)
    +delenv(name, raising)
    +syspath_prepend(path)
    +chdir(path)
    +undo()
  }

  class Testdir {
    +CLOSE_STDIN
    +TimeoutExpired
    +ext
    --
    -__init__(pytester)
    +tmpdir(): LEGACY_PATH
    +test_tmproot(): LEGACY_PATH
    +request()
    +plugins()
    +plugins(plugins)
    +monkeypatch(): MonkeyPatch
    +make_hook_recorder(pluginmanager): HookRecorder
    +chdir()
    +finalize()
    +makefile(ext): LEGACY_PATH
    +makeconftest(source): LEGACY_PATH
    +makeini(source): LEGACY_PATH
    +getinicfg(source): SectionWrapper
    +makepyprojecttoml(source): LEGACY_PATH
    +makepyfile(): LEGACY_PATH
    +maketxtfile(): LEGACY_PATH
    +syspathinsert(path)
    +mkdir(name): LEGACY_PATH
    +mkpydir(name): LEGACY_PATH
    +copy_example(name): LEGACY_PATH
    +getnode(config, arg)
    +getpathnode(path)
    +genitems(colitems)
    +runitem(source)
    +inline_runsource(source)
    +inline_genitems()
    +inline_run()
    +runpytest_inprocess(): RunResult
    +runpytest(): RunResult
    +parseconfig(): Config
    +parseconfigure(): Config
    +getitem(source, funcname)
    +getitems(source)
    +getmodulecol(source, configargs, withinit)
    +collect_by_name(modcol, name)
    +popen(cmdargs, stdout, stderr, stdin)
    +run(): RunResult
    +runpython(script): RunResult
    +runpython_c(command)
    +runpytest_subprocess(): RunResult
    +spawn_pytest(string, expect_timeout)
    +spawn(cmd, expect_timeout)
    -__repr__(): str
    -__str__(): str
  }

  class LegacyTestdirPlugin {
    +{static} testdir(): Testdir
  }

  class TempdirFactory {
    -_tmppath_factory: TempPathFactory
    --
    -__init__(tmppath_factory)
    +mktemp(basename, numbered): LEGACY_PATH
    +getbasetemp(): LEGACY_PATH
  }

  class LegacyTmpdirPlugin {
    +{static} tmpdir_factory(): TempdirFactory
    +{static} tmpdir(): LEGACY_PATH
  }

  class ImportMode {
    +prepend: str
    +append: str
    +importlib: str
  }

  class ImportPathMismatchError {
  }

  class Scope {
    +Function
    +Class
    +Module
    +Package
    +Session
    +index
    +index
    +self_index
    +other_index
    +scope
    --
    +next_lower()
    +next_higher()
    -__lt__(other): bool
    +{class} from_user(scope_name, descr, where)
  }

  class PseudoFixtureDef {
    +cached_result
    -_scope: Scope
  }

  class FuncFixtureInfo {
    +argnames
    +initialnames
    +names_closure
    +name2fixturedefs
    +closure
    +working_set
    +argname
    --
    +prune_dependency_tree()
  }

  class FixtureRequest {
    +fixtureinfo: FuncFixtureInfo
    +result
    +scope
    +node
    +node
    +node
    +node
    +fixturedefs
    +parentid
    +fixturedefs
    +index
    +clscol
    +function
    +node: nodes.Node
    +item
    +fixturenames
    +fixturedef
    +fixturedef
    +cached_result
    +current: self
    +values
    +current
    +argname
    +funcitem
    +scope
    +callspec
    +callspec: NoneType
    +param
    +param_index
    +scope
    +param: NOTSET
    +param_index: int
    +has_params
    +fixtures_not_supported
    +msg
    +frame
    +frameinfo
    +source_path
    +source_lineno
    +source_path_str
    +source_path_str
    +msg
    +subrequest
    +text
    +lines
    +factory
    +session: Session
    +p
    +p: fs
    +args
    --
    -__init__(pyfuncitem)
    +scope()
    +fixturenames()
    +node()
    -_getnextfixturedef(argname)
    +config(): Config
    +function()
    +cls()
    +instance()
    +module()
    +path(): Path
    +keywords()
    +session()
    +addfinalizer(finalizer)
    +applymarker(marker)
    +raiseerror(msg): NoReturn
    -_fillfixtures()
    +getfixturevalue(argname): Any
    -_get_active_fixturedef(argname)
    -_get_fixturestack()
    -_compute_fixture_value(fixturedef)
    -_schedule_finalizers(fixturedef, subrequest)
    -_check_scope(argname, invoking_scope, requested_scope)
    -_factorytraceback()
    -__repr__(): str
  }

  class SubRequest {
    -__init__(request, scope, param, param_index, fixturedef)
    -__repr__(): str
    +addfinalizer(finalizer)
    -_schedule_finalizers(fixturedef, subrequest)
  }

  class FixtureLookupError {
    +tblines
    +addline
    +stack
    +msg
    +stack
    +error_msg: str
    +line
    +fm
    +available
    +parentid
    +faclist
    +msg
    +msg
    --
    -__init__(argname, request, msg)
    +formatrepr()
  }

  class FixtureLookupErrorRepr {
    +lines
    --
    -__init__(filename, firstlineno, tblines, errorstring, argname)
    +toterminal(tw)
  }

  class FixtureDef {
    +scope
    +scope
    +scope
    +exc: NoneType
    +func
    +exc: e
    +ihook
    +fixturedef
    +my_cache_key
    +cache_key
    +result
    +ihook
    +result
    --
    -__init__(fixturemanager, baseid, argname, func, scope, params, unittest, ids)
    +scope()
    +addfinalizer(finalizer)
    +finish(request)
    +execute(request): FixtureValue
    +cache_key(request): object
    -__repr__(): str
  }

  class FixtureFunctionMarker {
    +scope
    +params
    +autouse: bool
    +ids
    +name
    -_ispytest
    +function
    +name
    +location
    --
    -__post_init__(_ispytest)
    -__call__(function): FixtureFunction
  }

  class FixtureManager {
    +FixtureLookupError: FixtureLookupError
    +FixtureLookupErrorRepr: FixtureLookupErrorRepr
    +parametrize_argnames
    +argnames
    +argnames
    +usefixtures
    +initialnames
    +fm
    +nodeid: NoneType
    +p
    +nodeid
    +nodeid: str
    +nodeid: str
    +nodeid
    +basenames
    +parentid
    +fixturenames_closure
    +initialnames
    +arg2fixturedefs
    +lastlen
    +lastlen
    +fixturedefs
    +fixturedefs
    +fixture_defs
    +holderobj: node_or_obj
    +holderobj
    +nodeid
    +autousenames
    +obj
    +marker
    +name
    +obj
    +fixture_def
    +faclist
    +i
    +fixturedefs
    +parentnodeids
    --
    -__init__(session)
    -_get_direct_parametrize_args(node)
    +getfixtureinfo(node, func, cls, funcargs): FuncFixtureInfo
    +pytest_plugin_registered(plugin)
    -_getautousenames(nodeid)
    +getfixtureclosure(fixturenames, parentnode, ignore_args)
    +merge()
    +sort_by_scope(): Scope
    +pytest_generate_tests(metafunc)
    +get_parametrize_mark_argnames()
    +pytest_collection_modifyitems(items)
    +parsefactories(node_or_obj)
    +parsefactories(node_or_obj, nodeid)
    +parsefactories(node_or_obj, nodeid)
    +getfixturedefs(argname, nodeid)
    -_matchfactories(fixturedefs, nodeid)
  }

  class Cache {
    -_cachedir: Path
    -_config: Config
    +cachedir
    +d
    +path
    +res
    +path
    +path
    +cache_dir_exists_already: bool
    +cache_dir_exists_already
    +data
    +f
    +readme_path
    +gitignore_path
    +msg: str
    +cachedir_tag_path
    --
    -__init__(cachedir, config)
    +{class} for_config(config)
    +{class} clear_cache(cachedir, _ispytest)
    +{static} cache_dir_from_config(): Path
    +warn(fmt)
    +mkdir(name): Path
    -_getvaluepath(key): Path
    +get(key, default)
    +set(key, value)
    -_ensure_supporting_files()
  }

  class LFPluginCollWrapper {
    +out
    +res: CollectReport
    +lf_paths
    +path
    +path
    +out
    +res
    +result
    +lastfailed
    +session
    --
    -__init__(lfplugin)
    +pytest_make_collect_report(collector)
    +sort_key(): bool
  }

  class LFPluginCollSkipfiles {
    -__init__(lfplugin)
    +pytest_make_collect_report(collector)
  }

  class LFPlugin {
    +active_keys
    +rootpath
    +result
    +path
    +passed
    +previously_failed
    +previously_passed
    +noun
    +suffix
    +files_noun
    +config
    +saved_lastfailed
    --
    -__init__(config)
    +get_last_failed_paths()
    +pytest_report_collectionfinish()
    +pytest_runtest_logreport(report)
    +pytest_collectreport(report)
    +pytest_collection_modifyitems(config, items)
    +pytest_sessionfinish(session)
  }

  class NFPlugin {
    +new_items
    +other_items
    +config
    --
    -__init__(config)
    +pytest_collection_modifyitems(items)
    -_get_increasing_order(items)
    +pytest_sessionfinish()
  }

  class PytestWarning {
  }

  class PytestAssertRewriteWarning {
  }

  class PytestCacheWarning {
  }

  class PytestConfigWarning {
  }

  class PytestCollectionWarning {
  }

  class PytestDeprecationWarning {
  }

  class PytestRemovedIn8Warning {
  }

  class PytestReturnNotNoneWarning {
  }

  class PytestExperimentalApiWarning {
    +{class} simple(apiname)
  }

  class PytestUnhandledCoroutineWarning {
  }

  class PytestUnknownMarkWarning {
  }

  class PytestUnraisableExceptionWarning {
  }

  class PytestUnhandledThreadExceptionWarning {
  }

  class UnformattedWarning {
    +category
    +template: str
    --
    +format(): _W
  }

}

package "venv2.lib.python3.12.site-packages._pytest.config" {
  class PathAwareHookProxy {
    +hook
    +path_value
    +fspath_value
    +fspath_value
    +path_value
    --
    -__init__(hook_caller)
    -__dir__()
    -__getattr__(key, _wraps)
    +fixed_hook()
  }

  class ExitCode {
    +OK: int
    +TESTS_FAILED: int
    +INTERRUPTED: int
    +INTERNAL_ERROR: int
    +USAGE_ERROR: int
    +NO_TESTS_COLLECTED: int
  }

  class ConftestImportFailure {
    -__init__(path, excinfo)
    -__str__(): str
  }

  class cmdline {
    +main
  }

  class PytestPluginManager {
    +err
    +encoding: str
    +err
    +opts
    +method
    +opts
    +method
    +opts
    +ret
    +plugin
    +current
    +foundanchor: bool
    +path
    +i
    +path
    +anchor
    +foundanchor: bool
    +directory
    +existing_clist
    +clist
    +conftestpath
    +mod
    +modules
    +existing
    +pkgpath
    +mod
    +exc_info
    +dirpath
    +msg: str
    +i: int
    +n
    +opt
    +parg
    +parg
    +parg
    +name
    +name: arg
    +plugins
    +importspec
    +loaded
    +mod
    --
    -__init__()
    +parse_hookimpl_opts(plugin, name)
    +parse_hookspec_opts(module_or_class, name)
    +register(plugin, name)
    +getplugin(name)
    +hasplugin(name): bool
    +pytest_configure(config)
    -_set_initial_conftests(args, pyargs, noconftest, rootpath, confcutdir, importmode)
    -_is_in_confcutdir(path): bool
    -_try_load_conftest(anchor, importmode, rootpath)
    -_getconftestmodules(path, importmode, rootpath)
    -_rget_with_confmod(name, path, importmode, rootpath)
    -_importconftest(conftestpath, importmode, rootpath): types.ModuleType
    -_check_non_top_pytest_plugins(mod, conftestpath)
    +consider_preparse(args)
    +consider_pluginarg(arg)
    +consider_conftest(conftestmodule)
    +consider_env()
    +consider_module(mod)
    -_import_plugin_specs(spec)
    +import_plugin(modname, consider_entry_points)
  }

  class Notset {
    -__repr__()
  }

  class Config {
  }

  class InvocationParams {
    +args
    +plugins
    +dir: Path
    --
    -__init__()
  }

  class ArgsSource {
    +ARGS
    +INCOVATION_DIR
    +TESTPATHS
  }

  class UsageError {
  }

  class PrintHelp {
  }

  class Parser {
    +prog
    +group
    +i: int
    +strargs
    +optparser
    +groups
    +desc
    +arggroup
    +n
    +a
    +file_or_dir_arg
    +parsedoption
    +optparser
    +strargs
    --
    -__init__(usage, processopt)
    +processoption(option)
    +getgroup(name, description, after)
    +addoption()
    +parse(args, namespace): argparse.Namespace
    -_getparser()
    +parse_setoption(args, option, namespace)
    +parse_known_args(args, namespace): argparse.Namespace
    +parse_known_and_unknown_args(args, namespace)
    +addini(name, help, type, default)
  }

  class ArgumentError {
    -__init__(msg, option)
    -__str__(): str
  }

  class Argument {
    +typ
    +dest
    +attrs
    +a
    +a
    +args
    --
    -__init__()
    +names()
    +attrs()
    -_set_opt_strings(opts)
    -__repr__(): str
  }

  class OptionGroup {
    +conflict
    +option
    +option
    --
    -__init__(name, description, parser)
    +addoption()
    -_addoption()
    -_addoption_instance(option, shortupper)
  }

  class MyOptionParser {
    +msg
    +msg
    +lines
    +action
    +action
    +option_tuples
    +msg
    +options
    --
    -__init__(parser, extra_info, prog)
    +error(message): NoReturn
    +parse_args(args, namespace): argparse.Namespace
    -_parse_optional(arg_string)
  }

  class DropShorterLongHelpFormatter {
    +orgstr
    +res
    +options
    +return_list
    +short_long
    +xxoption
    +shortened
    +formatted_action_invocation
    +lines
    --
    -__init__()
    -_format_action_invocation(action): str
    -_split_lines(text, width)
  }

}

package "venv2.lib.python3.12.site-packages._pytest.mark" {
  class KeywordMatcher {
    -_names
    +mapped_names
    +function_obj
    +subname
    +names
    --
    +{class} from_item(item)
    -__call__(subname): bool
  }

  class MarkMatcher {
    +own_mark_names
    +mark_names
    --
    +{class} from_item(item)
    -__call__(name): bool
  }

  class ParameterSet {
    +values
    +marks
    +id
    +marks
    +id
    +argnames
    +force_tuple
    +force_tuple: bool
    +parameters
    +msg: str
    +mark
    --
    +{class} param()
    +{class} extract_from(parameterset, force_tuple)
    -{static} _parse_parametrize_args(argvalues)
    -{static} _parse_parametrize_parameters(force_tuple)
    -{class} _for_parametrize(argnames, argvalues, func, config, nodeid)
  }

  class Mark {
    +name: str
    +args
    +kwargs
    -_param_ids_from
    -_param_ids_generated
    +param_ids_from
    +param_ids_from: other
    +param_ids_from: self
    --
    -__init__(name, args, kwargs, param_ids_from, param_ids_generated)
    -_has_param_ids(): bool
    +combined_with(other)
  }

  class MarkDecorator {
    +mark: Mark
    +mark
    +func
    +is_class
    --
    -__init__(mark)
    +name(): str
    +args()
    +kwargs()
    +markname(): str
    +with_args()
    -__call__(arg): Markable
    -__call__()
    -__call__()
  }

  class _SkipMarkDecorator {
    -__call__(arg): Markable
    -__call__(reason)
  }

  class _SkipifMarkDecorator {
    -__call__(condition): MarkDecorator
  }

  class _XfailMarkDecorator {
    -__call__(arg): Markable
    -__call__(condition): MarkDecorator
  }

  class _ParametrizeMarkDecorator {
    -__call__(argnames, argvalues): MarkDecorator
  }

  class _UsefixturesMarkDecorator {
    -__call__(): MarkDecorator
  }

  class _FilterwarningsMarkDecorator {
    -__call__(): MarkDecorator
  }

  class MarkGenerator {
    +skip: _SkipMarkDecorator
    +skipif: _SkipifMarkDecorator
    +xfail: _XfailMarkDecorator
    +parametrize: _ParametrizeMarkDecorator
    +usefixtures: _UsefixturesMarkDecorator
    +filterwarnings: _FilterwarningsMarkDecorator
    +marker
    --
    -__init__()
    -__getattr__(name): MarkDecorator
  }

  class NodeKeywords {
    -__init__(node)
    -__getitem__(key): Any
    -__setitem__(key, value)
    -__contains__(key): bool
    +update(other)
    -__delitem__(key)
    -__iter__()
    -__len__(): int
    -__repr__(): str
  }

  class TokenType {
    +LPAREN: str
    +RPAREN: str
    +OR: str
    +AND: str
    +NOT: str
    +IDENT: str
    +EOF: str
  }

  class Token {
    +type: TokenType
    +value: str
    +pos: int
  }

  class ParseError {
    -__init__(column, message)
    -__str__(): str
  }

  class Scanner {
    +pos: int
    +match
    +value
    +token
    --
    -__init__(input)
    +lex(input)
    +accept(type)
    +reject(expected): NoReturn
  }

  class MatcherAdapter {
    -__init__(matcher)
    -__getitem__(key): bool
    -__iter__()
    -__len__(): int
  }

  class Expression {
    +astexpr
    +code: types.CodeType
    +ret: bool
    --
    -__init__(code)
    +{class} compile(input)
    +evaluate(matcher): bool
  }

}

package "venv2.lib.python3.12.site-packages._pytest._code" {
  class Code {
    +p
    +raw
    +argcount
    --
    -__init__(obj)
    +{class} from_function(obj)
    -__eq__(other)
    +firstlineno(): int
    +name(): str
    +path()
    +fullsource()
    +source()
    +getargs(var)
  }

  class Frame {
    +f_locals
    +retval
    --
    -__init__(frame)
    +lineno(): int
    +f_globals()
    +f_locals()
    +code(): Code
    +statement()
    +eval(code)
    +repr(object): str
    +getargs(var)
  }

  class TracebackEntry {
    +source
    +source
    +key: NoneType
    +astnode: NoneType
    +key
    +astnode
    +start
    +end
    +source
    +tbh
    +tbh
    +name
    +line
    +line: str
    --
    -__init__(rawentry, repr_style)
    +with_repr_style(repr_style)
    +lineno(): int
    +frame(): Frame
    +relline(): int
    -__repr__(): str
    +statement()
    +path()
    +locals()
    +getfirstlinesource(): int
    +getsource(astcache)
    +ishidden(excinfo): bool
    -__str__(): str
    +name(): str
  }

  class Traceback {
    +cur_
    +cur_
    +path_
    +excludepath_
    +code
    +codepath
    +fn
    +fn: _excinfo_or_fn
    +cache
    +key
    +values
    +f
    +loc
    --
    -__init__(tb)
    +f()
    +cut(path, lineno, firstlineno, excludepath)
    -__getitem__(key): TracebackEntry
    -__getitem__(key)
    -__getitem__(key)
    +filter(_excinfo_or_fn)
    +recursionindex()
  }

  class ExceptionInfo {
    -_assert_start_repr: ClassVar
    -_excinfo
    -_striptext: str
    -_traceback
    +exc_info
    +exprinfo
    +exprinfo
    +tup
    +exc_info
    +lines
    +text
    +text
    +text
    +entry
    +exconly
    +fmt
    +value
    +msg
    --
    -__init__(excinfo, striptext, traceback)
    +{class} from_exception(exception, exprinfo)
    +{class} from_exc_info(exc_info, exprinfo)
    +{class} from_current(exprinfo)
    +{class} for_later()
    +fill_unfilled(exc_info)
    +type()
    +value(): E
    +tb(): TracebackType
    +typename(): str
    +traceback(): Traceback
    +traceback(value)
    -__repr__(): str
    +exconly(tryshort): str
    +errisinstance(exc): bool
    -_getreprcrash()
    +getrepr(showlocals, style, abspath, tbfilter, funcargs, truncate_locals, chain)
    +match(regexp)
  }

  class FormattedExcinfo {
    +flow_marker: ClassVar
    +fail_marker: ClassVar
    +showlocals: bool
    +style
    +abspath: bool
    +tbfilter
    +funcargs: bool
    +truncate_locals: bool
    +chain: bool
    +astcache
    +s
    +s
    +source
    +source
    +args
    +lines
    +source
    +line_index: int
    +space_prefix: str
    +indent
    +lines
    +indentstr
    +exlines
    +failindent
    +failindent: indentstr
    +lines
    +keys
    +value
    +str_repr
    +str_repr
    +lines
    +style
    +source
    +source
    +line_index: int
    +line_index
    +short
    +reprargs
    +s
    +message
    +message
    +entry_path
    +path
    +reprfileloc
    +localsrepr
    +np
    +traceback
    +traceback
    +traceback
    +extraline: NoneType
    +extraline: str
    +entries
    +last
    +entries
    +entries
    +recursionindex
    +max_frames: int
    +extraline
    +traceback
    +extraline: str
    +traceback
    +extraline: NoneType
    +repr_chain
    +e
    +excinfo_
    +descr: NoneType
    +seen
    +reprtraceback
    +reprtraceback
    +reprcrash
    +reprtraceback
    +reprcrash: NoneType
    +e
    +excinfo_
    +descr: str
    +e
    +excinfo_
    +descr: str
    +e: NoneType
    --
    -_getindent(source): int
    -_getentrysource(entry)
    +repr_args(entry)
    +get_source(source, line_index, excinfo, short)
    +get_exconly(excinfo, indent, markall)
    +repr_locals(locals)
    +repr_traceback_entry(entry, excinfo)
    -_makepath(path): str
    +repr_traceback(excinfo)
    -_truncate_recursive_traceback(traceback)
    +repr_excinfo(excinfo)
  }

  class TerminalRepr {
    +io
    +tw
    --
    -__str__(): str
    -__repr__(): str
    +toterminal(tw)
  }

  class ExceptionRepr {
    +reprtraceback
    +reprcrash
    +sections
    --
    +addsection(name, content, sep)
    +toterminal(tw)
  }

  class ExceptionChainRepr {
    +chain
    --
    -__init__(chain)
    +toterminal(tw)
  }

  class ReprExceptionInfo {
    +reprtraceback
    +reprcrash
    --
    +toterminal(tw)
  }

  class ReprTraceback {
    +reprentries
    +extraline
    +style
    +entrysep: ClassVar
    +next_entry
    --
    +toterminal(tw)
  }

  class ReprTracebackNative {
    -__init__(tblines)
  }

  class ReprEntryNative {
    +lines
    +style
    --
    +toterminal(tw)
  }

  class ReprEntry {
    +lines
    +reprfuncargs
    +reprlocals
    +reprfileloc
    +style
    +fail_marker
    +indent_size
    +indents
    +source_lines
    +failure_lines
    +is_failure_line
    --
    -_write_entry_lines(tw)
    +toterminal(tw)
    -__str__(): str
  }

  class ReprFileLocation {
    +path: str
    +lineno: int
    +message: str
    +msg
    +i
    +msg
    --
    -__post_init__()
    +toterminal(tw)
  }

  class ReprLocals {
    +lines
    --
    +toterminal(tw, indent)
  }

  class ReprFuncArgs {
    +args
    +linesofar: str
    +ns
    +linesofar: ns
    +linesofar: ns
    --
    +toterminal(tw)
  }

  class Source {
    +rawcode
    +src
    +src
    +newsource
    +source
    +newsource
    +newsource
    --
    -__init__(obj)
    -__eq__(other): bool
    -__getitem__(key): str
    -__getitem__(key)
    -__getitem__(key)
    -__iter__()
    -__len__(): int
    +strip()
    +indent(indent)
    +getstatement(lineno)
    +getstatementrange(lineno)
    +deindent()
    -__str__(): str
  }

}

package "venv2.lib.python3.12.site-packages._pytest.assertion" {
  class DummyRewriteHook {
    +mark_rewrite()
  }

  class AssertionState {
    -__init__(config, mode)
  }

  class Sentinel {
  }

  class AssertionRewritingHook {
    +state
    +spec
    +fn
    +fn
    +state
    +write
    +cache_dir
    +ok
    +write: bool
    +cache_name
    +pyc
    +co
    +parts
    +parts
    +path
    +fn_path
    +already_imported
    +mod
    --
    -__init__(config)
    +set_session(session)
    +find_spec(name, path, target)
    +create_module(spec)
    +exec_module(module)
    -_early_rewrite_bailout(name, state): bool
    -_should_rewrite(name, fn, state): bool
    -_is_marked_for_rewrite(name, state): bool
    +mark_rewrite()
    -_warn_already_imported(name)
    +get_data(pathname): bytes
    +get_resource_reader(name): TraversableResources
  }

  class AssertionRewriter {
    +doc
    +expect_docstring
    +pos: int
    +item: NoneType
    +doc
    +doc
    +expect_docstring: bool
    +lineno
    +lineno
    +aliases
    +aliases
    +imports
    +nodes
    +node
    +new
    +name
    +name
    +py_name
    +attr
    +builtin_name
    +specifier
    +current
    +keys
    +format_dict
    +form
    +name
    +res
    +negation
    +msg
    +assertmsg
    +gluestr: str
    +assertmsg
    +gluestr: str
    +err_explanation
    +err_msg
    +err_name
    +fmt
    +exc
    +raise_
    +statements_fail
    +fmt_pass
    +orig
    +hook_call_pass
    +hook_impl_test
    +statements_pass
    +main_test
    +variables
    +clear_format
    +body
    +assertmsg
    +explanation
    +assertmsg
    +explanation
    +template
    +msg
    +fmt
    +err_name
    +exc
    +raise_
    +variables
    +clear
    +locs
    +target_id
    +inlocs
    +dorepr
    +test
    +expr
    +locs
    +inlocs
    +dorepr
    +test
    +expr
    +res_var
    +expl_list
    +app
    +is_or
    +body
    +save
    +fail_save
    +levels
    +fail_inner
    +pytest_temp
    +expl_format
    +call
    +cond: ast.expr
    +cond
    +inner
    +body: inner
    +expl_template
    +expl
    +pattern
    +res
    +symbol
    +explanation
    +res
    +arg_expls
    +new_args
    +new_kwargs
    +arg
    +expl
    +new_call
    +res
    +res_expl
    +outer_expl
    +new_starred
    +res
    +res_expl
    +pat: str
    +expl
    +left_expl
    +res_variables
    +load_names
    +store_names
    +it
    +expls
    +syms
    +results
    +next_expl
    +sym
    +expl
    +res_expr
    +expl_call
    +res: ast.expr
    +res
    --
    -__init__(module_path, config, source)
    +run(mod)
    +{static} is_rewrite_disabled(): bool
    +variable(): str
    +assign(expr): ast.Name
    +display(expr): ast.expr
    +helper(name): ast.expr
    +builtin(name): ast.Attribute
    +explanation_param(expr): str
    +push_format_context()
    +pop_format_context(expl_expr): ast.Name
    +generic_visit(node)
    +visit_Assert(assert_)
    +visit_NamedExpr(name)
    +visit_Name(name)
    +visit_BoolOp(boolop)
    +visit_UnaryOp(unary)
    +visit_BinOp(binop)
    +visit_Call(call)
    +visit_Starred(starred)
    +visit_Attribute(attr)
    +visit_Compare(comp)
  }

}

package "venv2.lib.python3.12.site-packages._pytest._io" {
  class SafeRepr {
    +s
    +s
    +s
    +s
    +s
    +s
    +s
    --
    -__init__(maxsize, use_ascii)
    +repr(x): str
    +repr_instance(x, level): str
  }

  class AlwaysDispatchingPrettyPrinter {
    +p
    +objid
    --
    -_format(object, stream, indent, allowance, context, level)
  }

  class TerminalWriter {
    +file
    +file
    +esc
    +text
    +fullwidth
    +N
    +fill
    +line
    +line
    +current_line
    +msg
    +msg
    +indents
    +source
    +new_lines
    +highlighted: str
    --
    -__init__(file)
    +fullwidth(): int
    +fullwidth(value)
    +width_of_current_line(): int
    +markup(text): str
    +sep(sepchar, title, fullwidth)
    +write(msg)
    +line(s)
    +flush()
    -_write_source(lines, indents)
    -_highlight(source): str
  }

}

package "venv2.lib.python3.12.site-packages._pytest._py" {
  class Error {
    +s
    --
    -__repr__(): str
    -__str__(): str
  }

  class ErrorMaker {
    -_errno2class
    +eno
    +cls
    +clsname
    +errorcls
    +errno
    +cls
    +cls
    --
    -__getattr__(name)
    -_geterrnoclass(eno)
    +checked_call(func): R
  }

  class Checkers {
    +arg
    +invert: bool
    +meth: NoneType
    +meth
    +invert: bool
    +meth
    +name
    -_statcache: Stat
    +st
    --
    -__init__(path)
    +dotfile()
    +ext(arg)
    +basename(arg)
    +basestarts(arg)
    +relto(arg)
    +fnmatch(arg)
    +endswith(arg)
    -_evaluate(kw)
    -_stat(): Stat
    +dir()
    +file()
    +exists()
    +link()
  }

  class NeverRaised {
  }

  class Visitor {
    +fil
    +entries
    +rec
    +dirs
    --
    -__init__(fil, rec, ignore, bf, sort)
    +gen(path)
  }

  class FNMatcher {
    +pattern
    +pattern
    +name
    +name
    +pattern
    --
    -__init__(pattern)
    -__call__(path)
  }

  class Stat {
    +entry
    +entry
    --
    +size(): int
    +mtime(): float
    -__getattr__(name): Any
    -__init__(path, osstatresult)
    +owner()
    +group()
    +isdir()
    +isfile()
    +islink()
  }

  class LocalPath {
  }

  class ImportMismatchError {
  }

}

package "venv2.lib.python3.12.site-packages.platformdirs" {
  class MacOS {
    +is_homebrew
    +path_list
    +is_homebrew
    +path_list
    --
    +user_data_dir(): str
    +site_data_dir(): str
    +site_data_path(): Path
    +user_config_dir(): str
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +site_cache_path(): Path
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
  }

  class Unix {
    +path
    +path
    +path
    +path
    +dirs
    +path
    +path
    +path
    +path: str
    +dirs
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    +path: str
    +path: str
    --
    +user_data_dir(): str
    -_site_data_dirs()
    +site_data_dir(): str
    +user_config_dir(): str
    -_site_config_dirs()
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
    +site_data_path(): Path
    +site_config_path(): Path
    +site_cache_path(): Path
    +iter_config_dirs()
    +iter_data_dirs()
  }

  class PlatformDirsABC {
    +params
    +path
    +directory
    --
    -__init__(appname, appauthor, version, roaming, multipath, opinion, ensure_exists)
    -_append_app_name_and_version(): str
    -_optionally_create_directory(path)
    -_first_item_as_path_if_multipath(directory): Path
    +user_data_dir(): str
    +site_data_dir(): str
    +user_config_dir(): str
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
    +user_data_path(): Path
    +site_data_path(): Path
    +user_config_path(): Path
    +site_config_path(): Path
    +user_cache_path(): Path
    +site_cache_path(): Path
    +user_state_path(): Path
    +user_log_path(): Path
    +user_documents_path(): Path
    +user_downloads_path(): Path
    +user_pictures_path(): Path
    +user_videos_path(): Path
    +user_music_path(): Path
    +user_desktop_path(): Path
    +user_runtime_path(): Path
    +site_runtime_path(): Path
    +iter_config_dirs()
    +iter_data_dirs()
    +iter_cache_dirs()
    +iter_runtime_dirs()
    +iter_config_paths()
    +iter_data_paths()
    +iter_cache_paths()
    +iter_runtime_paths()
  }

  class Android {
    +path
    +path
    +path
    +path
    --
    +user_data_dir(): str
    +site_data_dir(): str
    +user_config_dir(): str
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
  }

  class Windows {
    +const
    +path
    +params
    +author
    +path
    +path
    +path
    +path
    +path
    +path
    +path
    --
    +user_data_dir(): str
    -_append_parts(path): str
    +site_data_dir(): str
    +user_config_dir(): str
    +site_config_dir(): str
    +user_cache_dir(): str
    +site_cache_dir(): str
    +user_state_dir(): str
    +user_log_dir(): str
    +user_documents_dir(): str
    +user_downloads_dir(): str
    +user_pictures_dir(): str
    +user_videos_dir(): str
    +user_music_dir(): str
    +user_desktop_dir(): str
    +user_runtime_dir(): str
    +site_runtime_dir(): str
  }

}

package "venv2.lib.python3.12.site-packages.deprecated" {
  class SphinxAdapter {
    +fmt
    +div_lines
    +width
    +reason
    +docstring
    +lines
    +docstring
    +docstring
    +docstring
    +docstring: str
    +msg
    +msg
    --
    -__init__(directive, reason, version, action, category, extra_stacklevel, line_length)
    -__call__(wrapped)
    +get_deprecated_msg(wrapped, instance)
  }

  class ClassicAdapter {
    +fmt: str
    +fmt: str
    +fmt: str
    +fmt: str
    +old_new1
    +msg
    +stacklevel
    +msg
    +stacklevel
    --
    -__init__(reason, version, action, category, extra_stacklevel)
    +get_deprecated_msg(wrapped, instance)
    -__call__(wrapped)
    +wrapped_cls()
    +wrapper_function(instance_, args_, kwargs_)
  }

}

package "src.app.middleware" {
  class RateLimitConfig {
    +RATE_LIMITS
    +limiter
    --
    +{static} init_limiter(): Limiter
    +{static} apply_limits(app)
    +limit_register()
    +limit_login()
    +limit_refresh()
    +{static} get_error_handler()
    +ratelimit_handler()
  }

  class SecurityMiddleware {
    +app
    +security_headers
    +response_time
    +suspicious_patterns
    +full_url
    +user_agent
    +bot_indicators
    +client_ip
    +current_time
    --
    -__init__(app)
    +init_app(app)
    +start_timer()
    -_before_request()
    -_after_request(response)
    -_generate_request_id(): str
    -_is_suspicious_request(): bool
  }

}

package "src.app.config" {
  class Settings {
    +flask_env: str
    +secret_key: str
    +debug: bool
    +testing: bool
    +jwt_secret_key: str
    +jwt_access_token_expires: int
    +jwt_refresh_token_expires: int
    +database_url: str
    +pool_size: int
    +max_overflow: int
    +pool_pre_ping: bool
    +rate_limit_storage_url: str
    +log_level: str
    +mail_server
    +mail_port: int
    +mail_use_tls: bool
    +mail_username
    +mail_password
  }

  class Config {
    +env_file: str
    +env_file_encoding: str
  }

}

package "src.app.utils" {
  class SimpleCache {
    +entry
    +current_time
    +expired_keys
    --
    -__init__()
    +get(key)
    +set(key, value, ttl)
    +delete(key)
    +clear()
    -_cleanup_if_needed()
  }

  class CacheManager {
    +today
    --
    +{static} warm_cache()
    +{static} clear_expired()
    +{static} get_cache_stats()
  }

}

package "src.app.repositories" {
  class BaseRepository {
    +query
    +query
    +query
    +instance
    +instance
    +instance
    --
    -__init__(model_class)
    +get_by_id(id)
    +get_all(limit, offset)
    +create(data)
    +update(id, data)
    +delete(id): bool
    +count(): int
    +exists(id): bool
  }

  class UserRepository {
    -__init__()
    +get_by_email(email)
    +get_by_username(username)
    +email_exists(email): bool
    +username_exists(username): bool
  }

  class DailyWordRepository {
    -__init__()
    +get_by_date_and_mode(puzzle_date, game_mode)
    +get_latest_by_mode(game_mode)
    +exists_for_date_and_mode(puzzle_date, game_mode): bool
  }

  class WordListRepository {
    +word_entry
    +query
    +query
    --
    -__init__()
    +get_by_word_and_mode(word, game_mode)
    +is_valid_word(word, game_mode): bool
    +is_answer_word(word, game_mode): bool
    +get_answer_words_by_mode(game_mode, limit)
  }

  class GameSessionRepository {
    +query
    +query
    --
    -__init__()
    +get_by_user_and_daily_word(user_id, daily_word_id)
    +get_user_sessions_by_mode(user_id, game_mode, limit)
    +get_completed_sessions_count(user_id, game_mode): int
    +session_exists(user_id, daily_word_id): bool
  }

  class UserStatsRepository {
    -__init__()
    +get_by_user_and_mode(user_id, game_mode)
    +get_leaderboard_by_wins(game_mode, limit)
    +get_leaderboard_by_streak(game_mode, limit)
    +get_leaderboard_by_win_percentage(game_mode, min_games, limit)
    +stats_exist(user_id, game_mode): bool
  }

}

package "src.app.models" {
  class User {
    +username
    +email
    +password_hash
    +email_verified
    +is_active
    +game_sessions
    +user_stats
    +email_pattern: str
    +salt
    +result
    --
    +validate_email(key, address): str
    +validate_username(key, username): str
    +set_password(password)
    +check_password(password): bool
    -{static} _validate_password_strength(): bool
    +to_dict(exclude_sensitive): dict
    -__repr__(): str
  }

  class GameMode {
    +CLASSIC: str
    +DISNEY: str
  }

  class DailyWord {
    +word
    +game_mode
    +date
    +game_sessions
    --
    +validate_word(key, word): str
    +validate_date(key, puzzle_date): date
    -__repr__(): str
  }

  class WordList {
    +word
    +game_mode
    +is_answer
    +frequency_rank
    --
    +validate_word(key, word): str
    +validate_frequency_rank(key, rank)
    -__repr__(): str
  }

  class GameSession {
    +user_id
    +daily_word_id
    +guesses
    +completed
    +won
    +attempts_used
    +user
    +daily_word
    +guess_data
    +new_guesses
    --
    +validate_guesses(key, guesses)
    +validate_attempts_used(key, attempts): int
    +add_guess(word, feedback)
    +get_current_guess_count(): int
    +is_game_over(): bool
    -__repr__(): str
  }

  class UserStats {
    +user_id
    +game_mode
    +games_played
    +games_won
    +current_streak
    +max_streak
    +guess_distribution
    +user
    +required_keys
    +distribution
    +total_guesses: int
    --
    +validate_positive_integers(key, value): int
    +validate_games_won(key, games_won): int
    +validate_guess_distribution(key, distribution)
    +get_win_percentage(): float
    +update_stats(won, attempts_used)
    +get_average_guesses(): float
    -__repr__(): str
  }

  class TimestampMixin {
    +created_at
    +updated_at
  }

  class SoftDeleteMixin {
    +deleted_at
    +is_deleted
    --
    +soft_delete()
  }

  class BaseModel {
    +id
    +result
    +value
    +value
    --
    +to_dict(exclude_sensitive)
    +update_from_dict(data)
    -__repr__(): str
  }

}

package "src.app.api" {
  class RegisterRequest {
    +username: str
    +email: str
    +password: str
  }

  class LoginRequest {
    +email: str
    +password: str
  }

}

package "src.app.services" {
  class AuthService {
    +username
    +email
    +password
    +user
    +created_user
    +user
    +success
    +user
    +updated_user
    --
    -__init__()
    +register_user(data): User
    +authenticate_user(email, password): User
    +get_user_by_id(user_id)
    +get_user_by_email(email)
    +verify_email(user_id): bool
    +change_password(user_id, current_password, new_password): bool
  }

  class GuessProcessingService {
    +CORRECT: str
    +PRESENT: str
    +ABSENT: str
    +guess
    +target
    +feedback
    +target_letter_counts
    +used_target_letters
    +guess_letter
    +feedback
    +letter
    +best_status: str
    +status_priority
    +word
    +feedback
    +best_status: status
    +keyboard_status
    +alphabet: str
    +correct_letters
    +present_letters
    +absent_letters
    +guess_set
    +target_set
    +common_letters
    +word
    +results
    +won: bool
    +guess_result
    +won: bool
    --
    -__init__()
    +process_guess(guess, target_word)
    +create_guess_result(guess, target_word)
    +is_winning_guess(feedback): bool
    +is_valid_word_format(word): bool
    +get_letter_status(guesses_with_feedback, letter): str
    +get_keyboard_status(guesses_with_feedback)
    +analyze_guess_quality(guess, target_word, feedback)
    -_validate_word(word): bool
    +simulate_game(target_word, guesses)
  }

  class DailyPuzzleService {
    +today
    +existing
    +selected_word: word
    +selected_word
    +daily_word
    +created_word
    +today
    +today_puzzle
    +daily_word
    +answer_words
    +valid_words
    +selected
    +normalized_word
    +start_date
    +days_since_start
    +today
    +puzzles
    +puzzle_date
    +puzzle_info
    --
    -__init__()
    +get_current_date(): date
    +get_daily_word(puzzle_date, game_mode)
    +get_today_puzzle(game_mode)
    +create_daily_word(puzzle_date, game_mode, word)
    +create_today_puzzle(game_mode, word)
    +ensure_today_puzzle_exists(game_mode)
    +get_puzzle_info(puzzle_date, game_mode): dict
    -_select_random_answer_word(game_mode)
    -_validate_answer_word(word, game_mode): bool
    -_calculate_puzzle_number(puzzle_date, game_mode): int
    +get_puzzle_history(game_mode, limit): list
  }

  class StatisticsService {
    +stats
    +win_percentage
    +average_guesses
    +stats
    +total_games
    +total_wins
    +overall_win_percentage
    +stats_list
    +stats_list
    +stats_list
    +leaderboard
    +user
    +entry
    +all_stats
    +total_players
    +total_games
    +total_wins
    +global_win_percentage
    +global_distribution
    +total_won_games: int
    +distribution_percentage
    +total_attempts
    +average_attempts
    +user_stats
    +leaderboard
    +user_rank: NoneType
    +user_rank
    +total_players
    +percentile
    +sessions
    +streak_history
    +current_streak: int
    +max_streak: int
    +temp_streak: int
    +sorted_sessions
    +max_streak
    +temp_streak: int
    +current_streak: temp_streak
    --
    -__init__()
    +get_user_stats(user_id, game_mode)
    +get_user_all_stats(user_id)
    +get_leaderboard(game_mode, metric, limit)
    +get_global_statistics(game_mode)
    +get_user_rank(user_id, game_mode, metric)
    +get_streak_analysis(user_id, game_mode)
    -_get_default_stats(game_mode)
    -_calculate_total_guesses(guess_distribution): int
  }

  class GameService {
    +puzzle_date
    +daily_word
    +session
    +puzzle_info
    +word
    +session_id
    +session
    +daily_word
    +feedback
    +is_correct
    +updated_session
    +result
    +session
    +daily_word
    +is_valid_guess
    +sessions
    +history
    +daily_word
    +session_data
    +existing_session
    +new_session
    +stats
    +stats
    +stats
    --
    -__init__()
    +get_daily_puzzle(user_id, game_mode, puzzle_date)
    +process_guess(user_id, guess_data)
    +get_game_session(user_id, session_id)
    +validate_word(word, game_mode)
    +get_user_game_history(user_id, game_mode, limit)
    -_get_or_create_session(user_id, daily_word_id)
    -_update_user_stats(user_id, game_mode, won, attempts_used)
  }

  class WordValidationService {
    +normalized_word
    +is_valid
    +normalized_word
    +is_answer
    --
    -__init__()
    +is_valid_guess(word, game_mode): bool
    +is_answer_word(word, game_mode): bool
    +validate_word_format(word)
  }

}

/* Inheritance relationships */
type <|-- _TypedDictMeta
type <|-- _NativeIntMeta
type <|-- _AnyMeta
typing._SpecialForm <|-- _ExtensionsSpecialForm
typing._GenericAlias <|-- _LiteralGenericAlias
_ExtensionsSpecialForm <|-- _LiteralForm
typing._SpecialGenericAlias <|-- _SpecialGenericAlias
typing.Generic <|-- Protocol
Protocol <|-- SupportsInt
Protocol <|-- SupportsFloat
Protocol <|-- SupportsComplex
Protocol <|-- SupportsBytes
Protocol <|-- SupportsIndex
type <|-- SingletonMeta
type <|-- _TypedDictMeta
_ExtensionsSpecialForm <|-- _TypedDictSpecialForm
type <|-- _TypeVarLikeMeta
_Immutable <|-- ParamSpecArgs
_Immutable <|-- ParamSpecKwargs
list <|-- ParamSpec
_DefaultMixin <|-- ParamSpec
list <|-- _ConcatenateGenericAlias
typing._ConcatenateGenericAlias <|-- _ConcatenateGenericAlias
_ExtensionsSpecialForm <|-- _TypeFormForm
typing._Final <|-- _SpecialForm
_ExtensionsSpecialForm <|-- _UnpackSpecialForm
typing._GenericAlias <|-- _UnpackAlias
_DefaultMixin <|-- TypeVarTuple
type <|-- _NamedTupleMeta
abc.ABC <|-- Buffer
typing._GenericAlias <|-- _TypeAliasGenericAlias
enum.IntEnum <|-- Format
ABC <|-- Algorithm
Algorithm <|-- NoneAlgorithm
Algorithm <|-- HMACAlgorithm
Algorithm <|-- RSAAlgorithm
Algorithm <|-- ECAlgorithm
RSAAlgorithm <|-- RSAPSSAlgorithm
Algorithm <|-- OKPAlgorithm
DeprecationWarning <|-- RemovedInPyjwt3Warning
Exception <|-- PyJWTError
PyJWTError <|-- InvalidTokenError
InvalidTokenError <|-- DecodeError
DecodeError <|-- InvalidSignatureError
InvalidTokenError <|-- ExpiredSignatureError
InvalidTokenError <|-- InvalidAudienceError
InvalidTokenError <|-- InvalidIssuerError
InvalidTokenError <|-- InvalidIssuedAtError
InvalidTokenError <|-- ImmatureSignatureError
PyJWTError <|-- InvalidKeyError
InvalidTokenError <|-- InvalidAlgorithmError
InvalidTokenError <|-- MissingRequiredClaimError
PyJWTError <|-- PyJWKError
PyJWKError <|-- MissingCryptographyError
PyJWTError <|-- PyJWKSetError
PyJWTError <|-- PyJWKClientError
PyJWKClientError <|-- PyJWKClientConnectionError
InvalidTokenError <|-- InvalidSubjectError
InvalidTokenError <|-- InvalidJTIError
MutableMapping <|-- SessionMixin
CallbackDict <|-- SecureCookieSession
SessionMixin <|-- SecureCookieSession
SecureCookieSession <|-- NullSession
SessionInterface <|-- SecureCookieSessionInterface
dict <|-- Config
BaseEnvironment <|-- Environment
BaseLoader <|-- DispatchingJinjaLoader
Scaffold <|-- Blueprint
click.UsageError <|-- NoAppException
click.Group <|-- AppGroup
AppGroup <|-- FlaskGroup
click.ParamType <|-- CertParamType
click.Path <|-- SeparatedPathType
RequestBase <|-- Request
ResponseBase <|-- Response
Scaffold <|-- Flask
AssertionError <|-- UnexpectedUnicodeError
UnicodeError <|-- UnexpectedUnicodeError
KeyError <|-- DebugFilesKeyError
AssertionError <|-- DebugFilesKeyError
AssertionError <|-- FormDataRoutingRedirect
oldcls <|-- newcls
werkzeug.test.EnvironBuilder <|-- EnvironBuilder
Client <|-- FlaskClient
CliRunner <|-- FlaskCliRunner
werkzeug.utils.cached_property <|-- locked_cached_property
View <|-- MethodView
JSONProvider <|-- DefaultJSONProvider
JSONTag <|-- TagDict
JSONTag <|-- PassDict
JSONTag <|-- TagTuple
JSONTag <|-- PassList
JSONTag <|-- TagBytes
JSONTag <|-- TagMarkup
JSONTag <|-- TagUUID
JSONTag <|-- TagDateTime
NamedTuple <|-- URL
NamedTuple <|-- _MuslVersion
Exception <|-- ExceptionGroup
ValueError <|-- InvalidMetadata
TypedDict <|-- RawMetadata
NamedTuple <|-- _Version
ValueError <|-- InvalidVersion
_BaseVersion <|-- Version
Version <|-- _TrimmedRelease
Node <|-- Variable
Node <|-- Value
Node <|-- Op
NamedTuple <|-- ParsedRequirement
ValueError <|-- InvalidName
ValueError <|-- InvalidWheelFilename
ValueError <|-- InvalidSdistFilename
ValueError <|-- InvalidRequirement
ValueError <|-- InvalidMarker
ValueError <|-- UndefinedComparison
ValueError <|-- UndefinedEnvironmentName
TypedDict <|-- Environment
NamedTuple <|-- _GLibCVersion
Exception <|-- ParserSyntaxError
ValueError <|-- InvalidSpecifier
BaseSpecifier <|-- Specifier
BaseSpecifier <|-- SpecifierSet
ValueError <|-- ELFInvalid
enum.IntEnum <|-- EIClass
enum.IntEnum <|-- EIData
enum.IntEnum <|-- EMachine
ValueError <|-- InvalidLicenseExpression
TypedDict <|-- SPDXLicense
TypedDict <|-- SPDXException
t.Protocol <|-- _HasHTML
t.Protocol <|-- _TPEscape
str <|-- Markup
string.Formatter <|-- EscapeFormatter
sa_orm.Query <|-- Query
sa_orm.Session <|-- Session
type <|-- BindMetaMixin
type <|-- NameMetaMixin
BindMetaMixin <|-- DefaultMeta
NameMetaMixin <|-- DefaultMeta
sa_orm.DeclarativeMeta <|-- DefaultMeta
BindMetaMixin <|-- DefaultMetaNoName
sa_orm.DeclarativeMeta <|-- DefaultMetaNoName
Model <|-- _FSAModel
_Table <|-- Table
sa.Table <|-- _Table
Pagination <|-- SelectPagination
Pagination <|-- QueryPagination
AssignmentTarget <|-- AssignmentTargetRegister
AssignmentTarget <|-- AssignmentTargetIndex
AssignmentTarget <|-- AssignmentTargetAttr
AssignmentTarget <|-- AssignmentTargetTuple
ExtendedTraverserVisitor <|-- PreBuildVisitor
Enum <|-- FormatOp
Exception <|-- UnsupportedException
ClassBuilder <|-- NonExtClassBuilder
ClassBuilder <|-- ExtClassBuilder
ExtClassBuilder <|-- DataClassBuilder
DataClassBuilder <|-- AttrsClassBuilder
IRVisitor <|-- IRBuilderVisitor
ImplicitClass <|-- GeneratorClass
NonlocalControl <|-- BaseNonlocalControl
NonlocalControl <|-- LoopNonlocalControl
BaseNonlocalControl <|-- GeneratorNonlocalControl
NonlocalControl <|-- CleanupNonlocalControl
NonlocalControl <|-- TryFinallyNonlocalControl
CleanupNonlocalControl <|-- ExceptNonlocalControl
CleanupNonlocalControl <|-- FinallyNonlocalControl
ForGenerator <|-- ForIterable
ForGenerator <|-- ForAsyncIterable
ForGenerator <|-- ForSequence
ForGenerator <|-- ForDictionaryCommon
ForDictionaryCommon <|-- ForDictionaryKeys
ForDictionaryCommon <|-- ForDictionaryValues
ForDictionaryCommon <|-- ForDictionaryItems
ForGenerator <|-- ForRange
ForGenerator <|-- ForInfiniteCounter
ForGenerator <|-- ForEnumerate
ForGenerator <|-- ForZip
NamedTuple <|-- SingledispatchInfo
TraverserVisitor <|-- SingledispatchVisitor
NamedTuple <|-- RegisteredImpl
NamedTuple <|-- ArgInfo
TraverserVisitor <|-- MatchVisitor
build_ext <|-- build_ext_custom
Exception <|-- IrCheckException
unittest.TestCase <|-- TestGenerateNames
unittest.TestCase <|-- TestRArray
unittest.TestCase <|-- TestHeaderInclusion
MypycDataSuite <|-- TestCommandLine
unittest.TestCase <|-- TestLiterals
MypycDataSuite <|-- TestGenOps
MypycDataSuite <|-- TestRefCountTransform
MypycDataSuite <|-- TestRun
TestRun <|-- TestRunMultiFile
TestRun <|-- TestRunSeparate
MypycDataSuite <|-- TestAnalysis
MypycDataSuite <|-- TestExceptionTransform
unittest.TestCase <|-- TestIrcheck
unittest.TestCase <|-- TestStruct
unittest.TestCase <|-- TestSubtype
unittest.TestCase <|-- TestRuntimeSubtype
unittest.TestCase <|-- TestUnionSimplification
unittest.TestCase <|-- TestEmitClass
unittest.TestCase <|-- TestFunctionEmitterVisitor
unittest.TestCase <|-- TestGenerateFunction
MypycDataSuite <|-- TestAlwaysDefined
unittest.TestCase <|-- TestExternal
unittest.TestCase <|-- TestTupleNames
unittest.TestCase <|-- TestArgCheck
DataSuite <|-- MypycDataSuite
unittest.TestCase <|-- TestEmitter
unittest.TestCase <|-- TestNameGen
int <|-- bool
BaseException <|-- Exception
Exception <|-- Warning
Warning <|-- UserWarning
Exception <|-- TypeError
Exception <|-- ValueError
Exception <|-- AttributeError
Exception <|-- ImportError
Exception <|-- NameError
NameError <|-- UnboundLocalError
Exception <|-- LookupError
LookupError <|-- KeyError
LookupError <|-- IndexError
Exception <|-- RuntimeError
RuntimeError <|-- UnicodeEncodeError
RuntimeError <|-- UnicodeDecodeError
RuntimeError <|-- NotImplementedError
Exception <|-- StopIteration
Exception <|-- ArithmeticError
ArithmeticError <|-- ZeroDivisionError
ArithmeticError <|-- OverflowError
BaseException <|-- GeneratorExit
RType <|-- RVoid
RType <|-- RPrimitive
RType <|-- RTuple
RType <|-- RStruct
RType <|-- RInstance
RType <|-- RUnion
RType <|-- RArray
Value <|-- Register
Value <|-- Integer
Value <|-- Float
Value <|-- Op
Op <|-- BaseAssign
BaseAssign <|-- Assign
BaseAssign <|-- AssignMulti
Op <|-- ControlOp
ControlOp <|-- Goto
ControlOp <|-- Branch
ControlOp <|-- Return
ControlOp <|-- Unreachable
Op <|-- RegisterOp
RegisterOp <|-- IncRef
RegisterOp <|-- DecRef
RegisterOp <|-- Call
RegisterOp <|-- MethodCall
RegisterOp <|-- LoadErrorValue
RegisterOp <|-- LoadLiteral
RegisterOp <|-- GetAttr
RegisterOp <|-- SetAttr
RegisterOp <|-- LoadStatic
RegisterOp <|-- InitStatic
RegisterOp <|-- TupleSet
RegisterOp <|-- TupleGet
RegisterOp <|-- Cast
RegisterOp <|-- Box
RegisterOp <|-- Unbox
RegisterOp <|-- RaiseStandardError
RegisterOp <|-- CallC
RegisterOp <|-- Truncate
RegisterOp <|-- Extend
RegisterOp <|-- LoadGlobal
RegisterOp <|-- IntOp
RegisterOp <|-- ComparisonOp
RegisterOp <|-- FloatOp
RegisterOp <|-- FloatNeg
RegisterOp <|-- FloatComparisonOp
RegisterOp <|-- LoadMem
Op <|-- SetMem
RegisterOp <|-- GetElementPtr
RegisterOp <|-- LoadAddress
RegisterOp <|-- KeepAlive
RegisterOp <|-- Unborrow
NamedTuple <|-- DeserMaps
NamedTuple <|-- VTableMethod
Plugin <|-- MypycPlugin
ErrorHandler <|-- AssignHandler
ErrorHandler <|-- GotoHandler
ErrorHandler <|-- TracebackAndGotoHandler
ErrorHandler <|-- ReturnHandler
NamedTuple <|-- CFunctionDescription
NamedTuple <|-- LoadAddressDescription
NamedTuple <|-- IntComparisonOpDescription
object <|-- _MigrateConfig
AlembicConfig <|-- Config
object <|-- Migrate
Atom <|-- Literal
Atom <|-- Variable
NamedTuple <|-- Original
NamedTuple <|-- Binding
Exception <|-- Error
Magics <|-- IPythonDotEnv
Protocol <|-- SupportsGt
Protocol <|-- SupportsGe
Protocol <|-- SupportsLt
Protocol <|-- SupportsLe
Protocol <|-- SupportsMod
Protocol <|-- SupportsDiv
BaseMetadata <|-- Gt
BaseMetadata <|-- Ge
BaseMetadata <|-- Lt
BaseMetadata <|-- Le
Protocol <|-- GroupedMetadata
GroupedMetadata <|-- Interval
BaseMetadata <|-- MultipleOf
BaseMetadata <|-- MinLen
BaseMetadata <|-- MaxLen
GroupedMetadata <|-- Len
BaseMetadata <|-- Timezone
BaseMetadata <|-- Unit
BaseMetadata <|-- Predicate
NamedTuple <|-- Case
at.GroupedMetadata <|-- MyCustomGroupedMetadata
RuntimeError <|-- EndOfText
tuple <|-- _TokenType
type <|-- StyleMeta
ValueError <|-- ClassNotFound
Exception <|-- OptionError
TextIOWrapper <|-- UnclosingTextIOWrapper
Directive <|-- PygmentsDoc
argparse.HelpFormatter <|-- HelpFormatter
type <|-- LexerMeta
Lexer <|-- DelegatingLexer
str <|-- include
tuple <|-- combined
Future <|-- words
LexerMeta <|-- RegexLexerMeta
Lexer <|-- RegexLexer
RegexLexer <|-- ExtendedRegexLexer
RegexLexerMeta <|-- ProfilingRegexLexerMeta
RegexLexer <|-- ProfilingRegexLexer
Filter <|-- FunctionFilter
Filter <|-- CodeTagFilter
Filter <|-- SymbolFilter
Filter <|-- KeywordCaseFilter
Filter <|-- NameHighlightFilter
Exception <|-- ErrorToken
Filter <|-- RaiseOnErrorTokenFilter
Filter <|-- VisibleWhitespaceFilter
Filter <|-- GobbleFilter
Filter <|-- TokenMergeFilter
RegexLexer <|-- SoongLexer
CppLexer <|-- PikeLexer
CLexer <|-- NesCLexer
RegexLexer <|-- ClayLexer
CLexer <|-- ECLexer
RegexLexer <|-- ValaLexer
CLexer <|-- CudaLexer
CppLexer <|-- SwigLexer
CppLexer <|-- MqlLexer
CppLexer <|-- ArduinoLexer
CppLexer <|-- CharmciLexer
CLexer <|-- OmgIdlLexer
CLexer <|-- PromelaLexer
RegexLexer <|-- AmplLexer
RegexLexer <|-- GLShaderLexer
RegexLexer <|-- HLSLShaderLexer
RegexLexer <|-- PostScriptLexer
RegexLexer <|-- AsymptoteLexer
RegexLexer <|-- GnuplotLexer
RegexLexer <|-- PovrayLexer
RegexLexer <|-- VerilogLexer
RegexLexer <|-- SystemVerilogLexer
RegexLexer <|-- VhdlLexer
RegexLexer <|-- ECLLexer
RegexLexer <|-- FutharkLexer
RegexLexer <|-- AdaLexer
RegexLexer <|-- VCTreeStatusLexer
RegexLexer <|-- PyPyLogLexer
RegexLexer <|-- MIMELexer
RegexLexer <|-- CapnProtoLexer
RegexLexer <|-- NimrodLexer
RegexLexer <|-- RebolLexer
RegexLexer <|-- RedLexer
baselexer <|-- GeneratedObjectiveCVariant
ObjectiveCppLexer <|-- LogosLexer
RegexLexer <|-- SwiftLexer
RegexLexer <|-- SASLexer
RegexLexer <|-- PhixLexer
RegexLexer <|-- GraphQLLexer
RegexLexer <|-- UsdLexer
ExtendedRegexLexer <|-- CrystalLexer
RegexLexer <|-- VerifpalLexer
FancyURLopener <|-- Opener
RegexLexer <|-- LdifLexer
RegexLexer <|-- LdaprcLexer
RegexLexer <|-- BoogieLexer
RegexLexer <|-- SilverLexer
RegexLexer <|-- ErlangLexer
Lexer <|-- ErlangShellLexer
RegexLexer <|-- ElixirLexer
Lexer <|-- ElixirConsoleLexer
RegexLexer <|-- apdlexer
ExtendedRegexLexer <|-- SlashLanguageLexer
DelegatingLexer <|-- SlashLexer
RegexLexer <|-- BoaLexer
RegexLexer <|-- ElpiLexer
RegexLexer <|-- MaximaLexer
RegexLexer <|-- ChapelLexer
RegexLexer <|-- IniLexer
RegexLexer <|-- DesktopLexer
RegexLexer <|-- SystemdLexer
RegexLexer <|-- RegeditLexer
RegexLexer <|-- PropertiesLexer
RegexLexer <|-- KconfigLexer
RegexLexer <|-- Cfengine3Lexer
RegexLexer <|-- ApacheConfLexer
RegexLexer <|-- SquidConfLexer
RegexLexer <|-- NginxConfLexer
RegexLexer <|-- LighttpdConfLexer
RegexLexer <|-- DockerLexer
ExtendedRegexLexer <|-- TerraformLexer
RegexLexer <|-- TermcapLexer
RegexLexer <|-- TerminfoLexer
RegexLexer <|-- PkgConfigLexer
RegexLexer <|-- PacmanConfLexer
RegexLexer <|-- AugeasLexer
RegexLexer <|-- TOMLLexer
RegexLexer <|-- NestedTextLexer
RegexLexer <|-- SingularityLexer
RegexLexer <|-- UnixConfigLexer
ExtendedRegexLexer <|-- CleanLexer
RegexLexer <|-- MojoLexer
RegexLexer <|-- JSLTLexer
RegexLexer <|-- UL4Lexer
DelegatingLexer <|-- HTMLUL4Lexer
DelegatingLexer <|-- XMLUL4Lexer
DelegatingLexer <|-- CSSUL4Lexer
DelegatingLexer <|-- JavascriptUL4Lexer
DelegatingLexer <|-- PythonUL4Lexer
RegexLexer <|-- NumbaIRLexer
RegexLexer <|-- QVToLexer
RegexLexer <|-- TableGenLexer
RegexLexer <|-- LimboLexer
RegexLexer <|-- TlbLexer
RegexLexer <|-- NixLexer
RegexLexer <|-- WrenLexer
RegexLexer <|-- ParaSailLexer
RegexLexer <|-- SmithyLexer
RegexLexer <|-- GraphvizLexer
Lexer <|-- RConsoleLexer
RegexLexer <|-- SLexer
RegexLexer <|-- RdLexer
RegexLexer <|-- SourcePawnLexer
RegexLexer <|-- PawnLexer
RegexLexer <|-- DnsZoneLexer
ExtendedRegexLexer <|-- MapleLexer
RegexLexer <|-- IDLLexer
RegexLexer <|-- IoLexer
RegexLexer <|-- AMDGPULexer
RegexLexer <|-- ProtoBufLexer
RegexLexer <|-- ThriftLexer
RegexLexer <|-- ZeekLexer
RegexLexer <|-- PuppetLexer
RegexLexer <|-- RslLexer
RegexLexer <|-- MscgenLexer
RegexLexer <|-- VGLLexer
RegexLexer <|-- AlloyLexer
RegexLexer <|-- PanLexer
RegexLexer <|-- CrmshLexer
RegexLexer <|-- FlatlineLexer
ExtendedRegexLexer <|-- SnowballLexer
RegexLexer <|-- SuperColliderLexer
RegexLexer <|-- Comal80Lexer
RegexLexer <|-- SolidityLexer
RegexLexer <|-- HareLexer
RegexLexer <|-- SchemeLexer
RegexLexer <|-- CommonLispLexer
RegexLexer <|-- HyLexer
RegexLexer <|-- RacketLexer
RegexLexer <|-- NewLispLexer
RegexLexer <|-- EmacsLispLexer
RegexLexer <|-- ShenLexer
RegexLexer <|-- CPSALexer
RegexLexer <|-- XtlangLexer
RegexLexer <|-- FennelLexer
RegexLexer <|-- JanetLexer
RegexLexer <|-- JLexer
RegexLexer <|-- BlueprintLexer
RegexLexer <|-- MoselLexer
RegexLexer <|-- SmalltalkLexer
RegexLexer <|-- NewspeakLexer
RegexLexer <|-- SpiceLexer
RegexLexer <|-- MonteLexer
RegexLexer <|-- DuelLexer
ExtendedRegexLexer <|-- XQueryLexer
RegexLexer <|-- QmlLexer
RegexLexer <|-- CirruLexer
ExtendedRegexLexer <|-- SlimLexer
RegexLexer <|-- TealLexer
RegexLexer <|-- CFamilyLexer
CFamilyLexer <|-- CLexer
CFamilyLexer <|-- CppLexer
RegexLexer <|-- PerlLexer
ExtendedRegexLexer <|-- Perl6Lexer
Lexer <|-- RobotFrameworkLexer
Tokenizer <|-- Comment
Tokenizer <|-- Setting
Tokenizer <|-- ImportSetting
Setting <|-- TestCaseSetting
TestCaseSetting <|-- KeywordSetting
Tokenizer <|-- Variable
Tokenizer <|-- KeywordCall
Tokenizer <|-- TemplatedKeywordCall
Tokenizer <|-- ForLoop
_Table <|-- UnknownTable
_Table <|-- VariableTable
_Table <|-- SettingTable
_Table <|-- TestCaseTable
TestCaseTable <|-- KeywordTable
RegexLexer <|-- IrcLogsLexer
RegexLexer <|-- GettextLexer
RegexLexer <|-- HttpLexer
RegexLexer <|-- TodotxtLexer
RegexLexer <|-- NotmuchLexer
RegexLexer <|-- KernelLogLexer
RegexLexer <|-- JsonnetLexer
PrologLexer <|-- CplintLexer
JavascriptLexer <|-- JsxLexer
TypeScriptLexer <|-- TsxLexer
RegexLexer <|-- PrologLexer
RegexLexer <|-- LogtalkLexer
RegexLexer <|-- RNCCompactLexer
RegexLexer <|-- WoWTocLexer
RegexLexer <|-- GAPLexer
Lexer <|-- GAPConsoleLexer
RegexLexer <|-- MathematicaLexer
RegexLexer <|-- MuPADLexer
RegexLexer <|-- BCLexer
RegexLexer <|-- TypoScriptCssDataLexer
RegexLexer <|-- TypoScriptHtmlDataLexer
RegexLexer <|-- TypoScriptLexer
RegexLexer <|-- AutohotkeyLexer
RegexLexer <|-- AutoItLexer
RegexLexer <|-- SieveLexer
RegexLexer <|-- BrainfuckLexer
RegexLexer <|-- BefungeLexer
RegexLexer <|-- CAmkESLexer
RegexLexer <|-- CapDLLexer
RegexLexer <|-- RedcodeLexer
RegexLexer <|-- AheuiLexer
RegexLexer <|-- CypherLexer
RegexLexer <|-- HtmlLexer
RegexLexer <|-- DtdLexer
RegexLexer <|-- XmlLexer
XmlLexer <|-- XsltLexer
ExtendedRegexLexer <|-- HamlLexer
ExtendedRegexLexer <|-- ScamlLexer
ExtendedRegexLexer <|-- PugLexer
RegexLexer <|-- UrlEncodedLexer
HtmlLexer <|-- VueLexer
RegexLexer <|-- BashLexer
BashLexer <|-- SlurmBashLexer
Lexer <|-- ShellSessionBaseLexer
ShellSessionBaseLexer <|-- BashSessionLexer
RegexLexer <|-- BatchLexer
ShellSessionBaseLexer <|-- MSDOSSessionLexer
RegexLexer <|-- TcshLexer
ShellSessionBaseLexer <|-- TcshSessionLexer
RegexLexer <|-- PowerShellLexer
ShellSessionBaseLexer <|-- PowerShellSessionLexer
RegexLexer <|-- FishShellLexer
RegexLexer <|-- ExeclineLexer
RegexLexer <|-- LuaLexer
RegexLexer <|-- LuauLexer
LuaLexer <|-- MoonScriptLexer
RegexLexer <|-- ChaiscriptLexer
RegexLexer <|-- LSLLexer
RegexLexer <|-- AppleScriptLexer
RegexLexer <|-- RexxLexer
RegexLexer <|-- MOOCodeLexer
RegexLexer <|-- HybrisLexer
RegexLexer <|-- EasytrieveLexer
RegexLexer <|-- JclLexer
RegexLexer <|-- MiniScriptLexer
RegexLexer <|-- GSQLLexer
RegexLexer <|-- GDScriptLexer
RegexLexer <|-- AmbientTalkLexer
RegexLexer <|-- ArrowLexer
RegexLexer <|-- ComponentPascalLexer
RegexLexer <|-- FloScriptLexer
RegexLexer <|-- ResourceLexer
types.ModuleType <|-- _automodule
RegexLexer <|-- DLexer
RegexLexer <|-- CrocLexer
CrocLexer <|-- MiniDLexer
ExtendedRegexLexer <|-- RubyLexer
Lexer <|-- RubyConsoleLexer
RegexLexer <|-- FancyLexer
RegexLexer <|-- PonyLexer
RegexLexer <|-- MatlabLexer
Lexer <|-- MatlabSessionLexer
RegexLexer <|-- OctaveLexer
RegexLexer <|-- ScilabLexer
RegexLexer <|-- FelixLexer
Lexer <|-- TNTLexer
CppLexer <|-- FreeFemLexer
RegexLexer <|-- ThingsDBLexer
RegexLexer <|-- TeraTermLexer
RegexLexer <|-- RagelLexer
RegexLexer <|-- RagelEmbeddedLexer
DelegatingLexer <|-- RagelRubyLexer
DelegatingLexer <|-- RagelCLexer
DelegatingLexer <|-- RagelDLexer
DelegatingLexer <|-- RagelCppLexer
DelegatingLexer <|-- RagelObjectiveCLexer
DelegatingLexer <|-- RagelJavaLexer
RegexLexer <|-- AntlrLexer
DelegatingLexer <|-- AntlrCppLexer
DelegatingLexer <|-- AntlrObjectiveCLexer
DelegatingLexer <|-- AntlrCSharpLexer
DelegatingLexer <|-- AntlrPythonLexer
DelegatingLexer <|-- AntlrJavaLexer
DelegatingLexer <|-- AntlrRubyLexer
DelegatingLexer <|-- AntlrPerlLexer
DelegatingLexer <|-- AntlrActionScriptLexer
RegexLexer <|-- TreetopBaseLexer
DelegatingLexer <|-- TreetopLexer
RegexLexer <|-- EbnfLexer
RegexLexer <|-- JMESPathLexer
RegexLexer <|-- CarbonLexer
RegexLexer <|-- CoqLexer
RegexLexer <|-- IsabelleLexer
RegexLexer <|-- Inform6Lexer
RegexLexer <|-- Inform7Lexer
Inform7Lexer <|-- Inform6TemplateLexer
RegexLexer <|-- Tads3Lexer
RegexLexer <|-- NCLLexer
RegexLexer <|-- VyperLexer
SchemeLexer <|-- LilyPondLexer
RegexLexer <|-- BBCodeLexer
RegexLexer <|-- MoinWikiLexer
RegexLexer <|-- RstLexer
RegexLexer <|-- TexLexer
RegexLexer <|-- GroffLexer
RegexLexer <|-- MozPreprocHashLexer
MozPreprocHashLexer <|-- MozPreprocPercentLexer
DelegatingLexer <|-- MozPreprocXulLexer
DelegatingLexer <|-- MozPreprocJavascriptLexer
DelegatingLexer <|-- MozPreprocCssLexer
RegexLexer <|-- MarkdownLexer
RegexLexer <|-- OrgLexer
RegexLexer <|-- TiddlyWiki5Lexer
RegexLexer <|-- WikitextLexer
RegexLexer <|-- PddlLexer
RegexLexer <|-- IgorLexer
RegexLexer <|-- SMLLexer
RegexLexer <|-- OcamlLexer
RegexLexer <|-- OpaLexer
RegexLexer <|-- ReasonLexer
RegexLexer <|-- FStarLexer
RegexLexer <|-- SaviLexer
RegexLexer <|-- BQNLexer
RegexLexer <|-- TalLexer
RegexLexer <|-- TlsLexer
Lexer <|-- ErbLexer
RegexLexer <|-- SmartyLexer
RegexLexer <|-- VelocityLexer
DelegatingLexer <|-- VelocityHtmlLexer
DelegatingLexer <|-- VelocityXmlLexer
RegexLexer <|-- DjangoLexer
RegexLexer <|-- MyghtyLexer
DelegatingLexer <|-- MyghtyHtmlLexer
DelegatingLexer <|-- MyghtyXmlLexer
DelegatingLexer <|-- MyghtyJavascriptLexer
DelegatingLexer <|-- MyghtyCssLexer
RegexLexer <|-- MasonLexer
RegexLexer <|-- MakoLexer
DelegatingLexer <|-- MakoHtmlLexer
DelegatingLexer <|-- MakoXmlLexer
DelegatingLexer <|-- MakoJavascriptLexer
DelegatingLexer <|-- MakoCssLexer
Lexer <|-- CheetahPythonLexer
RegexLexer <|-- CheetahLexer
DelegatingLexer <|-- CheetahHtmlLexer
DelegatingLexer <|-- CheetahXmlLexer
DelegatingLexer <|-- CheetahJavascriptLexer
RegexLexer <|-- GenshiTextLexer
RegexLexer <|-- GenshiMarkupLexer
DelegatingLexer <|-- HtmlGenshiLexer
DelegatingLexer <|-- GenshiLexer
DelegatingLexer <|-- JavascriptGenshiLexer
DelegatingLexer <|-- CssGenshiLexer
DelegatingLexer <|-- RhtmlLexer
DelegatingLexer <|-- XmlErbLexer
DelegatingLexer <|-- CssErbLexer
DelegatingLexer <|-- JavascriptErbLexer
DelegatingLexer <|-- HtmlPhpLexer
DelegatingLexer <|-- XmlPhpLexer
DelegatingLexer <|-- CssPhpLexer
DelegatingLexer <|-- JavascriptPhpLexer
DelegatingLexer <|-- HtmlSmartyLexer
DelegatingLexer <|-- XmlSmartyLexer
DelegatingLexer <|-- CssSmartyLexer
DelegatingLexer <|-- JavascriptSmartyLexer
DelegatingLexer <|-- HtmlDjangoLexer
DelegatingLexer <|-- XmlDjangoLexer
DelegatingLexer <|-- CssDjangoLexer
DelegatingLexer <|-- JavascriptDjangoLexer
RegexLexer <|-- JspRootLexer
DelegatingLexer <|-- JspLexer
RegexLexer <|-- EvoqueLexer
DelegatingLexer <|-- EvoqueHtmlLexer
DelegatingLexer <|-- EvoqueXmlLexer
RegexLexer <|-- ColdfusionLexer
RegexLexer <|-- ColdfusionMarkupLexer
DelegatingLexer <|-- ColdfusionHtmlLexer
DelegatingLexer <|-- ColdfusionCFCLexer
DelegatingLexer <|-- SspLexer
RegexLexer <|-- TeaTemplateRootLexer
DelegatingLexer <|-- TeaTemplateLexer
DelegatingLexer <|-- LassoHtmlLexer
DelegatingLexer <|-- LassoXmlLexer
DelegatingLexer <|-- LassoCssLexer
DelegatingLexer <|-- LassoJavascriptLexer
RegexLexer <|-- HandlebarsLexer
DelegatingLexer <|-- HandlebarsHtmlLexer
DelegatingLexer <|-- YamlJinjaLexer
RegexLexer <|-- LiquidLexer
RegexLexer <|-- TwigLexer
DelegatingLexer <|-- TwigHtmlLexer
RegexLexer <|-- Angular2Lexer
DelegatingLexer <|-- Angular2HtmlLexer
DelegatingLexer <|-- SqlJinjaLexer
RegexLexer <|-- ForthLexer
RegexLexer <|-- CssLexer
ExtendedRegexLexer <|-- SassLexer
RegexLexer <|-- ScssLexer
CssLexer <|-- LessCssLexer
RegexLexer <|-- GasLexer
RegexLexer <|-- ObjdumpLexer
DelegatingLexer <|-- DObjdumpLexer
DelegatingLexer <|-- CppObjdumpLexer
DelegatingLexer <|-- CObjdumpLexer
RegexLexer <|-- HsailLexer
RegexLexer <|-- LlvmLexer
RegexLexer <|-- LlvmMirBodyLexer
RegexLexer <|-- LlvmMirLexer
RegexLexer <|-- NasmLexer
ObjdumpLexer <|-- NasmObjdumpLexer
RegexLexer <|-- TasmLexer
RegexLexer <|-- Ca65Lexer
RegexLexer <|-- Dasm16Lexer
RegexLexer <|-- RoboconfGraphLexer
RegexLexer <|-- RoboconfInstancesLexer
Lexer <|-- PortugolLexer
Lexer <|-- DelphiLexer
RegexLexer <|-- CsoundLexer
CsoundLexer <|-- CsoundScoreLexer
CsoundLexer <|-- CsoundOrchestraLexer
RegexLexer <|-- CsoundDocumentLexer
RegexLexer <|-- TypstLexer
RegexLexer <|-- PtxLexer
RegexLexer <|-- SmartGameFormatLexer
RegexLexer <|-- KustoLexer
RegexLexer <|-- WatLexer
RegexLexer <|-- ProcfileLexer
RegexLexer <|-- CodeQLLexer
RegexLexer <|-- AwkLexer
RegexLexer <|-- SedLexer
RegexLexer <|-- VimLexer
RegexLexer <|-- NSISLexer
RegexLexer <|-- RPMSpecLexer
RegexLexer <|-- DebianSourcesLexer
RegexLexer <|-- SourcesListLexer
RegexLexer <|-- DebianControlLexer
RegexLexer <|-- CobolLexer
CobolLexer <|-- CobolFreeformatLexer
RegexLexer <|-- ABAPLexer
RegexLexer <|-- OpenEdgeLexer
RegexLexer <|-- GoodDataCLLexer
RegexLexer <|-- MaqlLexer
RegexLexer <|-- TclLexer
RegexLexer <|-- SNBTLexer
RegexLexer <|-- MCFunctionLexer
RegexLexer <|-- MCSchemaLexer
RegexLexer <|-- VisualPrologBaseLexer
VisualPrologBaseLexer <|-- VisualPrologLexer
VisualPrologBaseLexer <|-- VisualPrologGrammarLexer
RegexLexer <|-- MIPSLexer
RegexLexer <|-- MesonLexer
RegexLexer <|-- BlitzMaxLexer
RegexLexer <|-- BlitzBasicLexer
RegexLexer <|-- MonkeyLexer
RegexLexer <|-- CbmBasicV2Lexer
RegexLexer <|-- QBasicLexer
RegexLexer <|-- VBScriptLexer
RegexLexer <|-- BBCBasicLexer
RegexLexer <|-- PrqlLexer
RegexLexer <|-- EiffelLexer
RegexLexer <|-- ScdocLexer
RegexLexer <|-- DaxLexer
RegexLexer <|-- SparqlLexer
RegexLexer <|-- TurtleLexer
RegexLexer <|-- ShExCLexer
RegexLexer <|-- GleamLexer
RegexLexer <|-- EmailHeaderLexer
DelegatingLexer <|-- EmailLexer
RegexLexer <|-- SophiaLexer
RegexLexer <|-- Modula2Lexer
RegexLexer <|-- NitLexer
RegexLexer <|-- ActionScriptLexer
RegexLexer <|-- ActionScript3Lexer
RegexLexer <|-- MxmlLexer
RegexLexer <|-- QlikLexer
RegexLexer <|-- APLLexer
RegexLexer <|-- SrcinfoLexer
RegexLexer <|-- RegoLexer
RegexLexer <|-- AtomsLexer
AtomsLexer <|-- OdinLexer
AtomsLexer <|-- CadlLexer
AtomsLexer <|-- AdlLexer
RegexLexer <|-- PythonLexer
RegexLexer <|-- Python2Lexer
RegexLexer <|-- _PythonConsoleLexerBase
DelegatingLexer <|-- PythonConsoleLexer
DelegatingLexer <|-- _ReplaceInnerCode
RegexLexer <|-- PythonTracebackLexer
RegexLexer <|-- Python2TracebackLexer
RegexLexer <|-- CythonLexer
RegexLexer <|-- DgLexer
PythonLexer <|-- NumPyLexer
RegexLexer <|-- FactorLexer
RegexLexer <|-- SmaliLexer
RegexLexer <|-- GoLexer
RegexLexer <|-- BerryLexer
RegexLexer <|-- UniconLexer
RegexLexer <|-- IconLexer
RegexLexer <|-- UcodeLexer
RegexLexer <|-- CddlLexer
RegexLexer <|-- DylanLexer
RegexLexer <|-- DylanLidLexer
Lexer <|-- DylanConsoleLexer
Lexer <|-- MakefileLexer
RegexLexer <|-- BaseMakefileLexer
RegexLexer <|-- CMakeLexer
RegexLexer <|-- DiffLexer
RegexLexer <|-- DarcsPatchLexer
RegexLexer <|-- WDiffLexer
RegexLexer <|-- XorgLexer
RegexLexer <|-- RtsLexer
RegexLexer <|-- KuinLexer
RegexLexer <|-- JavaLexer
JavaLexer <|-- AspectJLexer
RegexLexer <|-- ScalaLexer
RegexLexer <|-- GosuLexer
Lexer <|-- GosuTemplateLexer
RegexLexer <|-- GroovyLexer
RegexLexer <|-- IokeLexer
RegexLexer <|-- ClojureLexer
ClojureLexer <|-- ClojureScriptLexer
RegexLexer <|-- TeaLangLexer
RegexLexer <|-- CeylonLexer
RegexLexer <|-- KotlinLexer
RegexLexer <|-- XtendLexer
RegexLexer <|-- PigLexer
RegexLexer <|-- GoloLexer
RegexLexer <|-- JasminLexer
RegexLexer <|-- SarlLexer
RegexLexer <|-- NuSMVLexer
RegexLexer <|-- TactLexer
RegexLexer <|-- PromQLLexer
RegexLexer <|-- ZephirLexer
Lexer <|-- PsyshConsoleLexer
RegexLexer <|-- PhpLexer
PostgresBase <|-- PostgresLexer
RegexLexer <|-- PostgresLexer
PostgresBase <|-- PlPgsqlLexer
RegexLexer <|-- PlPgsqlLexer
PostgresBase <|-- PsqlRegexLexer
RegexLexer <|-- PsqlRegexLexer
Lexer <|-- PostgresConsoleLexer
RegexLexer <|-- PostgresExplainLexer
RegexLexer <|-- SqlLexer
RegexLexer <|-- TransactSqlLexer
RegexLexer <|-- MySqlLexer
RegexLexer <|-- GoogleSqlLexer
Lexer <|-- SqliteConsoleLexer
RegexLexer <|-- RqlLexer
RegexLexer <|-- X10Lexer
RegexLexer <|-- Json5Lexer
RegexLexer <|-- GcodeLexer
RegexLexer <|-- PraatLexer
RegexLexer <|-- Lean3Lexer
RegexLexer <|-- Lean4Lexer
ExtendedRegexLexer <|-- BibTeXLexer
RegexLexer <|-- BSTLexer
RegexLexer <|-- WhileyLexer
RegexLexer <|-- KLexer
KLexer <|-- QLexer
RegexLexer <|-- SnobolLexer
RegexLexer <|-- WebIDLLexer
RegexLexer <|-- RitaLexer
RegexLexer <|-- HaskellLexer
HaskellLexer <|-- HspecLexer
RegexLexer <|-- IdrisLexer
RegexLexer <|-- AgdaLexer
RegexLexer <|-- CryptolLexer
Lexer <|-- LiterateLexer
LiterateLexer <|-- LiterateHaskellLexer
LiterateLexer <|-- LiterateIdrisLexer
LiterateLexer <|-- LiterateAgdaLexer
LiterateLexer <|-- LiterateCryptolLexer
RegexLexer <|-- KokaLexer
RegexLexer <|-- GherkinLexer
RegexLexer <|-- TAPLexer
RegexLexer <|-- FortranLexer
RegexLexer <|-- FortranFixedLexer
RegexLexer <|-- ModelicaLexer
RegexLexer <|-- BugsLexer
RegexLexer <|-- JagsLexer
RegexLexer <|-- StanLexer
RegexLexer <|-- ArturoLexer
RegexLexer <|-- VCLLexer
VCLLexer <|-- VCLSnippetLexer
RegexLexer <|-- ElmLexer
RegexLexer <|-- AscLexer
RegexLexer <|-- JavascriptLexer
JavascriptLexer <|-- TypeScriptLexer
RegexLexer <|-- KalLexer
RegexLexer <|-- LiveScriptLexer
RegexLexer <|-- DartLexer
RegexLexer <|-- LassoLexer
RegexLexer <|-- ObjectiveJLexer
RegexLexer <|-- CoffeeScriptLexer
RegexLexer <|-- MaskLexer
RegexLexer <|-- EarlGreyLexer
RegexLexer <|-- JuttleLexer
Lexer <|-- NodeConsoleLexer
RegexLexer <|-- OocLexer
RegexLexer <|-- BddLexer
RegexLexer <|-- JuliaLexer
Lexer <|-- JuliaConsoleLexer
RegexLexer <|-- HexdumpLexer
RegexLexer <|-- FoxProLexer
RegexLexer <|-- StataLexer
RegexLexer <|-- ZigLexer
RegexLexer <|-- BnfLexer
RegexLexer <|-- AbnfLexer
RegexLexer <|-- JsgfLexer
RegexLexer <|-- PegLexer
RegexLexer <|-- BareLexer
RegexLexer <|-- OpenScadLexer
RegexLexer <|-- CSharpLexer
RegexLexer <|-- NemerleLexer
RegexLexer <|-- BooLexer
RegexLexer <|-- VbNetLexer
RegexLexer <|-- GenericAspxLexer
DelegatingLexer <|-- CSharpAspxLexer
DelegatingLexer <|-- VbNetAspxLexer
RegexLexer <|-- FSharpLexer
RegexLexer <|-- XppLexer
RegexLexer <|-- FantomLexer
Lexer <|-- TextLexer
Lexer <|-- OutputLexer
Lexer <|-- RawTokenLexer
RegexLexer <|-- YangLexer
RegexLexer <|-- FiftLexer
RegexLexer <|-- EzhilLexer
RegexLexer <|-- RideLexer
RegexLexer <|-- DevicetreeLexer
RegexLexer <|-- Macaulay2Lexer
ExtendedRegexLexer <|-- UrbiscriptLexer
ExtendedRegexLexer <|-- HaxeLexer
RegexLexer <|-- HxmlLexer
RegexLexer <|-- FuncLexer
LexerContext <|-- YamlLexerContext
ExtendedRegexLexer <|-- YamlLexer
Lexer <|-- JsonLexer
JsonLexer <|-- JsonBareObjectLexer
JsonLexer <|-- JsonLdLexer
RegexLexer <|-- YaraLexer
RegexLexer <|-- PointlessLexer
RegexLexer <|-- Asn1Lexer
RegexLexer <|-- WgslLexer
RegexLexer <|-- RustLexer
Formatter <|-- TerminalFormatter
Formatter <|-- HtmlFormatter
Formatter <|-- IRCFormatter
types.ModuleType <|-- _automodule
Formatter <|-- NullFormatter
Formatter <|-- RawTokenFormatter
Formatter <|-- TestcaseFormatter
ImportError <|-- PilNotAvailable
Exception <|-- FontNotFound
Formatter <|-- ImageFormatter
ImageFormatter <|-- GifImageFormatter
ImageFormatter <|-- JpgImageFormatter
ImageFormatter <|-- BmpImageFormatter
Formatter <|-- Terminal256Formatter
Terminal256Formatter <|-- TerminalTrueColorFormatter
Formatter <|-- RtfFormatter
Formatter <|-- SvgFormatter
Formatter <|-- BBCodeFormatter
Formatter <|-- PangoMarkupFormatter
Formatter <|-- GroffFormatter
Formatter <|-- LatexFormatter
Lexer <|-- LatexEmbeddedLexer
Style <|-- SasStyle
Style <|-- MaterialStyle
Style <|-- FriendlyGrayscaleStyle
Style <|-- PastieStyle
Style <|-- OneDarkStyle
Style <|-- InkPotStyle
Style <|-- XcodeStyle
Style <|-- GruvboxDarkStyle
Style <|-- GruvboxLightStyle
Style <|-- MonokaiStyle
Style <|-- TangoStyle
Style <|-- FriendlyStyle
Style <|-- StarofficeStyle
Style <|-- ParaisoDarkStyle
Style <|-- SolarizedDarkStyle
SolarizedDarkStyle <|-- SolarizedLightStyle
Style <|-- Algol_NuStyle
Style <|-- GhDarkStyle
Style <|-- NativeStyle
Style <|-- ColorfulStyle
Style <|-- LilyPondStyle
Style <|-- IgorStyle
Style <|-- ZenburnStyle
Style <|-- BlackWhiteStyle
Style <|-- EmacsStyle
Style <|-- DraculaStyle
Style <|-- VisualStudioStyle
Style <|-- DefaultStyle
Style <|-- ParaisoLightStyle
Style <|-- LovelaceStyle
Style <|-- StataDarkStyle
Style <|-- VimStyle
Style <|-- BorlandStyle
Style <|-- CoffeeStyle
Style <|-- MurphyStyle
Style <|-- LightbulbStyle
Style <|-- FruityStyle
Style <|-- AbapStyle
Style <|-- RainbowDashStyle
Style <|-- ManniStyle
Style <|-- AutumnStyle
Style <|-- RrtStyle
Style <|-- PerldocStyle
Style <|-- TracStyle
Style <|-- AlgolStyle
Style <|-- ArduinoStyle
Style <|-- NordStyle
Style <|-- NordDarkerStyle
Style <|-- StataLightStyle
_ast_util.NodeVisitor <|-- FindIdentifiers
_ast_util.NodeVisitor <|-- FindTuple
_ast_util.NodeVisitor <|-- ParseFunc
dict <|-- SetLikeDict
dict <|-- LRUCache
NodeVisitor <|-- NodeTransformer
NodeVisitor <|-- SourceGenerator
TemplateCollection <|-- TemplateLookup
list <|-- CallerStack
Namespace <|-- TemplateNamespace
Namespace <|-- ModuleNamespace
Template <|-- ModuleTemplate
Template <|-- DefTemplate
PythonCode <|-- PythonFragment
FunctionDecl <|-- FunctionArgs
Exception <|-- MakoException
MakoException <|-- RuntimeException
MakoException <|-- CompileException
MakoException <|-- SyntaxException
MakoException <|-- UnsupportedError
MakoException <|-- NameConflictError
MakoException <|-- TemplateLookupException
TemplateLookupException <|-- TopLevelLookupException
Node <|-- TemplateNode
Node <|-- ControlLine
Node <|-- Text
Node <|-- Code
Node <|-- Comment
Node <|-- Expression
type <|-- _TagMeta
Node <|-- Tag
Tag <|-- IncludeTag
Tag <|-- NamespaceTag
Tag <|-- TextTag
Tag <|-- DefTag
Tag <|-- BlockTag
Tag <|-- CallTag
Tag <|-- CallNamespaceTag
Tag <|-- InheritTag
Tag <|-- PageTag
Extractor <|-- LinguaMakoExtractor
MessageExtractor <|-- LinguaMakoExtractor
CacheImpl <|-- BeakerCacheImpl
MessageExtractor <|-- BabelMakoExtractor
RegexLexer <|-- MakoLexer
DelegatingLexer <|-- MakoHtmlLexer
DelegatingLexer <|-- MakoXmlLexer
DelegatingLexer <|-- MakoJavascriptLexer
DelegatingLexer <|-- MakoCssLexer
ReadsCfg <|-- Config
BaseException <|-- ConfigError
ConfigError <|-- MissingConfig
ConfigError <|-- MissingConfigSection
ConfigError <|-- MissingConfigItem
ConfigError <|-- ConfigValueTypeError
CacheImpl <|-- PlainCacheImpl
object <|-- CORS
RuntimeError <|-- VisitorExit
NodeVisitor <|-- DependencyFinderVisitor
NodeVisitor <|-- UndeclaredNameVisitor
Exception <|-- CompilerExit
NodeVisitor <|-- CodeGenerator
t.NamedTuple <|-- _FinalizeInfo
BaseLoader <|-- FileSystemLoader
BaseLoader <|-- PackageLoader
BaseLoader <|-- DictLoader
BaseLoader <|-- FunctionLoader
BaseLoader <|-- PrefixLoader
BaseLoader <|-- ChoiceLoader
ModuleType <|-- _TemplateModule
BaseLoader <|-- ModuleLoader
NodeVisitor <|-- RootVisitor
NodeVisitor <|-- FrameSymbolVisitor
te.Protocol <|-- LoopRenderFunc
LoopContext <|-- AsyncLoopContext
base <|-- LoggingUndefined
Undefined <|-- ChainableUndefined
Undefined <|-- DebugUndefined
Undefined <|-- StrictUndefined
Environment <|-- SandboxedEnvironment
SandboxedEnvironment <|-- ImmutableSandboxedEnvironment
Formatter <|-- SandboxedFormatter
SandboxedFormatter <|-- SandboxedEscapeFormatter
EscapeFormatter <|-- SandboxedEscapeFormatter
te.Protocol <|-- VisitCallable
NodeVisitor <|-- NodeTransformer
enum.Enum <|-- _PassArg
t.NamedTuple <|-- Token
tuple <|-- OptionalLStrip
t.NamedTuple <|-- _Rule
NodeTransformer <|-- Optimizer
Exception <|-- TemplateError
IOError <|-- TemplateNotFound
LookupError <|-- TemplateNotFound
TemplateError <|-- TemplateNotFound
TemplateNotFound <|-- TemplatesNotFound
TemplateError <|-- TemplateSyntaxError
TemplateSyntaxError <|-- TemplateAssertionError
TemplateError <|-- TemplateRuntimeError
TemplateRuntimeError <|-- UndefinedError
TemplateRuntimeError <|-- SecurityError
TemplateRuntimeError <|-- FilterArgumentError
CodeGenerator <|-- NativeCodeGenerator
Environment <|-- NativeEnvironment
Template <|-- NativeTemplate
Exception <|-- Impossible
type <|-- NodeType
Node <|-- Stmt
Node <|-- Helper
Node <|-- Template
Stmt <|-- Output
Stmt <|-- Extends
Stmt <|-- For
Stmt <|-- If
Stmt <|-- Macro
Stmt <|-- CallBlock
Stmt <|-- FilterBlock
Stmt <|-- With
Stmt <|-- Block
Stmt <|-- Include
Stmt <|-- Import
Stmt <|-- FromImport
Stmt <|-- ExprStmt
Stmt <|-- Assign
Stmt <|-- AssignBlock
Node <|-- Expr
Expr <|-- BinExpr
Expr <|-- UnaryExpr
Expr <|-- Name
Expr <|-- NSRef
Expr <|-- Literal
Literal <|-- Const
Literal <|-- TemplateData
Literal <|-- Tuple
Literal <|-- List
Literal <|-- Dict
Helper <|-- Pair
Helper <|-- Keyword
Expr <|-- CondExpr
Expr <|-- _FilterTestCommon
_FilterTestCommon <|-- Filter
_FilterTestCommon <|-- Test
Expr <|-- Call
Expr <|-- Getitem
Expr <|-- Getattr
Expr <|-- Slice
Expr <|-- Concat
Expr <|-- Compare
Helper <|-- Operand
BinExpr <|-- Mul
BinExpr <|-- Div
BinExpr <|-- FloorDiv
BinExpr <|-- Add
BinExpr <|-- Sub
BinExpr <|-- Mod
BinExpr <|-- Pow
BinExpr <|-- And
BinExpr <|-- Or
UnaryExpr <|-- Not
UnaryExpr <|-- Neg
UnaryExpr <|-- Pos
Expr <|-- EnvironmentAttribute
Expr <|-- ExtensionAttribute
Expr <|-- ImportedName
Expr <|-- InternalName
Expr <|-- MarkSafe
Expr <|-- MarkSafeIfAutoescape
Expr <|-- ContextReference
Expr <|-- DerivedContextReference
Stmt <|-- Continue
Stmt <|-- Break
Stmt <|-- Scope
Stmt <|-- OverlayScope
Stmt <|-- EvalContextModifier
EvalContextModifier <|-- ScopedEvalContextModifier
te.Protocol <|-- _MemcachedClient
BytecodeCache <|-- FileSystemBytecodeCache
BytecodeCache <|-- MemcachedBytecodeCache
te.Protocol <|-- HasHTML
t.NamedTuple <|-- _GroupTuple
te.Protocol <|-- _TranslationsBasic
_TranslationsBasic <|-- _TranslationsContext
Extension <|-- InternationalizationExtension
Extension <|-- ExprStmtExtension
Extension <|-- LoopControlExtension
Extension <|-- DebugExtension
CodeGenerator <|-- TrackingCodeGenerator
Exception <|-- AlreadyRegisteredError
Exception <|-- RecursionError
object <|-- MatchDetail
object <|-- TreeEntry
object <|-- Pattern
Pattern <|-- RegexPattern
object <|-- RegexMatchResult
object <|-- PathSpec
PathSpec <|-- GitIgnoreSpec
ValueError <|-- GitWildMatchPatternError
RegexPattern <|-- GitWildMatchPattern
GitWildMatchPattern <|-- GitIgnorePattern
NamedTuple <|-- _NesterTokens
Protocol <|-- RendererProtocol
RendererProtocol <|-- RendererHTML
TypedDict <|-- RuleOptionsType
TypedDict <|-- OptionsType
TypedDict <|-- PresetType
MutableMappingABC <|-- OptionsDict
StateBase <|-- StateBlock
StateBase <|-- StateCore
Protocol <|-- _LinkType
StateBase <|-- StateInline
ReloaderLoop <|-- StatReloaderLoop
ReloaderLoop <|-- WatchdogReloaderLoop
PatternMatchingEventHandler <|-- EventHandler
logging.StreamHandler <|-- _ColorStreamHandler
io.RawIOBase <|-- DechunkedInput
BaseHTTPRequestHandler <|-- WSGIRequestHandler
HTTPServer <|-- BaseWSGIServer
socketserver.ThreadingMixIn <|-- ThreadedWSGIServer
BaseWSGIServer <|-- ThreadedWSGIServer
ForkingMixIn <|-- ForkingWSGIServer
BaseWSGIServer <|-- ForkingWSGIServer
_ProxyLookup <|-- _ProxyIOp
Exception <|-- ClientRedirectError
Response <|-- TestResponse
te.Protocol <|-- TStreamFactory
property <|-- cached_property
ImportError <|-- ImportStringError
Enum <|-- COEP
Enum <|-- COOP
Exception <|-- HTTPException
HTTPException <|-- BadRequest
BadRequest <|-- BadRequestKeyError
KeyError <|-- BadRequestKeyError
BadRequest <|-- ClientDisconnected
BadRequest <|-- SecurityError
BadRequest <|-- BadHost
HTTPException <|-- Unauthorized
HTTPException <|-- Forbidden
HTTPException <|-- NotFound
HTTPException <|-- MethodNotAllowed
HTTPException <|-- NotAcceptable
HTTPException <|-- RequestTimeout
HTTPException <|-- Conflict
HTTPException <|-- Gone
HTTPException <|-- LengthRequired
HTTPException <|-- PreconditionFailed
HTTPException <|-- RequestEntityTooLarge
HTTPException <|-- RequestURITooLarge
HTTPException <|-- UnsupportedMediaType
HTTPException <|-- RequestedRangeNotSatisfiable
HTTPException <|-- ExpectationFailed
HTTPException <|-- ImATeapot
HTTPException <|-- MisdirectedRequest
HTTPException <|-- UnprocessableEntity
HTTPException <|-- Locked
HTTPException <|-- FailedDependency
HTTPException <|-- PreconditionRequired
HTTPException <|-- _RetryAfter
_RetryAfter <|-- TooManyRequests
HTTPException <|-- RequestHeaderFieldsTooLarge
HTTPException <|-- UnavailableForLegalReasons
HTTPException <|-- InternalServerError
HTTPException <|-- NotImplemented
HTTPException <|-- BadGateway
_RetryAfter <|-- ServiceUnavailable
HTTPException <|-- GatewayTimeout
HTTPException <|-- HTTPVersionNotSupported
io.RawIOBase <|-- LimitedStream
Warning <|-- WSGIWarning
Warning <|-- HTTPWarning
_SansIORequest <|-- Request
_SansIOResponse <|-- Response
Event <|-- Preamble
Event <|-- Field
Event <|-- File
Event <|-- Data
Event <|-- Epilogue
Event <|-- NeedData
Enum <|-- State
_CacheControl <|-- RequestCacheControl
_CacheControl <|-- ResponseCacheControl
Accept <|-- MIMEAccept
Accept <|-- LanguageAccept
Accept <|-- CharsetAccept
ImmutableListMixin <|-- ImmutableList
ImmutableHeadersMixin <|-- EnvironHeaders
Headers <|-- EnvironHeaders
Exception <|-- SlashRequired
t.NamedTuple <|-- Weighting
RuleFactory <|-- Subdomain
RuleFactory <|-- Submount
RuleFactory <|-- EndpointPrefix
RuleFactory <|-- RuleTemplateFactory
RuleFactory <|-- Rule
Exception <|-- RoutingException
HTTPException <|-- RequestRedirect
RoutingException <|-- RequestRedirect
RoutingException <|-- RequestPath
RoutingException <|-- RequestAliasRedirect
RoutingException <|-- BuildError
LookupError <|-- BuildError
BadRequest <|-- WebsocketMismatch
Exception <|-- NoMatch
ValueError <|-- ValidationError
BaseConverter <|-- UnicodeConverter
BaseConverter <|-- AnyConverter
BaseConverter <|-- PathConverter
BaseConverter <|-- NumberConverter
NumberConverter <|-- IntegerConverter
NumberConverter <|-- FloatConverter
BaseConverter <|-- UUIDConverter
code.InteractiveInterpreter <|-- _InteractiveConsole
traceback.FrameSummary <|-- DebugFrameSummary
Structure <|-- Py_buffer
io.RawIOBase <|-- _WindowsConsoleRawIOBase
_WindowsConsoleRawIOBase <|-- _WindowsConsoleReader
_WindowsConsoleRawIOBase <|-- _WindowsConsoleWriter
textwrap.TextWrapper <|-- TextWrapper
enum.Enum <|-- ParameterSource
type <|-- _FakeSubclassCheck
Command <|-- _BaseCommand
Command <|-- Group
Group <|-- _MultiCommand
Group <|-- CommandCollection
Parameter <|-- Option
Parameter <|-- Argument
ParamType <|-- CompositeParamType
ParamType <|-- FuncParamType
ParamType <|-- UnprocessedParamType
ParamType <|-- StringParamType
ParamType <|-- Choice
ParamType <|-- DateTime
ParamType <|-- _NumberParamTypeBase
_NumberParamTypeBase <|-- _NumberRangeBase
_NumberParamTypeBase <|-- IntParamType
_NumberRangeBase <|-- IntRange
IntParamType <|-- IntRange
_NumberParamTypeBase <|-- FloatParamType
_NumberRangeBase <|-- FloatRange
FloatParamType <|-- FloatRange
ParamType <|-- BoolParamType
ParamType <|-- UUIDParameterType
ParamType <|-- File
ParamType <|-- Path
CompositeParamType <|-- Tuple
t.TypedDict <|-- OptionHelpExtra
Exception <|-- ClickException
ClickException <|-- UsageError
UsageError <|-- BadParameter
BadParameter <|-- MissingParameter
UsageError <|-- NoSuchOption
UsageError <|-- BadOptionUsage
UsageError <|-- BadArgumentUsage
UsageError <|-- NoArgsIsHelpError
ClickException <|-- FileError
RuntimeError <|-- Abort
RuntimeError <|-- Exit
ShellComplete <|-- BashComplete
ShellComplete <|-- ZshComplete
ShellComplete <|-- FishComplete
io.TextIOWrapper <|-- _NonClosingTextIOWrapper
io.BytesIO <|-- BytesIOCopy
io.TextIOWrapper <|-- _NamedTextIOWrapper
RateLimiter <|-- MovingWindowRateLimiter
RateLimiter <|-- FixedWindowRateLimiter
RateLimiter <|-- SlidingWindowCounterRateLimiter
NamedTuple <|-- Granularity
type <|-- RateLimitItemMeta
RateLimitItem <|-- RateLimitItemPerYear
RateLimitItem <|-- RateLimitItemPerMonth
RateLimitItem <|-- RateLimitItemPerDay
RateLimitItem <|-- RateLimitItemPerHour
RateLimitItem <|-- RateLimitItemPerMinute
RateLimitItem <|-- RateLimitItemPerSecond
NamedTuple <|-- WindowStats
_UserDict <|-- DependencyDict
Exception <|-- ConfigurationError
Exception <|-- ConcurrentUpdateError
Exception <|-- StorageError
Protocol <|-- MemcachedClientP
Protocol <|-- RedisClientP
Protocol <|-- AsyncRedisClientP
ABC <|-- RateLimiter
RateLimiter <|-- MovingWindowRateLimiter
RateLimiter <|-- FixedWindowRateLimiter
RateLimiter <|-- SlidingWindowCounterRateLimiter
Storage <|-- MemoryStorage
MovingWindowSupport <|-- MemoryStorage
SlidingWindowCounterSupport <|-- MemoryStorage
TimestampedSlidingWindow <|-- MemoryStorage
Storage <|-- MongoDBStorage
MovingWindowSupport <|-- MongoDBStorage
SlidingWindowCounterSupport <|-- MongoDBStorage
LazyDependency <|-- Storage
ABC <|-- MovingWindowSupport
ABC <|-- SlidingWindowCounterSupport
RedispyBridge <|-- ValkeyBridge
ABC <|-- RedisBridge
Storage <|-- RedisStorage
MovingWindowSupport <|-- RedisStorage
SlidingWindowCounterSupport <|-- RedisStorage
RedisStorage <|-- RedisClusterStorage
RedisStorage <|-- RedisSentinelStorage
RedisBridge <|-- CoredisBridge
RedisBridge <|-- RedispyBridge
MemcachedBridge <|-- EmcacheBridge
ABC <|-- MemcachedBridge
Storage <|-- MemcachedStorage
SlidingWindowCounterSupport <|-- MemcachedStorage
TimestampedSlidingWindow <|-- MemcachedStorage
MemcachedBridge <|-- MemcachioBridge
Storage <|-- MemcachedStorage
SlidingWindowCounterSupport <|-- MemcachedStorage
TimestampedSlidingWindow <|-- MemcachedStorage
Storage <|-- MemoryStorage
MovingWindowSupport <|-- MemoryStorage
SlidingWindowCounterSupport <|-- MemoryStorage
TimestampedSlidingWindow <|-- MemoryStorage
ABCMeta <|-- StorageRegistry
RedisStorage <|-- RedisClusterStorage
Storage <|-- MongoDBStorageBase
MovingWindowSupport <|-- MongoDBStorageBase
SlidingWindowCounterSupport <|-- MongoDBStorageBase
ABC <|-- MongoDBStorageBase
MongoDBStorageBase <|-- MongoDBStorage
RedisStorage <|-- RedisSentinelStorage
Storage <|-- RedisStorage
MovingWindowSupport <|-- RedisStorage
SlidingWindowCounterSupport <|-- RedisStorage
LazyDependency <|-- Storage
ABC <|-- MovingWindowSupport
ABC <|-- SlidingWindowCounterSupport
object <|-- Pidfile
threading.Thread <|-- Reloader
threading.Thread <|-- InotifyReloader
object <|-- InotifyReloader
object <|-- Config
type <|-- SettingMeta
object <|-- Setting
Setting <|-- ConfigFile
Setting <|-- WSGIApp
Setting <|-- Bind
Setting <|-- Backlog
Setting <|-- Workers
Setting <|-- WorkerClass
Setting <|-- WorkerThreads
Setting <|-- WorkerConnections
Setting <|-- MaxRequests
Setting <|-- MaxRequestsJitter
Setting <|-- Timeout
Setting <|-- GracefulTimeout
Setting <|-- Keepalive
Setting <|-- LimitRequestLine
Setting <|-- LimitRequestFields
Setting <|-- LimitRequestFieldSize
Setting <|-- Reload
Setting <|-- ReloadEngine
Setting <|-- ReloadExtraFiles
Setting <|-- Spew
Setting <|-- ConfigCheck
Setting <|-- PrintConfig
Setting <|-- PreloadApp
Setting <|-- Sendfile
Setting <|-- ReusePort
Setting <|-- Chdir
Setting <|-- Daemon
Setting <|-- Env
Setting <|-- Pidfile
Setting <|-- WorkerTmpDir
Setting <|-- User
Setting <|-- Group
Setting <|-- Umask
Setting <|-- Initgroups
Setting <|-- TmpUploadDir
Setting <|-- SecureSchemeHeader
Setting <|-- ForwardedAllowIPS
Setting <|-- AccessLog
Setting <|-- DisableRedirectAccessToSyslog
Setting <|-- AccessLogFormat
Setting <|-- ErrorLog
Setting <|-- Loglevel
Setting <|-- CaptureOutput
Setting <|-- LoggerClass
Setting <|-- LogConfig
Setting <|-- LogConfigDict
Setting <|-- LogConfigJson
Setting <|-- SyslogTo
Setting <|-- Syslog
Setting <|-- SyslogPrefix
Setting <|-- SyslogFacility
Setting <|-- EnableStdioInheritance
Setting <|-- StatsdHost
Setting <|-- DogstatsdTags
Setting <|-- StatsdPrefix
Setting <|-- Procname
Setting <|-- DefaultProcName
Setting <|-- PythonPath
Setting <|-- Paste
Setting <|-- OnStarting
Setting <|-- OnReload
Setting <|-- WhenReady
Setting <|-- Prefork
Setting <|-- Postfork
Setting <|-- PostWorkerInit
Setting <|-- WorkerInt
Setting <|-- WorkerAbort
Setting <|-- PreExec
Setting <|-- PreRequest
Setting <|-- PostRequest
Setting <|-- ChildExit
Setting <|-- WorkerExit
Setting <|-- NumWorkersChanged
Setting <|-- OnExit
Setting <|-- NewSSLContext
Setting <|-- ProxyProtocol
Setting <|-- ProxyAllowFrom
Setting <|-- KeyFile
Setting <|-- CertFile
Setting <|-- SSLVersion
Setting <|-- CertReqs
Setting <|-- CACerts
Setting <|-- SuppressRaggedEOFs
Setting <|-- DoHandshakeOnConnect
Setting <|-- Ciphers
Setting <|-- PasteGlobalConf
Setting <|-- StripHeaderSpaces
object <|-- BaseSocket
BaseSocket <|-- TCPSocket
TCPSocket <|-- TCP6Socket
BaseSocket <|-- UnixSocket
object <|-- Spew
object <|-- Arbiter
BaseException <|-- HaltServer
Exception <|-- ConfigError
Exception <|-- AppImportError
dict <|-- SafeAtoms
object <|-- Logger
Application <|-- WSGIApplication
WSGIApplication <|-- PasterServerApplication
object <|-- BaseApplication
BaseApplication <|-- Application
Logger <|-- Statsd
object <|-- ChunkedReader
object <|-- LengthReader
object <|-- EOFReader
object <|-- Body
object <|-- Message
Message <|-- Request
object <|-- Unreader
Unreader <|-- SocketUnreader
Unreader <|-- IterUnreader
object <|-- Parser
Parser <|-- RequestParser
Exception <|-- ParseException
IOError <|-- NoMoreData
ParseException <|-- InvalidRequestLine
ParseException <|-- InvalidRequestMethod
ParseException <|-- InvalidHTTPVersion
ParseException <|-- InvalidHeader
ParseException <|-- InvalidHeaderName
IOError <|-- InvalidChunkSize
IOError <|-- ChunkMissingTerminator
ParseException <|-- LimitRequestLine
ParseException <|-- LimitRequestHeaders
ParseException <|-- InvalidProxyLine
ParseException <|-- ForbiddenProxyRequest
ParseException <|-- InvalidSchemeHeaders
object <|-- FileWrapper
io.RawIOBase <|-- WSGIErrorsWrapper
object <|-- Response
Exception <|-- StopWaiting
base.Worker <|-- SyncWorker
base.Worker <|-- AsyncWorker
Worker <|-- TornadoWorker
tornado.httpserver.HTTPServer <|-- _HTTPServer
AsyncWorker <|-- EventletWorker
object <|-- WorkerTmp
AsyncWorker <|-- GeventWorker
object <|-- GeventResponse
pywsgi.WSGIHandler <|-- PyWSGIHandler
pywsgi.WSGIServer <|-- PyWSGIServer
GeventWorker <|-- GeventPyWSGIWorker
object <|-- TConn
base.Worker <|-- ThreadWorker
object <|-- Worker
HasDescriptionCode <|-- SQLAlchemyError
Exception <|-- SQLAlchemyError
SQLAlchemyError <|-- ArgumentError
ArgumentError <|-- DuplicateColumnError
ArgumentError <|-- ObjectNotExecutableError
ArgumentError <|-- NoSuchModuleError
ArgumentError <|-- NoForeignKeysError
ArgumentError <|-- AmbiguousForeignKeysError
ArgumentError <|-- ConstraintColumnNotFoundError
SQLAlchemyError <|-- CircularDependencyError
SQLAlchemyError <|-- CompileError
CompileError <|-- UnsupportedCompilationError
SQLAlchemyError <|-- IdentifierError
SQLAlchemyError <|-- DisconnectionError
DisconnectionError <|-- InvalidatePoolError
SQLAlchemyError <|-- TimeoutError
SQLAlchemyError <|-- InvalidRequestError
InvalidRequestError <|-- IllegalStateChangeError
InvalidRequestError <|-- NoInspectionAvailable
InvalidRequestError <|-- PendingRollbackError
InvalidRequestError <|-- ResourceClosedError
InvalidRequestError <|-- NoSuchColumnError
KeyError <|-- NoSuchColumnError
InvalidRequestError <|-- NoResultFound
InvalidRequestError <|-- MultipleResultsFound
InvalidRequestError <|-- NoReferenceError
InvalidRequestError <|-- AwaitRequired
InvalidRequestError <|-- MissingGreenlet
NoReferenceError <|-- NoReferencedTableError
NoReferenceError <|-- NoReferencedColumnError
InvalidRequestError <|-- NoSuchTableError
InvalidRequestError <|-- UnreflectableTableError
InvalidRequestError <|-- UnboundExecutionError
SQLAlchemyError <|-- StatementError
StatementError <|-- DBAPIError
DBAPIError <|-- InterfaceError
DBAPIError <|-- DatabaseError
DatabaseError <|-- DataError
DatabaseError <|-- OperationalError
DatabaseError <|-- IntegrityError
DatabaseError <|-- InternalError
DatabaseError <|-- ProgrammingError
DatabaseError <|-- NotSupportedError
Warning <|-- SATestSuiteWarning
HasDescriptionCode <|-- SADeprecationWarning
DeprecationWarning <|-- SADeprecationWarning
SADeprecationWarning <|-- Base20DeprecationWarning
Base20DeprecationWarning <|-- LegacyAPIWarning
Base20DeprecationWarning <|-- MovedIn20Warning
PendingDeprecationWarning <|-- SAPendingDeprecationWarning
HasDescriptionCode <|-- SAWarning
RuntimeWarning <|-- SAWarning
AsyncAdapt_dbapi_cursor <|-- AsyncAdapt_dbapi_ss_cursor
AdaptedConnection <|-- AsyncAdapt_dbapi_connection
AsyncAdapt_dbapi_connection <|-- AsyncAdaptFallback_dbapi_connection
Dialect <|-- Connector
AsyncAdapt_dbapi_cursor <|-- AsyncAdapt_aioodbc_cursor
AsyncAdapt_aioodbc_cursor <|-- AsyncAdapt_aioodbc_ss_cursor
AsyncAdapt_dbapi_ss_cursor <|-- AsyncAdapt_aioodbc_ss_cursor
AsyncAdapt_dbapi_connection <|-- AsyncAdapt_aioodbc_connection
AsyncAdaptFallback_dbapi_connection <|-- AsyncAdaptFallback_aioodbc_connection
AsyncAdapt_aioodbc_connection <|-- AsyncAdaptFallback_aioodbc_connection
PyODBCConnector <|-- aiodbcConnector
Connector <|-- PyODBCConnector
Exception <|-- Empty
Exception <|-- Full
Protocol <|-- greenlet
greenlet <|-- _AsyncIoGreenlet
typing.NamedTuple <|-- FullArgSpec
ReadOnlyContainer <|-- ReadOnlyProperties
IdentitySet <|-- OrderedIdentitySet
Protocol <|-- _ScopeFuncType
property <|-- classproperty
int <|-- symbol
type <|-- _IntFlagMeta
str <|-- _hash_limit_string
Protocol <|-- ArgsTypeProcotol
Protocol <|-- DescriptorProto
ReadOnlyContainer <|-- ImmutableDictBase
InstrumentationFactory <|-- ExtendedInstrumentationRegistry
ClassManager <|-- _ClassInstrumentationAdapter
InspectionAttrExtensionType <|-- HybridExtensionType
interfaces.InspectionAttrInfo <|-- hybrid_method
interfaces.InspectionAttrInfo <|-- hybrid_property
hybrid_property <|-- index_property
Protocol <|-- PythonNameForTableType
Protocol <|-- NameForScalarRelationshipType
Protocol <|-- NameForCollectionRelationshipType
Protocol <|-- GenerateRelationshipType
Protocol <|-- ShardChooser
Protocol <|-- IdentityChooser
Session <|-- ShardedSession
ORMOption <|-- set_shard_id
MutableBase <|-- Mutable
MutableBase <|-- MutableComposite
Mutable <|-- MutableDict
Mutable <|-- MutableList
Mutable <|-- MutableSet
InspectionAttrExtensionType <|-- AssociationProxyExtensionType
Protocol <|-- _SetterProtocol
_SetterProtocol <|-- _PlainSetterProtocol
_SetterProtocol <|-- _DictSetterProtocol
Protocol <|-- _CreatorProtocol
_CreatorProtocol <|-- _PlainCreatorProtocol
_CreatorProtocol <|-- _KeyCreatorProtocol
Protocol <|-- _GetSetFactoryProtocol
Protocol <|-- _ProxyFactoryProtocol
Protocol <|-- _ProxyBulkSetProtocol
interfaces.InspectionAttrInfo <|-- AssociationProxy
_DCAttributeOptions <|-- AssociationProxy
Plugin <|-- SQLAlchemyPlugin
ConcreteBase <|-- AbstractConcreteBase
_WithKeys <|-- AsyncResult
_WithKeys <|-- AsyncMappingResult
util.TypingOnly <|-- AsyncTupleResult
AsyncConnectable <|-- AsyncConnection
AsyncConnectable <|-- AsyncEngine
exc.InvalidRequestError <|-- AsyncMethodRequired
exc.InvalidRequestError <|-- AsyncContextNotStarted
exc.InvalidRequestError <|-- AsyncContextAlreadyStarted
abc.ABC <|-- StartableContext
ComparableEntity <|-- User
ComparableEntity <|-- Order
ComparableEntity <|-- Dingaling
User <|-- EmailUser
ComparableEntity <|-- Address
ComparableEntity <|-- Child1
ComparableEntity <|-- Child2
ComparableEntity <|-- Parent
Mixin <|-- AddressWMixin
ComparableEntity <|-- AddressWMixin
Predicate <|-- BooleanPredicate
Predicate <|-- SpecPredicate
Predicate <|-- LambdaPredicate
Predicate <|-- NotPredicate
Predicate <|-- OrPredicate
set <|-- RandomSet
dict <|-- adict
dict <|-- immutabledict
AssertRule <|-- SQLMatchRule
SQLMatchRule <|-- CursorSQL
SQLMatchRule <|-- CompiledSQL
CompiledSQL <|-- RegexSQL
CompiledSQL <|-- DialectSQL
AssertRule <|-- CountStatements
AssertRule <|-- AllOf
AssertRule <|-- EachOf
EachOf <|-- Conditional
AllOf <|-- Or
Requirements <|-- SuiteRequirements
ComparableMixin <|-- ComparableEntity
BasicEntity <|-- ComparableEntity
abc.ABC <|-- FixtureFunctions
argparse.Action <|-- CallableAction
argparse.Action <|-- CallableAction
plugin_base.FixtureFunctions <|-- PytestFixtureFunctions
TestBase <|-- ORMTest
ORMTest <|-- MappedTest
TablesTest <|-- MappedTest
assertions.AssertsExecutionResults <|-- MappedTest
BasicEntity <|-- Basic
_Base <|-- Basic
ComparableEntity <|-- Comparable
_Base <|-- Comparable
MappedTest <|-- DeclarativeMappedTest
DeclarativeBase <|-- _DeclBase
TestBase <|-- MypyTest
TestBase <|-- TablesTest
TablesTest <|-- ComputedReflectionFixtureTest
DeclarativeBase <|-- Base
MappedAsDataclass <|-- Base
DeclarativeBase <|-- Base
fixtures.TablesTest <|-- SequenceTest
testing.AssertsCompiledSQL <|-- SequenceCompilerTest
fixtures.TestBase <|-- SequenceCompilerTest
fixtures.TablesTest <|-- HasSequenceTest
fixtures.TestBase <|-- HasSequenceTestEmpty
fixtures.TablesTest <|-- RowFetchTest
fixtures.TablesTest <|-- PercentSchemaNamesTest
fixtures.TestBase <|-- ServerSideCursorsTest
testing.AssertsExecutionResults <|-- ServerSideCursorsTest
fixtures.TablesTest <|-- LastrowidTest
fixtures.TablesTest <|-- InsertBehaviorTest
fixtures.TablesTest <|-- ReturningTest
fixtures.TablesTest <|-- CollateTest
fixtures.TablesTest <|-- OrderByLabelTest
fixtures.TestBase <|-- ValuesExpressionTest
fixtures.TablesTest <|-- FetchLimitOffsetTest
fixtures.TablesTest <|-- SameNamedSchemaTableTest
fixtures.TablesTest <|-- JoinTest
fixtures.TablesTest <|-- CompoundSelectTest
AssertsExecutionResults <|-- PostCompileParamsTest
AssertsCompiledSQL <|-- PostCompileParamsTest
fixtures.TablesTest <|-- PostCompileParamsTest
fixtures.TablesTest <|-- ExpandingBoundInTest
collections_abc.Sequence <|-- LikeATuple
collections_abc.Sequence <|-- LikeATuple
fixtures.TablesTest <|-- LikeFunctionsTest
fixtures.TablesTest <|-- ComputedColumnTest
fixtures.TablesTest <|-- IdentityColumnTest
fixtures.TablesTest <|-- IdentityAutoincrementTest
fixtures.TablesTest <|-- ExistsTest
AssertsCompiledSQL <|-- DistinctOnTest
fixtures.TablesTest <|-- DistinctOnTest
fixtures.TablesTest <|-- IsOrIsNotDistinctFromTest
fixtures.TablesTest <|-- DeprecatedCompoundSelectTest
fixtures.TestBase <|-- TableDDLTest
fixtures.FutureEngineMixin <|-- FutureTableDDLTest
TableDDLTest <|-- FutureTableDDLTest
fixtures.TestBase <|-- LongNameBlowoutTest
fixtures.TestBase <|-- PingTest
fixtures.TestBase <|-- ArgSignatureTest
fixtures.TablesTest <|-- ExceptionTest
fixtures.TestBase <|-- IsolationLevelTest
fixtures.TablesTest <|-- AutocommitIsolationTest
fixtures.TestBase <|-- EscapingTest
fixtures.TestBase <|-- WeCanSetDefaultSchemaWEventsTest
fixtures.FutureEngineMixin <|-- FutureWeCanSetDefaultSchemaWEventsTest
WeCanSetDefaultSchemaWEventsTest <|-- FutureWeCanSetDefaultSchemaWEventsTest
fixtures.TestBase <|-- DifficultParametersTest
fixtures.TablesTest <|-- ReturningGuardsTest
fixtures.TablesTest <|-- SimpleUpdateDeleteTest
fixtures.TablesTest <|-- OneConnectionTablesTest
OneConnectionTablesTest <|-- HasTableTest
fixtures.TablesTest <|-- HasIndexTest
fixtures.TestBase <|-- BizarroCharacterFKResolutionTest
fixtures.TablesTest <|-- QuotedNameArgumentTest
ComparesTables <|-- ComponentReflectionTest
OneConnectionTablesTest <|-- ComponentReflectionTest
str <|-- tt
fixtures.TestBase <|-- TableNoColumnsTest
ComparesIndexes <|-- ComponentReflectionTestExtra
fixtures.TestBase <|-- ComponentReflectionTestExtra
str <|-- lower_index_str
str <|-- coalesce_index_str
fixtures.TablesTest <|-- NormalizedNameTest
fixtures.ComputedReflectionFixtureTest <|-- ComputedReflectionTest
fixtures.TablesTest <|-- IdentityReflectionTest
fixtures.TablesTest <|-- CompositeKeyReflectionTest
fixtures.TablesTest <|-- RowCountTest
fixtures.TablesTest <|-- CTETest
_LiteralRoundTripFixture <|-- _UnicodeFixture
fixtures.TestBase <|-- _UnicodeFixture
_UnicodeFixture <|-- UnicodeVarcharTest
fixtures.TablesTest <|-- UnicodeVarcharTest
_UnicodeFixture <|-- UnicodeTextTest
fixtures.TablesTest <|-- UnicodeTextTest
_LiteralRoundTripFixture <|-- ArrayTest
fixtures.TablesTest <|-- ArrayTest
_LiteralRoundTripFixture <|-- BinaryTest
fixtures.TablesTest <|-- BinaryTest
_LiteralRoundTripFixture <|-- TextTest
fixtures.TablesTest <|-- TextTest
_LiteralRoundTripFixture <|-- StringTest
fixtures.TestBase <|-- StringTest
_LiteralRoundTripFixture <|-- IntervalTest
fixtures.TestBase <|-- IntervalTest
TypeDecorator <|-- Decorated
IntervalTest <|-- PrecisionIntervalTest
_LiteralRoundTripFixture <|-- _DateFixture
fixtures.TestBase <|-- _DateFixture
TypeDecorator <|-- Decorated
_DateFixture <|-- DateTimeTest
fixtures.TablesTest <|-- DateTimeTest
_DateFixture <|-- DateTimeTZTest
fixtures.TablesTest <|-- DateTimeTZTest
_DateFixture <|-- DateTimeMicrosecondsTest
fixtures.TablesTest <|-- DateTimeMicrosecondsTest
_DateFixture <|-- TimestampMicrosecondsTest
fixtures.TablesTest <|-- TimestampMicrosecondsTest
_DateFixture <|-- TimeTest
fixtures.TablesTest <|-- TimeTest
_DateFixture <|-- TimeTZTest
fixtures.TablesTest <|-- TimeTZTest
_DateFixture <|-- TimeMicrosecondsTest
fixtures.TablesTest <|-- TimeMicrosecondsTest
_DateFixture <|-- DateTest
fixtures.TablesTest <|-- DateTest
_DateFixture <|-- DateTimeCoercedToDateTimeTest
fixtures.TablesTest <|-- DateTimeCoercedToDateTimeTest
_DateFixture <|-- DateTimeHistoricTest
fixtures.TablesTest <|-- DateTimeHistoricTest
_DateFixture <|-- DateHistoricTest
fixtures.TablesTest <|-- DateHistoricTest
_LiteralRoundTripFixture <|-- IntegerTest
fixtures.TestBase <|-- IntegerTest
_LiteralRoundTripFixture <|-- CastTypeDecoratorTest
fixtures.TestBase <|-- CastTypeDecoratorTest
TypeDecorator <|-- StringAsInt
fixtures.TestBase <|-- TrueDivTest
_LiteralRoundTripFixture <|-- NumericTest
fixtures.TestBase <|-- NumericTest
_LiteralRoundTripFixture <|-- BooleanTest
fixtures.TablesTest <|-- BooleanTest
_LiteralRoundTripFixture <|-- JSONTest
fixtures.TablesTest <|-- JSONTest
json.JSONEncoder <|-- DecimalEncoder
Base <|-- Data
_LiteralRoundTripFixture <|-- JSONLegacyStringCastIndexTest
fixtures.TablesTest <|-- JSONLegacyStringCastIndexTest
_LiteralRoundTripFixture <|-- UuidTest
fixtures.TablesTest <|-- UuidTest
UuidTest <|-- NativeUUIDTest
fixtures.TablesTest <|-- UnicodeSchemaTest
TypeDecorator <|-- NAME
TypeDecorator <|-- PG_NODE_TREE
TypeDecorator <|-- INT2VECTOR
TypeDecorator <|-- OIDVECTOR
sqltypes.Numeric <|-- _PsycopgNumeric
_PsycopgNumeric <|-- _PsycopgFloat
HSTORE <|-- _PsycopgHStore
PGARRAY <|-- _PsycopgARRAY
_SpaceVector <|-- _PsycopgINT2VECTOR
INT2VECTOR <|-- _PsycopgINT2VECTOR
_SpaceVector <|-- _PsycopgOIDVECTOR
OIDVECTOR <|-- _PsycopgOIDVECTOR
PGExecutionContext <|-- _PGExecutionContext_common_psycopg
PGDialect <|-- _PGDialect_common_psycopg
PGARRAY <|-- AsyncpgARRAY
sqltypes.String <|-- AsyncpgString
REGCONFIG <|-- AsyncpgREGCONFIG
sqltypes.Time <|-- AsyncpgTime
BIT <|-- AsyncpgBit
BYTEA <|-- AsyncpgByteA
sqltypes.Date <|-- AsyncpgDate
sqltypes.DateTime <|-- AsyncpgDateTime
sqltypes.Boolean <|-- AsyncpgBoolean
INTERVAL <|-- AsyncPgInterval
ENUM <|-- AsyncPgEnum
sqltypes.Integer <|-- AsyncpgInteger
sqltypes.BigInteger <|-- AsyncpgBigInteger
json.JSON <|-- AsyncpgJSON
json.JSONB <|-- AsyncpgJSONB
sqltypes.JSON.JSONIndexType <|-- AsyncpgJSONIndexType
sqltypes.JSON.JSONIntIndexType <|-- AsyncpgJSONIntIndexType
sqltypes.JSON.JSONStrIndexType <|-- AsyncpgJSONStrIndexType
json.JSONPathType <|-- AsyncpgJSONPathType
sqltypes.Numeric <|-- AsyncpgNumeric
AsyncpgNumeric <|-- AsyncpgFloat
sqltypes.Float <|-- AsyncpgFloat
REGCLASS <|-- AsyncpgREGCLASS
OID <|-- AsyncpgOID
sqltypes.CHAR <|-- AsyncpgCHAR
ranges.AbstractRangeImpl <|-- _AsyncpgRange
ranges.AbstractMultiRangeImpl <|-- _AsyncpgMultiRange
PGExecutionContext <|-- PGExecutionContext_asyncpg
PGCompiler <|-- PGCompiler_asyncpg
PGIdentifierPreparer <|-- PGIdentifierPreparer_asyncpg
AsyncAdapt_asyncpg_cursor <|-- AsyncAdapt_asyncpg_ss_cursor
AdaptedConnection <|-- AsyncAdapt_asyncpg_connection
AsyncAdapt_asyncpg_connection <|-- AsyncAdaptFallback_asyncpg_connection
Exception <|-- Error
Exception <|-- Warning
Error <|-- InterfaceError
Error <|-- DatabaseError
DatabaseError <|-- InternalError
DatabaseError <|-- OperationalError
DatabaseError <|-- ProgrammingError
DatabaseError <|-- IntegrityError
DatabaseError <|-- DataError
DatabaseError <|-- NotSupportedError
InternalError <|-- InternalServerError
NotSupportedError <|-- InvalidCachedStatementError
PGDialect <|-- PGDialect_asyncpg
PGDialect_psycopg2 <|-- PGDialect_psycopg2cffi
sqltypes.String <|-- _PGString
REGCONFIG <|-- _PGREGCONFIG
JSON <|-- _PGJSON
JSONB <|-- _PGJSONB
sqltypes.JSON.JSONIntIndexType <|-- _PGJSONIntIndexType
sqltypes.JSON.JSONStrIndexType <|-- _PGJSONStrIndexType
JSONPathType <|-- _PGJSONPathType
INTERVAL <|-- _PGInterval
sqltypes.DateTime <|-- _PGTimeStamp
sqltypes.Date <|-- _PGDate
sqltypes.Time <|-- _PGTime
sqltypes.Integer <|-- _PGInteger
sqltypes.SmallInteger <|-- _PGSmallInteger
sqltypes.NullType <|-- _PGNullType
sqltypes.BigInteger <|-- _PGBigInteger
sqltypes.Boolean <|-- _PGBoolean
ranges.AbstractRangeImpl <|-- _PsycopgRange
ranges.AbstractMultiRangeImpl <|-- _PsycopgMultiRange
_PGExecutionContext_common_psycopg <|-- PGExecutionContext_psycopg
PGCompiler <|-- PGCompiler_psycopg
PGIdentifierPreparer <|-- PGIdentifierPreparer_psycopg
_PGDialect_common_psycopg <|-- PGDialect_psycopg
AsyncAdapt_psycopg_cursor <|-- AsyncAdapt_psycopg_ss_cursor
AdaptedConnection <|-- AsyncAdapt_psycopg_connection
AsyncAdapt_psycopg_connection <|-- AsyncAdaptFallback_psycopg_connection
PGDialect_psycopg <|-- PGDialectAsync_psycopg
sqltypes.LargeBinary <|-- BYTEA
sqltypes.TIMESTAMP <|-- TIMESTAMP
sqltypes.TIME <|-- TIME
type_api.NativeForEmulated <|-- INTERVAL
sqltypes._AbstractInterval <|-- INTERVAL
sqltypes.TEXT <|-- CITEXT
JSON <|-- _PGJSON
JSONB <|-- _PGJSONB
ranges.AbstractRangeImpl <|-- _Psycopg2Range
_Psycopg2Range <|-- _Psycopg2NumericRange
_Psycopg2Range <|-- _Psycopg2DateRange
_Psycopg2Range <|-- _Psycopg2DateTimeRange
_Psycopg2Range <|-- _Psycopg2DateTimeTZRange
_PGExecutionContext_common_psycopg <|-- PGExecutionContext_psycopg2
PGIdentifierPreparer <|-- PGIdentifierPreparer_psycopg2
FastIntFlag <|-- ExecutemanyMode
_PGDialect_common_psycopg <|-- PGDialect_psycopg2
sqltypes.String <|-- _PGString
sqltypes.Numeric <|-- _PGNumeric
_PGNumeric <|-- _PGFloat
sqltypes.Float <|-- _PGFloat
_PGNumeric <|-- _PGNumericNoBind
JSON <|-- _PGJSON
JSONB <|-- _PGJSONB
sqltypes.JSON.JSONIndexType <|-- _PGJSONIndexType
sqltypes.JSON.JSONIntIndexType <|-- _PGJSONIntIndexType
sqltypes.JSON.JSONStrIndexType <|-- _PGJSONStrIndexType
JSONPathType <|-- _PGJSONPathType
ENUM <|-- _PGEnum
INTERVAL <|-- _PGInterval
sqltypes.DateTime <|-- _PGTimeStamp
sqltypes.Date <|-- _PGDate
sqltypes.Time <|-- _PGTime
sqltypes.Integer <|-- _PGInteger
sqltypes.SmallInteger <|-- _PGSmallInteger
sqltypes.NullType <|-- _PGNullType
sqltypes.BigInteger <|-- _PGBigInteger
sqltypes.Boolean <|-- _PGBoolean
PGARRAY <|-- _PGARRAY
_SpaceVector <|-- _PGOIDVECTOR
OIDVECTOR <|-- _PGOIDVECTOR
ranges.AbstractRangeImpl <|-- _Pg8000Range
ranges.AbstractMultiRangeImpl <|-- _Pg8000MultiRange
PGExecutionContext <|-- PGExecutionContext_pg8000
PGCompiler <|-- PGCompiler_pg8000
PGIdentifierPreparer <|-- PGIdentifierPreparer_pg8000
PGDialect <|-- PGDialect_pg8000
sqltypes.ARRAY <|-- ARRAY
sqltypes.ARRAY.Comparator <|-- Comparator
StandardInsert <|-- Insert
ClauseElement <|-- OnConflictClause
OnConflictClause <|-- OnConflictDoNothing
OnConflictClause <|-- OnConflictDoUpdate
sqltypes.JSON.JSONPathType <|-- JSONPathType
JSONPathType <|-- JSONPATH
sqltypes.JSON <|-- JSON
sqltypes.JSON.Comparator <|-- Comparator
JSON <|-- JSONB
JSON.Comparator <|-- Comparator
sqltypes.TypeEngine <|-- NamedType
InvokeCreateDDLBase <|-- NamedTypeGenerator
InvokeDropDDLBase <|-- NamedTypeDropper
NamedTypeGenerator <|-- EnumGenerator
NamedTypeDropper <|-- EnumDropper
NamedType <|-- ENUM
type_api.NativeForEmulated <|-- ENUM
sqltypes.Enum <|-- ENUM
NamedTypeGenerator <|-- DomainGenerator
NamedTypeDropper <|-- DomainDropper
NamedType <|-- DOMAIN
sqltypes.SchemaType <|-- DOMAIN
schema._CreateDropBase <|-- CreateEnumType
schema._CreateDropBase <|-- DropEnumType
schema._CreateDropBase <|-- CreateDomainType
schema._CreateDropBase <|-- DropDomainType
compiler.SQLCompiler <|-- PGCompiler
compiler.DDLCompiler <|-- PGDDLCompiler
compiler.GenericTypeCompiler <|-- PGTypeCompiler
compiler.IdentifierPreparer <|-- PGIdentifierPreparer
TypedDict <|-- ReflectedNamedType
TypedDict <|-- ReflectedDomainConstraint
ReflectedNamedType <|-- ReflectedDomain
ReflectedNamedType <|-- ReflectedEnum
reflection.Inspector <|-- PGInspector
default.DefaultExecutionContext <|-- PGExecutionContext
characteristics.ConnectionCharacteristic <|-- PGReadOnlyConnectionCharacteristic
characteristics.ConnectionCharacteristic <|-- PGDeferrableConnectionCharacteristic
default.DefaultDialect <|-- PGDialect
expression.ColumnElement <|-- aggregate_order_by
ColumnCollectionConstraint <|-- ExcludeConstraint
_regconfig_fn <|-- to_tsvector
_regconfig_fn <|-- to_tsquery
_regconfig_fn <|-- plainto_tsquery
_regconfig_fn <|-- phraseto_tsquery
_regconfig_fn <|-- websearch_to_tsquery
_regconfig_fn <|-- ts_headline
sqltypes.Indexable <|-- HSTORE
sqltypes.Concatenable <|-- HSTORE
sqltypes.TypeEngine <|-- HSTORE
sqltypes.Indexable.Comparator <|-- Comparator
sqltypes.Concatenable.Comparator <|-- Comparator
sqlfunc.GenericFunction <|-- hstore
sqlfunc.GenericFunction <|-- _HStoreDefinedFunction
sqlfunc.GenericFunction <|-- _HStoreDeleteFunction
sqlfunc.GenericFunction <|-- _HStoreSliceFunction
sqlfunc.GenericFunction <|-- _HStoreKeysFunction
sqlfunc.GenericFunction <|-- _HStoreValsFunction
sqlfunc.GenericFunction <|-- _HStoreArrayFunction
sqlfunc.GenericFunction <|-- _HStoreMatrixFunction
sqltypes._Binary <|-- RAW
sqltypes.Text <|-- NCLOB
VARCHAR <|-- VARCHAR2
sqltypes.Numeric <|-- NUMBER
sqltypes.Integer <|-- NUMBER
sqltypes.FLOAT <|-- FLOAT
sqltypes.Double <|-- BINARY_DOUBLE
sqltypes.Float <|-- BINARY_FLOAT
sqltypes.LargeBinary <|-- BFILE
sqltypes.Text <|-- LONG
_OracleDateLiteralRender <|-- DATE
sqltypes.DateTime <|-- DATE
_OracleDateLiteralRender <|-- _OracleDate
sqltypes.Date <|-- _OracleDate
sqltypes.NativeForEmulated <|-- INTERVAL
sqltypes._AbstractInterval <|-- INTERVAL
sqltypes.TIMESTAMP <|-- TIMESTAMP
sqltypes.TypeEngine <|-- ROWID
sqltypes.Boolean <|-- _OracleBoolean
_OracleDialect_cx_oracle <|-- OracleDialect_oracledb
sqltypes.Integer <|-- _OracleInteger
sqltypes.Numeric <|-- _OracleNumeric
sqltypes.Uuid <|-- _OracleUUID
_OracleNumeric <|-- _OracleBinaryFloat
_OracleBinaryFloat <|-- _OracleBINARY_FLOAT
oracle.BINARY_FLOAT <|-- _OracleBINARY_FLOAT
_OracleBinaryFloat <|-- _OracleBINARY_DOUBLE
oracle.BINARY_DOUBLE <|-- _OracleBINARY_DOUBLE
_OracleNumeric <|-- _OracleNUMBER
oracle._OracleDate <|-- _CXOracleDate
_OracleDateLiteralRender <|-- _CXOracleTIMESTAMP
sqltypes.TIMESTAMP <|-- _CXOracleTIMESTAMP
sqltypes.CHAR <|-- _OracleChar
sqltypes.NCHAR <|-- _OracleNChar
oracle.NVARCHAR2 <|-- _OracleUnicodeStringNCHAR
sqltypes.Unicode <|-- _OracleUnicodeStringCHAR
_LOBDataType <|-- _OracleUnicodeTextNCLOB
oracle.NCLOB <|-- _OracleUnicodeTextNCLOB
_LOBDataType <|-- _OracleUnicodeTextCLOB
sqltypes.UnicodeText <|-- _OracleUnicodeTextCLOB
_LOBDataType <|-- _OracleText
sqltypes.Text <|-- _OracleText
_LOBDataType <|-- _OracleLong
oracle.LONG <|-- _OracleLong
sqltypes.String <|-- _OracleString
sqltypes.Enum <|-- _OracleEnum
_LOBDataType <|-- _OracleBinary
sqltypes.LargeBinary <|-- _OracleBinary
oracle.INTERVAL <|-- _OracleInterval
oracle.RAW <|-- _OracleRaw
oracle.ROWID <|-- _OracleRowid
OracleCompiler <|-- OracleCompiler_cx_oracle
OracleExecutionContext <|-- OracleExecutionContext_cx_oracle
OracleDialect <|-- OracleDialect_cx_oracle
compiler.GenericTypeCompiler <|-- OracleTypeCompiler
compiler.SQLCompiler <|-- OracleCompiler
compiler.DDLCompiler <|-- OracleDDLCompiler
compiler.IdentifierPreparer <|-- OracleIdentifierPreparer
default.DefaultExecutionContext <|-- OracleExecutionContext
default.DefaultDialect <|-- OracleDialect
sql.ClauseElement <|-- _OuterJoinColumn
AsyncAdapt_aiosqlite_cursor <|-- AsyncAdapt_aiosqlite_ss_cursor
AdaptedConnection <|-- AsyncAdapt_aiosqlite_connection
AsyncAdapt_aiosqlite_connection <|-- AsyncAdaptFallback_aiosqlite_connection
SQLiteExecutionContext <|-- SQLiteExecutionContext_aiosqlite
SQLiteDialect_pysqlite <|-- SQLiteDialect_aiosqlite
SQLiteDialect_pysqlite <|-- SQLiteDialect_pysqlcipher
StandardInsert <|-- Insert
ClauseElement <|-- OnConflictClause
OnConflictClause <|-- OnConflictDoNothing
OnConflictClause <|-- OnConflictDoUpdate
sqltypes.JSON <|-- JSON
_FormatTypeMixin <|-- JSONIndexType
sqltypes.JSON.JSONIndexType <|-- JSONIndexType
_FormatTypeMixin <|-- JSONPathType
sqltypes.JSON.JSONPathType <|-- JSONPathType
JSON <|-- _SQliteJson
_DateTimeMixin <|-- DATETIME
sqltypes.DateTime <|-- DATETIME
_DateTimeMixin <|-- DATE
sqltypes.Date <|-- DATE
_DateTimeMixin <|-- TIME
sqltypes.Time <|-- TIME
compiler.SQLCompiler <|-- SQLiteCompiler
compiler.DDLCompiler <|-- SQLiteDDLCompiler
compiler.GenericTypeCompiler <|-- SQLiteTypeCompiler
compiler.IdentifierPreparer <|-- SQLiteIdentifierPreparer
default.DefaultExecutionContext <|-- SQLiteExecutionContext
default.DefaultDialect <|-- SQLiteDialect
DATETIME <|-- _SQLite_pysqliteTimeStamp
DATE <|-- _SQLite_pysqliteDate
SQLiteDialect <|-- SQLiteDialect_pysqlite
SQLiteDialect_pysqlite <|-- _SQLiteDialect_pysqlite_numeric
sqlite3.Cursor <|-- SQLiteFix99953Cursor
sqlite3.Connection <|-- SQLiteFix99953Connection
_SQLiteDialect_pysqlite_numeric <|-- _SQLiteDialect_pysqlite_dollar
sqltypes.NativeForEmulated <|-- ENUM
sqltypes.Enum <|-- ENUM
_StringType <|-- ENUM
_StringType <|-- SET
MySQLCompiler <|-- MySQLCompiler_mysqlconnector
MySQLIdentifierPreparer <|-- MySQLIdentifierPreparer_mysqlconnector
BIT <|-- _myconnpyBIT
MySQLDialect <|-- MySQLDialect_mysqlconnector
AsyncAdapt_asyncmy_cursor <|-- AsyncAdapt_asyncmy_ss_cursor
AdaptedConnection <|-- AsyncAdapt_asyncmy_connection
AsyncAdapt_asyncmy_connection <|-- AsyncAdaptFallback_asyncmy_connection
MySQLDialect_pymysql <|-- MySQLDialect_asyncmy
AsyncAdapt_aiomysql_cursor <|-- AsyncAdapt_aiomysql_ss_cursor
AdaptedConnection <|-- AsyncAdapt_aiomysql_connection
AsyncAdapt_aiomysql_connection <|-- AsyncAdaptFallback_aiomysql_connection
self.aiomysql.Cursor <|-- Cursor
self.aiomysql.SSCursor <|-- SSCursor
MySQLDialect_pymysql <|-- MySQLDialect_aiomysql
MySQLExecutionContext <|-- MySQLExecutionContext_mariadbconnector
MySQLCompiler <|-- MySQLCompiler_mariadbconnector
MySQLDialect <|-- MySQLDialect_mariadbconnector
_NumericType <|-- _FloatType
sqltypes.Float <|-- _FloatType
_NumericType <|-- _IntegerType
sqltypes.Integer <|-- _IntegerType
sqltypes.String <|-- _StringType
sqltypes.Float <|-- _MatchType
sqltypes.MatchType <|-- _MatchType
_NumericType <|-- NUMERIC
sqltypes.NUMERIC <|-- NUMERIC
_NumericType <|-- DECIMAL
sqltypes.DECIMAL <|-- DECIMAL
_FloatType <|-- DOUBLE
sqltypes.DOUBLE <|-- DOUBLE
_FloatType <|-- REAL
sqltypes.REAL <|-- REAL
_FloatType <|-- FLOAT
sqltypes.FLOAT <|-- FLOAT
_IntegerType <|-- INTEGER
sqltypes.INTEGER <|-- INTEGER
_IntegerType <|-- BIGINT
sqltypes.BIGINT <|-- BIGINT
_IntegerType <|-- MEDIUMINT
_IntegerType <|-- TINYINT
_IntegerType <|-- SMALLINT
sqltypes.SMALLINT <|-- SMALLINT
sqltypes.TypeEngine <|-- BIT
sqltypes.TIME <|-- TIME
sqltypes.TIMESTAMP <|-- TIMESTAMP
sqltypes.DATETIME <|-- DATETIME
sqltypes.TypeEngine <|-- YEAR
_StringType <|-- TEXT
sqltypes.TEXT <|-- TEXT
_StringType <|-- TINYTEXT
_StringType <|-- MEDIUMTEXT
_StringType <|-- LONGTEXT
_StringType <|-- VARCHAR
sqltypes.VARCHAR <|-- VARCHAR
_StringType <|-- CHAR
sqltypes.CHAR <|-- CHAR
_StringType <|-- NVARCHAR
sqltypes.NVARCHAR <|-- NVARCHAR
_StringType <|-- NCHAR
sqltypes.NCHAR <|-- NCHAR
sqltypes._Binary <|-- TINYBLOB
sqltypes._Binary <|-- MEDIUMBLOB
sqltypes._Binary <|-- LONGBLOB
MySQLDialect <|-- MariaDBDialect
MySQLExecutionContext <|-- MySQLExecutionContext_mysqldb
MySQLCompiler <|-- MySQLCompiler_mysqldb
MySQLDialect <|-- MySQLDialect_mysqldb
MySQLDialect_mysqldb <|-- MySQLDialect_pymysql
StandardInsert <|-- Insert
ClauseElement <|-- OnDuplicateClause
Generative <|-- match
elements.BinaryExpression <|-- match
sqltypes.JSON <|-- JSON
_FormatTypeMixin <|-- JSONIndexType
sqltypes.JSON.JSONIndexType <|-- JSONIndexType
_FormatTypeMixin <|-- JSONPathType
sqltypes.JSON.JSONPathType <|-- JSONPathType
TIME <|-- _pyodbcTIME
MySQLExecutionContext <|-- MySQLExecutionContext_pyodbc
PyODBCConnector <|-- MySQLDialect_pyodbc
MySQLDialect <|-- MySQLDialect_pyodbc
default.DefaultExecutionContext <|-- MySQLExecutionContext
compiler.SQLCompiler <|-- MySQLCompiler
compiler.DDLCompiler <|-- MySQLDDLCompiler
compiler.GenericTypeCompiler <|-- MySQLTypeCompiler
compiler.IdentifierPreparer <|-- MySQLIdentifierPreparer
MySQLIdentifierPreparer <|-- MariaDBIdentifierPreparer
default.DefaultDialect <|-- MySQLDialect
BIT <|-- _cymysqlBIT
MySQLDialect_mysqldb <|-- MySQLDialect_cymysql
sqltypes.Numeric <|-- _MSNumeric_pymssql
MSIdentifierPreparer <|-- MSIdentifierPreparer_pymssql
MSDialect <|-- MSDialect_pymssql
MSExecutionContext_pyodbc <|-- MSExecutionContext_aioodbc
aiodbcConnector <|-- MSDialectAsync_aioodbc
MSDialect_pyodbc <|-- MSDialectAsync_aioodbc
TypeDecorator <|-- CoerceUnicode
expression.ColumnElement <|-- _cast_on_2005
TypeDecorator <|-- NumericSqlVariant
TypeDecorator <|-- NVarcharSqlVariant
sqltypes.JSON <|-- JSON
_FormatTypeMixin <|-- JSONIndexType
sqltypes.JSON.JSONIndexType <|-- JSONIndexType
_FormatTypeMixin <|-- JSONPathType
sqltypes.JSON.JSONPathType <|-- JSONPathType
_ms_numeric_pyodbc <|-- _MSNumeric_pyodbc
sqltypes.Numeric <|-- _MSNumeric_pyodbc
_ms_numeric_pyodbc <|-- _MSFloat_pyodbc
sqltypes.Float <|-- _MSFloat_pyodbc
_ODBCDateTimeBindProcessor <|-- _ODBCDateTime
_MSDateTime <|-- _ODBCDateTime
_ODBCDateTimeBindProcessor <|-- _ODBCDATETIMEOFFSET
DATETIMEOFFSET <|-- _ODBCDATETIMEOFFSET
_ms_binary_pyodbc <|-- _VARBINARY_pyodbc
VARBINARY <|-- _VARBINARY_pyodbc
_ms_binary_pyodbc <|-- _BINARY_pyodbc
BINARY <|-- _BINARY_pyodbc
sqltypes.String <|-- _String_pyodbc
_MSUnicode <|-- _Unicode_pyodbc
_MSUnicodeText <|-- _UnicodeText_pyodbc
_MSJson <|-- _JSON_pyodbc
_MSJsonIndexType <|-- _JSONIndexType_pyodbc
_MSJsonPathType <|-- _JSONPathType_pyodbc
MSExecutionContext <|-- MSExecutionContext_pyodbc
PyODBCConnector <|-- MSDialect_pyodbc
MSDialect <|-- MSDialect_pyodbc
sqltypes.REAL <|-- REAL
sqltypes.DOUBLE_PRECISION <|-- DOUBLE_PRECISION
sqltypes.Integer <|-- TINYINT
sqltypes.Date <|-- _MSDate
sqltypes.TIME <|-- TIME
TIME <|-- _BASETIMEIMPL
_DateTimeBase <|-- _MSDateTime
sqltypes.DateTime <|-- _MSDateTime
_DateTimeBase <|-- SMALLDATETIME
sqltypes.DateTime <|-- SMALLDATETIME
_DateTimeBase <|-- DATETIME2
sqltypes.DateTime <|-- DATETIME2
_DateTimeBase <|-- DATETIMEOFFSET
sqltypes.DateTime <|-- DATETIMEOFFSET
_UnicodeLiteral <|-- _MSUnicode
sqltypes.Unicode <|-- _MSUnicode
_UnicodeLiteral <|-- _MSUnicodeText
sqltypes.UnicodeText <|-- _MSUnicodeText
sqltypes._Binary <|-- TIMESTAMP
TIMESTAMP <|-- ROWVERSION
sqltypes.UnicodeText <|-- NTEXT
sqltypes.VARBINARY <|-- VARBINARY
sqltypes.LargeBinary <|-- VARBINARY
sqltypes.LargeBinary <|-- IMAGE
sqltypes.Text <|-- XML
sqltypes.Boolean <|-- BIT
sqltypes.TypeEngine <|-- MONEY
sqltypes.TypeEngine <|-- SMALLMONEY
sqltypes.Uuid <|-- MSUUid
sqltypes.TypeEngine <|-- SQL_VARIANT
compiler.GenericTypeCompiler <|-- MSTypeCompiler
default.DefaultExecutionContext <|-- MSExecutionContext
compiler.SQLCompiler <|-- MSSQLCompiler
MSSQLCompiler <|-- MSSQLStrictCompiler
compiler.DDLCompiler <|-- MSDDLCompiler
compiler.IdentifierPreparer <|-- MSIdentifierPreparer
default.DefaultDialect <|-- MSDialect
roles.StatementRole <|-- ORMStatementRole
roles.ColumnsClauseRole <|-- ORMColumnsClauseRole
roles.StrictFromClauseRole <|-- ORMFromClauseRole
TypedDict <|-- ORMColumnDescription
NamedTuple <|-- _AttributeOptions
_DCAttributeOptions <|-- _MapsColumns
HasCacheKey <|-- MapperProperty
_DCAttributeOptions <|-- MapperProperty
InspectionAttrInfo <|-- MapperProperty
util.MemoizedSlots <|-- MapperProperty
ColumnOperators <|-- PropComparator
ExecutableOption <|-- ORMOption
HasCacheKey <|-- CompileStateOption
ORMOption <|-- CompileStateOption
CompileStateOption <|-- LoaderOption
CompileStateOption <|-- CriteriaOption
ORMOption <|-- UserDefinedOption
ORMOption <|-- MapperOption
Protocol <|-- _DeclMappedClassProtocol
TypedDict <|-- _DataclassArguments
_MapperConfig <|-- _ImperativeMapperConfig
NamedTuple <|-- _CollectedAnnotation
_MapperConfig <|-- _ClassScanMapperConfig
_ClassScanMapperConfig <|-- _DeferredMapperConfig
Protocol <|-- _ExpiredAttributeLoaderProto
Protocol <|-- _ManagerFactory
HasMemoized <|-- ClassManager
EventTarget <|-- ClassManager
EventTarget <|-- InstrumentationFactory
_CoreKnownExecutionOptions <|-- _OrmKnownExecutionOptions
Protocol <|-- _ORMAdapterProto
Protocol <|-- _LoaderCallable
HasCacheKey <|-- PathRegistry
PathRegistry <|-- CreatesToken
CreatesToken <|-- RootRegistry
orm_base.InspectionAttr <|-- PathToken
HasCacheKey <|-- PathToken
str <|-- PathToken
PathRegistry <|-- TokenRegistry
PathRegistry <|-- PropRegistry
CreatesToken <|-- AbstractEntityRegistry
AbstractEntityRegistry <|-- SlotsEntityRegistry
AbstractEntityRegistry <|-- CachingEntityRegistry
_SelectFromElements <|-- Query
SupportsCloneAnnotations <|-- Query
HasPrefixes <|-- Query
HasSuffixes <|-- Query
HasHints <|-- Query
EventTarget <|-- Query
log.Identified <|-- Query
Generative <|-- Query
Executable <|-- Query
interfaces.LoaderOption <|-- AliasOption
BulkUD <|-- BulkUpdate
BulkUD <|-- BulkDelete
interfaces.InspectionAttr <|-- QueryableAttribute
roles.JoinTargetRole <|-- QueryableAttribute
roles.OnClauseRole <|-- QueryableAttribute
sql_base.Immutable <|-- QueryableAttribute
cache_key.SlotsMemoizedHasCacheKey <|-- QueryableAttribute
util.MemoizedSlots <|-- QueryableAttribute
EventTarget <|-- QueryableAttribute
HasCacheKey <|-- AdHocHasEntityNamespace
AttributeImpl <|-- ScalarAttributeImpl
ScalarAttributeImpl <|-- ScalarObjectAttributeImpl
HasCollectionAdapter <|-- CollectionAttributeImpl
AttributeImpl <|-- CollectionAttributeImpl
NamedTuple <|-- History
LoaderStrategy <|-- UninstrumentedColumnLoader
LoaderStrategy <|-- ColumnLoader
ColumnLoader <|-- ExpressionColumnLoader
LoaderStrategy <|-- DeferredColumnLoader
LoaderStrategy <|-- AbstractRelationshipLoader
LoaderStrategy <|-- DoNothingLoader
AbstractRelationshipLoader <|-- NoLoader
AbstractRelationshipLoader <|-- LazyLoader
util.MemoizedSlots <|-- LazyLoader
log.Identified <|-- LazyLoader
AbstractRelationshipLoader <|-- PostLoader
PostLoader <|-- ImmediateLoader
PostLoader <|-- SubqueryLoader
AbstractRelationshipLoader <|-- JoinedLoader
PostLoader <|-- SelectInLoader
util.MemoizedSlots <|-- SelectInLoader
traversals.GenerativeOnTraversal <|-- _AbstractLoad
LoaderOption <|-- _AbstractLoad
_AbstractLoad <|-- Load
_AbstractLoad <|-- _WildcardLoad
cache_key.HasCacheKey <|-- _LoadElement
traversals.HasShallowCopy <|-- _LoadElement
visitors.Traversible <|-- _LoadElement
_LoadElement <|-- _AttributeStrategyLoad
_LoadElement <|-- _TokenStrategyLoad
_LoadElement <|-- _ClassStrategyLoad
_IntrospectsAnnotations <|-- ColumnProperty
log.Identified <|-- ColumnProperty
util.MemoizedSlots <|-- Comparator
_IntrospectsAnnotations <|-- MappedColumn
Protocol <|-- _DeStringifyAnnotation
Protocol <|-- _DeStringifyUnionElements
Protocol <|-- _EvalNameOnly
enum.Enum <|-- _TraceAdaptRole
sql_util.ColumnAdapter <|-- ORMStatementAdapter
sql_util.ColumnAdapter <|-- ORMAdapter
ORMFromClauseRole <|-- AliasedInsp
HasCacheKey <|-- AliasedInsp
InspectionAttr <|-- AliasedInsp
MemoizedSlots <|-- AliasedInsp
CriteriaOption <|-- LoaderCriteriaOption
SupportsCloneAnnotations <|-- Bundle
MemoizedHasCacheKey <|-- Bundle
InspectionAttr <|-- Bundle
expression.Join <|-- _ORMJoin
Exception <|-- _CleanupError
InstanceEvents <|-- HoldInstanceEvents
MapperEvents <|-- HoldMapperEvents
ORMFromClauseRole <|-- Mapper
MemoizedHasCacheKey <|-- Mapper
InspectionAttr <|-- Mapper
log.Identified <|-- Mapper
EventTarget <|-- Mapper
Exception <|-- _OptGetColumnsNotAvailable
Protocol <|-- QueryPropertyDescriptor
ClsRegistryToken <|-- _MultipleClassMarker
ClsRegistryToken <|-- _ModuleMarker
Protocol <|-- _ConnectionCallableProto
_StateChangeState <|-- SessionTransactionState
util.MemoizedSlots <|-- ORMExecuteState
Enum <|-- SessionTransactionOrigin
_StateChange <|-- SessionTransaction
TransactionalContext <|-- SessionTransaction
Enum <|-- _SessionCloseState
_SessionClassMethods <|-- Session
EventTarget <|-- Session
_SessionClassMethods <|-- sessionmaker
attributes.HasCollectionAdapter <|-- WriteOnlyAttributeImpl
attributes.AttributeImpl <|-- WriteOnlyAttributeImpl
strategies.AbstractRelationshipLoader <|-- WriteOnlyLoader
log.Identified <|-- WriteOnlyLoader
WriteOnlyAttributeImpl <|-- DynamicAttributeImpl
WriteOnlyLoader <|-- DynaLoader
Options <|-- default_load_options
CompileState <|-- AbstractORMCompileState
AbstractORMCompileState <|-- AutoflushOnlyORMCompileState
AbstractORMCompileState <|-- ORMCompileState
CacheableOptions <|-- default_compile_options
ORMCompileState <|-- ORMFromStatementCompileState
GroupedElement <|-- FromStatement
Generative <|-- FromStatement
AutoflushOnlyORMCompileState <|-- CompoundSelectCompileState
CompoundSelectState <|-- CompoundSelectCompileState
ORMCompileState <|-- ORMSelectCompileState
SelectState <|-- ORMSelectCompileState
_QueryEntity <|-- _MapperEntity
_QueryEntity <|-- _BundleEntity
_QueryEntity <|-- _ColumnEntity
_ColumnEntity <|-- _RawColumnEntity
_ColumnEntity <|-- _ORMColumnEntity
_ORMColumnEntity <|-- _IdentityTokenEntity
sa_exc.SQLAlchemyError <|-- StaleDataError
sa_exc.SQLAlchemyError <|-- FlushError
sa_exc.InvalidRequestError <|-- UnmappedError
sa_exc.SQLAlchemyError <|-- ObjectDereferencedError
sa_exc.SQLAlchemyError <|-- DetachedInstanceError
UnmappedError <|-- UnmappedInstanceError
UnmappedError <|-- UnmappedClassError
sa_exc.InvalidRequestError <|-- ObjectDeletedError
sa_exc.InvalidRequestError <|-- UnmappedColumnError
sa_exc.InvalidRequestError <|-- LoaderStrategyException
Protocol <|-- _CollectionConverterProtocol
Protocol <|-- _AdaptedCollectionProtocol
DependencyProcessor <|-- OneToManyDP
DependencyProcessor <|-- ManyToOneDP
DependencyProcessor <|-- DetectKeySwitch
DependencyProcessor <|-- ManyToManyDP
attributes.AttributeImpl <|-- _ProxyImpl
_IntrospectsAnnotations <|-- CompositeProperty
type <|-- _DynamicAttributesType
_DynamicAttributesType <|-- DeclarativeAttributeIntercept
DeclarativeAttributeIntercept <|-- DCTransformDeclarative
DeclarativeAttributeIntercept <|-- DeclarativeMeta
_declared_attr_common <|-- _declared_directive
_declared_attr_common <|-- declared_attr
AbstractORMCompileState <|-- ORMDMLState
ORMDMLState <|-- BulkUDCompileState
Options <|-- default_update_options
ORMDMLState <|-- BulkORMInsert
InsertDMLState <|-- BulkORMInsert
Options <|-- default_insert_options
BulkUDCompileState <|-- BulkORMUpdate
UpdateDMLState <|-- BulkORMUpdate
BulkUDCompileState <|-- BulkORMDelete
DeleteDMLState <|-- BulkORMDelete
IdentityMap <|-- WeakInstanceDict
Enum <|-- _StateChangeState
_StateChangeState <|-- _StateChangeStates
exc.InvalidRequestError <|-- UnevaluatableError
operators.ColumnOperators <|-- _NoObject
operators.ColumnOperators <|-- _ExpiredObject
IterateMappersMixin <|-- Preprocess
IterateMappersMixin <|-- ProcessAll
PostSortRec <|-- ProcessAll
PostSortRec <|-- PostUpdateAll
PostSortRec <|-- SaveUpdateAll
PostSortRec <|-- DeleteAll
PostSortRec <|-- ProcessState
PostSortRec <|-- SaveUpdateState
PostSortRec <|-- DeleteState
Enum <|-- LoaderCallableStatus
FastIntFlag <|-- PassiveFlag
Enum <|-- EventConstants
Enum <|-- RelationshipDirection
Enum <|-- InspectionAttrExtensionType
InspectionAttrExtensionType <|-- NotExtension
InspectionAttr <|-- InspectionAttrInfo
TypingOnly <|-- SQLORMOperations
TypingOnly <|-- ORMDescriptor
TypingOnly <|-- _MappedAnnotationBase
TypingOnly <|-- SQLORMExpression
roles.DDLConstraintColumnRole <|-- Mapped
TypingOnly <|-- _MappedAttribute
NamedTuple <|-- _RelationshipArgs
_IntrospectsAnnotations <|-- RelationshipProperty
log.Identified <|-- RelationshipProperty
util.MemoizedSlots <|-- Comparator
Protocol <|-- _InstanceDictProto
interfaces.InspectionAttrInfo <|-- InstanceState
Enum <|-- CacheStats
Enum <|-- ExecuteStyle
Protocol <|-- DBAPIConnection
Protocol <|-- DBAPIType
Protocol <|-- DBAPICursor
TypedDict <|-- _CoreKnownExecutionOptions
TypedDict <|-- ReflectedIdentity
TypedDict <|-- ReflectedComputed
TypedDict <|-- ReflectedColumn
TypedDict <|-- ReflectedConstraint
ReflectedConstraint <|-- ReflectedCheckConstraint
ReflectedConstraint <|-- ReflectedUniqueConstraint
ReflectedConstraint <|-- ReflectedPrimaryKeyConstraint
ReflectedConstraint <|-- ReflectedForeignKeyConstraint
TypedDict <|-- ReflectedIndex
TypedDict <|-- ReflectedTableComment
Enum <|-- BindTyping
EventTarget <|-- Dialect
EventTarget <|-- ConnectionEventsTarget
abc.ABC <|-- ConnectionCharacteristic
ConnectionCharacteristic <|-- IsolationLevelCharacteristic
Protocol <|-- _TConsSubject
Flag <|-- ObjectKind
Flag <|-- ObjectScope
NamedTuple <|-- URL
ResultMetaData <|-- SimpleResultMetaData
Enum <|-- _NoRow
InPlaceGenerative <|-- ResultInternal
_WithKeys <|-- Result
util.TypingOnly <|-- TupleResult
_WithKeys <|-- MappingResult
Dialect <|-- DefaultDialect
DefaultDialect <|-- StrCompileDialect
ExecutionContext <|-- DefaultExecutionContext
BaseRow <|-- Row
ABC <|-- ROMappingView
ROMappingView <|-- ROMappingKeysValuesView
ROMappingView <|-- ROMappingItemsView
BaseRow <|-- RowMapping
ConnectionEventsTarget <|-- Connection
ExceptionContext <|-- ExceptionContextImpl
TransactionalContext <|-- Transaction
Transaction <|-- RootTransaction
Transaction <|-- NestedTransaction
RootTransaction <|-- TwoPhaseTransaction
ConnectionEventsTarget <|-- Engine
log.Identified <|-- Engine
log.Identified <|-- OptionEngineMixin
OptionEngineMixin <|-- OptionEngine
Engine <|-- OptionEngine
ResultMetaData <|-- CursorResultMetaData
ResultFetchStrategy <|-- NoCursorFetchStrategy
NoCursorFetchStrategy <|-- NoCursorDQLFetchStrategy
NoCursorFetchStrategy <|-- NoCursorDMLFetchStrategy
ResultFetchStrategy <|-- CursorFetchStrategy
CursorFetchStrategy <|-- BufferedRowCursorFetchStrategy
CursorFetchStrategy <|-- FullyBufferedCursorFetchStrategy
ResultMetaData <|-- _NoResultMetaData
Pool <|-- QueuePool
QueuePool <|-- AsyncAdaptedQueuePool
AsyncAdaptedQueuePool <|-- FallbackAsyncAdaptedQueuePool
Pool <|-- NullPool
Pool <|-- SingletonThreadPool
Pool <|-- StaticPool
Pool <|-- AssertionPool
Enum <|-- ResetStyle
_ConnDialect <|-- _AsyncConnDialect
Protocol <|-- _CreatorFnType
Protocol <|-- _CreatorWRecFnType
log.Identified <|-- Pool
event.EventTarget <|-- Pool
ManagesConnection <|-- ConnectionPoolEntry
ConnectionPoolEntry <|-- _ConnectionRecord
ManagesConnection <|-- PoolProxiedConnection
PoolProxiedConnection <|-- _AdhocProxiedConnection
PoolProxiedConnection <|-- _ConnectionFairy
util.MemoizedSlots <|-- RefCollection
Protocol <|-- _MutexProtocol
Executable <|-- FunctionElement
FromClause <|-- FunctionElement
Generative <|-- FunctionElement
ExternallyTraversible <|-- SupportsAnnotations
SupportsAnnotations <|-- SupportsWrappingAnnotations
SupportsWrappingAnnotations <|-- SupportsCloneAnnotations
SupportsAnnotations <|-- Annotated
ClauseElement <|-- BaseDDLElement
Protocol <|-- DDLIfCallable
typing.NamedTuple <|-- DDLIf
roles.DDLRole <|-- ExecutableDDLElement
Executable <|-- ExecutableDDLElement
BaseDDLElement <|-- ExecutableDDLElement
ExecutableDDLElement <|-- DDL
ExecutableDDLElement <|-- _CreateDropBase
_CreateDropBase <|-- _CreateBase
_CreateDropBase <|-- _DropBase
_CreateBase <|-- CreateSchema
_DropBase <|-- DropSchema
_CreateBase <|-- CreateTable
_DropBase <|-- _DropView
BaseDDLElement <|-- CreateConstraint
BaseDDLElement <|-- CreateColumn
_DropBase <|-- DropTable
_CreateBase <|-- CreateSequence
_DropBase <|-- DropSequence
_CreateBase <|-- CreateIndex
_DropBase <|-- DropIndex
_CreateBase <|-- AddConstraint
_DropBase <|-- DropConstraint
_CreateDropBase <|-- SetTableComment
_CreateDropBase <|-- DropTableComment
_CreateDropBase <|-- SetColumnComment
_CreateDropBase <|-- DropColumnComment
_CreateDropBase <|-- SetConstraintComment
_CreateDropBase <|-- DropConstraintComment
SchemaVisitor <|-- InvokeDDLBase
InvokeDDLBase <|-- InvokeCreateDDLBase
InvokeDDLBase <|-- InvokeDropDDLBase
InvokeCreateDDLBase <|-- SchemaGenerator
InvokeDropDDLBase <|-- SchemaDropper
NamedTuple <|-- ResultColumnsEntry
Protocol <|-- _ResultMapAppender
TypedDict <|-- _BaseCompilerStackEntry
_BaseCompilerStackEntry <|-- _CompilerStackEntry
NamedTuple <|-- ExpandedState
NamedTuple <|-- _InsertManyValues
NamedTuple <|-- _InsertManyValuesBatch
FastIntFlag <|-- InsertmanyvaluesSentinelOpts
IntEnum <|-- CompilerState
IntEnum <|-- Linting
util.EnsureKWArg <|-- TypeCompiler
elements.CompilerColumnElement <|-- _CompileLabel
elements.CompilerColumnElement <|-- ilike_case_insensitive
Compiled <|-- SQLCompiler
SQLCompiler <|-- StrSQLCompiler
Compiled <|-- DDLCompiler
TypeCompiler <|-- GenericTypeCompiler
GenericTypeCompiler <|-- StrSQLTypeCompiler
Protocol <|-- _SchemaForObjectCallable
Protocol <|-- _BindNameForColProtocol
Protocol <|-- _HasClauseElement
Protocol <|-- _CoreAdapterProto
HasTraverseInternals <|-- HasShallowCopy
HasShallowCopy <|-- GenerativeOnTraversal
HasTraverseInternals <|-- HasCopyInternals
HasTraversalDispatch <|-- _CopyInternalsTraversal
HasTraversalDispatch <|-- _GetChildrenTraversal
HasTraversalDispatch <|-- TraversalComparatorStrategy
util.MemoizedSlots <|-- TraversalComparatorStrategy
TraversalComparatorStrategy <|-- ColIdentityComparatorStrategy
Protocol <|-- _CacheKeyTraversalDispatchType
enum.Enum <|-- CacheConst
enum.Enum <|-- CacheTraverseTarget
HasTraverseInternals <|-- HasCacheKeyTraverse
HasCacheKey <|-- HasCacheKeyTraverse
HasCacheKey <|-- MemoizedHasCacheKey
HasMemoized <|-- MemoizedHasCacheKey
HasCacheKey <|-- SlotsMemoizedHasCacheKey
util.MemoizedSlots <|-- SlotsMemoizedHasCacheKey
NamedTuple <|-- CacheKey
HasTraversalDispatch <|-- _CacheKeyTraversal
SQLRole <|-- HasCacheKeyRole
SQLRole <|-- ExecutableOptionRole
SQLRole <|-- LiteralValueRole
SQLRole <|-- ColumnArgumentRole
ColumnArgumentRole <|-- ColumnArgumentOrKeyRole
ColumnArgumentRole <|-- StrAsPlainColumnRole
SQLRole <|-- ColumnListRole
SQLRole <|-- StringRole
StringRole <|-- TruncatedLabelRole
SQLRole <|-- TruncatedLabelRole
AllowsLambdaRole <|-- ColumnsClauseRole
UsesInspection <|-- ColumnsClauseRole
ColumnListRole <|-- ColumnsClauseRole
SQLRole <|-- TypedColumnsClauseRole
SQLRole <|-- LimitOffsetRole
ColumnListRole <|-- ByOfRole
AllowsLambdaRole <|-- GroupByRole
UsesInspection <|-- GroupByRole
ByOfRole <|-- GroupByRole
AllowsLambdaRole <|-- OrderByRole
ByOfRole <|-- OrderByRole
SQLRole <|-- StructuralRole
StructuralRole <|-- StatementOptionRole
AllowsLambdaRole <|-- OnClauseRole
StructuralRole <|-- OnClauseRole
OnClauseRole <|-- WhereHavingRole
SQLRole <|-- InElementRole
AllowsLambdaRole <|-- JoinTargetRole
UsesInspection <|-- JoinTargetRole
StructuralRole <|-- JoinTargetRole
ColumnsClauseRole <|-- FromClauseRole
JoinTargetRole <|-- FromClauseRole
FromClauseRole <|-- StrictFromClauseRole
StrictFromClauseRole <|-- AnonymizedFromClauseRole
SQLRole <|-- ReturnsRowsRole
SQLRole <|-- StatementRole
StatementRole <|-- SelectStatementRole
ReturnsRowsRole <|-- SelectStatementRole
ReturnsRowsRole <|-- HasCTERole
SQLRole <|-- IsCTERole
AllowsLambdaRole <|-- CompoundElementRole
SQLRole <|-- CompoundElementRole
StatementRole <|-- DMLRole
FromClauseRole <|-- DMLTableRole
SQLRole <|-- DMLColumnRole
SQLRole <|-- DMLSelectRole
StatementRole <|-- DDLRole
StructuralRole <|-- DDLExpressionRole
SQLRole <|-- DDLConstraintColumnRole
DDLConstraintColumnRole <|-- DDLReferredColumnRole
_repr_base <|-- _repr_row
str <|-- _long_statement
_repr_base <|-- _repr_params
visitors.ReplacingExternalTraversal <|-- ClauseAdapter
Protocol <|-- _ColumnLookup
ClauseAdapter <|-- ColumnAdapter
Protocol <|-- _CompilerDispatchType
Enum <|-- InternalTraversal
Protocol <|-- _InternalTraversalDispatchType
HasTraverseInternals <|-- ExternallyTraversible
Visitable <|-- ExternallyTraversible
Protocol <|-- _CloneCallableType
util.MemoizedSlots <|-- ExternalTraversal
ExternalTraversal <|-- CloningExternalTraversal
CloningExternalTraversal <|-- ReplacingExternalTraversal
Visitable <|-- CompilerElement
SupportsWrappingAnnotations <|-- ClauseElement
MemoizedHasCacheKey <|-- ClauseElement
HasCopyInternals <|-- ClauseElement
ExternallyTraversible <|-- ClauseElement
CompilerElement <|-- ClauseElement
ClauseElement <|-- DQLDMLClauseElement
roles.DMLColumnRole <|-- CompilerColumnElement
roles.DDLConstraintColumnRole <|-- CompilerColumnElement
roles.ColumnsClauseRole <|-- CompilerColumnElement
CompilerElement <|-- CompilerColumnElement
ColumnOperators <|-- SQLCoreOperations
TypingOnly <|-- SQLCoreOperations
TypingOnly <|-- SQLColumnExpression
roles.ColumnArgumentOrKeyRole <|-- ColumnElement
roles.StatementOptionRole <|-- ColumnElement
roles.WhereHavingRole <|-- ColumnElement
roles.OrderByRole <|-- ColumnElement
roles.ColumnsClauseRole <|-- ColumnElement
roles.LimitOffsetRole <|-- ColumnElement
roles.DMLColumnRole <|-- ColumnElement
roles.DDLConstraintColumnRole <|-- ColumnElement
roles.DDLExpressionRole <|-- ColumnElement
DQLDMLClauseElement <|-- ColumnElement
roles.InElementRole <|-- BindParameter
DQLDMLClauseElement <|-- TypeClause
roles.DDLConstraintColumnRole <|-- TextClause
roles.DDLExpressionRole <|-- TextClause
roles.StatementOptionRole <|-- TextClause
roles.WhereHavingRole <|-- TextClause
roles.OrderByRole <|-- TextClause
roles.FromClauseRole <|-- TextClause
roles.SelectStatementRole <|-- TextClause
roles.InElementRole <|-- TextClause
Generative <|-- TextClause
Executable <|-- TextClause
DQLDMLClauseElement <|-- TextClause
SingletonConstant <|-- Null
SingletonConstant <|-- False_
SingletonConstant <|-- True_
roles.InElementRole <|-- ClauseList
roles.OrderByRole <|-- ClauseList
roles.ColumnsClauseRole <|-- ClauseList
roles.DMLColumnRole <|-- ClauseList
DQLDMLClauseElement <|-- ClauseList
ClauseList <|-- Tuple
DQLDMLClauseElement <|-- GroupedElement
GroupedElement <|-- Grouping
IntEnum <|-- _OverRange
roles.DDLReferredColumnRole <|-- ColumnClause
roles.StrAsPlainColumnRole <|-- ColumnClause
Immutable <|-- ColumnClause
Executable <|-- _IdentifiedClause
ClauseElement <|-- _IdentifiedClause
_IdentifiedClause <|-- SavepointClause
_IdentifiedClause <|-- RollbackToSavepointClause
_IdentifiedClause <|-- ReleaseSavepointClause
util.MemoizedSlots <|-- quoted_name
str <|-- quoted_name
Annotated <|-- AnnotatedColumnElement
quoted_name <|-- _truncated_label
_truncated_label <|-- conv
_truncated_label <|-- _anonymous_label
TypeEngineMixin <|-- HasExpressionLookup
TypeEngineMixin <|-- Concatenable
TypeEngineMixin <|-- Indexable
Concatenable <|-- String
String <|-- Text
String <|-- Unicode
Text <|-- UnicodeText
HasExpressionLookup <|-- Integer
Integer <|-- SmallInteger
Integer <|-- BigInteger
HasExpressionLookup <|-- Numeric
_RenderISO8601NoT <|-- DateTime
HasExpressionLookup <|-- DateTime
_RenderISO8601NoT <|-- Date
HasExpressionLookup <|-- Date
_RenderISO8601NoT <|-- Time
HasExpressionLookup <|-- Time
_Binary <|-- LargeBinary
SchemaEventTarget <|-- SchemaType
TypeEngineMixin <|-- SchemaType
String <|-- Enum
SchemaType <|-- Enum
Emulated <|-- Enum
SchemaType <|-- Boolean
Emulated <|-- Boolean
HasExpressionLookup <|-- _AbstractInterval
Emulated <|-- Interval
_AbstractInterval <|-- Interval
Indexable <|-- JSON
JSONElementType <|-- JSONIndexType
JSONIndexType <|-- JSONIntIndexType
JSONIndexType <|-- JSONStrIndexType
JSONElementType <|-- JSONPathType
SchemaEventTarget <|-- ARRAY
Indexable <|-- ARRAY
Concatenable <|-- ARRAY
Integer <|-- INTEGER
SmallInteger <|-- SMALLINT
BigInteger <|-- BIGINT
DateTime <|-- TIMESTAMP
DateTime <|-- DATETIME
Date <|-- DATE
Time <|-- TIME
Text <|-- TEXT
Text <|-- CLOB
String <|-- VARCHAR
Unicode <|-- NVARCHAR
String <|-- CHAR
Unicode <|-- NCHAR
LargeBinary <|-- BLOB
_Binary <|-- BINARY
_Binary <|-- VARBINARY
Boolean <|-- BOOLEAN
HasCacheKey <|-- TableValueType
Boolean <|-- MatchType
Emulated <|-- Uuid
type_api.NativeForEmulated <|-- UUID
Protocol <|-- OperatorType
OperatorType <|-- custom_op
Operators <|-- ColumnOperators
IntEnum <|-- _OpLimit
Protocol <|-- _JoinTargetProtocol
roles.ReturnsRowsRole <|-- ReturnsRows
DQLDMLClauseElement <|-- ReturnsRows
Executable <|-- ExecutableReturnsRows
ReturnsRows <|-- ExecutableReturnsRows
ExecutableReturnsRows <|-- TypedReturnsRows
ReturnsRows <|-- Selectable
roles.AnonymizedFromClauseRole <|-- FromClause
Selectable <|-- FromClause
FromClause <|-- NamedFromClause
Enum <|-- SelectLabelStyle
roles.DMLTableRole <|-- Join
FromClause <|-- Join
NamedFromClause <|-- LateralFromClause
NoInit <|-- AliasedReturnsRows
NamedFromClause <|-- AliasedReturnsRows
AliasedReturnsRows <|-- FromClauseAlias
roles.DMLTableRole <|-- Alias
FromClauseAlias <|-- Alias
LateralFromClause <|-- TableValuedAlias
Alias <|-- TableValuedAlias
FromClauseAlias <|-- Lateral
LateralFromClause <|-- Lateral
FromClauseAlias <|-- TableSample
roles.DMLTableRole <|-- CTE
roles.IsCTERole <|-- CTE
Generative <|-- CTE
HasPrefixes <|-- CTE
HasSuffixes <|-- CTE
AliasedReturnsRows <|-- CTE
NamedTuple <|-- _CTEOpts
NamedTuple <|-- _ColumnsPlusNames
ReturnsRows <|-- SelectsRows
roles.HasCTERole <|-- HasCTE
SelectsRows <|-- HasCTE
AliasedReturnsRows <|-- Subquery
GroupedElement <|-- FromGrouping
FromClause <|-- FromGrouping
FromGrouping <|-- NamedFromGrouping
NamedFromClause <|-- NamedFromGrouping
roles.DMLTableRole <|-- TableClause
Immutable <|-- TableClause
NamedFromClause <|-- TableClause
ClauseElement <|-- ForUpdateArg
roles.InElementRole <|-- Values
Generative <|-- Values
LateralFromClause <|-- Values
roles.InElementRole <|-- ScalarValues
GroupedElement <|-- ScalarValues
roles.SelectStatementRole <|-- SelectBase
roles.DMLSelectRole <|-- SelectBase
roles.CompoundElementRole <|-- SelectBase
roles.InElementRole <|-- SelectBase
HasCTE <|-- SelectBase
SupportsCloneAnnotations <|-- SelectBase
Selectable <|-- SelectBase
GroupedElement <|-- SelectStatementGrouping
SelectBase <|-- SelectStatementGrouping
SelectBase <|-- GenerativeSelect
Generative <|-- GenerativeSelect
CompileState <|-- CompoundSelectState
Enum <|-- _CompoundSelectKeyword
HasCompileState <|-- CompoundSelect
GenerativeSelect <|-- CompoundSelect
ExecutableReturnsRows <|-- CompoundSelect
util.MemoizedSlots <|-- SelectState
CompileState <|-- SelectState
CacheableOptions <|-- default_select_compile_options
cache_key.HasCacheKey <|-- _MemoizedSelectEntities
traversals.HasCopyInternals <|-- _MemoizedSelectEntities
visitors.Traversible <|-- _MemoizedSelectEntities
HasPrefixes <|-- Select
HasSuffixes <|-- Select
HasHints <|-- Select
HasCompileState <|-- Select
_SelectFromElements <|-- Select
GenerativeSelect <|-- Select
roles.InElementRole <|-- ScalarSelect
Generative <|-- ScalarSelect
GroupedElement <|-- ScalarSelect
SelectBase <|-- TextualSelect
ExecutableReturnsRows <|-- TextualSelect
Generative <|-- TextualSelect
Annotated <|-- AnnotatedFromClause
CompileState <|-- DMLState
DMLState <|-- InsertDMLState
DMLState <|-- UpdateDMLState
DMLState <|-- DeleteDMLState
roles.DMLRole <|-- UpdateBase
HasCTE <|-- UpdateBase
HasCompileState <|-- UpdateBase
DialectKWArgs <|-- UpdateBase
HasPrefixes <|-- UpdateBase
Generative <|-- UpdateBase
ExecutableReturnsRows <|-- UpdateBase
ClauseElement <|-- UpdateBase
UpdateBase <|-- ValuesBase
ValuesBase <|-- Insert
Insert <|-- ReturningInsert
DMLWhereBase <|-- Update
ValuesBase <|-- Update
Update <|-- ReturningUpdate
DMLWhereBase <|-- Delete
UpdateBase <|-- Delete
Update <|-- ReturningDelete
RoleImpl <|-- _ReturnsStringKey
RoleImpl <|-- _ColumnCoercions
RoleImpl <|-- _NoTextCoercion
RoleImpl <|-- _CoerceLiterals
RoleImpl <|-- LiteralValueImpl
RoleImpl <|-- _SelectIsNotFrom
RoleImpl <|-- HasCacheKeyImpl
RoleImpl <|-- ExecutableOptionImpl
_ColumnCoercions <|-- ExpressionElementImpl
RoleImpl <|-- ExpressionElementImpl
ExpressionElementImpl <|-- BinaryElementImpl
RoleImpl <|-- BinaryElementImpl
RoleImpl <|-- InElementImpl
_ColumnCoercions <|-- OnClauseImpl
RoleImpl <|-- OnClauseImpl
_CoerceLiterals <|-- WhereHavingImpl
_ColumnCoercions <|-- WhereHavingImpl
RoleImpl <|-- WhereHavingImpl
_CoerceLiterals <|-- StatementOptionImpl
RoleImpl <|-- StatementOptionImpl
_NoTextCoercion <|-- ColumnArgumentImpl
RoleImpl <|-- ColumnArgumentImpl
_ReturnsStringKey <|-- ColumnArgumentOrKeyImpl
RoleImpl <|-- ColumnArgumentOrKeyImpl
_CoerceLiterals <|-- StrAsPlainColumnImpl
RoleImpl <|-- StrAsPlainColumnImpl
_CoerceLiterals <|-- ByOfImpl
_ColumnCoercions <|-- ByOfImpl
RoleImpl <|-- ByOfImpl
roles.ByOfRole <|-- ByOfImpl
ByOfImpl <|-- OrderByImpl
RoleImpl <|-- OrderByImpl
ByOfImpl <|-- GroupByImpl
RoleImpl <|-- GroupByImpl
_ReturnsStringKey <|-- DMLColumnImpl
RoleImpl <|-- DMLColumnImpl
RoleImpl <|-- ConstExprImpl
_StringOnly <|-- TruncatedLabelImpl
RoleImpl <|-- TruncatedLabelImpl
_Deannotate <|-- DDLExpressionImpl
_CoerceLiterals <|-- DDLExpressionImpl
RoleImpl <|-- DDLExpressionImpl
_Deannotate <|-- DDLConstraintColumnImpl
_ReturnsStringKey <|-- DDLConstraintColumnImpl
RoleImpl <|-- DDLConstraintColumnImpl
DDLConstraintColumnImpl <|-- DDLReferredColumnImpl
RoleImpl <|-- LimitOffsetImpl
ExpressionElementImpl <|-- LabeledColumnExprImpl
_SelectIsNotFrom <|-- ColumnsClauseImpl
_CoerceLiterals <|-- ColumnsClauseImpl
RoleImpl <|-- ColumnsClauseImpl
RoleImpl <|-- ReturnsRowsImpl
_CoerceLiterals <|-- StatementImpl
RoleImpl <|-- StatementImpl
_NoTextCoercion <|-- SelectStatementImpl
RoleImpl <|-- SelectStatementImpl
ReturnsRowsImpl <|-- HasCTEImpl
RoleImpl <|-- IsCTEImpl
RoleImpl <|-- JoinTargetImpl
_SelectIsNotFrom <|-- FromClauseImpl
_NoTextCoercion <|-- FromClauseImpl
RoleImpl <|-- FromClauseImpl
FromClauseImpl <|-- StrictFromClauseImpl
StrictFromClauseImpl <|-- AnonymizedFromClauseImpl
_SelectIsNotFrom <|-- DMLTableImpl
_NoTextCoercion <|-- DMLTableImpl
RoleImpl <|-- DMLTableImpl
_NoTextCoercion <|-- DMLSelectImpl
RoleImpl <|-- DMLSelectImpl
_NoTextCoercion <|-- CompoundElementImpl
RoleImpl <|-- CompoundElementImpl
Enum <|-- _NoArg
Enum <|-- _NoneName
NamedTuple <|-- _DefaultDescriptionTuple
Protocol <|-- _EntityNamespace
Protocol <|-- _HasEntityNamespace
Immutable <|-- SingletonConstant
compat_typing.Protocol <|-- _GenerativeType
HasMemoized <|-- Generative
HasMemoized <|-- InPlaceGenerative
Generative <|-- HasCompileState
type <|-- _MetaOptions
Options <|-- CacheableOptions
HasCacheKey <|-- CacheableOptions
HasCopyInternals <|-- ExecutableOption
roles.StatementRole <|-- Executable
event.EventTarget <|-- SchemaEventTarget
ClauseVisitor <|-- SchemaVisitor
Enum <|-- _SentinelDefaultCharacterization
NamedTuple <|-- _SentinelColumnCharacterization
util.ReadOnlyContainer <|-- ReadOnlyColumnCollection
Enum <|-- _NoValueInList
TypedDict <|-- _BaseTypeMemoDict
_BaseTypeMemoDict <|-- _TypeMemoDict
Visitable <|-- TypeEngine
ColumnOperators <|-- Comparator
TypeEngineMixin <|-- ExternalType
ExternalType <|-- UserDefinedType
TypeEngineMixin <|-- UserDefinedType
util.EnsureKWArg <|-- UserDefinedType
TypeEngineMixin <|-- Emulated
TypeEngineMixin <|-- NativeForEmulated
SchemaEventTarget <|-- TypeDecorator
ExternalType <|-- TypeDecorator
NamedTuple <|-- _CrudParams
Options <|-- LambdaOptions
elements.ClauseElement <|-- LambdaElement
LambdaElement <|-- DeferredLambdaElement
roles.AllowsLambdaRole <|-- StatementLambdaElement
LambdaElement <|-- StatementLambdaElement
Executable <|-- StatementLambdaElement
roles.AllowsLambdaRole <|-- NullLambdaStatement
elements.ClauseElement <|-- NullLambdaStatement
StatementLambdaElement <|-- LinkedLambdaElement
ColumnOperators <|-- PyWrapper
Enum <|-- SchemaConst
SchemaEventTarget <|-- SchemaItem
visitors.Visitable <|-- SchemaItem
SchemaItem <|-- HasSchemaAttr
DialectKWArgs <|-- Table
HasSchemaAttr <|-- Table
TableClause <|-- Table
DialectKWArgs <|-- Column
SchemaItem <|-- Column
DialectKWArgs <|-- ForeignKey
SchemaItem <|-- ForeignKey
Executable <|-- DefaultGenerator
SchemaItem <|-- DefaultGenerator
DefaultGenerator <|-- ColumnDefault
ABC <|-- ColumnDefault
ColumnDefault <|-- ScalarElementColumnDefault
ColumnDefault <|-- _InsertSentinelColumnDefault
ColumnDefault <|-- ColumnElementColumnDefault
Protocol <|-- _CallableColumnDefaultProtocol
ColumnDefault <|-- CallableColumnDefault
HasSchemaAttr <|-- Sequence
IdentityOptions <|-- Sequence
DefaultGenerator <|-- Sequence
SchemaEventTarget <|-- FetchedValue
FetchedValue <|-- DefaultClause
DialectKWArgs <|-- Constraint
HasConditionalDDL <|-- Constraint
SchemaItem <|-- Constraint
ColumnCollectionMixin <|-- ColumnCollectionConstraint
Constraint <|-- ColumnCollectionConstraint
ColumnCollectionConstraint <|-- CheckConstraint
ColumnCollectionConstraint <|-- ForeignKeyConstraint
ColumnCollectionConstraint <|-- PrimaryKeyConstraint
ColumnCollectionConstraint <|-- UniqueConstraint
DialectKWArgs <|-- Index
ColumnCollectionMixin <|-- Index
HasConditionalDDL <|-- Index
SchemaItem <|-- Index
TypedDict <|-- _NamingSchemaTD
HasSchemaAttr <|-- MetaData
FetchedValue <|-- Computed
SchemaItem <|-- Computed
IdentityOptions <|-- Identity
FetchedValue <|-- Identity
SchemaItem <|-- Identity
ObjectProxy <|-- _ImportHookChainedLoader
object <|-- AttributeWrapper
object <|-- _ObjectProxyMethods
type <|-- _ObjectProxyMetaType
ObjectProxy <|-- CallableObjectProxy
ObjectProxy <|-- PartialCallableObjectProxy
ObjectProxy <|-- _FunctionWrapperBase
_FunctionWrapperBase <|-- BoundFunctionWrapper
_FunctionWrapperBase <|-- FunctionWrapper
ObjectProxy <|-- WeakFunctionProxy
CallableObjectProxy <|-- _AdapterFunctionCode
CallableObjectProxy <|-- _AdapterFunctionSurrogate
BoundFunctionWrapper <|-- _BoundAdapterWrapper
FunctionWrapper <|-- AdapterWrapper
object <|-- AdapterFactory
AdapterFactory <|-- DelegatedAdapterFactory
CallableObjectProxy <|-- _PartialDecorator
FunctionWrapper <|-- _FinalDecorator
Cache <|-- SimpleWheelCache
SimpleWheelCache <|-- EphemWheelCache
Cache <|-- WheelCache
Exception <|-- PipError
PipError <|-- DiagnosticPipError
PipError <|-- ConfigurationError
PipError <|-- InstallationError
DiagnosticPipError <|-- MissingPyProjectBuildRequires
DiagnosticPipError <|-- InvalidPyProjectBuildRequires
PipError <|-- NoneMetadataError
InstallationError <|-- UserInstallationInvalid
InstallationError <|-- InvalidSchemeCombination
InstallationError <|-- DistributionNotFound
InstallationError <|-- RequirementsFileParseError
PipError <|-- BestVersionAlreadyInstalled
PipError <|-- BadCommand
PipError <|-- CommandError
PipError <|-- PreviousBuildDirError
PipError <|-- NetworkConnectionError
InstallationError <|-- InvalidWheelFilename
InstallationError <|-- UnsupportedWheel
InstallationError <|-- InvalidWheel
InstallationError <|-- MetadataInconsistent
InstallationError <|-- MetadataInvalid
DiagnosticPipError <|-- InstallationSubprocessError
InstallationError <|-- InstallationSubprocessError
InstallationSubprocessError <|-- MetadataGenerationFailed
InstallationError <|-- MetadataGenerationFailed
InstallationError <|-- HashErrors
InstallationError <|-- HashError
HashError <|-- VcsHashUnsupported
HashError <|-- DirectoryUrlHashUnsupported
HashError <|-- HashMissing
HashError <|-- HashUnpinned
HashError <|-- HashMismatch
InstallationError <|-- UnsupportedPythonVersion
ConfigurationError <|-- ConfigurationFileCouldNotBeLoaded
DiagnosticPipError <|-- ExternallyManagedEnvironment
DiagnosticPipError <|-- UninstallMissingRecord
DiagnosticPipError <|-- LegacyDistutilsInstall
DiagnosticPipError <|-- InvalidInstalledPackage
DiagnosticPipError <|-- IncompleteDownloadError
DiagnosticPipError <|-- ResolutionTooDeepError
BuildEnvironment <|-- NoOpBuildEnvironment
NamedTuple <|-- Credentials
ABC <|-- KeyRingBaseProvider
KeyRingBaseProvider <|-- KeyRingNullProvider
KeyRingBaseProvider <|-- KeyRingPythonProvider
KeyRingBaseProvider <|-- KeyRingCliProvider
AuthBase <|-- MultiDomainBasicAuth
xmlrpc.client.Transport <|-- PipXmlrpcTransport
BaseAdapter <|-- LocalFSAdapter
_SSLContextAdapterMixin <|-- HTTPAdapter
_BaseHTTPAdapter <|-- HTTPAdapter
_SSLContextAdapterMixin <|-- CacheControlAdapter
_BaseCacheControlAdapter <|-- CacheControlAdapter
HTTPAdapter <|-- InsecureHTTPAdapter
CacheControlAdapter <|-- InsecureCacheControlAdapter
requests.Session <|-- PipSession
SeparateBodyBaseCache <|-- SafeFileCache
Exception <|-- HTTPRangeRequestUnsupported
Exception <|-- BrokenStdoutLoggingError
logging.Formatter <|-- IndentingFormatter
Console <|-- PipConsole
RichHandler <|-- RichPipStreamHandler
logging.handlers.RotatingFileHandler <|-- BetterRotatingFileHandler
Filter <|-- MaxLevelFilter
Filter <|-- ExcludeLoggerFilter
StringIO <|-- StreamWrapper
BuildBackendHookCaller <|-- ConfiguredBuildBackendHookCaller
Warning <|-- PipDeprecationWarning
TempDirectory <|-- AdjacentTempDirectory
Hashes <|-- MissingHashes
logging.Logger <|-- VerboseLogger
NamedTuple <|-- _CleanResult
Exception <|-- DirectUrlValidationError
Option <|-- PipOption
CommandContextMixIn <|-- SessionCommandMixin
Command <|-- IndexGroupCommand
SessionCommandMixin <|-- IndexGroupCommand
optparse.IndentedHelpFormatter <|-- PrettyHelpFormatter
PrettyHelpFormatter <|-- UpdatingDefaultsHelpFormatter
optparse.OptionParser <|-- CustomOptionParser
CustomOptionParser <|-- ConfigOptionParser
SpinnerInterface <|-- InteractiveSpinner
SpinnerInterface <|-- NonInteractiveSpinner
CommandContextMixIn <|-- Command
IndexGroupCommand <|-- RequirementCommand
NamedTuple <|-- PackageDetails
NamedTuple <|-- _EditableInfo
Protocol <|-- File
InstallationError <|-- MissingCallableSuffix
ScriptMaker <|-- PipScriptMaker
str <|-- TrackerId
Exception <|-- OptionParsingError
BaseResolver <|-- Resolver
_ProviderBase <|-- PipProvider
Protocol <|-- ConflictCause
NamedTuple <|-- CollectedRootRequirements
Requirement <|-- ExplicitRequirement
Requirement <|-- SpecifierRequirement
SpecifierRequirement <|-- SpecifierWithoutExtrasRequirement
Requirement <|-- RequiresPythonRequirement
Requirement <|-- UnsatisfiableRequirement
BaseResolver <|-- Resolver
Candidate <|-- _InstallRequirementBackedCandidate
_InstallRequirementBackedCandidate <|-- LinkCandidate
_InstallRequirementBackedCandidate <|-- EditableCandidate
Candidate <|-- AlreadyInstalledCandidate
Candidate <|-- ExtrasCandidate
Candidate <|-- RequiresPythonCandidate
VersionControl <|-- Git
VersionControl <|-- Mercurial
VersionControl <|-- Bazaar
Exception <|-- RemoteNotFoundError
Exception <|-- RemoteNotValidError
VersionControl <|-- Subversion
Exception <|-- _NotAPIContent
Exception <|-- _NotHTTP
Protocol <|-- ParseLinks
HTMLParser <|-- HTMLLinkParser
NamedTuple <|-- CollectedSources
LinkSource <|-- _FlatDirectorySource
LinkSource <|-- _LocalFileSource
LinkSource <|-- _RemoteFileSource
LinkSource <|-- _IndexDirectorySource
enum.Enum <|-- LinkType
Command <|-- ConfigurationCommand
Command <|-- ShowCommand
NamedTuple <|-- _PackageInfo
BaseDistribution <|-- _DistWithLatestInfo
IndexGroupCommand <|-- ListCommand
Command <|-- CheckCommand
IndexGroupCommand <|-- IndexCommand
Command <|-- CompletionCommand
RequirementCommand <|-- DownloadCommand
Command <|-- CacheCommand
Command <|-- HashCommand
Command <|-- InspectCommand
Command <|-- DebugCommand
Command <|-- UninstallCommand
SessionCommandMixin <|-- UninstallCommand
RequirementCommand <|-- LockCommand
Command <|-- FreezeCommand
TypedDict <|-- TransformedHit
Command <|-- SearchCommand
SessionCommandMixin <|-- SearchCommand
RequirementCommand <|-- InstallCommand
Command <|-- HelpCommand
RequirementCommand <|-- WheelCommand
Protocol <|-- Backend
NamedTuple <|-- EntryPoint
BaseDistribution <|-- Distribution
BaseEnvironment <|-- Environment
Protocol <|-- BaseEntryPoint
NamedTuple <|-- RequiresEntry
Protocol <|-- BaseDistribution
Protocol <|-- Wheel
Wheel <|-- FilesystemWheel
Wheel <|-- MemoryWheel
importlib.metadata.Distribution <|-- WheelDistribution
BaseDistribution <|-- Distribution
ValueError <|-- BadMetadata
Protocol <|-- BasePath
BaseEnvironment <|-- Environment
AbstractDistribution <|-- SourceDistribution
AbstractDistribution <|-- InstalledDistribution
AbstractDistribution <|-- WheelDistribution
type <|-- _AnyMeta
typing._SpecialForm <|-- _ExtensionsSpecialForm
typing._GenericAlias <|-- _LiteralGenericAlias
_ExtensionsSpecialForm <|-- _LiteralForm
_special_generic_alias_base <|-- _SpecialGenericAlias
typing.Generic <|-- Protocol
Protocol <|-- SupportsInt
Protocol <|-- SupportsFloat
Protocol <|-- SupportsComplex
Protocol <|-- SupportsBytes
Protocol <|-- SupportsIndex
type <|-- SingletonMeta
type <|-- _TypedDictMeta
typing._GenericAlias <|-- _AnnotatedAlias
type <|-- _TypeVarLikeMeta
_Immutable <|-- ParamSpecArgs
_Immutable <|-- ParamSpecKwargs
list <|-- ParamSpec
_DefaultMixin <|-- ParamSpec
list <|-- _ConcatenateGenericAlias
typing._ConcatenateGenericAlias <|-- _ConcatenateGenericAlias
_ExtensionsSpecialForm <|-- _ConcatenateForm
_ExtensionsSpecialForm <|-- _TypeGuardForm
_ExtensionsSpecialForm <|-- _TypeIsForm
_ExtensionsSpecialForm <|-- _TypeFormForm
_ExtensionsSpecialForm <|-- _TypeFormForm
typing._Final <|-- _SpecialForm
_ExtensionsSpecialForm <|-- _RequiredForm
_ExtensionsSpecialForm <|-- _ReadOnlyForm
_ExtensionsSpecialForm <|-- _UnpackSpecialForm
typing._GenericAlias <|-- _UnpackAlias
typing._GenericAlias <|-- _UnpackAlias
_ExtensionsSpecialForm <|-- _UnpackForm
_DefaultMixin <|-- TypeVarTuple
type <|-- _NamedTupleMeta
abc.ABC <|-- Buffer
typing._GenericAlias <|-- _TypeAliasGenericAlias
enum.IntEnum <|-- Format
NamedTuple <|-- _MuslVersion
Exception <|-- ExceptionGroup
ValueError <|-- InvalidMetadata
TypedDict <|-- RawMetadata
NamedTuple <|-- _Version
ValueError <|-- InvalidVersion
_BaseVersion <|-- Version
Version <|-- _TrimmedRelease
Node <|-- Variable
Node <|-- Value
Node <|-- Op
NamedTuple <|-- ParsedRequirement
ValueError <|-- InvalidName
ValueError <|-- InvalidWheelFilename
ValueError <|-- InvalidSdistFilename
ValueError <|-- InvalidRequirement
ValueError <|-- InvalidMarker
ValueError <|-- UndefinedComparison
ValueError <|-- UndefinedEnvironmentName
TypedDict <|-- Environment
NamedTuple <|-- _GLibCVersion
Exception <|-- ParserSyntaxError
ValueError <|-- InvalidSpecifier
BaseSpecifier <|-- Specifier
BaseSpecifier <|-- SpecifierSet
ValueError <|-- ELFInvalid
enum.IntEnum <|-- EIClass
enum.IntEnum <|-- EIData
enum.IntEnum <|-- EMachine
ValueError <|-- InvalidLicenseExpression
TypedDict <|-- SPDXLicense
TypedDict <|-- SPDXException
_truststore_SSLContext_super_class <|-- SSLContext
ssl.SSLObject <|-- TruststoreSSLObject
Structure <|-- CERT_CONTEXT
Structure <|-- CERT_ENHKEY_USAGE
Structure <|-- CERT_USAGE_MATCH
Structure <|-- CERT_CHAIN_PARA
Structure <|-- CERT_TRUST_STATUS
Structure <|-- CERT_CHAIN_ELEMENT
Structure <|-- CERT_SIMPLE_CHAIN
Structure <|-- CERT_CHAIN_CONTEXT
Structure <|-- SSL_EXTRA_CERT_CHAIN_POLICY_PARA
Structure <|-- CERT_CHAIN_POLICY_PARA
Structure <|-- CERT_CHAIN_POLICY_STATUS
Structure <|-- CERT_CHAIN_ENGINE_CONFIG
Exception <|-- UnpackException
UnpackException <|-- BufferFull
UnpackException <|-- OutOfData
ValueError <|-- FormatError
UnpackException <|-- FormatError
ValueError <|-- StackError
UnpackException <|-- StackError
UnpackValueError <|-- ExtraData
ValueError <|-- CyclicDependencyError
RuntimeError <|-- EndOfText
tuple <|-- _TokenType
type <|-- StyleMeta
ValueError <|-- ClassNotFound
Exception <|-- OptionError
TextIOWrapper <|-- UnclosingTextIOWrapper
Directive <|-- PygmentsDoc
type <|-- LexerMeta
Lexer <|-- DelegatingLexer
str <|-- include
tuple <|-- combined
Future <|-- words
LexerMeta <|-- RegexLexerMeta
Lexer <|-- RegexLexer
RegexLexer <|-- ExtendedRegexLexer
RegexLexerMeta <|-- ProfilingRegexLexerMeta
RegexLexer <|-- ProfilingRegexLexer
Filter <|-- FunctionFilter
Filter <|-- CodeTagFilter
Filter <|-- SymbolFilter
Filter <|-- KeywordCaseFilter
Filter <|-- NameHighlightFilter
Exception <|-- ErrorToken
Filter <|-- RaiseOnErrorTokenFilter
Filter <|-- VisibleWhitespaceFilter
Filter <|-- GobbleFilter
Filter <|-- TokenMergeFilter
types.ModuleType <|-- _automodule
RegexLexer <|-- PythonLexer
RegexLexer <|-- Python2Lexer
RegexLexer <|-- _PythonConsoleLexerBase
DelegatingLexer <|-- PythonConsoleLexer
DelegatingLexer <|-- _ReplaceInnerCode
RegexLexer <|-- PythonTracebackLexer
RegexLexer <|-- Python2TracebackLexer
RegexLexer <|-- CythonLexer
RegexLexer <|-- DgLexer
PythonLexer <|-- NumPyLexer
types.ModuleType <|-- _automodule
BaseRedirectHandler <|-- RedirectHandler
object <|-- Locator
Locator <|-- PyPIRPCLocator
Locator <|-- PyPIJSONLocator
object <|-- Page
Locator <|-- SimpleScrapingLocator
Locator <|-- DirectoryLocator
Locator <|-- JSONLocator
Locator <|-- DistPathLocator
Locator <|-- AggregatingLocator
object <|-- DependencyFinder
DistlibException <|-- MetadataMissingError
DistlibException <|-- MetadataConflictError
DistlibException <|-- MetadataUnrecognizedVersionError
DistlibException <|-- MetadataInvalidError
object <|-- LegacyMetadata
object <|-- Metadata
ValueError <|-- UnsupportedVersionError
object <|-- Version
object <|-- Matcher
Version <|-- NormalizedVersion
Matcher <|-- NormalizedMatcher
Version <|-- LegacyVersion
Matcher <|-- LegacyMatcher
Version <|-- SemanticVersion
Matcher <|-- SemanticMatcher
object <|-- VersionScheme
ValueError <|-- CertificateError
object <|-- Container
BaseZipExtFile <|-- ZipExtFile
BaseZipFile <|-- ZipFile
MutableMapping <|-- ChainMap
dict <|-- OrderedDict
dict <|-- ConvertingDict
list <|-- ConvertingList
tuple <|-- ConvertingTuple
object <|-- BaseConfigurator
object <|-- PackageIndex
object <|-- Manifest
object <|-- cached_property
object <|-- FileOperator
object <|-- ExportEntry
object <|-- Cache
object <|-- EventMixin
object <|-- Sequencer
object <|-- Progress
httplib.HTTPSConnection <|-- HTTPSConnection
BaseHTTPSHandler <|-- HTTPSHandler
HTTPSHandler <|-- HTTPSOnlyHandler
HTTPHandler <|-- HTTPSOnlyHandler
xmlrpclib.Transport <|-- Transport
xmlrpclib.SafeTransport <|-- SafeTransport
xmlrpclib.ServerProxy <|-- ServerProxy
object <|-- CSVBase
CSVBase <|-- CSVReader
CSVBase <|-- CSVWriter
BaseConfigurator <|-- Configurator
object <|-- SubprocessMixin
object <|-- PyPIRCFile
object <|-- _Cache
object <|-- DistributionPath
object <|-- Distribution
Distribution <|-- BaseInstalledDistribution
BaseInstalledDistribution <|-- InstalledDistribution
BaseInstalledDistribution <|-- EggInfoDistribution
object <|-- DependencyGraph
Exception <|-- DistlibException
logging.Handler <|-- NullHandler
object <|-- Evaluator
Cache <|-- ResourceCache
object <|-- ResourceBase
ResourceBase <|-- Resource
ResourceBase <|-- ResourceContainer
object <|-- ResourceFinder
ResourceFinder <|-- ZipResourceFinder
object <|-- ScriptMaker
object <|-- Mounter
object <|-- Wheel
TypedDict <|-- VersionDict
TypedDict <|-- InfoDict
BaseHeuristic <|-- OneDayCache
BaseHeuristic <|-- ExpiresAfter
BaseHeuristic <|-- LastModified
HTTPAdapter <|-- CacheControlAdapter
BaseCache <|-- DictCache
BaseCache <|-- SeparateBodyBaseCache
_FileCacheMixin <|-- FileCache
BaseCache <|-- FileCache
_FileCacheMixin <|-- SeparateBodyFileCache
SeparateBodyBaseCache <|-- SeparateBodyFileCache
BaseCache <|-- RedisCache
UnicodeError <|-- IDNAError
IDNAError <|-- IDNABidiError
IDNAError <|-- InvalidCodepoint
IDNAError <|-- InvalidCodepointContext
codecs.Codec <|-- Codec
codecs.BufferedIncrementalEncoder <|-- IncrementalEncoder
codecs.BufferedIncrementalDecoder <|-- IncrementalDecoder
Codec <|-- StreamWriter
codecs.StreamWriter <|-- StreamWriter
Codec <|-- StreamReader
codecs.StreamReader <|-- StreamReader
RuntimeError <|-- CookieConflictError
cookielib.CookieJar <|-- RequestsCookieJar
MutableMapping <|-- RequestsCookieJar
AuthBase <|-- HTTPBasicAuth
HTTPBasicAuth <|-- HTTPProxyAuth
AuthBase <|-- HTTPDigestAuth
SessionRedirectMixin <|-- Session
RequestHooksMixin <|-- Request
RequestEncodingMixin <|-- PreparedRequest
RequestHooksMixin <|-- PreparedRequest
IOError <|-- RequestException
RequestException <|-- InvalidJSONError
InvalidJSONError <|-- JSONDecodeError
CompatJSONDecodeError <|-- JSONDecodeError
RequestException <|-- HTTPError
RequestException <|-- ConnectionError
ConnectionError <|-- ProxyError
ConnectionError <|-- SSLError
RequestException <|-- Timeout
ConnectionError <|-- ConnectTimeout
Timeout <|-- ConnectTimeout
Timeout <|-- ReadTimeout
RequestException <|-- URLRequired
RequestException <|-- TooManyRedirects
RequestException <|-- MissingSchema
ValueError <|-- MissingSchema
RequestException <|-- InvalidSchema
ValueError <|-- InvalidSchema
RequestException <|-- InvalidURL
ValueError <|-- InvalidURL
RequestException <|-- InvalidHeader
ValueError <|-- InvalidHeader
InvalidURL <|-- InvalidProxyURL
RequestException <|-- ChunkedEncodingError
RequestException <|-- ContentDecodingError
BaseHTTPError <|-- ContentDecodingError
RequestException <|-- StreamConsumedError
TypeError <|-- StreamConsumedError
RequestException <|-- RetryError
RequestException <|-- UnrewindableBodyError
Warning <|-- RequestsWarning
RequestsWarning <|-- FileModeWarning
DeprecationWarning <|-- FileModeWarning
RequestsWarning <|-- RequestsDependencyWarning
MutableMapping <|-- CaseInsensitiveDict
dict <|-- LookupDict
BaseAdapter <|-- HTTPAdapter
ValueError <|-- TOMLDecodeError
NamedTuple <|-- Output
Protocol <|-- SubprocessRunner
Exception <|-- BackendUnavailable
Exception <|-- HookMissing
Exception <|-- UnsupportedOperation
Exception <|-- BackendUnavailable
Exception <|-- HookMissing
Exception <|-- _DummyException
Exception <|-- GotUnsupportedOperation
Handler <|-- RichHandler
NamedTuple <|-- Measurement
JupyterMixin <|-- Tree
NamedTuple <|-- ConsoleDimensions
Protocol <|-- RichCast
Protocol <|-- ConsoleRenderable
Exception <|-- CaptureError
threading.local <|-- ConsoleThreadLocals
ABC <|-- RenderHook
IntEnum <|-- ColorSystem
IntEnum <|-- ColorType
Exception <|-- ColorParseError
NamedTuple <|-- Color
JupyterMixin <|-- Align
JupyterMixin <|-- VerticalCenter
Exception <|-- ThemeStackError
Exception <|-- NoEmoji
JupyterMixin <|-- Emoji
NamedTuple <|-- LayoutRender
Exception <|-- LayoutError
LayoutError <|-- NoSplitter
ABC <|-- Splitter
Splitter <|-- RowSplitter
Splitter <|-- ColumnSplitter
RegexHighlighter <|-- PathHighlighter
NamedTuple <|-- Region
io.TextIOBase <|-- FileProxy
NamedTuple <|-- Tag
Protocol <|-- Edge
Exception <|-- ReprError
JupyterMixin <|-- Constrain
BaseFormatter <|-- RichFormatter
JupyterMixin <|-- Pretty
NamedTuple <|-- StockKeepingUnit
JupyterMixin <|-- Columns
JupyterMixin <|-- Rule
JupyterMixin <|-- Inspect
ABC <|-- Pager
Pager <|-- SystemPager
NamedTuple <|-- Span
JupyterMixin <|-- Text
ABC <|-- Highlighter
Highlighter <|-- NullHighlighter
Highlighter <|-- RegexHighlighter
RegexHighlighter <|-- ReprHighlighter
RegexHighlighter <|-- JSONHighlighter
RegexHighlighter <|-- ISO8601Highlighter
JupyterMixin <|-- Bar
Thread <|-- _RefreshThread
JupyterMixin <|-- Live
RenderHook <|-- Live
ABC <|-- SyntaxTheme
SyntaxTheme <|-- PygmentsSyntaxTheme
SyntaxTheme <|-- ANSISyntaxTheme
NamedTuple <|-- _SyntaxHighlightRange
JupyterMixin <|-- Syntax
NamedTuple <|-- _Cell
JupyterMixin <|-- Table
JupyterMixin <|-- ProgressBar
Exception <|-- ConsoleError
Exception <|-- StyleError
ConsoleError <|-- StyleSyntaxError
StyleError <|-- MissingStyle
ConsoleError <|-- StyleStackError
ConsoleError <|-- NotRenderableError
ConsoleError <|-- MarkupError
ConsoleError <|-- LiveError
ConsoleError <|-- NoAltScreen
Exception <|-- PromptError
PromptError <|-- InvalidResponse
IntEnum <|-- ControlType
NamedTuple <|-- Segment
NamedTuple <|-- _AnsiToken
Thread <|-- _TrackThread
RawIOBase <|-- _Reader
BinaryIO <|-- _Reader
ABC <|-- ProgressColumn
ProgressColumn <|-- RenderableColumn
ProgressColumn <|-- SpinnerColumn
ProgressColumn <|-- TextColumn
ProgressColumn <|-- BarColumn
ProgressColumn <|-- TimeElapsedColumn
TextColumn <|-- TaskProgressColumn
ProgressColumn <|-- TimeRemainingColumn
ProgressColumn <|-- FileSizeColumn
ProgressColumn <|-- TotalFileSizeColumn
ProgressColumn <|-- MofNCompleteColumn
ProgressColumn <|-- DownloadColumn
ProgressColumn <|-- TransferSpeedColumn
NamedTuple <|-- ProgressSample
JupyterMixin <|-- Progress
Exception <|-- LegacyWindowsError
NamedTuple <|-- WindowsCoordinates
Structure <|-- CONSOLE_SCREEN_BUFFER_INFO
ctypes.Structure <|-- CONSOLE_CURSOR_INFO
JupyterMixin <|-- Panel
JupyterMixin <|-- Padding
JupyterMixin <|-- Status
ABC <|-- RichRenderable
NamedTuple <|-- ColorTriplet
object <|-- RequestField
object <|-- RequestMethods
RequestMethods <|-- PoolManager
PoolManager <|-- ProxyManager
object <|-- DeflateDecoder
object <|-- GzipDecoderState
object <|-- GzipDecoder
object <|-- BrotliDecoder
object <|-- MultiDecoder
io.IOBase <|-- HTTPResponse
BaseException <|-- BaseSSLError
Exception <|-- ConnectionError
Exception <|-- BrokenPipeError
_HTTPConnection <|-- HTTPConnection
object <|-- HTTPConnection
HTTPConnection <|-- HTTPSConnection
object <|-- DummyConnection
MutableMapping <|-- RecentlyUsedContainer
MutableMapping <|-- HTTPHeaderDict
Exception <|-- HTTPError
Warning <|-- HTTPWarning
HTTPError <|-- PoolError
PoolError <|-- RequestError
HTTPError <|-- SSLError
HTTPError <|-- ProxyError
HTTPError <|-- DecodeError
HTTPError <|-- ProtocolError
RequestError <|-- MaxRetryError
RequestError <|-- HostChangedError
HTTPError <|-- TimeoutStateError
HTTPError <|-- TimeoutError
TimeoutError <|-- ReadTimeoutError
RequestError <|-- ReadTimeoutError
TimeoutError <|-- ConnectTimeoutError
ConnectTimeoutError <|-- NewConnectionError
PoolError <|-- NewConnectionError
PoolError <|-- EmptyPoolError
PoolError <|-- ClosedPoolError
ValueError <|-- LocationValueError
HTTPError <|-- LocationValueError
LocationValueError <|-- LocationParseError
LocationValueError <|-- URLSchemeUnknown
HTTPError <|-- ResponseError
HTTPWarning <|-- SecurityWarning
SecurityWarning <|-- SubjectAltNameWarning
SecurityWarning <|-- InsecureRequestWarning
SecurityWarning <|-- SystemTimeWarning
SecurityWarning <|-- InsecurePlatformWarning
HTTPWarning <|-- SNIMissingWarning
HTTPWarning <|-- DependencyWarning
ProtocolError <|-- ResponseNotChunked
ValueError <|-- ResponseNotChunked
HTTPError <|-- BodyNotHttplibCompatible
HTTPError <|-- IncompleteRead
httplib_IncompleteRead <|-- IncompleteRead
HTTPError <|-- InvalidChunkLength
httplib_IncompleteRead <|-- InvalidChunkLength
HTTPError <|-- InvalidHeader
AssertionError <|-- ProxySchemeUnknown
URLSchemeUnknown <|-- ProxySchemeUnknown
ValueError <|-- ProxySchemeUnsupported
HTTPError <|-- HeaderParsingError
HTTPError <|-- UnrewindableBodyError
object <|-- ConnectionPool
ConnectionPool <|-- HTTPConnectionPool
RequestMethods <|-- HTTPConnectionPool
HTTPConnectionPool <|-- HTTPSConnectionPool
queue.Queue <|-- LifoQueue
Exception <|-- NoWayToWaitForSocketError
object <|-- Timeout
object <|-- SSLContext
type <|-- _RetryMeta
object <|-- Retry
ValueError <|-- CertificateError
object <|-- WrappedSocket
object <|-- SecureTransportContext
HTTPConnection <|-- SOCKSConnection
SOCKSConnection <|-- SOCKSHTTPSConnection
HTTPSConnection <|-- SOCKSHTTPSConnection
HTTPConnectionPool <|-- SOCKSHTTPConnectionPool
HTTPSConnectionPool <|-- SOCKSHTTPSConnectionPool
PoolManager <|-- SOCKSProxyManager
Exception <|-- UnsupportedExtension
object <|-- WrappedSocket
object <|-- PyOpenSSLContext
HTTPWarning <|-- AppEnginePlatformWarning
HTTPError <|-- AppEnginePlatformError
RequestMethods <|-- AppEngineManager
HTTPSConnectionPool <|-- NTLMConnectionPool
object <|-- CFConst
object <|-- SecurityConst
object <|-- X
object <|-- _LazyDescr
_LazyDescr <|-- MovedModule
types.ModuleType <|-- _LazyModule
_LazyDescr <|-- MovedAttribute
object <|-- _SixMetaPathImporter
_LazyModule <|-- _MovedItems
_LazyModule <|-- Module_six_moves_urllib_parse
_LazyModule <|-- Module_six_moves_urllib_error
_LazyModule <|-- Module_six_moves_urllib_request
_LazyModule <|-- Module_six_moves_urllib_response
_LazyModule <|-- Module_six_moves_urllib_robotparser
types.ModuleType <|-- Module_six_moves_urllib
object <|-- Iterator
type <|-- metaclass
object <|-- weakref_finalize
object <|-- _Info
Protocol <|-- _LoaderProtocol
Protocol <|-- _ZipLoaderModule
RuntimeWarning <|-- PEP440Warning
Exception <|-- ResolutionError
ResolutionError <|-- VersionConflict
VersionConflict <|-- ContextualVersionConflict
ResolutionError <|-- DistributionNotFound
ResolutionError <|-- UnknownExtra
Protocol <|-- IMetadataProvider
IMetadataProvider <|-- IResourceProvider
Protocol <|-- IResourceProvider
RuntimeError <|-- ExtractionError
NullProvider <|-- EggProvider
EggProvider <|-- DefaultProvider
NullProvider <|-- EmptyProvider
ZipManifests <|-- MemoizedZipManifests
NamedTuple <|-- manifest_mod
EggProvider <|-- ZipProvider
EmptyProvider <|-- FileMetadata
DefaultProvider <|-- PathMetadata
ZipProvider <|-- EggMetadata
Distribution <|-- EggInfoDistribution
Distribution <|-- DistInfoDistribution
_packaging_requirements.InvalidRequirement <|-- RequirementParseError
_packaging_requirements.Requirement <|-- Requirement
Warning <|-- PkgResourcesDeprecationWarning
Protocol <|-- Preference
NamedTuple <|-- RequirementInformation
NamedTuple <|-- State
NamedTuple <|-- Result
Exception <|-- ResolverException
ResolverException <|-- RequirementsConflicted
ResolverException <|-- InconsistentCandidate
ResolverException <|-- ResolutionError
ResolutionError <|-- ResolutionImpossible
ResolutionError <|-- ResolutionTooDeep
PlatformDirsABC <|-- MacOS
PlatformDirsABC <|-- Unix
ABC <|-- PlatformDirsABC
PlatformDirsABC <|-- Android
PlatformDirsABC <|-- Windows
enum.Enum <|-- HeaderNames
enum.Flag <|-- ExemptionScope
exceptions.TooManyRequests <|-- RateLimitExceeded
object <|-- _Config
object <|-- JWTManager
json.JSONEncoder <|-- JSONEncoder
Exception <|-- JWTExtendedException
JWTExtendedException <|-- JWTDecodeError
JWTExtendedException <|-- InvalidHeaderError
JWTExtendedException <|-- InvalidQueryParamError
JWTExtendedException <|-- NoAuthorizationError
JWTExtendedException <|-- CSRFError
JWTExtendedException <|-- WrongTokenError
JWTExtendedException <|-- RevokedTokenError
JWTExtendedException <|-- FreshTokenRequired
JWTExtendedException <|-- UserLookupError
JWTExtendedException <|-- UserClaimsVerificationError
TypeTranslator <|-- TypeVarEraser
TypeTranslator <|-- LastKnownValueEraser
TraverserVisitor <|-- FindAttributeAssign
TraverserVisitor <|-- FindYield
NamedTuple <|-- CacheMeta
TypedDict <|-- FgDepMeta
Exception <|-- ModuleNotFound
Exception <|-- InspectError
NamedTuple <|-- ErrorMessage
BoolTypeQuery <|-- HasGenericCallable
mypy.type_visitor.TypeTranslator <|-- FreshenCallableVisitor
TrivialSyntheticTypeTranslator <|-- ExpandTypeVisitor
mypy.traverser.TraverserVisitor <|-- DefinitionFinder
mypy.mixedtraverser.MixedTraverserVisitor <|-- ReferenceFinder
BaseStubGenerator <|-- ASTStubGenerator
mypy.traverser.TraverserVisitor <|-- ASTStubGenerator
mypy.traverser.TraverserVisitor <|-- SelfTraverser
TypedDict <|-- PyAnnotateSignature
NamedTuple <|-- Callsite
Plugin <|-- SuggestionPlugin
TraverserVisitor <|-- ReturnFinder
TraverserVisitor <|-- ArgUseFinder
Exception <|-- SuggestionFailure
TypeStrVisitor <|-- TypeFormatter
TypeTranslator <|-- MakeSuggestionAny
Exception <|-- TypeTranslationError
Node <|-- Pattern
Pattern <|-- AsPattern
Pattern <|-- OrPattern
Pattern <|-- ValuePattern
Pattern <|-- SingletonPattern
Pattern <|-- SequencePattern
Pattern <|-- StarredPattern
Pattern <|-- MappingPattern
Pattern <|-- ClassPattern
ValueError <|-- ConfigTOMLValueError
TypeTraverserVisitor <|-- FreezeTypeVarsVisitor
TraverserVisitor <|-- RefInfoVisitor
NamedTuple <|-- SearchPaths
Enum <|-- ModuleNotFoundReason
argparse.Namespace <|-- SplitNamespace
Exception <|-- IPCException
IPCBase <|-- IPCClient
IPCBase <|-- IPCServer
Exception <|-- DecodeError
Exception <|-- MroError
NamedTuple <|-- FileData
ExtendedTraverserVisitor <|-- SearchVisitor
ExtendedTraverserVisitor <|-- SearchAllVisitor
TraverserVisitor <|-- FuncMapInitializer
mypy.nodes.Context <|-- Type
Type <|-- TypeAliasType
Type <|-- TypeGuardedType
Type <|-- RequiredType
Type <|-- ProperType
ProperType <|-- TypeVarLikeType
TypeVarLikeType <|-- TypeVarType
TypeVarLikeType <|-- ParamSpecType
TypeVarLikeType <|-- TypeVarTupleType
ProperType <|-- UnboundType
ProperType <|-- CallableArgument
ProperType <|-- TypeList
ProperType <|-- UnpackType
ProperType <|-- AnyType
ProperType <|-- UninhabitedType
ProperType <|-- NoneType
ProperType <|-- ErasedType
ProperType <|-- DeletedType
ProperType <|-- Instance
ProperType <|-- FunctionLike
NamedTuple <|-- FormalArgument
ProperType <|-- Parameters
FunctionLike <|-- CallableType
FunctionLike <|-- Overloaded
ProperType <|-- TupleType
ProperType <|-- TypedDictType
ProperType <|-- RawExpressionType
ProperType <|-- LiteralType
ProperType <|-- UnionType
ProperType <|-- PartialType
ProperType <|-- EllipsisType
ProperType <|-- TypeType
ProperType <|-- PlaceholderType
TypeTranslator <|-- TrivialSyntheticTypeTranslator
TrivialSyntheticTypeTranslator <|-- UnrollAliasVisitor
TypeTraverserVisitor <|-- LocationSetter
BoolTypeQuery <|-- HasTypeVars
BoolTypeQuery <|-- HasRecursiveType
ExpandTypeVisitor <|-- InstantiateAliasVisitor
TraverserVisitor <|-- SemanticAnalyzerPreAnalysis
TypeAnalyzerPluginInterface <|-- TypeAnalyser
Protocol <|-- MsgCallback
TrivialSyntheticTypeTranslator <|-- DivergingAliasDetector
BoolTypeQuery <|-- HasAnyFromUnimportedType
BoolTypeQuery <|-- HasSelfType
SignatureGenerator <|-- ExternalSignatureGenerator
SignatureGenerator <|-- DocstringSignatureGenerator
BaseStubGenerator <|-- InspectionStubGenerator
Enum <|-- ScopeType
ExtendedTraverserVisitor <|-- PossiblyUndefinedVariableVisitor
TraverserVisitor <|-- MarkImportsUnreachableVisitor
TraverserVisitor <|-- MarkImportsMypyOnlyVisitor
TraverserVisitor <|-- StatisticsVisitor
HasAnyQuery <|-- HasAnyQuery2
TypeTraverserVisitor <|-- CollectAllInstancesQuery
MixedTraverserVisitor <|-- TypeArgumentAnalyzer
NamedTuple <|-- FunctionSig
NamedTuple <|-- AnalyzeTypeContext
NamedTuple <|-- ReportConfigContext
NamedTuple <|-- FunctionSigContext
NamedTuple <|-- FunctionContext
NamedTuple <|-- MethodSigContext
NamedTuple <|-- MethodContext
NamedTuple <|-- AttributeContext
NamedTuple <|-- ClassDefContext
NamedTuple <|-- DynamicClassDefContext
CommonPluginApi <|-- Plugin
Plugin <|-- ChainedPlugin
NamedTuple <|-- ArgumentInferContext
TraverserVisitor <|-- ExtendedTraverserVisitor
TraverserVisitor <|-- ReturnSeeker
TraverserVisitor <|-- FuncCollectorBase
FuncCollectorBase <|-- YieldSeeker
FuncCollectorBase <|-- YieldFromSeeker
TraverserVisitor <|-- AwaitSeeker
FuncCollectorBase <|-- ReturnCollector
FuncCollectorBase <|-- YieldCollector
FuncCollectorBase <|-- YieldFromCollector
TraverserVisitor <|-- VariableRenameVisitor
TraverserVisitor <|-- LimitedVariableRenameVisitor
Exception <|-- CompileError
Exception <|-- CantImport
TypeStrVisitor <|-- AnnotationPrinter
MetadataStore <|-- FilesystemMetadataStore
MetadataStore <|-- SqliteMetadataStore
TraverserVisitor <|-- TreeFreer
Context <|-- Node
Node <|-- Statement
Node <|-- Expression
Expression <|-- FakeExpression
Node <|-- SymbolNode
SymbolNode <|-- MypyFile
Statement <|-- ImportBase
ImportBase <|-- Import
ImportBase <|-- ImportFrom
ImportBase <|-- ImportAll
Node <|-- FuncBase
FuncBase <|-- OverloadedFuncDef
SymbolNode <|-- OverloadedFuncDef
Statement <|-- OverloadedFuncDef
Node <|-- Argument
FuncBase <|-- FuncItem
FuncItem <|-- FuncDef
SymbolNode <|-- FuncDef
Statement <|-- FuncDef
SymbolNode <|-- Decorator
Statement <|-- Decorator
SymbolNode <|-- Var
Statement <|-- ClassDef
Statement <|-- GlobalDecl
Statement <|-- NonlocalDecl
Statement <|-- Block
Statement <|-- ExpressionStmt
Statement <|-- AssignmentStmt
Statement <|-- OperatorAssignmentStmt
Statement <|-- WhileStmt
Statement <|-- ForStmt
Statement <|-- ReturnStmt
Statement <|-- AssertStmt
Statement <|-- DelStmt
Statement <|-- BreakStmt
Statement <|-- ContinueStmt
Statement <|-- PassStmt
Statement <|-- IfStmt
Statement <|-- RaiseStmt
Statement <|-- TryStmt
Statement <|-- WithStmt
Statement <|-- MatchStmt
Expression <|-- IntExpr
Expression <|-- StrExpr
Expression <|-- BytesExpr
Expression <|-- FloatExpr
Expression <|-- ComplexExpr
Expression <|-- EllipsisExpr
Expression <|-- StarExpr
Expression <|-- RefExpr
RefExpr <|-- NameExpr
RefExpr <|-- MemberExpr
Enum <|-- ArgKind
Expression <|-- CallExpr
Expression <|-- YieldFromExpr
Expression <|-- YieldExpr
Expression <|-- IndexExpr
Expression <|-- UnaryExpr
Expression <|-- AssignmentExpr
Expression <|-- OpExpr
Expression <|-- ComparisonExpr
Expression <|-- SliceExpr
Expression <|-- CastExpr
Expression <|-- AssertTypeExpr
Expression <|-- RevealExpr
Expression <|-- SuperExpr
FuncItem <|-- LambdaExpr
Expression <|-- LambdaExpr
Expression <|-- ListExpr
Expression <|-- DictExpr
Expression <|-- TupleExpr
Expression <|-- SetExpr
Expression <|-- GeneratorExpr
Expression <|-- ListComprehension
Expression <|-- SetComprehension
Expression <|-- DictionaryComprehension
Expression <|-- ConditionalExpr
Expression <|-- TypeApplication
SymbolNode <|-- TypeVarLikeExpr
Expression <|-- TypeVarLikeExpr
TypeVarLikeExpr <|-- TypeVarExpr
TypeVarLikeExpr <|-- ParamSpecExpr
TypeVarLikeExpr <|-- TypeVarTupleExpr
Expression <|-- TypeAliasExpr
Expression <|-- NamedTupleExpr
Expression <|-- TypedDictExpr
Expression <|-- EnumCallExpr
Expression <|-- PromoteExpr
Expression <|-- NewTypeExpr
Expression <|-- AwaitExpr
Expression <|-- TempNode
SymbolNode <|-- TypeInfo
TypeInfo <|-- FakeInfo
SymbolNode <|-- TypeAlias
SymbolNode <|-- PlaceholderNode
argparse.RawDescriptionHelpFormatter <|-- AugmentedHelpFormatter
Exception <|-- PythonExecutableInferenceError
argparse.ArgumentParser <|-- CapturableArgumentParser
argparse.Action <|-- CapturableVersionAction
Exception <|-- TooManyUnions
Exception <|-- Finished
enum.Enum <|-- UseReverse
types.BoolTypeQuery <|-- HasAnyType
Exception <|-- PolyTranslationError
TypeTranslator <|-- PolyTranslator
types.BoolTypeQuery <|-- ArgInferSecondPassQuery
types.BoolTypeQuery <|-- HasTypeVarQuery
types.BoolTypeQuery <|-- HasErasedComponentsQuery
types.BoolTypeQuery <|-- HasUninhabitedComponentsQuery
SemanticAnalyzerCoreInterface <|-- SemanticAnalyzerInterface
Protocol <|-- _NamedTypeCallback
BoolTypeQuery <|-- HasPlaceholders
TraverserVisitor <|-- FuncCounterVisitor
AbstractReporter <|-- LineCountReporter
AbstractReporter <|-- AnyExpressionsReporter
TraverserVisitor <|-- LineCoverageVisitor
AbstractReporter <|-- LineCoverageReporter
AbstractReporter <|-- MemoryXmlReporter
AbstractReporter <|-- CoberturaXmlReporter
AbstractReporter <|-- AbstractXmlReporter
AbstractXmlReporter <|-- XmlReporter
AbstractXmlReporter <|-- XsltHtmlReporter
AbstractXmlReporter <|-- XsltTxtReporter
AbstractReporter <|-- LinePrecisionReporter
NamedTuple <|-- DeferredNode
NamedTuple <|-- FineGrainedDeferredNode
NamedTuple <|-- TypeRange
NamedTuple <|-- PartialTypeScope
CheckerPluginInterface <|-- TypeChecker
TypeTraverserVisitor <|-- CollectArgTypeVarTypes
TransformVisitor <|-- TypeTransformVisitor
BoolTypeQuery <|-- InvalidInferredTypes
TypeTranslator <|-- SetNothingToAny
TraverserVisitor <|-- VarAssignVisitor
SemanticAnalyzerInterface <|-- SemanticAnalyzer
SemanticAnalyzerPluginInterface <|-- SemanticAnalyzer
TrivialSyntheticTypeTranslator <|-- MakeAnyNonExplicit
NamedTuple <|-- PatternType
TraverserVisitor <|-- MixedTraverserVisitor
TypeTraverserVisitor <|-- MixedTraverserVisitor
Exception <|-- InvalidSourceList
Exception <|-- StubtestFailure
runtime <|-- SubClass
argparse.RawDescriptionHelpFormatter <|-- AugmentedHelpFormatter
Exception <|-- BadStatus
TestCase <|-- IPCTests
DataSuite <|-- ErrorStreamSuite
Suite <|-- SolveSuite
DataSuite <|-- DaemonSuite
unittest.TestCase <|-- DaemonUtilitySuite
Suite <|-- ModuleFinderSuite
Suite <|-- ModuleFinderSitePackagesSuite
DataSuite <|-- FineGrainedSuite
unittest.TestCase <|-- TestMessageSorting
mypy.test.testfinegrained.FineGrainedSuite <|-- FineGrainedCacheSuite
DataSuite <|-- ParserSuite
DataSuite <|-- ParseErrorSuite
DataSuite <|-- PythonCmdlineSuite
FileSystemCache <|-- FakeFSCache
unittest.TestCase <|-- SourceFinderSuite
DataSuite <|-- PEP561Suite
DataSuite <|-- ASTDiffSuite
Suite <|-- ArgSuite
TypeFixture <|-- InterfaceTypeFixture
TraverserVisitor <|-- SkippedNodeSearcher
TransformVisitor <|-- TypeAssertTransformVisitor
unittest.TestCase <|-- StubgenCmdLineSuite
unittest.TestCase <|-- StubgenCliParseSuite
unittest.TestCase <|-- StubgenUtilSuite
unittest.TestCase <|-- StubgenHelpersSuite
DataSuite <|-- StubgenPythonSuite
TestBaseClass <|-- TestClass
unittest.TestCase <|-- StubgencSuite
KeyError <|-- TestClass
argparse.Action <|-- TestClass
type <|-- TestClass
unittest.TestCase <|-- ArgSigSuite
unittest.TestCase <|-- IsValidTypeSuite
unittest.TestCase <|-- ModuleInspectSuite
unittest.TestCase <|-- TestStubInfo
DataSuite <|-- TypeExportSuite
Suite <|-- MapActualsToFormalsSuite
Suite <|-- OperandDisjointDictSuite
Suite <|-- OperandComparisonGroupingSuite
TestCase <|-- FancyErrorFormattingTestCases
TestCase <|-- MypycTest
Suite <|-- ConstraintsSuite
Suite <|-- GraphSuite
DataSuite <|-- SemAnalSuite
DataSuite <|-- SemAnalErrorSuite
DataSuite <|-- SemAnalSymtableSuite
DataSuite <|-- SemAnalTypeInfoSuite
unittest.TestCase <|-- TestFileSystemCache
DataSuite <|-- RefInfoSuite
DataSuite <|-- GetDependenciesSuite
Suite <|-- TypesSuite
Suite <|-- TypeOpsSuite
Suite <|-- JoinSuite
Suite <|-- MeetSuite
Suite <|-- SameTypeSuite
Suite <|-- RemoveLastKnownValueSuite
Suite <|-- ShallowOverloadMatchingSuite
TestCase <|-- TestExpandTypeLimitGetProperType
Suite <|-- APISuite
unittest.TestCase <|-- StubtestUnit
unittest.TestCase <|-- StubtestMiscUnit
TestCase <|-- TestGetTerminalSize
Suite <|-- CoberturaReportSuite
DataSuite <|-- ASTMergeSuite
Suite <|-- SubtypingSuite
DataSuite <|-- TransformSuite
DataSuite <|-- PythonEvaluationSuite
NamedTuple <|-- UpdateFile
NamedTuple <|-- DeleteFile
pytest.Item <|-- DataDrivenTestCase
pytest.Class <|-- DataSuiteCollector
NamedTuple <|-- DataFileFix
pytest.Collector <|-- DataFileCollector
DataSuite <|-- TypeCheckSuite
Suite <|-- ParseTestDataSuite
Suite <|-- DiffHelperSuite
Suite <|-- UpdateDataSuite
NamedTuple <|-- SingledispatchTypeVars
NamedTuple <|-- RegisterCallableInfo
NamedTuple <|-- _MethodInfo
Plugin <|-- DefaultPlugin
NamedTuple <|-- MethodSpec
Plugin <|-- ProperTypePlugin
NamedTuple <|-- NormalUpdate
NamedTuple <|-- BlockedUpdate
TraverserVisitor <|-- NodeStripVisitor
TraverserVisitor <|-- DependencyVisitor
TraverserVisitor <|-- SubexpressionFinder
TraverserVisitor <|-- NodeReplaceVisitor
Handler <|-- RichHandler
NamedTuple <|-- Measurement
JupyterMixin <|-- Tree
NamedTuple <|-- ConsoleDimensions
Protocol <|-- RichCast
Protocol <|-- ConsoleRenderable
Exception <|-- CaptureError
threading.local <|-- ConsoleThreadLocals
ABC <|-- RenderHook
IntEnum <|-- ColorSystem
IntEnum <|-- ColorType
Exception <|-- ColorParseError
NamedTuple <|-- Color
JupyterMixin <|-- Align
JupyterMixin <|-- VerticalCenter
Exception <|-- ThemeStackError
Exception <|-- NoEmoji
JupyterMixin <|-- Emoji
NamedTuple <|-- LayoutRender
Exception <|-- LayoutError
LayoutError <|-- NoSplitter
ABC <|-- Splitter
Splitter <|-- RowSplitter
Splitter <|-- ColumnSplitter
RegexHighlighter <|-- PathHighlighter
NamedTuple <|-- Region
io.TextIOBase <|-- FileProxy
NamedTuple <|-- Tag
Protocol <|-- Edge
Exception <|-- ReprError
JupyterMixin <|-- Constrain
BaseFormatter <|-- RichFormatter
JupyterMixin <|-- Pretty
NamedTuple <|-- StockKeepingUnit
JupyterMixin <|-- Columns
JupyterMixin <|-- Rule
JupyterMixin <|-- Inspect
MarkdownElement <|-- UnknownElement
MarkdownElement <|-- TextElement
TextElement <|-- Paragraph
TextElement <|-- Heading
TextElement <|-- CodeBlock
TextElement <|-- BlockQuote
MarkdownElement <|-- HorizontalRule
MarkdownElement <|-- TableElement
MarkdownElement <|-- TableHeaderElement
MarkdownElement <|-- TableBodyElement
MarkdownElement <|-- TableRowElement
MarkdownElement <|-- TableDataElement
MarkdownElement <|-- ListElement
TextElement <|-- ListItem
TextElement <|-- Link
TextElement <|-- ImageItem
JupyterMixin <|-- Markdown
ABC <|-- Pager
Pager <|-- SystemPager
NamedTuple <|-- Span
JupyterMixin <|-- Text
ABC <|-- Highlighter
Highlighter <|-- NullHighlighter
Highlighter <|-- RegexHighlighter
RegexHighlighter <|-- ReprHighlighter
RegexHighlighter <|-- JSONHighlighter
RegexHighlighter <|-- ISO8601Highlighter
JupyterMixin <|-- Bar
Thread <|-- _RefreshThread
JupyterMixin <|-- Live
RenderHook <|-- Live
ABC <|-- SyntaxTheme
SyntaxTheme <|-- PygmentsSyntaxTheme
SyntaxTheme <|-- ANSISyntaxTheme
NamedTuple <|-- _SyntaxHighlightRange
JupyterMixin <|-- Syntax
NamedTuple <|-- _Cell
JupyterMixin <|-- Table
JupyterMixin <|-- ProgressBar
Exception <|-- ConsoleError
Exception <|-- StyleError
ConsoleError <|-- StyleSyntaxError
StyleError <|-- MissingStyle
ConsoleError <|-- StyleStackError
ConsoleError <|-- NotRenderableError
ConsoleError <|-- MarkupError
ConsoleError <|-- LiveError
ConsoleError <|-- NoAltScreen
Exception <|-- PromptError
PromptError <|-- InvalidResponse
IntEnum <|-- ControlType
NamedTuple <|-- Segment
NamedTuple <|-- _AnsiToken
Thread <|-- _TrackThread
RawIOBase <|-- _Reader
BinaryIO <|-- _Reader
ABC <|-- ProgressColumn
ProgressColumn <|-- RenderableColumn
ProgressColumn <|-- SpinnerColumn
ProgressColumn <|-- TextColumn
ProgressColumn <|-- BarColumn
ProgressColumn <|-- TimeElapsedColumn
TextColumn <|-- TaskProgressColumn
ProgressColumn <|-- TimeRemainingColumn
ProgressColumn <|-- FileSizeColumn
ProgressColumn <|-- TotalFileSizeColumn
ProgressColumn <|-- MofNCompleteColumn
ProgressColumn <|-- DownloadColumn
ProgressColumn <|-- TransferSpeedColumn
NamedTuple <|-- ProgressSample
JupyterMixin <|-- Progress
Exception <|-- LegacyWindowsError
NamedTuple <|-- WindowsCoordinates
Structure <|-- CONSOLE_SCREEN_BUFFER_INFO
ctypes.Structure <|-- CONSOLE_CURSOR_INFO
JupyterMixin <|-- Panel
JupyterMixin <|-- Padding
JupyterMixin <|-- Status
ABC <|-- RichRenderable
NamedTuple <|-- ColorTriplet
Symbols <|-- _python_symbols
Symbols <|-- _pattern_symbols
Base <|-- Node
Base <|-- Leaf
BasePattern <|-- LeafPattern
BasePattern <|-- NodePattern
BasePattern <|-- WildcardPattern
BasePattern <|-- NegatedPattern
grammar.Grammar <|-- PgenGrammar
grammar.Grammar <|-- Converter
Exception <|-- ParseError
Exception <|-- TokenError
Exception <|-- StopTokenizing
UserWarning <|-- PluggyWarning
PluggyWarning <|-- PluggyTeardownRaisedWarning
TypedDict <|-- HookspecOpts
TypedDict <|-- HookimplOpts
HookCaller <|-- _SubsetHookCaller
Exception <|-- HookCallError
Exception <|-- PluginValidationError
TypedDict <|-- MessagingOptions
Protocol <|-- CommandFunction
io.TextIOWrapper <|-- EncodedIO
Exception <|-- CommandError
CommandError <|-- AutogenerateDiffsDetected
type <|-- _ModuleClsMeta
Protocol <|-- _CompilerProtocol
sql.ColumnElement <|-- _textual_index_element
BindParameter <|-- _literal_bindparam
DefaultImpl <|-- PostgresqlImpl
AlterColumn <|-- PostgresqlColumnType
ops.AddConstraintOp <|-- CreateExcludeConstraintOp
DefaultImpl <|-- MSSQLImpl
Executable <|-- _ExecDropConstraint
ClauseElement <|-- _ExecDropConstraint
Executable <|-- _ExecDropFKConstraint
ClauseElement <|-- _ExecDropFKConstraint
NamedTuple <|-- ComparisonResult
DefaultImpl <|-- SQLiteImpl
type <|-- ImplMeta
NamedTuple <|-- Params
DefaultImpl <|-- OracleImpl
DDLElement <|-- AlterTable
AlterTable <|-- RenameTable
AlterTable <|-- AlterColumn
AlterColumn <|-- ColumnNullable
AlterColumn <|-- ColumnType
AlterColumn <|-- ColumnName
AlterColumn <|-- ColumnDefault
AlterColumn <|-- ComputedColumnDefault
AlterColumn <|-- IdentityColumnDefault
AlterTable <|-- AddColumn
AlterTable <|-- DropColumn
AlterColumn <|-- ColumnComment
DefaultImpl <|-- MySQLImpl
MySQLImpl <|-- MariaDBImpl
AlterColumn <|-- MySQLAlterDefault
AlterColumn <|-- MySQLChangeColumn
MySQLChangeColumn <|-- MySQLModifyColumn
util.ModuleClsProxy <|-- EnvironmentContext
MigrationStep <|-- RevisionStep
MigrationStep <|-- StampStep
MigrateOperation <|-- AddConstraintOp
MigrateOperation <|-- DropConstraintOp
AddConstraintOp <|-- CreatePrimaryKeyOp
AddConstraintOp <|-- CreateUniqueConstraintOp
AddConstraintOp <|-- CreateForeignKeyOp
AddConstraintOp <|-- CreateCheckConstraintOp
MigrateOperation <|-- CreateIndexOp
MigrateOperation <|-- DropIndexOp
MigrateOperation <|-- CreateTableOp
MigrateOperation <|-- DropTableOp
MigrateOperation <|-- AlterTableOp
AlterTableOp <|-- RenameTableOp
AlterTableOp <|-- CreateTableCommentOp
AlterTableOp <|-- DropTableCommentOp
AlterTableOp <|-- AlterColumnOp
AlterTableOp <|-- AddColumnOp
AlterTableOp <|-- DropColumnOp
MigrateOperation <|-- BulkInsertOp
MigrateOperation <|-- ExecuteSQLOp
MigrateOperation <|-- OpContainer
OpContainer <|-- ModifyTableOps
OpContainer <|-- UpgradeOps
OpContainer <|-- DowngradeOps
MigrateOperation <|-- MigrationScript
util.ModuleClsProxy <|-- AbstractOperations
AbstractOperations <|-- Operations
AbstractOperations <|-- BatchOperations
Protocol <|-- _CollectRevisionsProtocol
Exception <|-- RevisionError
RevisionError <|-- RangeNotAncestorError
RevisionError <|-- MultipleHeads
RevisionError <|-- ResolutionError
RevisionError <|-- CycleDetected
CycleDetected <|-- DependencyCycleDetected
CycleDetected <|-- LoopDetected
DependencyCycleDetected <|-- DependencyLoopDetected
LoopDetected <|-- DependencyLoopDetected
revision.Revision <|-- Script
Requirements <|-- SuiteRequirements
SQLAlchemyTestBase <|-- TestBase
TestBase <|-- TablesTest
SQLAlchemyTablesTest <|-- TablesTest
MigrationContext <|-- ctx
AutogenFixtureTest <|-- AutogenerateForeignKeysTest
TestBase <|-- AutogenerateForeignKeysTest
AutogenFixtureTest <|-- IncludeHooksTest
TestBase <|-- IncludeHooksTest
AutogenFixtureTest <|-- AutogenerateFKOptionsTest
TestBase <|-- AutogenerateFKOptionsTest
_ComparesFKs <|-- AutogenTest
_ComparesFKs <|-- AutogenFixtureTest
AutogenFixtureTest <|-- AutogenerateComputedTest
TestBase <|-- AutogenerateComputedTest
AutogenFixtureTest <|-- AlterColumnTest
TestBase <|-- AlterColumnTest
AutogenFixtureTest <|-- AutoincrementTest
TestBase <|-- AutoincrementTest
AutogenFixtureTest <|-- AutogenerateIdentityTest
TestBase <|-- AutogenerateIdentityTest
AutogenFixtureTest <|-- AutogenerateCommentsTest
TestBase <|-- AutogenerateCommentsTest
AlterColRoundTripFixture <|-- BackendAlterColumnTest
TestBase <|-- BackendAlterColumnTest
TestBase <|-- MigrationTransactionTest
Exception <|-- InvalidVariantHeader
ValueError <|-- SettingsError
ABC <|-- PydanticBaseSettingsSource
PydanticBaseSettingsSource <|-- InitSettingsSource
PydanticBaseSettingsSource <|-- PydanticBaseEnvSettingsSource
PydanticBaseEnvSettingsSource <|-- SecretsSettingsSource
PydanticBaseEnvSettingsSource <|-- EnvSettingsSource
EnvSettingsSource <|-- DotEnvSettingsSource
ConfigDict <|-- SettingsConfigDict
BaseModel <|-- BaseSettings
Signal <|-- NamedSignal
t.Protocol <|-- _PNamespaceSignal
_cursor <|-- DictCursorBase
_connection <|-- DictConnection
DictCursorBase <|-- DictCursor
list <|-- DictRow
_connection <|-- RealDictConnection
DictCursorBase <|-- RealDictCursor
OrderedDict <|-- RealDictRow
_connection <|-- NamedTupleConnection
_cursor <|-- NamedTupleCursor
_connection <|-- LoggingConnection
_cursor <|-- LoggingCursor
LoggingConnection <|-- MinTimeLoggingConnection
LoggingCursor <|-- MinTimeLoggingCursor
_replicationConnection <|-- LogicalReplicationConnection
_replicationConnection <|-- PhysicalReplicationConnection
Exception <|-- StopReplication
_replicationCursor <|-- ReplicationCursor
datetime.tzinfo <|-- FixedOffsetTimezone
datetime.tzinfo <|-- LocalTimezone
Range <|-- NumericRange
Range <|-- DateRange
Range <|-- DateTimeRange
Range <|-- DateTimeTZRange
RangeAdapter <|-- NumberRangeAdapter
Composable <|-- Composed
Composable <|-- SQL
Composable <|-- Identifier
Composable <|-- Literal
Composable <|-- Placeholder
psycopg2.Error <|-- PoolError
AbstractConnectionPool <|-- SimpleConnectionPool
AbstractConnectionPool <|-- ThreadedConnectionPool
Signer <|-- TimestampSigner
URLSafeSerializerMixin <|-- URLSafeSerializer
URLSafeSerializerMixin <|-- URLSafeTimedSerializer
Exception <|-- BadData
BadData <|-- BadSignature
BadSignature <|-- BadTimeSignature
BadTimeSignature <|-- SignatureExpired
BadSignature <|-- BadHeader
BadData <|-- BadPayload
SigningAlgorithm <|-- NoneAlgorithm
SigningAlgorithm <|-- HMACAlgorithm
Protocol <|-- _OnlyValueValidatorClsMethod
Protocol <|-- _V2ValidatorClsMethod
Protocol <|-- _V2WrapValidatorClsMethod
_core_schema.ValidatorFunctionWrapHandler <|-- ModelWrapValidatorHandler
Protocol <|-- ModelBeforeValidatorWithoutInfo
Protocol <|-- ModelBeforeValidator
_repr.Representation <|-- Color
TypedDict <|-- ConfigDict
typing_extensions.TypedDict <|-- _FromFieldInfoInputs
_FromFieldInfoInputs <|-- _FieldInfoInputs
_repr.Representation <|-- FieldInfo
typing_extensions.TypedDict <|-- _EmptyKwargs
_repr.Representation <|-- ModelPrivateAttr
DeprecationWarning <|-- PydanticDeprecationWarning
PydanticDeprecationWarning <|-- PydanticDeprecatedSince20
Warning <|-- GenericBeforeBaseModelWarning
Plugin <|-- PydanticPlugin
_fields.PydanticMetadata <|-- Strict
BaseMetadata <|-- Strict
_fields.PydanticMetadata <|-- AllowInfNan
annotated_types.GroupedMetadata <|-- StringConstraints
str <|-- PaymentCardBrand
Enum <|-- PaymentCardBrand
str <|-- PaymentCardNumber
int <|-- ByteSize
Protocol <|-- EncoderProtocol
EncoderProtocol <|-- Base64Encoder
EncoderProtocol <|-- Base64UrlEncoder
EncodedBytes <|-- EncodedStr
UserWarning <|-- PydanticJsonSchemaWarning
_fields.PydanticMetadata <|-- UrlConstraints
_repr.Representation <|-- NameEmail
BaseModel <|-- RootModel
PydanticErrorMixin <|-- PydanticUserError
TypeError <|-- PydanticUserError
PydanticErrorMixin <|-- PydanticUndefinedAnnotation
NameError <|-- PydanticUndefinedAnnotation
PydanticErrorMixin <|-- PydanticImportError
ImportError <|-- PydanticImportError
PydanticUserError <|-- PydanticSchemaGenerationError
PydanticUserError <|-- PydanticInvalidForJsonSchema
Representation <|-- Color
Protocol <|-- SchemaExtraCallable
str <|-- Extra
Enum <|-- Extra
TypedDict <|-- ConfigDict
BaseConfig <|-- Config
Representation <|-- FieldInfo
Representation <|-- ModelField
Representation <|-- ModelPrivateAttr
TypedDict <|-- _ErrorDictRequired
_ErrorDictRequired <|-- ErrorDict
Representation <|-- ErrorWrapper
Representation <|-- ValidationError
ValueError <|-- ValidationError
BaseModel <|-- DecoratorBaseModel
CustomConfig <|-- Config
ValueError <|-- SettingsError
BaseModel <|-- BaseSettings
BaseConfig <|-- Config
Plugin <|-- PydanticPlugin
type <|-- ConstrainedNumberMeta
int <|-- StrictBool
int <|-- ConstrainedInt
ConstrainedInt <|-- PositiveInt
ConstrainedInt <|-- NegativeInt
ConstrainedInt <|-- NonPositiveInt
ConstrainedInt <|-- NonNegativeInt
ConstrainedInt <|-- StrictInt
float <|-- ConstrainedFloat
ConstrainedFloat <|-- PositiveFloat
ConstrainedFloat <|-- NegativeFloat
ConstrainedFloat <|-- NonPositiveFloat
ConstrainedFloat <|-- NonNegativeFloat
ConstrainedFloat <|-- StrictFloat
ConstrainedFloat <|-- FiniteFloat
bytes <|-- ConstrainedBytes
ConstrainedBytes <|-- StrictBytes
str <|-- ConstrainedStr
ConstrainedStr <|-- StrictStr
set <|-- ConstrainedSet
frozenset <|-- ConstrainedFrozenSet
list <|-- ConstrainedList
Decimal <|-- ConstrainedDecimal
UUID <|-- UUID1
UUID1 <|-- UUID3
UUID1 <|-- UUID4
UUID1 <|-- UUID5
Path <|-- FilePath
Path <|-- DirectoryPath
type <|-- JsonMeta
abc.ABC <|-- SecretField
SecretField <|-- SecretStr
SecretField <|-- SecretBytes
str <|-- PaymentCardBrand
Enum <|-- PaymentCardBrand
str <|-- PaymentCardNumber
int <|-- ByteSize
date <|-- PastDate
date <|-- FutureDate
date <|-- ConstrainedDate
TypedDict <|-- Parts
TypedDict <|-- HostParts
dict <|-- Parts
str <|-- AnyUrl
AnyUrl <|-- AnyHttpUrl
AnyHttpUrl <|-- HttpUrl
AnyUrl <|-- FileUrl
AnyUrl <|-- MultiHostDsn
MultiHostDsn <|-- PostgresDsn
AnyUrl <|-- CockroachDsn
AnyUrl <|-- AmqpDsn
AnyUrl <|-- RedisDsn
AnyUrl <|-- MongoDsn
AnyUrl <|-- KafkaDsn
str <|-- EmailStr
Representation <|-- NameEmail
_BaseAddress <|-- IPvAnyAddress
_BaseAddress <|-- IPvAnyInterface
_BaseNetwork <|-- IPvAnyNetwork
str <|-- PyObjectStr
Representation <|-- GetterDict
Representation <|-- ValueItems
PydanticErrorMixin <|-- PydanticTypeError
TypeError <|-- PydanticTypeError
PydanticErrorMixin <|-- PydanticValueError
ValueError <|-- PydanticValueError
RuntimeError <|-- ConfigError
PydanticValueError <|-- MissingError
PydanticValueError <|-- ExtraError
PydanticTypeError <|-- NoneIsNotAllowedError
PydanticTypeError <|-- NoneIsAllowedError
PydanticValueError <|-- WrongConstantError
PydanticTypeError <|-- NotNoneError
PydanticTypeError <|-- BoolError
PydanticTypeError <|-- BytesError
PydanticTypeError <|-- DictError
PydanticValueError <|-- EmailError
PydanticValueError <|-- UrlError
UrlError <|-- UrlSchemeError
UrlError <|-- UrlSchemePermittedError
UrlError <|-- UrlUserInfoError
UrlError <|-- UrlHostError
UrlError <|-- UrlHostTldError
UrlError <|-- UrlPortError
UrlError <|-- UrlExtraError
PydanticTypeError <|-- EnumMemberError
PydanticTypeError <|-- IntegerError
PydanticTypeError <|-- FloatError
PydanticTypeError <|-- PathError
PydanticValueError <|-- _PathValueError
_PathValueError <|-- PathNotExistsError
_PathValueError <|-- PathNotAFileError
_PathValueError <|-- PathNotADirectoryError
PydanticTypeError <|-- PyObjectError
PydanticTypeError <|-- SequenceError
PydanticTypeError <|-- IterableError
PydanticTypeError <|-- ListError
PydanticTypeError <|-- SetError
PydanticTypeError <|-- FrozenSetError
PydanticTypeError <|-- DequeError
PydanticTypeError <|-- TupleError
PydanticValueError <|-- TupleLengthError
PydanticValueError <|-- ListMinLengthError
PydanticValueError <|-- ListMaxLengthError
PydanticValueError <|-- ListUniqueItemsError
PydanticValueError <|-- SetMinLengthError
PydanticValueError <|-- SetMaxLengthError
PydanticValueError <|-- FrozenSetMinLengthError
PydanticValueError <|-- FrozenSetMaxLengthError
PydanticValueError <|-- AnyStrMinLengthError
PydanticValueError <|-- AnyStrMaxLengthError
PydanticTypeError <|-- StrError
PydanticValueError <|-- StrRegexError
PydanticValueError <|-- _NumberBoundError
_NumberBoundError <|-- NumberNotGtError
_NumberBoundError <|-- NumberNotGeError
_NumberBoundError <|-- NumberNotLtError
_NumberBoundError <|-- NumberNotLeError
PydanticValueError <|-- NumberNotFiniteError
PydanticValueError <|-- NumberNotMultipleError
PydanticTypeError <|-- DecimalError
PydanticValueError <|-- DecimalIsNotFiniteError
PydanticValueError <|-- DecimalMaxDigitsError
PydanticValueError <|-- DecimalMaxPlacesError
PydanticValueError <|-- DecimalWholeDigitsError
PydanticValueError <|-- DateTimeError
PydanticValueError <|-- DateError
PydanticValueError <|-- DateNotInThePastError
PydanticValueError <|-- DateNotInTheFutureError
PydanticValueError <|-- TimeError
PydanticValueError <|-- DurationError
PydanticTypeError <|-- HashableError
PydanticTypeError <|-- UUIDError
PydanticValueError <|-- UUIDVersionError
PydanticTypeError <|-- ArbitraryTypeError
PydanticTypeError <|-- ClassError
PydanticTypeError <|-- SubclassError
PydanticValueError <|-- JsonError
PydanticTypeError <|-- JsonTypeError
PydanticValueError <|-- PatternError
PydanticTypeError <|-- DataclassTypeError
PydanticTypeError <|-- CallableError
PydanticTypeError <|-- EnumError
PydanticTypeError <|-- IntEnumError
PydanticValueError <|-- IPvAnyAddressError
PydanticValueError <|-- IPvAnyInterfaceError
PydanticValueError <|-- IPvAnyNetworkError
PydanticValueError <|-- IPv4AddressError
PydanticValueError <|-- IPv6AddressError
PydanticValueError <|-- IPv4NetworkError
PydanticValueError <|-- IPv6NetworkError
PydanticValueError <|-- IPv4InterfaceError
PydanticValueError <|-- IPv6InterfaceError
PydanticValueError <|-- ColorError
PydanticValueError <|-- StrictBoolError
PydanticValueError <|-- NotDigitError
PydanticValueError <|-- LuhnValidationError
PydanticValueError <|-- InvalidLengthForBrand
PydanticValueError <|-- InvalidByteSize
PydanticValueError <|-- InvalidByteSizeUnit
PydanticValueError <|-- MissingDiscriminator
PydanticValueError <|-- InvalidDiscriminator
str <|-- Protocol
Enum <|-- Protocol
ABCMeta <|-- ModelMetaclass
Representation <|-- BaseModel
BaseModel <|-- GenericModel
Exception <|-- SkipField
GetJsonSchemaHandler <|-- GenerateJsonSchemaHandler
GetCoreSchemaHandler <|-- CallbackGetCoreSchemaHandler
Protocol <|-- V1OnlyValueValidator
Protocol <|-- V1ValidatorWithValues
Protocol <|-- V1ValidatorWithValuesKwOnly
Protocol <|-- V1ValidatorWithKwargs
Protocol <|-- V1ValidatorWithValuesAndKwargs
Protocol <|-- V1RootValidatorFunction
Protocol <|-- V2CoreBeforeRootValidator
Protocol <|-- V2CoreAfterRootValidator
str <|-- PlainRepr
dict <|-- _ModelNamespaceDict
ABCMeta <|-- ModelMetaclass
Exception <|-- CollectedInvalid
TypedDict <|-- _CommonField
Exception <|-- MissingDefinitionForUnionRef
typing_extensions.TypedDict <|-- CoreMetadata
Representation <|-- PydanticMetadata
PydanticMetadata <|-- _PydanticGeneralMetadata
BaseMetadata <|-- _PydanticGeneralMetadata
dict <|-- LimitedDict
dict <|-- LimitedDict
ChainMap <|-- DeepChainMap
typing_extensions.TypedDict <|-- PydanticGenericMetadata
typing.Protocol <|-- StandardDataclass
StandardDataclass <|-- PydanticDataclass
typing.Protocol <|-- PydanticDataclass
_repr.Representation <|-- ValueItems
NamedTuple <|-- SchemaTypePath
Protocol <|-- PydanticPluginProtocol
Protocol <|-- BaseValidateHandlerProtocol
BaseValidateHandlerProtocol <|-- ValidatePythonHandlerProtocol
Protocol <|-- ValidatePythonHandlerProtocol
BaseValidateHandlerProtocol <|-- ValidateJsonHandlerProtocol
Protocol <|-- ValidateJsonHandlerProtocol
BaseValidateHandlerProtocol <|-- ValidateStringsHandlerProtocol
Protocol <|-- ValidateStringsHandlerProtocol
type <|-- _ConfigMetaclass
type <|-- _ExtraMeta
BaseModel <|-- DecoratorBaseModel
Protocol <|-- _OnlyValueValidatorClsMethod
Protocol <|-- _V1ValidatorWithValuesClsMethod
Protocol <|-- _V1ValidatorWithValuesKwOnlyClsMethod
Protocol <|-- _V1ValidatorWithKwargsClsMethod
Protocol <|-- _V1ValidatorWithValuesAndKwargsClsMethod
Protocol <|-- _V1RootValidatorClsMethod
str <|-- Protocol
Enum <|-- Protocol
NamedTuple <|-- _ParsedLine
Exception <|-- ParseError
ValueError <|-- InvalidInput
ast.NodeVisitor <|-- CellMagicFinder
ast.NodeVisitor <|-- MagicFinder
NamedTuple <|-- FileData
Enum <|-- WriteBack
Exception <|-- BracketMatchError
Enum <|-- TargetVersion
Enum <|-- Feature
Enum <|-- Preview
UserWarning <|-- Deprecated
Exception <|-- CannotTransform
ABC <|-- StringTransformer
StringTransformer <|-- StringMerger
CustomSplitMapMixin <|-- StringMerger
StringTransformer <|-- StringParenStripper
StringTransformer <|-- BaseStringSplitter
BaseStringSplitter <|-- StringSplitter
CustomSplitMapMixin <|-- StringSplitter
BaseStringSplitter <|-- StringParenWrapper
CustomSplitMapMixin <|-- StringParenWrapper
CannotTransform <|-- CannotSplit
Enum <|-- _BracketSplitComponent
Enum <|-- Changed
UserWarning <|-- NothingChanged
_TypedDict <|-- ErrorDetails
_TypedDict <|-- InitErrorDetails
_TypedDict <|-- ErrorTypeInfo
_TypedDict <|-- MultiHostHost
TypedDict <|-- CoreConfig
Protocol <|-- SerializationInfo
SerializationInfo <|-- FieldSerializationInfo
Protocol <|-- FieldSerializationInfo
Protocol <|-- ValidationInfo
TypedDict <|-- SimpleSerSchema
TypedDict <|-- PlainSerializerFunctionSerSchema
Protocol <|-- SerializerFunctionWrapHandler
TypedDict <|-- WrapSerializerFunctionSerSchema
TypedDict <|-- FormatSerSchema
TypedDict <|-- ToStringSerSchema
TypedDict <|-- ModelSerSchema
TypedDict <|-- ComputedField
TypedDict <|-- AnySchema
TypedDict <|-- NoneSchema
TypedDict <|-- BoolSchema
TypedDict <|-- IntSchema
TypedDict <|-- FloatSchema
TypedDict <|-- DecimalSchema
TypedDict <|-- StringSchema
TypedDict <|-- BytesSchema
TypedDict <|-- DateSchema
TypedDict <|-- TimeSchema
TypedDict <|-- DatetimeSchema
TypedDict <|-- TimedeltaSchema
TypedDict <|-- LiteralSchema
TypedDict <|-- IsInstanceSchema
TypedDict <|-- IsSubclassSchema
TypedDict <|-- CallableSchema
TypedDict <|-- UuidSchema
TypedDict <|-- IncExSeqSerSchema
TypedDict <|-- ListSchema
TypedDict <|-- TuplePositionalSchema
TypedDict <|-- TupleVariableSchema
TypedDict <|-- SetSchema
TypedDict <|-- FrozenSetSchema
TypedDict <|-- GeneratorSchema
TypedDict <|-- IncExDictSerSchema
TypedDict <|-- DictSchema
TypedDict <|-- NoInfoValidatorFunctionSchema
TypedDict <|-- WithInfoValidatorFunctionSchema
TypedDict <|-- _ValidatorFunctionSchema
_ValidatorFunctionSchema <|-- BeforeValidatorFunctionSchema
_ValidatorFunctionSchema <|-- AfterValidatorFunctionSchema
Protocol <|-- ValidatorFunctionWrapHandler
TypedDict <|-- NoInfoWrapValidatorFunctionSchema
TypedDict <|-- WithInfoWrapValidatorFunctionSchema
TypedDict <|-- WrapValidatorFunctionSchema
TypedDict <|-- PlainValidatorFunctionSchema
TypedDict <|-- WithDefaultSchema
TypedDict <|-- NullableSchema
TypedDict <|-- UnionSchema
TypedDict <|-- TaggedUnionSchema
TypedDict <|-- ChainSchema
TypedDict <|-- LaxOrStrictSchema
TypedDict <|-- JsonOrPythonSchema
TypedDict <|-- TypedDictField
TypedDict <|-- TypedDictSchema
TypedDict <|-- ModelField
TypedDict <|-- ModelFieldsSchema
TypedDict <|-- ModelSchema
TypedDict <|-- DataclassField
TypedDict <|-- DataclassArgsSchema
TypedDict <|-- DataclassSchema
TypedDict <|-- ArgumentsParameter
TypedDict <|-- ArgumentsSchema
TypedDict <|-- CallSchema
TypedDict <|-- CustomErrorSchema
TypedDict <|-- JsonSchema
TypedDict <|-- UrlSchema
TypedDict <|-- MultiHostUrlSchema
TypedDict <|-- DefinitionsSchema
TypedDict <|-- DefinitionReferenceSchema
logging.Formatter <|-- DatetimeFormatter
DatetimeFormatter <|-- ColoredLevelFormatter
logging.PercentStyle <|-- PercentStyleMultiline
logging_StreamHandler <|-- LogCaptureHandler
logging.FileHandler <|-- _FileHandler
logging_StreamHandler <|-- _LiveLoggingStreamHandler
logging.NullHandler <|-- _LiveLoggingNullHandler
Class <|-- UnitTestCase
Function <|-- TestCaseFunction
Action <|-- HelpAction
enum.Enum <|-- NotSetType
argparse.Action <|-- MoreQuietAction
NamedTuple <|-- TestShortLogReport
warnings.catch_warnings <|-- WarningsRecorder
WarningsRecorder <|-- WarningsChecker
pdb_cls <|-- PytestPdbWrapper
ApproxBase <|-- ApproxNumpy
ApproxBase <|-- ApproxMapping
ApproxBase <|-- ApproxSequenceLike
ApproxBase <|-- ApproxScalar
ApproxScalar <|-- ApproxDecimal
io.TextIOWrapper <|-- EncodedFile
io.TextIOWrapper <|-- CaptureIO
CaptureIO <|-- TeeCaptureIO
TextIO <|-- DontReadFromInput
abc.ABC <|-- CaptureBase
NamedTuple <|-- CaptureResult
Exception <|-- TimeoutExpired
BaseException <|-- OutcomeException
OutcomeException <|-- Skipped
OutcomeException <|-- Failed
Exception <|-- Exit
Failed <|-- XFailed
nodes.Node <|-- PyobjMixin
PyobjMixin <|-- PyCollector
nodes.Collector <|-- PyCollector
nodes.File <|-- Module
PyCollector <|-- Module
Module <|-- Package
PyCollector <|-- Class
PyobjMixin <|-- Function
nodes.Item <|-- Function
Function <|-- FunctionDefinition
BaseReport <|-- TestReport
BaseReport <|-- CollectReport
TerminalRepr <|-- CollectErrorRepr
TerminalRepr <|-- ReprFailDoctest
Exception <|-- MultipleDoctestFailures
doctest.DebugRunner <|-- PytestDoctestRunner
Item <|-- DoctestItem
Module <|-- DoctestTextfile
Module <|-- DoctestModule
doctest.DocTestFinder <|-- MockAwareDocTestFinder
doctest.OutputChecker <|-- LiteralsOutputChecker
type <|-- NodeMeta
Node <|-- Collector
Exception <|-- CollectError
Collector <|-- FSCollector
FSCollector <|-- File
Node <|-- Item
KeyboardInterrupt <|-- Interrupted
Exception <|-- Failed
nodes.FSCollector <|-- Session
Enum <|-- ImportMode
ImportError <|-- ImportPathMismatchError
Enum <|-- Scope
FixtureRequest <|-- SubRequest
LookupError <|-- FixtureLookupError
TerminalRepr <|-- FixtureLookupErrorRepr
UserWarning <|-- PytestWarning
PytestWarning <|-- PytestAssertRewriteWarning
PytestWarning <|-- PytestCacheWarning
PytestWarning <|-- PytestConfigWarning
PytestWarning <|-- PytestCollectionWarning
PytestWarning <|-- PytestDeprecationWarning
DeprecationWarning <|-- PytestDeprecationWarning
PytestDeprecationWarning <|-- PytestRemovedIn8Warning
PytestRemovedIn8Warning <|-- PytestReturnNotNoneWarning
PytestWarning <|-- PytestExperimentalApiWarning
FutureWarning <|-- PytestExperimentalApiWarning
PytestReturnNotNoneWarning <|-- PytestUnhandledCoroutineWarning
PytestWarning <|-- PytestUnknownMarkWarning
PytestWarning <|-- PytestUnraisableExceptionWarning
PytestWarning <|-- PytestUnhandledThreadExceptionWarning
enum.IntEnum <|-- ExitCode
Exception <|-- ConftestImportFailure
PluginManager <|-- PytestPluginManager
enum.Enum <|-- ArgsSource
Exception <|-- UsageError
Exception <|-- PrintHelp
Exception <|-- ArgumentError
argparse.ArgumentParser <|-- MyOptionParser
argparse.HelpFormatter <|-- DropShorterLongHelpFormatter
NamedTuple <|-- ParameterSet
MarkDecorator <|-- _SkipMarkDecorator
MarkDecorator <|-- _SkipifMarkDecorator
MarkDecorator <|-- _XfailMarkDecorator
MarkDecorator <|-- _ParametrizeMarkDecorator
MarkDecorator <|-- _UsefixturesMarkDecorator
MarkDecorator <|-- _FilterwarningsMarkDecorator
enum.Enum <|-- TokenType
Exception <|-- ParseError
TerminalRepr <|-- ExceptionRepr
ExceptionRepr <|-- ExceptionChainRepr
ExceptionRepr <|-- ReprExceptionInfo
TerminalRepr <|-- ReprTraceback
ReprTraceback <|-- ReprTracebackNative
TerminalRepr <|-- ReprEntryNative
TerminalRepr <|-- ReprEntry
TerminalRepr <|-- ReprFileLocation
TerminalRepr <|-- ReprLocals
TerminalRepr <|-- ReprFuncArgs
importlib.abc.MetaPathFinder <|-- AssertionRewritingHook
importlib.abc.Loader <|-- AssertionRewritingHook
ast.NodeVisitor <|-- AssertionRewriter
reprlib.Repr <|-- SafeRepr
pprint.PrettyPrinter <|-- AlwaysDispatchingPrettyPrinter
EnvironmentError <|-- Error
Exception <|-- NeverRaised
ImportError <|-- ImportMismatchError
PlatformDirsABC <|-- MacOS
PlatformDirsABC <|-- Unix
ABC <|-- PlatformDirsABC
PlatformDirsABC <|-- Android
PlatformDirsABC <|-- Windows
ClassicAdapter <|-- SphinxAdapter
wrapt.AdapterFactory <|-- ClassicAdapter
BaseSettings <|-- Settings
BaseModel <|-- User
enum.Enum <|-- GameMode
BaseModel <|-- DailyWord
BaseModel <|-- WordList
BaseModel <|-- GameSession
BaseModel <|-- UserStats
db.Model <|-- BaseModel
TimestampMixin <|-- BaseModel
BaseModel <|-- RegisterRequest
BaseModel <|-- LoginRequest

@enduml